
07.ELEVATOR.REV.C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008734  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba8  08008ba8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba8  08008ba8  00018ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb0  08008bb0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb0  08008bb0  00018bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bb4  08008bb4  00018bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008a4  20000090  08008c48  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000934  08008c48  00020934  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001683b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003694  00000000  00000000  000368fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00039f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003b358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b0e  00000000  00000000  0003c5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019086  00000000  00000000  000560ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988e2  00000000  00000000  0006f154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107a36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bbc  00000000  00000000  00107a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080088bc 	.word	0x080088bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	080088bc 	.word	0x080088bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a4e      	ldr	r2, [pc, #312]	; (80006c8 <HAL_UART_RxCpltCallback+0x144>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d148      	bne.n	8000626 <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 8000594:	f000 f8ba 	bl	800070c <is_full>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d13e      	bne.n	800061c <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 800059e:	4b4b      	ldr	r3, [pc, #300]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b0a      	cmp	r3, #10
 80005a8:	d002      	beq.n	80005b0 <HAL_UART_RxCpltCallback+0x2c>
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	2b0d      	cmp	r3, #13
 80005ae:	d123      	bne.n	80005f8 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 80005b0:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b47      	ldr	r3, [pc, #284]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	4847      	ldr	r0, [pc, #284]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4403      	add	r3, r0
 80005c4:	440b      	add	r3, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 80005d0:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a3e      	ldr	r2, [pc, #248]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005d8:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 80005da:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <HAL_UART_RxCpltCallback+0x158>)
 80005e0:	fb83 1302 	smull	r1, r3, r3, r2
 80005e4:	1119      	asrs	r1, r3, #4
 80005e6:	17d3      	asrs	r3, r2, #31
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	2132      	movs	r1, #50	; 0x32
 80005ec:	fb01 f303 	mul.w	r3, r1, r3
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a37      	ldr	r2, [pc, #220]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e011      	b.n	800061c <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	4835      	ldr	r0, [pc, #212]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 8000602:	4613      	mov	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4403      	add	r3, r0
 800060c:	440b      	add	r3, r1
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a2e      	ldr	r2, [pc, #184]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 800061a:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	492b      	ldr	r1, [pc, #172]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <HAL_UART_RxCpltCallback+0x144>)
 8000622:	f005 fee8 	bl	80063f6 <HAL_UART_Receive_IT>
	}
///////////////////////////////////////////////////////////////////////////
	if (huart == &huart1)   // BT
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <HAL_UART_RxCpltCallback+0x15c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d148      	bne.n	80006c0 <HAL_UART_RxCpltCallback+0x13c>
	{
		if(is_full())
 800062e:	f000 f86d 	bl	800070c <is_full>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d13e      	bne.n	80006b6 <HAL_UART_RxCpltCallback+0x132>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	73bb      	strb	r3, [r7, #14]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d002      	beq.n	800064a <HAL_UART_RxCpltCallback+0xc6>
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	2b0d      	cmp	r3, #13
 8000648:	d123      	bne.n	8000692 <HAL_UART_RxCpltCallback+0x10e>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000650:	6819      	ldr	r1, [r3, #0]
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 8000654:	4613      	mov	r3, r2
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4403      	add	r3, r0
 800065e:	440b      	add	r3, r1
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 8000672:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_UART_RxCpltCallback+0x158>)
 800067a:	fb83 1302 	smull	r1, r3, r3, r2
 800067e:	1119      	asrs	r1, r3, #4
 8000680:	17d3      	asrs	r3, r2, #31
 8000682:	1acb      	subs	r3, r1, r3
 8000684:	2132      	movs	r1, #50	; 0x32
 8000686:	fb01 f303 	mul.w	r3, r1, r3
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	e011      	b.n	80006b6 <HAL_UART_RxCpltCallback+0x132>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000698:	6819      	ldr	r1, [r3, #0]
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 800069c:	4613      	mov	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4403      	add	r3, r0
 80006a6:	440b      	add	r3, r1
 80006a8:	7bba      	ldrb	r2, [r7, #14]
 80006aa:	701a      	strb	r2, [r3, #0]
				rx_index++;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80006b4:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	4904      	ldr	r1, [pc, #16]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <HAL_UART_RxCpltCallback+0x15c>)
 80006bc:	f005 fe9b 	bl	80063f6 <HAL_UART_Receive_IT>
	}
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2000089c 	.word	0x2000089c
 80006cc:	20000690 	.word	0x20000690
 80006d0:	200000ac 	.word	0x200000ac
 80006d4:	20000694 	.word	0x20000694
 80006d8:	200000b4 	.word	0x200000b4
 80006dc:	51eb851f 	.word	0x51eb851f
 80006e0:	20000858 	.word	0x20000858

080006e4 <is_empty>:

int is_empty()		// 큐의 공백 상태를 알려주는 함수
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	if (input_pointer == output_pointer)
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <is_empty+0x20>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <is_empty+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d101      	bne.n	80006f8 <is_empty+0x14>
		return 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e000      	b.n	80006fa <is_empty+0x16>
	else
		return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	200000ac 	.word	0x200000ac
 8000708:	200000b0 	.word	0x200000b0

0800070c <is_full>:

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <is_full+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <is_full+0x44>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1111      	asrs	r1, r2, #4
 8000720:	17da      	asrs	r2, r3, #31
 8000722:	1a8a      	subs	r2, r1, r2
 8000724:	2132      	movs	r1, #50	; 0x32
 8000726:	fb01 f202 	mul.w	r2, r1, r2
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <is_full+0x48>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	429a      	cmp	r2, r3
 8000736:	d101      	bne.n	800073c <is_full+0x30>
		return 1;
 8000738:	2301      	movs	r3, #1
 800073a:	e000      	b.n	800073e <is_full+0x32>
	else
		return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200000ac 	.word	0x200000ac
 8000750:	51eb851f 	.word	0x51eb851f
 8000754:	200000b0 	.word	0x200000b0

08000758 <pc_command_processing>:


int printon = 1;

void pc_command_processing()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	if (is_empty())
 800075e:	f7ff ffc1 	bl	80006e4 <is_empty>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8146 	bne.w	80009f6 <pc_command_processing+0x29e>
	{
		// printf("Queue is Empty");
	}
	else
	{
		if(printon)
 800076a:	4ba5      	ldr	r3, [pc, #660]	; (8000a00 <pc_command_processing+0x2a8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d010      	beq.n	8000794 <pc_command_processing+0x3c>
		{
			printf("output_pointer = %d\n", output_pointer);
 8000772:	4ba4      	ldr	r3, [pc, #656]	; (8000a04 <pc_command_processing+0x2ac>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	48a3      	ldr	r0, [pc, #652]	; (8000a08 <pc_command_processing+0x2b0>)
 800077a:	f006 fe0b 	bl	8007394 <iprintf>
			printf("%s\n", rx_buff[output_pointer]);
 800077e:	4ba1      	ldr	r3, [pc, #644]	; (8000a04 <pc_command_processing+0x2ac>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4613      	mov	r3, r2
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4aa0      	ldr	r2, [pc, #640]	; (8000a0c <pc_command_processing+0x2b4>)
 800078c:	4413      	add	r3, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fe86 	bl	80074a0 <puts>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printon", strlen("printon")-1) == 0)
 8000794:	4b9b      	ldr	r3, [pc, #620]	; (8000a04 <pc_command_processing+0x2ac>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4a9a      	ldr	r2, [pc, #616]	; (8000a0c <pc_command_processing+0x2b4>)
 80007a2:	4413      	add	r3, r2
 80007a4:	2206      	movs	r2, #6
 80007a6:	499a      	ldr	r1, [pc, #616]	; (8000a10 <pc_command_processing+0x2b8>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 fea1 	bl	80074f0 <strncmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <pc_command_processing+0x6e>
		{
			printon = 1;
 80007b4:	4b92      	ldr	r3, [pc, #584]	; (8000a00 <pc_command_processing+0x2a8>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 80007ba:	4b91      	ldr	r3, [pc, #580]	; (8000a00 <pc_command_processing+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4894      	ldr	r0, [pc, #592]	; (8000a14 <pc_command_processing+0x2bc>)
 80007c2:	f006 fde7 	bl	8007394 <iprintf>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printoff", strlen("printoff")-1) == 0)
 80007c6:	4b8f      	ldr	r3, [pc, #572]	; (8000a04 <pc_command_processing+0x2ac>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4613      	mov	r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4a8e      	ldr	r2, [pc, #568]	; (8000a0c <pc_command_processing+0x2b4>)
 80007d4:	4413      	add	r3, r2
 80007d6:	2207      	movs	r2, #7
 80007d8:	498f      	ldr	r1, [pc, #572]	; (8000a18 <pc_command_processing+0x2c0>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 fe88 	bl	80074f0 <strncmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d108      	bne.n	80007f8 <pc_command_processing+0xa0>
		{
			printon = 0;
 80007e6:	4b86      	ldr	r3, [pc, #536]	; (8000a00 <pc_command_processing+0x2a8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 80007ec:	4b84      	ldr	r3, [pc, #528]	; (8000a00 <pc_command_processing+0x2a8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4888      	ldr	r0, [pc, #544]	; (8000a14 <pc_command_processing+0x2bc>)
 80007f4:	f006 fdce 	bl	8007394 <iprintf>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11time", strlen("dht11time")-1) == 0)
 80007f8:	4b82      	ldr	r3, [pc, #520]	; (8000a04 <pc_command_processing+0x2ac>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4a81      	ldr	r2, [pc, #516]	; (8000a0c <pc_command_processing+0x2b4>)
 8000806:	4413      	add	r3, r2
 8000808:	2208      	movs	r2, #8
 800080a:	4984      	ldr	r1, [pc, #528]	; (8000a1c <pc_command_processing+0x2c4>)
 800080c:	4618      	mov	r0, r3
 800080e:	f006 fe6f 	bl	80074f0 <strncmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d144      	bne.n	80008a2 <pc_command_processing+0x14a>
		{
			int time_value;

			if(digit_chk((char *)&rx_buff[output_pointer][9], 4))
 8000818:	4b7a      	ldr	r3, [pc, #488]	; (8000a04 <pc_command_processing+0x2ac>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4613      	mov	r3, r2
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	3309      	adds	r3, #9
 8000826:	4a79      	ldr	r2, [pc, #484]	; (8000a0c <pc_command_processing+0x2b4>)
 8000828:	4413      	add	r3, r2
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f91b 	bl	8000a68 <digit_chk>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d027      	beq.n	8000888 <pc_command_processing+0x130>
			{
 printf("@@@@%s\n", &rx_buff[output_pointer][9]);
 8000838:	4b72      	ldr	r3, [pc, #456]	; (8000a04 <pc_command_processing+0x2ac>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	3309      	adds	r3, #9
 8000846:	4a71      	ldr	r2, [pc, #452]	; (8000a0c <pc_command_processing+0x2b4>)
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	4874      	ldr	r0, [pc, #464]	; (8000a20 <pc_command_processing+0x2c8>)
 800084e:	f006 fda1 	bl	8007394 <iprintf>

			time_value = atoi((char *)&rx_buff[output_pointer][9]); // atoi (ascii to integer)
 8000852:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <pc_command_processing+0x2ac>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4613      	mov	r3, r2
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	3309      	adds	r3, #9
 8000860:	4a6a      	ldr	r2, [pc, #424]	; (8000a0c <pc_command_processing+0x2b4>)
 8000862:	4413      	add	r3, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f006 fd5f 	bl	8007328 <atoi>
 800086a:	6078      	str	r0, [r7, #4]

			dht11time = time_value / 10;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a6d      	ldr	r2, [pc, #436]	; (8000a24 <pc_command_processing+0x2cc>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1092      	asrs	r2, r2, #2
 8000876:	17db      	asrs	r3, r3, #31
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4a6b      	ldr	r2, [pc, #428]	; (8000a28 <pc_command_processing+0x2d0>)
 800087c:	6013      	str	r3, [r2, #0]
 printf("%dms\n", time_value);
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	486a      	ldr	r0, [pc, #424]	; (8000a2c <pc_command_processing+0x2d4>)
 8000882:	f006 fd87 	bl	8007394 <iprintf>
 8000886:	e00c      	b.n	80008a2 <pc_command_processing+0x14a>
			}
			else
			{
				printf("invald number: %s\n", &rx_buff[output_pointer][9]);
 8000888:	4b5e      	ldr	r3, [pc, #376]	; (8000a04 <pc_command_processing+0x2ac>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4613      	mov	r3, r2
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	3309      	adds	r3, #9
 8000896:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <pc_command_processing+0x2b4>)
 8000898:	4413      	add	r3, r2
 800089a:	4619      	mov	r1, r3
 800089c:	4864      	ldr	r0, [pc, #400]	; (8000a30 <pc_command_processing+0x2d8>)
 800089e:	f006 fd79 	bl	8007394 <iprintf>
			}
		}

		if(strncmp((const char *)rx_buff[output_pointer], "dht11on", strlen("dht11on")-1) == 0)
 80008a2:	4b58      	ldr	r3, [pc, #352]	; (8000a04 <pc_command_processing+0x2ac>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4613      	mov	r3, r2
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <pc_command_processing+0x2b4>)
 80008b0:	4413      	add	r3, r2
 80008b2:	2206      	movs	r2, #6
 80008b4:	495f      	ldr	r1, [pc, #380]	; (8000a34 <pc_command_processing+0x2dc>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fe1a 	bl	80074f0 <strncmp>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d105      	bne.n	80008ce <pc_command_processing+0x176>
		{
			dht11on = 1;
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <pc_command_processing+0x2e0>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
			printf("dht11_ON\n");
 80008c8:	485c      	ldr	r0, [pc, #368]	; (8000a3c <pc_command_processing+0x2e4>)
 80008ca:	f006 fde9 	bl	80074a0 <puts>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "dht11off", strlen("dht11off")-1) == 0)
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <pc_command_processing+0x2ac>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4a4c      	ldr	r2, [pc, #304]	; (8000a0c <pc_command_processing+0x2b4>)
 80008dc:	4413      	add	r3, r2
 80008de:	2207      	movs	r2, #7
 80008e0:	4957      	ldr	r1, [pc, #348]	; (8000a40 <pc_command_processing+0x2e8>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fe04 	bl	80074f0 <strncmp>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d105      	bne.n	80008fa <pc_command_processing+0x1a2>
		{
			dht11on = 0;
 80008ee:	4b52      	ldr	r3, [pc, #328]	; (8000a38 <pc_command_processing+0x2e0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
			printf("dht11_OFF\n");
 80008f4:	4853      	ldr	r0, [pc, #332]	; (8000a44 <pc_command_processing+0x2ec>)
 80008f6:	f006 fdd3 	bl	80074a0 <puts>
		}


		if(strncmp((const char *)rx_buff[output_pointer], "led_all_on", strlen("led_all_on")-1) == 0)
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <pc_command_processing+0x2ac>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4613      	mov	r3, r2
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	1a9b      	subs	r3, r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4a41      	ldr	r2, [pc, #260]	; (8000a0c <pc_command_processing+0x2b4>)
 8000908:	4413      	add	r3, r2
 800090a:	2209      	movs	r2, #9
 800090c:	494e      	ldr	r1, [pc, #312]	; (8000a48 <pc_command_processing+0x2f0>)
 800090e:	4618      	mov	r0, r3
 8000910:	f006 fdee 	bl	80074f0 <strncmp>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <pc_command_processing+0x1c6>
		{
			 led_all_on();
 800091a:	f000 fae1 	bl	8000ee0 <led_all_on>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "led_all_off", strlen("led_all_off")-1) == 0)
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <pc_command_processing+0x2ac>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4613      	mov	r3, r2
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4a38      	ldr	r2, [pc, #224]	; (8000a0c <pc_command_processing+0x2b4>)
 800092c:	4413      	add	r3, r2
 800092e:	220a      	movs	r2, #10
 8000930:	4946      	ldr	r1, [pc, #280]	; (8000a4c <pc_command_processing+0x2f4>)
 8000932:	4618      	mov	r0, r3
 8000934:	f006 fddc 	bl	80074f0 <strncmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <pc_command_processing+0x1ea>
		{
			led_all_off();
 800093e:	f000 fadb 	bl	8000ef8 <led_all_off>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11status", strlen("dht11status")-1) == 0)
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <pc_command_processing+0x2ac>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4613      	mov	r3, r2
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	1a9b      	subs	r3, r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <pc_command_processing+0x2b4>)
 8000950:	4413      	add	r3, r2
 8000952:	220a      	movs	r2, #10
 8000954:	493e      	ldr	r1, [pc, #248]	; (8000a50 <pc_command_processing+0x2f8>)
 8000956:	4618      	mov	r0, r3
 8000958:	f006 fdca 	bl	80074f0 <strncmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11e      	bne.n	80009a0 <pc_command_processing+0x248>
		{
			if(dht11on == 0)
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <pc_command_processing+0x2e0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10d      	bne.n	8000986 <pc_command_processing+0x22e>
			{
				printf("dht11 : off\n");
 800096a:	483a      	ldr	r0, [pc, #232]	; (8000a54 <pc_command_processing+0x2fc>)
 800096c:	f006 fd98 	bl	80074a0 <puts>
				printf("dht11time : %dms\n", dht11time*10);
 8000970:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <pc_command_processing+0x2d0>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <pc_command_processing+0x300>)
 8000980:	f006 fd08 	bl	8007394 <iprintf>
 8000984:	e00c      	b.n	80009a0 <pc_command_processing+0x248>
			}
			else
			{
				printf("dht11 : on\n");
 8000986:	4835      	ldr	r0, [pc, #212]	; (8000a5c <pc_command_processing+0x304>)
 8000988:	f006 fd8a 	bl	80074a0 <puts>
				printf("dht11time : %dms\n", dht11time*10);
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <pc_command_processing+0x2d0>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4619      	mov	r1, r3
 800099a:	482f      	ldr	r0, [pc, #188]	; (8000a58 <pc_command_processing+0x300>)
 800099c:	f006 fcfa 	bl	8007394 <iprintf>
			}
		}
		 // setrtc220830111500
	    if(strncmp((const char *)rx_buff[output_pointer], "setrtc", strlen("setrtc")-1) == 0)
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <pc_command_processing+0x2ac>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4613      	mov	r3, r2
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <pc_command_processing+0x2b4>)
 80009ae:	4413      	add	r3, r2
 80009b0:	2205      	movs	r2, #5
 80009b2:	492b      	ldr	r1, [pc, #172]	; (8000a60 <pc_command_processing+0x308>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fd9b 	bl	80074f0 <strncmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10b      	bne.n	80009d8 <pc_command_processing+0x280>
		{
	    	// 앞단에 Filter 기능을 추가할 것
	    	set_rtc_date_time(&rx_buff[output_pointer][6]);	// 220830111500이것이 들어있는 주소 값이 넘어감
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <pc_command_processing+0x2ac>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	3306      	adds	r3, #6
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <pc_command_processing+0x2b4>)
 80009d0:	4413      	add	r3, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f9e6 	bl	8000da4 <set_rtc_date_time>
		}

		output_pointer = (output_pointer + 1) % COMMAND_MAX;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <pc_command_processing+0x2ac>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <pc_command_processing+0x30c>)
 80009e0:	fb83 1302 	smull	r1, r3, r3, r2
 80009e4:	1119      	asrs	r1, r3, #4
 80009e6:	17d3      	asrs	r3, r2, #31
 80009e8:	1acb      	subs	r3, r1, r3
 80009ea:	2132      	movs	r1, #50	; 0x32
 80009ec:	fb01 f303 	mul.w	r3, r1, r3
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <pc_command_processing+0x2ac>)
 80009f4:	6013      	str	r3, [r2, #0]
	}
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200000b0 	.word	0x200000b0
 8000a08:	080088d4 	.word	0x080088d4
 8000a0c:	200000b4 	.word	0x200000b4
 8000a10:	080088ec 	.word	0x080088ec
 8000a14:	080088f4 	.word	0x080088f4
 8000a18:	08008904 	.word	0x08008904
 8000a1c:	08008910 	.word	0x08008910
 8000a20:	0800891c 	.word	0x0800891c
 8000a24:	66666667 	.word	0x66666667
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	08008924 	.word	0x08008924
 8000a30:	0800892c 	.word	0x0800892c
 8000a34:	08008940 	.word	0x08008940
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	08008948 	.word	0x08008948
 8000a40:	08008954 	.word	0x08008954
 8000a44:	08008960 	.word	0x08008960
 8000a48:	0800896c 	.word	0x0800896c
 8000a4c:	08008978 	.word	0x08008978
 8000a50:	08008984 	.word	0x08008984
 8000a54:	08008990 	.word	0x08008990
 8000a58:	0800899c 	.word	0x0800899c
 8000a5c:	080089b0 	.word	0x080089b0
 8000a60:	080089bc 	.word	0x080089bc
 8000a64:	51eb851f 	.word	0x51eb851f

08000a68 <digit_chk>:

// True : 1
// False : 0
int digit_chk(char *d, int len)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e010      	b.n	8000a9a <digit_chk+0x32>
	{
		if(d[i] >= '0' && d[i] <= '9')
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b2f      	cmp	r3, #47	; 0x2f
 8000a82:	d905      	bls.n	8000a90 <digit_chk+0x28>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b39      	cmp	r3, #57	; 0x39
 8000a8e:	d901      	bls.n	8000a94 <digit_chk+0x2c>
		{
			;
		}
		else
		{
			return 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e007      	b.n	8000aa4 <digit_chk+0x3c>
	for(int i = 0; i < len; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	dbea      	blt.n	8000a78 <digit_chk+0x10>
		}

	}
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <get_button>:
uint8_t prev_button5_state=BUTTON_RELEASE;
uint8_t prev_button6_state=BUTTON_RELEASE;

// 1. GPIO 2. GPIO PIN 3. 이전의 버튼
int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *prev_button_state)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	817b      	strh	r3, [r7, #10]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000abe:	897b      	ldrh	r3, [r7, #10]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f002 f9ca 	bl	8002e5c <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	75fb      	strb	r3, [r7, #23]

	if ((current_state == BUTTON_PRESS) && (*prev_button_state == BUTTON_RELEASE))  // 처음 누른상태
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10b      	bne.n	8000aea <get_button+0x3a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d107      	bne.n	8000aea <get_button+0x3a>
	{
		*prev_button_state = current_state;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7dfa      	ldrb	r2, [r7, #23]
 8000ade:	701a      	strb	r2, [r3, #0]
		HAL_Delay(30);   // noise가 지나가기를 기다린다.
 8000ae0:	201e      	movs	r0, #30
 8000ae2:	f001 fe6f 	bl	80027c4 <HAL_Delay>
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00c      	b.n	8000b04 <get_button+0x54>
	}
	else if ((current_state == BUTTON_RELEASE) && (*prev_button_state == BUTTON_PRESS))
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <get_button+0x52>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <get_button+0x52>
	{
		*prev_button_state = current_state;   // 릴리즈 상태
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7dfa      	ldrb	r2, [r7, #23]
 8000afc:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <get_button+0x54>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <lcd_command>:




void lcd_command(uint8_t command)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f023 030f 	bic.w	r3, r3, #15
 8000b1c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
 8000b26:	f043 030c 	orr.w	r3, r3, #12
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000b38:	7bbb      	ldrb	r3, [r7, #14]
 8000b3a:	f043 030c 	orr.w	r3, r3, #12
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000b42:	7bbb      	ldrb	r3, [r7, #14]
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000b4c:	bf00      	nop
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	2364      	movs	r3, #100	; 0x64
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	2304      	movs	r3, #4
 8000b58:	214e      	movs	r1, #78	; 0x4e
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <lcd_command+0x64>)
 8000b5c:	f002 fb0c 	bl	8003178 <HAL_I2C_Master_Transmit>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d1f3      	bne.n	8000b4e <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000b66:	bf00      	nop
}
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	200006c4 	.word	0x200006c4

08000b74 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af02      	add	r7, sp, #8
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	f023 030f 	bic.w	r3, r3, #15
 8000b84:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	011b      	lsls	r3, r3, #4
 8000b8a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
 8000b8e:	f043 030d 	orr.w	r3, r3, #13
 8000b92:	b2db      	uxtb	r3, r3
 8000b94:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000b96:	7bfb      	ldrb	r3, [r7, #15]
 8000b98:	f043 0309 	orr.w	r3, r3, #9
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000ba0:	7bbb      	ldrb	r3, [r7, #14]
 8000ba2:	f043 030d 	orr.w	r3, r3, #13
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000baa:	7bbb      	ldrb	r3, [r7, #14]
 8000bac:	f043 0309 	orr.w	r3, r3, #9
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000bb4:	bf00      	nop
 8000bb6:	f107 0208 	add.w	r2, r7, #8
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	9300      	str	r3, [sp, #0]
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	214e      	movs	r1, #78	; 0x4e
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <lcd_data+0x64>)
 8000bc4:	f002 fad8 	bl	8003178 <HAL_I2C_Master_Transmit>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d1f3      	bne.n	8000bb6 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000bce:	bf00      	nop
}
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200006c4 	.word	0x200006c4

08000bdc <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000be0:	2033      	movs	r0, #51	; 0x33
 8000be2:	f7ff ff93 	bl	8000b0c <lcd_command>
	lcd_command(0x32);
 8000be6:	2032      	movs	r0, #50	; 0x32
 8000be8:	f7ff ff90 	bl	8000b0c <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000bec:	2028      	movs	r0, #40	; 0x28
 8000bee:	f7ff ff8d 	bl	8000b0c <lcd_command>
	lcd_command(DISPLAY_ON);
 8000bf2:	200c      	movs	r0, #12
 8000bf4:	f7ff ff8a 	bl	8000b0c <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f7ff ff87 	bl	8000b0c <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f7ff ff84 	bl	8000b0c <lcd_command>
	HAL_Delay(2);
 8000c04:	2002      	movs	r0, #2
 8000c06:	f001 fddd 	bl	80027c4 <HAL_Delay>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 8000c16:	e006      	b.n	8000c26 <lcd_string+0x18>
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ffa7 	bl	8000b74 <lcd_data>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d1f4      	bne.n	8000c18 <lcd_string+0xa>
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	460a      	mov	r2, r1
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	4613      	mov	r3, r2
 8000c46:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	019b      	lsls	r3, r3, #6
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	79bb      	ldrb	r3, [r7, #6]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff ff56 	bl	8000b0c <lcd_command>
	return;
 8000c60:	bf00      	nop
}
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <bin2dec>:
// high nibble, Low nibble
// 0010 0010
// 20 + 2
// ==> 22
uint8_t bin2dec(uint8_t byte)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	low = byte & 0x0f; // 하위 4비트만 취한다.
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 030f 	and.w	r3, r3, #15
 8000c78:	73fb      	strb	r3, [r7, #15]
	high = ((byte >> 4) & 0x0f) * 10; 		// 00100010 ----> 4bit shift 우측으로 ==> 00000010 * 10 ==> 22
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	091b      	lsrs	r3, r3, #4
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	461a      	mov	r2, r3
 8000c82:	0092      	lsls	r2, r2, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000c8a:	7bba      	ldrb	r2, [r7, #14]
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	4413      	add	r3, r2
 8000c90:	b2db      	uxtb	r3, r3
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3714      	adds	r7, #20
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
	...

08000ca0 <dec2bin>:

// 10진수 --> BCD			22
uint8_t dec2bin(uint8_t byte)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = ((byte / 10) << 4);
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <dec2bin+0x44>)
 8000cae:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb2:	08db      	lsrs	r3, r3, #3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	73fb      	strb	r3, [r7, #15]
	//00000010 << 4 ==> 00100000
	low = byte % 10;
 8000cba:	79fa      	ldrb	r2, [r7, #7]
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <dec2bin+0x44>)
 8000cbe:	fba3 1302 	umull	r1, r3, r3, r2
 8000cc2:	08d9      	lsrs	r1, r3, #3
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	73bb      	strb	r3, [r7, #14]

	return high + low; // 0010 0010
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	7bbb      	ldrb	r3, [r7, #14]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b2db      	uxtb	r3, r3
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	cccccccd 	.word	0xcccccccd

08000ce8 <get_rtc_time>:

// RTC에서 날짜와 시각 정보를 가져오는 함수
void get_rtc_time(void)
{
 8000ce8:	b5b0      	push	{r4, r5, r7, lr}
 8000cea:	b096      	sub	sp, #88	; 0x58
 8000cec:	af02      	add	r7, sp, #8
	static RTC_TimeTypeDef oTime;	// 이전 시각 정보
	char lcd_buff_floor_data[40];
	char lcd_buff_time[40];
	// 각 매개 변수에 call by ref 이기 때문에 주소 연산자를 앞에 붙임
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4925      	ldr	r1, [pc, #148]	; (8000d88 <get_rtc_time+0xa0>)
 8000cf2:	4826      	ldr	r0, [pc, #152]	; (8000d8c <get_rtc_time+0xa4>)
 8000cf4:	f003 fbe0 	bl	80044b8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	4925      	ldr	r1, [pc, #148]	; (8000d90 <get_rtc_time+0xa8>)
 8000cfc:	4823      	ldr	r0, [pc, #140]	; (8000d8c <get_rtc_time+0xa4>)
 8000cfe:	f003 fcbd 	bl	800467c <HAL_RTC_GetDate>

	if(oTime.Seconds != sTime.Seconds)
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <get_rtc_time+0xac>)
 8000d04:	789a      	ldrb	r2, [r3, #2]
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <get_rtc_time+0xa0>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d033      	beq.n	8000d76 <get_rtc_time+0x8e>
//		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
//				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
//				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
		// text lcd의 1번 째 line에 출력

		sprintf(lcd_buff_floor_data,"Floor : 0%d",elevator_state);
 8000d0e:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <get_rtc_time+0xb0>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d16:	4921      	ldr	r1, [pc, #132]	; (8000d9c <get_rtc_time+0xb4>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f006 fbc9 	bl	80074b0 <siprintf>
		move_cursor(1,0);
 8000d1e:	2100      	movs	r1, #0
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff ff89 	bl	8000c38 <move_cursor>
		lcd_string(lcd_buff_floor_data);
 8000d26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff ff6f 	bl	8000c0e <lcd_string>

		sprintf(lcd_buff_time,"TIME %02d:%02d:%02d",bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8000d30:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <get_rtc_time+0xa0>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff97 	bl	8000c68 <bin2dec>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	461c      	mov	r4, r3
 8000d3e:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <get_rtc_time+0xa0>)
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff90 	bl	8000c68 <bin2dec>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	461d      	mov	r5, r3
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <get_rtc_time+0xa0>)
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff89 	bl	8000c68 <bin2dec>
 8000d56:	4603      	mov	r3, r0
 8000d58:	4638      	mov	r0, r7
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	462b      	mov	r3, r5
 8000d5e:	4622      	mov	r2, r4
 8000d60:	490f      	ldr	r1, [pc, #60]	; (8000da0 <get_rtc_time+0xb8>)
 8000d62:	f006 fba5 	bl	80074b0 <siprintf>
		move_cursor(0,0);
 8000d66:	2100      	movs	r1, #0
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ff65 	bl	8000c38 <move_cursor>
		lcd_string(lcd_buff_time);
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff ff4c 	bl	8000c0e <lcd_string>
	}
	oTime.Seconds = sTime.Seconds;
 8000d76:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <get_rtc_time+0xa0>)
 8000d78:	789a      	ldrb	r2, [r3, #2]
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <get_rtc_time+0xac>)
 8000d7c:	709a      	strb	r2, [r3, #2]
}
 8000d7e:	bf00      	nop
 8000d80:	3750      	adds	r7, #80	; 0x50
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bdb0      	pop	{r4, r5, r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000698 	.word	0x20000698
 8000d8c:	20000718 	.word	0x20000718
 8000d90:	200006ac 	.word	0x200006ac
 8000d94:	200006b0 	.word	0x200006b0
 8000d98:	20000018 	.word	0x20000018
 8000d9c:	080089c4 	.word	0x080089c4
 8000da0:	080089d0 	.word	0x080089d0

08000da4 <set_rtc_date_time>:
// setrtc220830111500
// 012345678901234567
// pc_command_processing에 입력 받음
// data time이라는 변수에는  220830111500의 주소가 넘어온다.
void set_rtc_date_time(char *date_time)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4]; // 날짜 정보
	char hh[4], min[4], ss[4]; // 시각 정보

	strncpy(yy, date_time, 2);
 8000dac:	f107 031c 	add.w	r3, r7, #28
 8000db0:	2202      	movs	r2, #2
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fbaf 	bl	8007518 <strncpy>
	strncpy(mm, date_time+2, 2);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	1c99      	adds	r1, r3, #2
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f006 fba7 	bl	8007518 <strncpy>
	strncpy(dd, date_time+4, 2);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1d19      	adds	r1, r3, #4
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f006 fb9f 	bl	8007518 <strncpy>

	strncpy(hh, date_time+6, 2);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	1d99      	adds	r1, r3, #6
 8000dde:	f107 0310 	add.w	r3, r7, #16
 8000de2:	2202      	movs	r2, #2
 8000de4:	4618      	mov	r0, r3
 8000de6:	f006 fb97 	bl	8007518 <strncpy>
	strncpy(min, date_time+8, 2);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f103 0108 	add.w	r1, r3, #8
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2202      	movs	r2, #2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fb8e 	bl	8007518 <strncpy>
	strncpy(ss, date_time+10, 2);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f103 010a 	add.w	r1, r3, #10
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2202      	movs	r2, #2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f006 fb85 	bl	8007518 <strncpy>

	// 1.ascii ==> int ==> bcd ==> rtc
	sDate.Year = dec2bin(atoi(yy));
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 fa88 	bl	8007328 <atoi>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff3f 	bl	8000ca0 <dec2bin>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <set_rtc_date_time+0x130>)
 8000e28:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f006 fa7a 	bl	8007328 <atoi>
 8000e34:	4603      	mov	r3, r0
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff31 	bl	8000ca0 <dec2bin>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b24      	ldr	r3, [pc, #144]	; (8000ed4 <set_rtc_date_time+0x130>)
 8000e44:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f006 fa6c 	bl	8007328 <atoi>
 8000e50:	4603      	mov	r3, r0
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff23 	bl	8000ca0 <dec2bin>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	461a      	mov	r2, r3
 8000e5e:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <set_rtc_date_time+0x130>)
 8000e60:	709a      	strb	r2, [r3, #2]

	sTime.Hours = dec2bin(atoi(hh));
 8000e62:	f107 0310 	add.w	r3, r7, #16
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 fa5e 	bl	8007328 <atoi>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff15 	bl	8000ca0 <dec2bin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <set_rtc_date_time+0x134>)
 8000e7c:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	4618      	mov	r0, r3
 8000e84:	f006 fa50 	bl	8007328 <atoi>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff07 	bl	8000ca0 <dec2bin>
 8000e92:	4603      	mov	r3, r0
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <set_rtc_date_time+0x134>)
 8000e98:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 8000e9a:	f107 0308 	add.w	r3, r7, #8
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f006 fa42 	bl	8007328 <atoi>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fef9 	bl	8000ca0 <dec2bin>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <set_rtc_date_time+0x134>)
 8000eb4:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4906      	ldr	r1, [pc, #24]	; (8000ed4 <set_rtc_date_time+0x130>)
 8000eba:	4808      	ldr	r0, [pc, #32]	; (8000edc <set_rtc_date_time+0x138>)
 8000ebc:	f003 fb5a 	bl	8004574 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4905      	ldr	r1, [pc, #20]	; (8000ed8 <set_rtc_date_time+0x134>)
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <set_rtc_date_time+0x138>)
 8000ec6:	f003 fa5d 	bl	8004384 <HAL_RTC_SetTime>
}
 8000eca:	bf00      	nop
 8000ecc:	3720      	adds	r7, #32
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200006ac 	.word	0x200006ac
 8000ed8:	20000698 	.word	0x20000698
 8000edc:	20000718 	.word	0x20000718

08000ee0 <led_all_on>:
		HAL_Delay(200);
	}
}

void led_all_on()
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	21ff      	movs	r1, #255	; 0xff
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <led_all_on+0x14>)
 8000eea:	f001 ffcf 	bl	8002e8c <HAL_GPIO_WritePin>
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <led_all_off>:

void led_all_off()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000efc:	2200      	movs	r2, #0
 8000efe:	21ff      	movs	r1, #255	; 0xff
 8000f00:	4802      	ldr	r0, [pc, #8]	; (8000f0c <led_all_off+0x14>)
 8000f02:	f001 ffc3 	bl	8002e8c <HAL_GPIO_WritePin>
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40020400 	.word	0x40020400

08000f10 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f18:	1d39      	adds	r1, r7, #4
 8000f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <__io_putchar+0x20>)
 8000f22:	f005 f9d6 	bl	80062d2 <HAL_UART_Transmit>

  return ch;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	2000089c 	.word	0x2000089c

08000f34 <HAL_SYSTICK_Callback>:
volatile int led_timer = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
	t1ms_count++;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_SYSTICK_Callback+0x2c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_SYSTICK_Callback+0x2c>)
 8000f40:	6013      	str	r3, [r2, #0]
	t2ms_count ++;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_SYSTICK_Callback+0x30>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_SYSTICK_Callback+0x30>)
 8000f4a:	6013      	str	r3, [r2, #0]
	led_timer++;
 8000f4c:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <HAL_SYSTICK_Callback+0x34>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <HAL_SYSTICK_Callback+0x34>)
 8000f54:	6013      	str	r3, [r2, #0]
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	200008e0 	.word	0x200008e0
 8000f64:	200008e4 	.word	0x200008e4
 8000f68:	200008e8 	.word	0x200008e8

08000f6c <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM11_10ms_ultrasonic_counter = 0;
volatile int TIM11_10ms_servomotor_counter = 0;
volatile int TIM11_10ms_buzzer_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0e      	ldr	r2, [pc, #56]	; (8000fb4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d113      	bne.n	8000fa6 <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		TIM11_10ms_counter++;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f86:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f90:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	3301      	adds	r3, #1
 8000f98:	4a09      	ldr	r2, [pc, #36]	; (8000fc0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f9a:	6013      	str	r3, [r2, #0]
		TIM11_10ms_buzzer_counter++;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000fa4:	6013      	str	r3, [r2, #0]
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40014800 	.word	0x40014800
 8000fb8:	200008ec 	.word	0x200008ec
 8000fbc:	200008f0 	.word	0x200008f0
 8000fc0:	200008f4 	.word	0x200008f4
 8000fc4:	200008f8 	.word	0x200008f8

08000fc8 <HAL_GPIO_EXTI_Callback>:
// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every GPIO_EXTI_Callback function : enter here every 10ms
volatile int exint_signal = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d002      	beq.n	8000fde <HAL_GPIO_EXTI_Callback+0x16>
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d00f      	beq.n	8000ffc <HAL_GPIO_EXTI_Callback+0x34>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

  		exint_signal = 1;
  	  break;
  }
}
 8000fdc:	e01d      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_0, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000fe4:	480f      	ldr	r0, [pc, #60]	; (8001024 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000fe6:	f001 ff51 	bl	8002e8c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2101      	movs	r1, #1
 8000fee:	480d      	ldr	r0, [pc, #52]	; (8001024 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000ff0:	f001 ff4c 	bl	8002e8c <HAL_GPIO_WritePin>
  		exint_signal = 0;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <HAL_GPIO_EXTI_Callback+0x60>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
  	  break;
 8000ffa:	e00e      	b.n	800101a <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_1, GPIO_PIN_RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001004:	f001 ff42 	bl	8002e8c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	2102      	movs	r1, #2
 800100c:	4805      	ldr	r0, [pc, #20]	; (8001024 <HAL_GPIO_EXTI_Callback+0x5c>)
 800100e:	f001 ff3d 	bl	8002e8c <HAL_GPIO_WritePin>
  		exint_signal = 1;
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <HAL_GPIO_EXTI_Callback+0x60>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  	  break;
 8001018:	bf00      	nop
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40020400 	.word	0x40020400
 8001028:	20000014 	.word	0x20000014

0800102c <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <delay_us+0x2c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 800103c:	bf00      	nop
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <delay_us+0x2c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	d8f9      	bhi.n	800103e <delay_us+0x12>
	;
}
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20000738 	.word	0x20000738

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001060:	f001 fb3e 	bl	80026e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f84a 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001068:	f000 fb04 	bl	8001674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800106c:	f000 fad8 	bl	8001620 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001070:	f000 fa88 	bl	8001584 <MX_TIM11_Init>
  MX_TIM1_Init();
 8001074:	f000 f942 	bl	80012fc <MX_TIM1_Init>
  MX_RTC_Init();
 8001078:	f000 f8e6 	bl	8001248 <MX_RTC_Init>
  MX_I2C1_Init();
 800107c:	f000 f8b6 	bl	80011ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8001080:	f000 f9b0 	bl	80013e4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001084:	f000 fa24 	bl	80014d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001088:	f000 faa0 	bl	80015cc <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800108c:	f000 f8a2 	bl	80011d4 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <main+0x80>)
 8001092:	f003 fc4f 	bl	8004934 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 8001096:	2100      	movs	r1, #0
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <main+0x84>)
 800109a:	f003 ffb7 	bl	800500c <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 800109e:	2201      	movs	r2, #1
 80010a0:	4910      	ldr	r1, [pc, #64]	; (80010e4 <main+0x88>)
 80010a2:	4811      	ldr	r0, [pc, #68]	; (80010e8 <main+0x8c>)
 80010a4:	f005 f9a7 	bl	80063f6 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);	// BT UART Enable rx_interrupt
 80010a8:	2201      	movs	r2, #1
 80010aa:	490e      	ldr	r1, [pc, #56]	; (80010e4 <main+0x88>)
 80010ac:	480f      	ldr	r0, [pc, #60]	; (80010ec <main+0x90>)
 80010ae:	f005 f9a2 	bl	80063f6 <HAL_UART_Receive_IT>
  // PC, BT
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PWM Control for Servo motor
 80010b2:	2108      	movs	r1, #8
 80010b4:	480e      	ldr	r0, [pc, #56]	; (80010f0 <main+0x94>)
 80010b6:	f003 fd9f 	bl	8004bf8 <HAL_TIM_PWM_Start_IT>
  // TIM3 CH1 : PIEZO BUZZER
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010ba:	2100      	movs	r1, #0
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <main+0x98>)
 80010be:	f003 fceb 	bl	8004a98 <HAL_TIM_PWM_Start>

  i2c_lcd_init();
 80010c2:	f7ff fd8b 	bl	8000bdc <i2c_lcd_init>
  printf("Hello STM32!!!\n");
 80010c6:	480c      	ldr	r0, [pc, #48]	; (80010f8 <main+0x9c>)
 80010c8:	f006 f9ea 	bl	80074a0 <puts>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pc_command_processing();
 80010cc:	f7ff fb44 	bl	8000758 <pc_command_processing>
	 // ultrasonic_processing();
	  get_rtc_time();
 80010d0:	f7ff fe0a 	bl	8000ce8 <get_rtc_time>
	  flow_button_move();
 80010d4:	f000 fd40 	bl	8001b58 <flow_button_move>
  {
 80010d8:	e7f8      	b.n	80010cc <main+0x70>
 80010da:	bf00      	nop
 80010dc:	20000810 	.word	0x20000810
 80010e0:	20000738 	.word	0x20000738
 80010e4:	20000690 	.word	0x20000690
 80010e8:	2000089c 	.word	0x2000089c
 80010ec:	20000858 	.word	0x20000858
 80010f0:	20000780 	.word	0x20000780
 80010f4:	200007c8 	.word	0x200007c8
 80010f8:	080089e4 	.word	0x080089e4

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	; 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	; 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f006 f93a 	bl	8007384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <SystemClock_Config+0xd0>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <SystemClock_Config+0xd0>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	; 0x40
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <SystemClock_Config+0xd0>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b23      	ldr	r3, [pc, #140]	; (80011d0 <SystemClock_Config+0xd4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <SystemClock_Config+0xd4>)
 8001146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <SystemClock_Config+0xd4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001158:	230a      	movs	r3, #10
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001160:	2310      	movs	r3, #16
 8001162:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001168:	2302      	movs	r3, #2
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001170:	2310      	movs	r3, #16
 8001172:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001174:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001178:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800117a:	2304      	movs	r3, #4
 800117c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117e:	2304      	movs	r3, #4
 8001180:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001182:	f107 0320 	add.w	r3, r7, #32
 8001186:	4618      	mov	r0, r3
 8001188:	f002 fafe 	bl	8003788 <HAL_RCC_OscConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001192:	f000 fb11 	bl	80017b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	230f      	movs	r3, #15
 8001198:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2302      	movs	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	2102      	movs	r1, #2
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fd60 	bl	8003c78 <HAL_RCC_ClockConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80011be:	f000 fafb 	bl	80017b8 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3750      	adds	r7, #80	; 0x50
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	201a      	movs	r0, #26
 80011de:	f001 fbf0 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80011e2:	201a      	movs	r0, #26
 80011e4:	f001 fc09 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_I2C1_Init+0x50>)
 80011f2:	4a13      	ldr	r2, [pc, #76]	; (8001240 <MX_I2C1_Init+0x54>)
 80011f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_I2C1_Init+0x50>)
 80011f8:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_I2C1_Init+0x58>)
 80011fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_I2C1_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_I2C1_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_I2C1_Init+0x50>)
 800120a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001228:	4804      	ldr	r0, [pc, #16]	; (800123c <MX_I2C1_Init+0x50>)
 800122a:	f001 fe61 	bl	8002ef0 <HAL_I2C_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001234:	f000 fac0 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200006c4 	.word	0x200006c4
 8001240:	40005400 	.word	0x40005400
 8001244:	000186a0 	.word	0x000186a0

08001248 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_RTC_Init+0xac>)
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <MX_RTC_Init+0xb0>)
 8001264:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_RTC_Init+0xac>)
 8001268:	2200      	movs	r2, #0
 800126a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_RTC_Init+0xac>)
 800126e:	227f      	movs	r2, #127	; 0x7f
 8001270:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_RTC_Init+0xac>)
 8001274:	22ff      	movs	r2, #255	; 0xff
 8001276:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_RTC_Init+0xac>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_RTC_Init+0xac>)
 8001280:	2200      	movs	r2, #0
 8001282:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_RTC_Init+0xac>)
 8001286:	2200      	movs	r2, #0
 8001288:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800128a:	481a      	ldr	r0, [pc, #104]	; (80012f4 <MX_RTC_Init+0xac>)
 800128c:	f003 f804 	bl	8004298 <HAL_RTC_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 fa8f 	bl	80017b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 800129a:	2311      	movs	r3, #17
 800129c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 800129e:	2310      	movs	r3, #16
 80012a0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2201      	movs	r2, #1
 80012b2:	4619      	mov	r1, r3
 80012b4:	480f      	ldr	r0, [pc, #60]	; (80012f4 <MX_RTC_Init+0xac>)
 80012b6:	f003 f865 	bl	8004384 <HAL_RTC_SetTime>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80012c0:	f000 fa7a 	bl	80017b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80012c4:	2302      	movs	r3, #2
 80012c6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80012c8:	2308      	movs	r3, #8
 80012ca:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 80012cc:	2330      	movs	r3, #48	; 0x30
 80012ce:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80012d0:	2322      	movs	r3, #34	; 0x22
 80012d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80012d4:	463b      	mov	r3, r7
 80012d6:	2201      	movs	r2, #1
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_RTC_Init+0xac>)
 80012dc:	f003 f94a 	bl	8004574 <HAL_RTC_SetDate>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80012e6:	f000 fa67 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000718 	.word	0x20000718
 80012f8:	40002800 	.word	0x40002800

080012fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0318 	add.w	r3, r7, #24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0310 	add.w	r3, r7, #16
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800131a:	463b      	mov	r3, r7
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001328:	4a2d      	ldr	r2, [pc, #180]	; (80013e0 <MX_TIM1_Init+0xe4>)
 800132a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <MX_TIM1_Init+0xe0>)
 800132e:	2253      	movs	r2, #83	; 0x53
 8001330:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001338:	4b28      	ldr	r3, [pc, #160]	; (80013dc <MX_TIM1_Init+0xe0>)
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b26      	ldr	r3, [pc, #152]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MX_TIM1_Init+0xe0>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001352:	4822      	ldr	r0, [pc, #136]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001354:	f003 fa9e 	bl	8004894 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800135e:	f000 fa2b 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0318 	add.w	r3, r7, #24
 800136c:	4619      	mov	r1, r3
 800136e:	481b      	ldr	r0, [pc, #108]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001370:	f004 f9cc 	bl	800570c <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800137a:	f000 fa1d 	bl	80017b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <MX_TIM1_Init+0xe0>)
 8001380:	f003 fdea 	bl	8004f58 <HAL_TIM_IC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800138a:	f000 fa15 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001396:	f107 0310 	add.w	r3, r7, #16
 800139a:	4619      	mov	r1, r3
 800139c:	480f      	ldr	r0, [pc, #60]	; (80013dc <MX_TIM1_Init+0xe0>)
 800139e:	f004 fec9 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80013a8:	f000 fa06 	bl	80017b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80013ac:	230a      	movs	r3, #10
 80013ae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM1_Init+0xe0>)
 80013c4:	f004 f844 	bl	8005450 <HAL_TIM_IC_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80013ce:	f000 f9f3 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000738 	.word	0x20000738
 80013e0:	40010000 	.word	0x40010000

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001414:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001416:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800141a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 800141c:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_TIM2_Init+0xe8>)
 800141e:	f240 628f 	movw	r2, #1679	; 0x68f
 8001422:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_TIM2_Init+0xe8>)
 800142c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_TIM2_Init+0xe8>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143e:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_TIM2_Init+0xe8>)
 8001440:	f003 fa28 	bl	8004894 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800144a:	f000 f9b5 	bl	80017b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001458:	4619      	mov	r1, r3
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_TIM2_Init+0xe8>)
 800145c:	f004 f956 	bl	800570c <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001466:	f000 f9a7 	bl	80017b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800146a:	4818      	ldr	r0, [pc, #96]	; (80014cc <MX_TIM2_Init+0xe8>)
 800146c:	f003 fac4 	bl	80049f8 <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001476:	f000 f99f 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	4619      	mov	r1, r3
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <MX_TIM2_Init+0xe8>)
 800148a:	f004 fe53 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001494:	f000 f990 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2208      	movs	r2, #8
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM2_Init+0xe8>)
 80014b0:	f004 f86a 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014ba:	f000 f97d 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM2_Init+0xe8>)
 80014c0:	f000 fe80 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	; 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000780 	.word	0x20000780

080014d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	1d3b      	adds	r3, r7, #4
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f2:	4b22      	ldr	r3, [pc, #136]	; (800157c <MX_TIM3_Init+0xac>)
 80014f4:	4a22      	ldr	r2, [pc, #136]	; (8001580 <MX_TIM3_Init+0xb0>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_TIM3_Init+0xac>)
 80014fa:	2233      	movs	r2, #51	; 0x33
 80014fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_TIM3_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM3_Init+0xac>)
 8001506:	f240 128f 	movw	r2, #399	; 0x18f
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM3_Init+0xac>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_TIM3_Init+0xac>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001518:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_TIM3_Init+0xac>)
 800151a:	f003 fa6d 	bl	80049f8 <HAL_TIM_PWM_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001524:	f000 f948 	bl	80017b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001530:	f107 0320 	add.w	r3, r7, #32
 8001534:	4619      	mov	r1, r3
 8001536:	4811      	ldr	r0, [pc, #68]	; (800157c <MX_TIM3_Init+0xac>)
 8001538:	f004 fdfc 	bl	8006134 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001542:	f000 f939 	bl	80017b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001546:	2360      	movs	r3, #96	; 0x60
 8001548:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 800154a:	23c7      	movs	r3, #199	; 0xc7
 800154c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2200      	movs	r2, #0
 800155a:	4619      	mov	r1, r3
 800155c:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM3_Init+0xac>)
 800155e:	f004 f813 	bl	8005588 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001568:	f000 f926 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156c:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM3_Init+0xac>)
 800156e:	f000 fe29 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200007c8 	.word	0x200007c8
 8001580:	40000400 	.word	0x40000400

08001584 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001588:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <MX_TIM11_Init+0x40>)
 800158a:	4a0f      	ldr	r2, [pc, #60]	; (80015c8 <MX_TIM11_Init+0x44>)
 800158c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_TIM11_Init+0x40>)
 8001590:	2253      	movs	r2, #83	; 0x53
 8001592:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <MX_TIM11_Init+0x40>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <MX_TIM11_Init+0x40>)
 800159c:	f242 720f 	movw	r2, #9999	; 0x270f
 80015a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <MX_TIM11_Init+0x40>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <MX_TIM11_Init+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <MX_TIM11_Init+0x40>)
 80015b0:	f003 f970 	bl	8004894 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80015ba:	f000 f8fd 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000810 	.word	0x20000810
 80015c8:	40014800 	.word	0x40014800

080015cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <MX_USART1_UART_Init+0x50>)
 80015d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80015dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015f2:	220c      	movs	r2, #12
 80015f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_USART1_UART_Init+0x4c>)
 8001604:	f004 fe18 	bl	8006238 <HAL_UART_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800160e:	f000 f8d3 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000858 	.word	0x20000858
 800161c:	40011000 	.word	0x40011000

08001620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <MX_USART2_UART_Init+0x50>)
 8001628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800162c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_USART2_UART_Init+0x4c>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_USART2_UART_Init+0x4c>)
 8001658:	f004 fdee 	bl	8006238 <HAL_UART_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001662:	f000 f8a9 	bl	80017b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000089c 	.word	0x2000089c
 8001670:	40004400 	.word	0x40004400

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b46      	ldr	r3, [pc, #280]	; (80017a8 <MX_GPIO_Init+0x134>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a45      	ldr	r2, [pc, #276]	; (80017a8 <MX_GPIO_Init+0x134>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b43      	ldr	r3, [pc, #268]	; (80017a8 <MX_GPIO_Init+0x134>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	4b3f      	ldr	r3, [pc, #252]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a3e      	ldr	r2, [pc, #248]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b3c      	ldr	r3, [pc, #240]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	4a37      	ldr	r2, [pc, #220]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6313      	str	r3, [r2, #48]	; 0x30
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <MX_GPIO_Init+0x134>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001700:	482a      	ldr	r0, [pc, #168]	; (80017ac <MX_GPIO_Init+0x138>)
 8001702:	f001 fbc3 	bl	8002e8c <HAL_GPIO_WritePin>
                          |INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001706:	2200      	movs	r2, #0
 8001708:	21ff      	movs	r1, #255	; 0xff
 800170a:	4829      	ldr	r0, [pc, #164]	; (80017b0 <MX_GPIO_Init+0x13c>)
 800170c:	f001 fbbe 	bl	8002e8c <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin
                           BUTTON5_Pin BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin
 8001710:	f640 430f 	movw	r3, #3087	; 0xc0f
 8001714:	617b      	str	r3, [r7, #20]
                          |BUTTON5_Pin|BUTTON6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <MX_GPIO_Init+0x138>)
 8001726:	f001 fa15 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800172a:	2303      	movs	r3, #3
 800172c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	4619      	mov	r1, r3
 800173e:	481d      	ldr	r0, [pc, #116]	; (80017b4 <MX_GPIO_Init+0x140>)
 8001740:	f001 fa08 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIG_Pin INT1_STEP_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 8001744:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001748:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174a:	2301      	movs	r3, #1
 800174c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001752:	2300      	movs	r3, #0
 8001754:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4813      	ldr	r0, [pc, #76]	; (80017ac <MX_GPIO_Init+0x138>)
 800175e:	f001 f9f9 	bl	8002b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001762:	23ff      	movs	r3, #255	; 0xff
 8001764:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001766:	2301      	movs	r3, #1
 8001768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	480d      	ldr	r0, [pc, #52]	; (80017b0 <MX_GPIO_Init+0x13c>)
 800177a:	f001 f9eb 	bl	8002b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2100      	movs	r1, #0
 8001782:	2006      	movs	r0, #6
 8001784:	f001 f91d 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001788:	2006      	movs	r0, #6
 800178a:	f001 f936 	bl	80029fa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2007      	movs	r0, #7
 8001794:	f001 f915 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001798:	2007      	movs	r0, #7
 800179a:	f001 f92e 	bl	80029fa <HAL_NVIC_EnableIRQ>

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020800 	.word	0x40020800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020000 	.word	0x40020000

080017b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017bc:	b672      	cpsid	i
}
 80017be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <Error_Handler+0x8>
	...

080017c4 <auto_door_sequence>:

int door_mode = DOOR_SLEEP;
int arm_rotate_indicator = 0;

void auto_door_sequence()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0

	if(door_mode == DOOR_SLEEP)
 80017c8:	4b26      	ldr	r3, [pc, #152]	; (8001864 <auto_door_sequence+0xa0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d111      	bne.n	80017f4 <auto_door_sequence+0x30>
	{
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);	// PIN Inactive
 80017d0:	2108      	movs	r1, #8
 80017d2:	4825      	ldr	r0, [pc, #148]	; (8001868 <auto_door_sequence+0xa4>)
 80017d4:	f003 fb0e 	bl	8004df4 <HAL_TIM_PWM_Stop_IT>

		if(door_mode == DOOR_STANDBY) // standby는 buzzer에서 받아옴
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <auto_door_sequence+0xa0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d109      	bne.n	80017f4 <auto_door_sequence+0x30>
		{
			HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PIN Active
 80017e0:	2108      	movs	r1, #8
 80017e2:	4821      	ldr	r0, [pc, #132]	; (8001868 <auto_door_sequence+0xa4>)
 80017e4:	f003 fa08 	bl	8004bf8 <HAL_TIM_PWM_Start_IT>
			TIM11_10ms_servomotor_counter = 0;
 80017e8:	4b20      	ldr	r3, [pc, #128]	; (800186c <auto_door_sequence+0xa8>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
			door_mode = DOOR_WORK;
 80017ee:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <auto_door_sequence+0xa0>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	601a      	str	r2, [r3, #0]
		}

	}
	if(door_mode == DOOR_WORK)
 80017f4:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <auto_door_sequence+0xa0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d130      	bne.n	800185e <auto_door_sequence+0x9a>
	{
		// get_button ==> timer 0initial
		if(TIM11_10ms_servomotor_counter == 0)
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <auto_door_sequence+0xa8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d104      	bne.n	800180e <auto_door_sequence+0x4a>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 110); // door open
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <auto_door_sequence+0xa4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	226e      	movs	r2, #110	; 0x6e
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c
				TIM11_10ms_servomotor_counter = 300;
			}
		}

	}
}
 800180c:	e027      	b.n	800185e <auto_door_sequence+0x9a>
		else if(TIM11_10ms_servomotor_counter == 400)	// 4sec wait
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <auto_door_sequence+0xa8>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001816:	d10a      	bne.n	800182e <auto_door_sequence+0x6a>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);	// close
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <auto_door_sequence+0xa4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	220a      	movs	r2, #10
 800181e:	63da      	str	r2, [r3, #60]	; 0x3c
			door_mode = DOOR_SLEEP;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <auto_door_sequence+0xa0>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
			elevator_mode_state = 0;
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <auto_door_sequence+0xac>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	e017      	b.n	800185e <auto_door_sequence+0x9a>
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <auto_door_sequence+0xb0>)
 8001830:	2101      	movs	r1, #1
 8001832:	4811      	ldr	r0, [pc, #68]	; (8001878 <auto_door_sequence+0xb4>)
 8001834:	f7ff f93c 	bl	8000ab0 <get_button>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <auto_door_sequence+0x82>
				TIM11_10ms_servomotor_counter = 0;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <auto_door_sequence+0xa8>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	e00b      	b.n	800185e <auto_door_sequence+0x9a>
			else if(get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 8001846:	4a0d      	ldr	r2, [pc, #52]	; (800187c <auto_door_sequence+0xb8>)
 8001848:	2102      	movs	r1, #2
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <auto_door_sequence+0xb4>)
 800184c:	f7ff f930 	bl	8000ab0 <get_button>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d103      	bne.n	800185e <auto_door_sequence+0x9a>
				TIM11_10ms_servomotor_counter = 300;
 8001856:	4b05      	ldr	r3, [pc, #20]	; (800186c <auto_door_sequence+0xa8>)
 8001858:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800185c:	601a      	str	r2, [r3, #0]
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	200008fc 	.word	0x200008fc
 8001868:	20000780 	.word	0x20000780
 800186c:	200008f4 	.word	0x200008f4
 8001870:	20000900 	.word	0x20000900
 8001874:	2000000c 	.word	0x2000000c
 8001878:	40020800 	.word	0x40020800
 800187c:	2000000d 	.word	0x2000000d

08001880 <set_rpm>:

extern volatile int exint_signal;


void set_rpm(int rpm)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	delay_us(60000000/ STEPS_PER_REV/rpm);
 8001888:	f643 1238 	movw	r2, #14648	; 0x3938
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fbca 	bl	800102c <delay_us>
	// 최대 speed 기준 (13) ==> _delay_us(1126)
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <stepmotor_driver_step>:


void stepmotor_driver_step(int direction, int step_limit)	// direction ==> Forward or Backward
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
	switch(temp_step)
 80018aa:	4ba5      	ldr	r3, [pc, #660]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	f200 80cc 	bhi.w	8001a4c <stepmotor_driver_step+0x1ac>
 80018b4:	a201      	add	r2, pc, #4	; (adr r2, 80018bc <stepmotor_driver_step+0x1c>)
 80018b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ba:	bf00      	nop
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	0800190b 	.word	0x0800190b
 80018c4:	08001939 	.word	0x08001939
 80018c8:	08001967 	.word	0x08001967
 80018cc:	08001995 	.word	0x08001995
 80018d0:	080019c3 	.word	0x080019c3
 80018d4:	080019f1 	.word	0x080019f1
 80018d8:	08001a1f 	.word	0x08001a1f
	{
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80018dc:	2201      	movs	r2, #1
 80018de:	2140      	movs	r1, #64	; 0x40
 80018e0:	4898      	ldr	r0, [pc, #608]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80018e2:	f001 fad3 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2180      	movs	r1, #128	; 0x80
 80018ea:	4896      	ldr	r0, [pc, #600]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80018ec:	f001 face 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f6:	4893      	ldr	r0, [pc, #588]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80018f8:	f001 fac8 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001902:	4890      	ldr	r0, [pc, #576]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001904:	f001 fac2 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 8001908:	e0a0      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 1:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	2140      	movs	r1, #64	; 0x40
 800190e:	488d      	ldr	r0, [pc, #564]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001910:	f001 fabc 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	488a      	ldr	r0, [pc, #552]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 800191a:	f001 fab7 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001924:	4887      	ldr	r0, [pc, #540]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001926:	f001 fab1 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001930:	4884      	ldr	r0, [pc, #528]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001932:	f001 faab 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 8001936:	e089      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 2:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	4881      	ldr	r0, [pc, #516]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 800193e:	f001 faa5 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	487f      	ldr	r0, [pc, #508]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001948:	f001 faa0 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800194c:	2200      	movs	r2, #0
 800194e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001952:	487c      	ldr	r0, [pc, #496]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001954:	f001 fa9a 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001958:	2200      	movs	r2, #0
 800195a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800195e:	4879      	ldr	r0, [pc, #484]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001960:	f001 fa94 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 8001964:	e072      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 3:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001966:	2200      	movs	r2, #0
 8001968:	2140      	movs	r1, #64	; 0x40
 800196a:	4876      	ldr	r0, [pc, #472]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 800196c:	f001 fa8e 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	2180      	movs	r1, #128	; 0x80
 8001974:	4873      	ldr	r0, [pc, #460]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001976:	f001 fa89 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001980:	4870      	ldr	r0, [pc, #448]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001982:	f001 fa83 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 7100 	mov.w	r1, #512	; 0x200
 800198c:	486d      	ldr	r0, [pc, #436]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 800198e:	f001 fa7d 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 8001992:	e05b      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 4:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	486a      	ldr	r0, [pc, #424]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 800199a:	f001 fa77 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800199e:	2200      	movs	r2, #0
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	4868      	ldr	r0, [pc, #416]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019a4:	f001 fa72 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80019a8:	2201      	movs	r2, #1
 80019aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019ae:	4865      	ldr	r0, [pc, #404]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019b0:	f001 fa6c 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80019b4:	2200      	movs	r2, #0
 80019b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ba:	4862      	ldr	r0, [pc, #392]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019bc:	f001 fa66 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 80019c0:	e044      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 5:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80019c2:	2200      	movs	r2, #0
 80019c4:	2140      	movs	r1, #64	; 0x40
 80019c6:	485f      	ldr	r0, [pc, #380]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019c8:	f001 fa60 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2180      	movs	r1, #128	; 0x80
 80019d0:	485c      	ldr	r0, [pc, #368]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019d2:	f001 fa5b 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80019d6:	2201      	movs	r2, #1
 80019d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019dc:	4859      	ldr	r0, [pc, #356]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019de:	f001 fa55 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80019e2:	2201      	movs	r2, #1
 80019e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019e8:	4856      	ldr	r0, [pc, #344]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019ea:	f001 fa4f 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 80019ee:	e02d      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 6:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2140      	movs	r1, #64	; 0x40
 80019f4:	4853      	ldr	r0, [pc, #332]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 80019f6:	f001 fa49 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	4851      	ldr	r0, [pc, #324]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a00:	f001 fa44 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0a:	484e      	ldr	r0, [pc, #312]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a0c:	f001 fa3e 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a16:	484b      	ldr	r0, [pc, #300]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a18:	f001 fa38 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 8001a1c:	e016      	b.n	8001a4c <stepmotor_driver_step+0x1ac>

		case 7:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2140      	movs	r1, #64	; 0x40
 8001a22:	4848      	ldr	r0, [pc, #288]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a24:	f001 fa32 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2180      	movs	r1, #128	; 0x80
 8001a2c:	4845      	ldr	r0, [pc, #276]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a2e:	f001 fa2d 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a38:	4842      	ldr	r0, [pc, #264]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a3a:	f001 fa27 	bl	8002e8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a44:	483f      	ldr	r0, [pc, #252]	; (8001b44 <stepmotor_driver_step+0x2a4>)
 8001a46:	f001 fa21 	bl	8002e8c <HAL_GPIO_WritePin>
		break;
 8001a4a:	bf00      	nop
	}
	if(direction == FORWARD)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d131      	bne.n	8001ab6 <stepmotor_driver_step+0x216>
	{
		if(temp_step_count <= step_limit)
 8001a52:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	db20      	blt.n	8001a9e <stepmotor_driver_step+0x1fe>
		{
			temp_step_count++;
 8001a5c:	4b3a      	ldr	r3, [pc, #232]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001a64:	6013      	str	r3, [r2, #0]
			temp_step++;
 8001a66:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	4a34      	ldr	r2, [pc, #208]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001a6e:	6013      	str	r3, [r2, #0]
			temp_step %= 8;
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	425a      	negs	r2, r3
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	f002 0207 	and.w	r2, r2, #7
 8001a7e:	bf58      	it	pl
 8001a80:	4253      	negpl	r3, r2
 8001a82:	4a2f      	ldr	r2, [pc, #188]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001a84:	6013      	str	r3, [r2, #0]

			if(temp_step_count % STEPS_PER_REV == 0)
 8001a86:	4b30      	ldr	r3, [pc, #192]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d111      	bne.n	8001ab6 <stepmotor_driver_step+0x216>
			{
				elevator_state++; // LCD
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <stepmotor_driver_step+0x2ac>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3301      	adds	r3, #1
 8001a98:	4a2c      	ldr	r2, [pc, #176]	; (8001b4c <stepmotor_driver_step+0x2ac>)
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	e00b      	b.n	8001ab6 <stepmotor_driver_step+0x216>
			}
		}
		else
		{
			temp_step = 0;
 8001a9e:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
			temp_step_count = 0;
 8001aa4:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
			door_mode = 2;
 8001aaa:	4b29      	ldr	r3, [pc, #164]	; (8001b50 <stepmotor_driver_step+0x2b0>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	601a      	str	r2, [r3, #0]
			elevator_mode_state = ARRIVAL_MODE;
 8001ab0:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <stepmotor_driver_step+0x2b4>)
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	601a      	str	r2, [r3, #0]
		}


	}

	if(direction == BACKWARD)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d13d      	bne.n	8001b38 <stepmotor_driver_step+0x298>
	{

		if(temp_step_count <= step_limit)
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	db2c      	blt.n	8001b20 <stepmotor_driver_step+0x280>
		{
			temp_step_count++;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	4a1e      	ldr	r2, [pc, #120]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001ace:	6013      	str	r3, [r2, #0]

			if(temp_step >= 0)
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	db10      	blt.n	8001afa <stepmotor_driver_step+0x25a>
			{
				temp_step--;
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	3b01      	subs	r3, #1
 8001ade:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001ae0:	6013      	str	r3, [r2, #0]
				temp_step %= 8;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	425a      	negs	r2, r3
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	f002 0207 	and.w	r2, r2, #7
 8001af0:	bf58      	it	pl
 8001af2:	4253      	negpl	r3, r2
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001af6:	6013      	str	r3, [r2, #0]
 8001af8:	e006      	b.n	8001b08 <stepmotor_driver_step+0x268>
			}
			else if(temp_step < 0)
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da02      	bge.n	8001b08 <stepmotor_driver_step+0x268>
			{
				temp_step = 7;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001b04:	2207      	movs	r2, #7
 8001b06:	601a      	str	r2, [r3, #0]
			}

			if(temp_step_count % STEPS_PER_REV == 0)
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d111      	bne.n	8001b38 <stepmotor_driver_step+0x298>
			{
				elevator_state--;
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <stepmotor_driver_step+0x2ac>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	4a0c      	ldr	r2, [pc, #48]	; (8001b4c <stepmotor_driver_step+0x2ac>)
 8001b1c:	6013      	str	r3, [r2, #0]
			temp_step_count = 0;
			door_mode = 2;
			elevator_mode_state = ARRIVAL_MODE;
		}
	}
}
 8001b1e:	e00b      	b.n	8001b38 <stepmotor_driver_step+0x298>
			temp_step = 0;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <stepmotor_driver_step+0x2a0>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]
			temp_step_count = 0;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <stepmotor_driver_step+0x2a8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
			door_mode = 2;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <stepmotor_driver_step+0x2b0>)
 8001b2e:	2202      	movs	r2, #2
 8001b30:	601a      	str	r2, [r3, #0]
			elevator_mode_state = ARRIVAL_MODE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <stepmotor_driver_step+0x2b4>)
 8001b34:	2203      	movs	r2, #3
 8001b36:	601a      	str	r2, [r3, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000908 	.word	0x20000908
 8001b44:	40020800 	.word	0x40020800
 8001b48:	2000090c 	.word	0x2000090c
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	200008fc 	.word	0x200008fc
 8001b54:	20000900 	.word	0x20000900

08001b58 <flow_button_move>:


void flow_button_move()
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

	switch(elevator_mode_state)
 8001b5c:	4b86      	ldr	r3, [pc, #536]	; (8001d78 <flow_button_move+0x220>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	f200 81c6 	bhi.w	8001ef2 <flow_button_move+0x39a>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <flow_button_move+0x14>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001e8f 	.word	0x08001e8f
 8001b74:	08001ebd 	.word	0x08001ebd
 8001b78:	08001eeb 	.word	0x08001eeb
		{
			case STANDBY_MODE:
				if(pre_floor == 1)
 8001b7c:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <flow_button_move+0x224>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10a      	bne.n	8001b9a <flow_button_move+0x42>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001b84:	2200      	movs	r2, #0
 8001b86:	21ff      	movs	r1, #255	; 0xff
 8001b88:	487d      	ldr	r0, [pc, #500]	; (8001d80 <flow_button_move+0x228>)
 8001b8a:	f001 f97f 	bl	8002e8c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x01, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2101      	movs	r1, #1
 8001b92:	487b      	ldr	r0, [pc, #492]	; (8001d80 <flow_button_move+0x228>)
 8001b94:	f001 f97a 	bl	8002e8c <HAL_GPIO_WritePin>
 8001b98:	e049      	b.n	8001c2e <flow_button_move+0xd6>
				}
				else if(pre_floor == 2)
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <flow_button_move+0x224>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d10a      	bne.n	8001bb8 <flow_button_move+0x60>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	21ff      	movs	r1, #255	; 0xff
 8001ba6:	4876      	ldr	r0, [pc, #472]	; (8001d80 <flow_button_move+0x228>)
 8001ba8:	f001 f970 	bl	8002e8c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x03, GPIO_PIN_SET);
 8001bac:	2201      	movs	r2, #1
 8001bae:	2103      	movs	r1, #3
 8001bb0:	4873      	ldr	r0, [pc, #460]	; (8001d80 <flow_button_move+0x228>)
 8001bb2:	f001 f96b 	bl	8002e8c <HAL_GPIO_WritePin>
 8001bb6:	e03a      	b.n	8001c2e <flow_button_move+0xd6>
				}
				else if(pre_floor == 3)
 8001bb8:	4b70      	ldr	r3, [pc, #448]	; (8001d7c <flow_button_move+0x224>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	d10a      	bne.n	8001bd6 <flow_button_move+0x7e>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	21ff      	movs	r1, #255	; 0xff
 8001bc4:	486e      	ldr	r0, [pc, #440]	; (8001d80 <flow_button_move+0x228>)
 8001bc6:	f001 f961 	bl	8002e8c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_SET);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2107      	movs	r1, #7
 8001bce:	486c      	ldr	r0, [pc, #432]	; (8001d80 <flow_button_move+0x228>)
 8001bd0:	f001 f95c 	bl	8002e8c <HAL_GPIO_WritePin>
 8001bd4:	e02b      	b.n	8001c2e <flow_button_move+0xd6>
				}
				else if(pre_floor == 4)
 8001bd6:	4b69      	ldr	r3, [pc, #420]	; (8001d7c <flow_button_move+0x224>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d10a      	bne.n	8001bf4 <flow_button_move+0x9c>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	21ff      	movs	r1, #255	; 0xff
 8001be2:	4867      	ldr	r0, [pc, #412]	; (8001d80 <flow_button_move+0x228>)
 8001be4:	f001 f952 	bl	8002e8c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x0f, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	210f      	movs	r1, #15
 8001bec:	4864      	ldr	r0, [pc, #400]	; (8001d80 <flow_button_move+0x228>)
 8001bee:	f001 f94d 	bl	8002e8c <HAL_GPIO_WritePin>
 8001bf2:	e01c      	b.n	8001c2e <flow_button_move+0xd6>
				}
				else if(pre_floor == 5)
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <flow_button_move+0x224>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d10a      	bne.n	8001c12 <flow_button_move+0xba>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	21ff      	movs	r1, #255	; 0xff
 8001c00:	485f      	ldr	r0, [pc, #380]	; (8001d80 <flow_button_move+0x228>)
 8001c02:	f001 f943 	bl	8002e8c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x1f, GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	211f      	movs	r1, #31
 8001c0a:	485d      	ldr	r0, [pc, #372]	; (8001d80 <flow_button_move+0x228>)
 8001c0c:	f001 f93e 	bl	8002e8c <HAL_GPIO_WritePin>
 8001c10:	e00d      	b.n	8001c2e <flow_button_move+0xd6>
				}
				else if(pre_floor == 6)
 8001c12:	4b5a      	ldr	r3, [pc, #360]	; (8001d7c <flow_button_move+0x224>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d109      	bne.n	8001c2e <flow_button_move+0xd6>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	21ff      	movs	r1, #255	; 0xff
 8001c1e:	4858      	ldr	r0, [pc, #352]	; (8001d80 <flow_button_move+0x228>)
 8001c20:	f001 f934 	bl	8002e8c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x3f, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	213f      	movs	r1, #63	; 0x3f
 8001c28:	4855      	ldr	r0, [pc, #340]	; (8001d80 <flow_button_move+0x228>)
 8001c2a:	f001 f92f 	bl	8002e8c <HAL_GPIO_WritePin>
				}


				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001c2e:	4a55      	ldr	r2, [pc, #340]	; (8001d84 <flow_button_move+0x22c>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	4855      	ldr	r0, [pc, #340]	; (8001d88 <flow_button_move+0x230>)
 8001c34:	f7fe ff3c 	bl	8000ab0 <get_button>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d120      	bne.n	8001c80 <flow_button_move+0x128>
				{
					if(pre_floor > 1)
 8001c3e:	4b4f      	ldr	r3, [pc, #316]	; (8001d7c <flow_button_move+0x224>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	dd0f      	ble.n	8001c66 <flow_button_move+0x10e>
					{
						elevator_state = pre_floor;
 8001c46:	4b4d      	ldr	r3, [pc, #308]	; (8001d7c <flow_button_move+0x224>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <flow_button_move+0x234>)
 8001c4c:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 1;
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <flow_button_move+0x224>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <flow_button_move+0x238>)
 8001c56:	6013      	str	r3, [r2, #0]
						pre_floor = 1;
 8001c58:	4b48      	ldr	r3, [pc, #288]	; (8001d7c <flow_button_move+0x224>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE; // BACKWARD
 8001c5e:	4b46      	ldr	r3, [pc, #280]	; (8001d78 <flow_button_move+0x220>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e00c      	b.n	8001c80 <flow_button_move+0x128>
					}
					else if(pre_floor < 1)
 8001c66:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <flow_button_move+0x224>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	dc08      	bgt.n	8001c80 <flow_button_move+0x128>
					{
						elevator_state = 1;
 8001c6e:	4b47      	ldr	r3, [pc, #284]	; (8001d8c <flow_button_move+0x234>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
						pre_floor = 1;
 8001c74:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <flow_button_move+0x224>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE;
 8001c7a:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <flow_button_move+0x220>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
					}

				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 8001c80:	4a44      	ldr	r2, [pc, #272]	; (8001d94 <flow_button_move+0x23c>)
 8001c82:	2102      	movs	r1, #2
 8001c84:	4840      	ldr	r0, [pc, #256]	; (8001d88 <flow_button_move+0x230>)
 8001c86:	f7fe ff13 	bl	8000ab0 <get_button>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d127      	bne.n	8001ce0 <flow_button_move+0x188>
				{
					if(pre_floor > 2)
 8001c90:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <flow_button_move+0x224>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	dd0f      	ble.n	8001cb8 <flow_button_move+0x160>
					{
						elevator_state = pre_floor;
 8001c98:	4b38      	ldr	r3, [pc, #224]	; (8001d7c <flow_button_move+0x224>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a3b      	ldr	r2, [pc, #236]	; (8001d8c <flow_button_move+0x234>)
 8001c9e:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 2;
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <flow_button_move+0x224>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	3b02      	subs	r3, #2
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <flow_button_move+0x238>)
 8001ca8:	6013      	str	r3, [r2, #0]
						pre_floor = 2;
 8001caa:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <flow_button_move+0x224>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <flow_button_move+0x220>)
 8001cb2:	2202      	movs	r2, #2
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e013      	b.n	8001ce0 <flow_button_move+0x188>
					}
					else if(pre_floor < 2)
 8001cb8:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <flow_button_move+0x224>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	dc0f      	bgt.n	8001ce0 <flow_button_move+0x188>
					{
						elevator_state = pre_floor;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <flow_button_move+0x224>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a31      	ldr	r2, [pc, #196]	; (8001d8c <flow_button_move+0x234>)
 8001cc6:	6013      	str	r3, [r2, #0]
						floor_gap = 2 - pre_floor;
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <flow_button_move+0x224>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1c3 0302 	rsb	r3, r3, #2
 8001cd0:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <flow_button_move+0x238>)
 8001cd2:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 2;
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <flow_button_move+0x224>)
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <flow_button_move+0x220>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON3_Pin, &prev_button3_state) == BUTTON_PRESS)
 8001ce0:	4a2d      	ldr	r2, [pc, #180]	; (8001d98 <flow_button_move+0x240>)
 8001ce2:	2104      	movs	r1, #4
 8001ce4:	4828      	ldr	r0, [pc, #160]	; (8001d88 <flow_button_move+0x230>)
 8001ce6:	f7fe fee3 	bl	8000ab0 <get_button>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d127      	bne.n	8001d40 <flow_button_move+0x1e8>
				{
					if(pre_floor > 3)
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <flow_button_move+0x224>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	dd0f      	ble.n	8001d18 <flow_button_move+0x1c0>
					{
						elevator_state = pre_floor;
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <flow_button_move+0x224>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <flow_button_move+0x234>)
 8001cfe:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 3;
 8001d00:	4b1e      	ldr	r3, [pc, #120]	; (8001d7c <flow_button_move+0x224>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3b03      	subs	r3, #3
 8001d06:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <flow_button_move+0x238>)
 8001d08:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 3;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <flow_button_move+0x224>)
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <flow_button_move+0x220>)
 8001d12:	2202      	movs	r2, #2
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	e013      	b.n	8001d40 <flow_button_move+0x1e8>
					}
					else if(pre_floor < 3)
 8001d18:	4b18      	ldr	r3, [pc, #96]	; (8001d7c <flow_button_move+0x224>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	dc0f      	bgt.n	8001d40 <flow_button_move+0x1e8>
					{
						elevator_state = pre_floor;
 8001d20:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <flow_button_move+0x224>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a19      	ldr	r2, [pc, #100]	; (8001d8c <flow_button_move+0x234>)
 8001d26:	6013      	str	r3, [r2, #0]
						floor_gap = 3 - pre_floor;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <flow_button_move+0x224>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1c3 0303 	rsb	r3, r3, #3
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <flow_button_move+0x238>)
 8001d32:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 3;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <flow_button_move+0x224>)
 8001d36:	2203      	movs	r2, #3
 8001d38:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <flow_button_move+0x220>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON4_Pin, &prev_button4_state) == BUTTON_PRESS)
 8001d40:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <flow_button_move+0x244>)
 8001d42:	2108      	movs	r1, #8
 8001d44:	4810      	ldr	r0, [pc, #64]	; (8001d88 <flow_button_move+0x230>)
 8001d46:	f7fe feb3 	bl	8000ab0 <get_button>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d13b      	bne.n	8001dc8 <flow_button_move+0x270>
				{


					if(pre_floor > 4)
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <flow_button_move+0x224>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	dd23      	ble.n	8001da0 <flow_button_move+0x248>
					{
						elevator_state = pre_floor;
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <flow_button_move+0x224>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <flow_button_move+0x234>)
 8001d5e:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 4;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <flow_button_move+0x224>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3b04      	subs	r3, #4
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <flow_button_move+0x238>)
 8001d68:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 4;
 8001d6a:	4b04      	ldr	r3, [pc, #16]	; (8001d7c <flow_button_move+0x224>)
 8001d6c:	2204      	movs	r2, #4
 8001d6e:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001d70:	4b01      	ldr	r3, [pc, #4]	; (8001d78 <flow_button_move+0x220>)
 8001d72:	2202      	movs	r2, #2
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e027      	b.n	8001dc8 <flow_button_move+0x270>
 8001d78:	20000900 	.word	0x20000900
 8001d7c:	2000001c 	.word	0x2000001c
 8001d80:	40020400 	.word	0x40020400
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	20000018 	.word	0x20000018
 8001d90:	20000904 	.word	0x20000904
 8001d94:	2000000d 	.word	0x2000000d
 8001d98:	2000000e 	.word	0x2000000e
 8001d9c:	2000000f 	.word	0x2000000f
					}
					else if(pre_floor < 4)
 8001da0:	4b55      	ldr	r3, [pc, #340]	; (8001ef8 <flow_button_move+0x3a0>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	dc0f      	bgt.n	8001dc8 <flow_button_move+0x270>
					{
						elevator_state = pre_floor;
 8001da8:	4b53      	ldr	r3, [pc, #332]	; (8001ef8 <flow_button_move+0x3a0>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a53      	ldr	r2, [pc, #332]	; (8001efc <flow_button_move+0x3a4>)
 8001dae:	6013      	str	r3, [r2, #0]
						floor_gap = 4 - pre_floor;
 8001db0:	4b51      	ldr	r3, [pc, #324]	; (8001ef8 <flow_button_move+0x3a0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1c3 0304 	rsb	r3, r3, #4
 8001db8:	4a51      	ldr	r2, [pc, #324]	; (8001f00 <flow_button_move+0x3a8>)
 8001dba:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 4;
 8001dbc:	4b4e      	ldr	r3, [pc, #312]	; (8001ef8 <flow_button_move+0x3a0>)
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001dc2:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <flow_button_move+0x3ac>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON5_Pin, &prev_button5_state) == BUTTON_PRESS)
 8001dc8:	4a4f      	ldr	r2, [pc, #316]	; (8001f08 <flow_button_move+0x3b0>)
 8001dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dce:	484f      	ldr	r0, [pc, #316]	; (8001f0c <flow_button_move+0x3b4>)
 8001dd0:	f7fe fe6e 	bl	8000ab0 <get_button>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d127      	bne.n	8001e2a <flow_button_move+0x2d2>
				{


					if(pre_floor > 5)
 8001dda:	4b47      	ldr	r3, [pc, #284]	; (8001ef8 <flow_button_move+0x3a0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b05      	cmp	r3, #5
 8001de0:	dd0f      	ble.n	8001e02 <flow_button_move+0x2aa>
					{
						elevator_state = pre_floor;
 8001de2:	4b45      	ldr	r3, [pc, #276]	; (8001ef8 <flow_button_move+0x3a0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a45      	ldr	r2, [pc, #276]	; (8001efc <flow_button_move+0x3a4>)
 8001de8:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 5;
 8001dea:	4b43      	ldr	r3, [pc, #268]	; (8001ef8 <flow_button_move+0x3a0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3b05      	subs	r3, #5
 8001df0:	4a43      	ldr	r2, [pc, #268]	; (8001f00 <flow_button_move+0x3a8>)
 8001df2:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 5;
 8001df4:	4b40      	ldr	r3, [pc, #256]	; (8001ef8 <flow_button_move+0x3a0>)
 8001df6:	2205      	movs	r2, #5
 8001df8:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001dfa:	4b42      	ldr	r3, [pc, #264]	; (8001f04 <flow_button_move+0x3ac>)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e013      	b.n	8001e2a <flow_button_move+0x2d2>
					}
					else if(pre_floor < 5)
 8001e02:	4b3d      	ldr	r3, [pc, #244]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	dc0f      	bgt.n	8001e2a <flow_button_move+0x2d2>
					{
						elevator_state = pre_floor;
 8001e0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <flow_button_move+0x3a4>)
 8001e10:	6013      	str	r3, [r2, #0]
						floor_gap = 5 - pre_floor;
 8001e12:	4b39      	ldr	r3, [pc, #228]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f1c3 0305 	rsb	r3, r3, #5
 8001e1a:	4a39      	ldr	r2, [pc, #228]	; (8001f00 <flow_button_move+0x3a8>)
 8001e1c:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 5;
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e20:	2205      	movs	r2, #5
 8001e22:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001e24:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <flow_button_move+0x3ac>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON6_Pin, &prev_button6_state) == BUTTON_PRESS)
 8001e2a:	4a39      	ldr	r2, [pc, #228]	; (8001f10 <flow_button_move+0x3b8>)
 8001e2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e30:	4836      	ldr	r0, [pc, #216]	; (8001f0c <flow_button_move+0x3b4>)
 8001e32:	f7fe fe3d 	bl	8000ab0 <get_button>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d159      	bne.n	8001ef0 <flow_button_move+0x398>
				{

					if(pre_floor > 6)
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b06      	cmp	r3, #6
 8001e42:	dd0f      	ble.n	8001e64 <flow_button_move+0x30c>
					{
						elevator_state = pre_floor;
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a2c      	ldr	r2, [pc, #176]	; (8001efc <flow_button_move+0x3a4>)
 8001e4a:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 6;
 8001e4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	3b06      	subs	r3, #6
 8001e52:	4a2b      	ldr	r2, [pc, #172]	; (8001f00 <flow_button_move+0x3a8>)
 8001e54:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 6;
 8001e56:	4b28      	ldr	r3, [pc, #160]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e58:	2206      	movs	r2, #6
 8001e5a:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001e5c:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <flow_button_move+0x3ac>)
 8001e5e:	2202      	movs	r2, #2
 8001e60:	601a      	str	r2, [r3, #0]
						pre_floor = 6;
						elevator_mode_state = FORWARD_MODE; // FORWARD
					}
				}

			break;
 8001e62:	e045      	b.n	8001ef0 <flow_button_move+0x398>
					else if(pre_floor < 6)
 8001e64:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	dc41      	bgt.n	8001ef0 <flow_button_move+0x398>
						elevator_state = pre_floor;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a22      	ldr	r2, [pc, #136]	; (8001efc <flow_button_move+0x3a4>)
 8001e72:	6013      	str	r3, [r2, #0]
						floor_gap = 6 - pre_floor;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f1c3 0306 	rsb	r3, r3, #6
 8001e7c:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <flow_button_move+0x3a8>)
 8001e7e:	6013      	str	r3, [r2, #0]
						pre_floor = 6;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <flow_button_move+0x3a0>)
 8001e82:	2206      	movs	r2, #6
 8001e84:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <flow_button_move+0x3ac>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
			break;
 8001e8c:	e030      	b.n	8001ef0 <flow_button_move+0x398>
// if ==> pre_f < current_f
			case FORWARD_MODE:

			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001e8e:	4a21      	ldr	r2, [pc, #132]	; (8001f14 <flow_button_move+0x3bc>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	481e      	ldr	r0, [pc, #120]	; (8001f0c <flow_button_move+0x3b4>)
 8001e94:	f7fe fe0c 	bl	8000ab0 <get_button>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d103      	bne.n	8001ea6 <flow_button_move+0x34e>
			{
				elevator_mode_state = STANDBY_MODE;
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <flow_button_move+0x3ac>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
			{
				//led_lr_shift(); 동작을 잘 안함 확인 필요
				stepmotor_driver_step(FORWARD, floor_gap * STEPS_PER_REV);
				set_rpm(13);
			}
			break;
 8001ea4:	e025      	b.n	8001ef2 <flow_button_move+0x39a>
				stepmotor_driver_step(FORWARD, floor_gap * STEPS_PER_REV);
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <flow_button_move+0x3a8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	031b      	lsls	r3, r3, #12
 8001eac:	4619      	mov	r1, r3
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff fcf6 	bl	80018a0 <stepmotor_driver_step>
				set_rpm(13);
 8001eb4:	200d      	movs	r0, #13
 8001eb6:	f7ff fce3 	bl	8001880 <set_rpm>
			break;
 8001eba:	e01a      	b.n	8001ef2 <flow_button_move+0x39a>
// if ==> pre_f > current_f
			case BACKWARD_MODE:

				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <flow_button_move+0x3bc>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4812      	ldr	r0, [pc, #72]	; (8001f0c <flow_button_move+0x3b4>)
 8001ec2:	f7fe fdf5 	bl	8000ab0 <get_button>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <flow_button_move+0x37c>
				{
					elevator_mode_state = STANDBY_MODE;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <flow_button_move+0x3ac>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
				{
					//led_rl_shift();
					stepmotor_driver_step(BACKWARD, floor_gap * STEPS_PER_REV);
					set_rpm(13);
				}
			break;
 8001ed2:	e00e      	b.n	8001ef2 <flow_button_move+0x39a>
					stepmotor_driver_step(BACKWARD, floor_gap * STEPS_PER_REV);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <flow_button_move+0x3a8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	031b      	lsls	r3, r3, #12
 8001eda:	4619      	mov	r1, r3
 8001edc:	2002      	movs	r0, #2
 8001ede:	f7ff fcdf 	bl	80018a0 <stepmotor_driver_step>
					set_rpm(13);
 8001ee2:	200d      	movs	r0, #13
 8001ee4:	f7ff fccc 	bl	8001880 <set_rpm>
			break;
 8001ee8:	e003      	b.n	8001ef2 <flow_button_move+0x39a>

			case ARRIVAL_MODE:
				//arrival_buzzer();
				auto_door_sequence();
 8001eea:	f7ff fc6b 	bl	80017c4 <auto_door_sequence>

			break;
 8001eee:	e000      	b.n	8001ef2 <flow_button_move+0x39a>
			break;
 8001ef0:	bf00      	nop
		}
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	2000001c 	.word	0x2000001c
 8001efc:	20000018 	.word	0x20000018
 8001f00:	20000904 	.word	0x20000904
 8001f04:	20000900 	.word	0x20000900
 8001f08:	20000010 	.word	0x20000010
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	20000011 	.word	0x20000011
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4a0f      	ldr	r2, [pc, #60]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f2e:	4b0d      	ldr	r3, [pc, #52]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f36:	607b      	str	r3, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x4c>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f56:	2007      	movs	r0, #7
 8001f58:	f000 fd28 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800

08001f68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 0314 	add.w	r3, r7, #20
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a19      	ldr	r2, [pc, #100]	; (8001fec <HAL_I2C_MspInit+0x84>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12c      	bne.n	8001fe4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	4a17      	ldr	r2, [pc, #92]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9a:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001fa6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fac:	2312      	movs	r3, #18
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fb8:	2304      	movs	r3, #4
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <HAL_I2C_MspInit+0x8c>)
 8001fc4:	f000 fdc6 	bl	8002b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd8:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_I2C_MspInit+0x88>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fe4:	bf00      	nop
 8001fe6:	3728      	adds	r7, #40	; 0x28
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020400 	.word	0x40020400

08001ff8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RTC_MspInit+0x50>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800201c:	2302      	movs	r3, #2
 800201e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002020:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002024:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002026:	f107 0308 	add.w	r3, r7, #8
 800202a:	4618      	mov	r0, r3
 800202c:	f002 f844 	bl	80040b8 <HAL_RCCEx_PeriphCLKConfig>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002036:	f7ff fbbf 	bl	80017b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <HAL_RTC_MspInit+0x54>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002040:	bf00      	nop
 8002042:	3720      	adds	r7, #32
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40002800 	.word	0x40002800
 800204c:	42470e3c 	.word	0x42470e3c

08002050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
 8002066:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <HAL_TIM_Base_MspInit+0x114>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d145      	bne.n	80020fe <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	4b3c      	ldr	r3, [pc, #240]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	61bb      	str	r3, [r7, #24]
 800208c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	4b35      	ldr	r3, [pc, #212]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a34      	ldr	r2, [pc, #208]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b32      	ldr	r3, [pc, #200]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020bc:	2301      	movs	r3, #1
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4829      	ldr	r0, [pc, #164]	; (800216c <HAL_TIM_Base_MspInit+0x11c>)
 80020c8:	f000 fd44 	bl	8002b54 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2018      	movs	r0, #24
 80020d2:	f000 fc76 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020d6:	2018      	movs	r0, #24
 80020d8:	f000 fc8f 	bl	80029fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	2019      	movs	r0, #25
 80020e2:	f000 fc6e 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020e6:	2019      	movs	r0, #25
 80020e8:	f000 fc87 	bl	80029fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2100      	movs	r1, #0
 80020f0:	201b      	movs	r0, #27
 80020f2:	f000 fc66 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020f6:	201b      	movs	r0, #27
 80020f8:	f000 fc7f 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80020fc:	e02e      	b.n	800215c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002106:	d116      	bne.n	8002136 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002108:	2300      	movs	r3, #0
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	4b16      	ldr	r3, [pc, #88]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	4a15      	ldr	r2, [pc, #84]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002112:	f043 0301 	orr.w	r3, r3, #1
 8002116:	6413      	str	r3, [r2, #64]	; 0x40
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 800211a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	201c      	movs	r0, #28
 800212a:	f000 fc4a 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800212e:	201c      	movs	r0, #28
 8002130:	f000 fc63 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8002134:	e012      	b.n	800215c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_TIM_Base_MspInit+0x120>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d10d      	bne.n	800215c <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 800214a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214e:	6453      	str	r3, [r2, #68]	; 0x44
 8002150:	4b05      	ldr	r3, [pc, #20]	; (8002168 <HAL_TIM_Base_MspInit+0x118>)
 8002152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	bf00      	nop
 800215e:	3730      	adds	r7, #48	; 0x30
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40010000 	.word	0x40010000
 8002168:	40023800 	.word	0x40023800
 800216c:	40020000 	.word	0x40020000
 8002170:	40014800 	.word	0x40014800

08002174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <HAL_TIM_PWM_MspInit+0x48>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d115      	bne.n	80021b2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_TIM_PWM_MspInit+0x4c>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_TIM_PWM_MspInit+0x4c>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201d      	movs	r0, #29
 80021a8:	f000 fc0b 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021ac:	201d      	movs	r0, #29
 80021ae:	f000 fc24 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40000400 	.word	0x40000400
 80021c0:	40023800 	.word	0x40023800

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	; 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e4:	d11f      	bne.n	8002226 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b22      	ldr	r3, [pc, #136]	; (8002274 <HAL_TIM_MspPostInit+0xb0>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a21      	ldr	r2, [pc, #132]	; (8002274 <HAL_TIM_MspPostInit+0xb0>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_TIM_MspPostInit+0xb0>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002208:	2302      	movs	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002210:	2300      	movs	r3, #0
 8002212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002214:	2301      	movs	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002218:	f107 0314 	add.w	r3, r7, #20
 800221c:	4619      	mov	r1, r3
 800221e:	4816      	ldr	r0, [pc, #88]	; (8002278 <HAL_TIM_MspPostInit+0xb4>)
 8002220:	f000 fc98 	bl	8002b54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002224:	e022      	b.n	800226c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a14      	ldr	r2, [pc, #80]	; (800227c <HAL_TIM_MspPostInit+0xb8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d11d      	bne.n	800226c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_TIM_MspPostInit+0xb0>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_TIM_MspPostInit+0xb0>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6313      	str	r3, [r2, #48]	; 0x30
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_TIM_MspPostInit+0xb0>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800224c:	2340      	movs	r3, #64	; 0x40
 800224e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800225c:	2302      	movs	r3, #2
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	4806      	ldr	r0, [pc, #24]	; (8002280 <HAL_TIM_MspPostInit+0xbc>)
 8002268:	f000 fc74 	bl	8002b54 <HAL_GPIO_Init>
}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	40020400 	.word	0x40020400
 800227c:	40000400 	.word	0x40000400
 8002280:	40020000 	.word	0x40020000

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a3a      	ldr	r2, [pc, #232]	; (800238c <HAL_UART_MspInit+0x108>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d135      	bne.n	8002312 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	4b39      	ldr	r3, [pc, #228]	; (8002390 <HAL_UART_MspInit+0x10c>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	4a38      	ldr	r2, [pc, #224]	; (8002390 <HAL_UART_MspInit+0x10c>)
 80022b0:	f043 0310 	orr.w	r3, r3, #16
 80022b4:	6453      	str	r3, [r2, #68]	; 0x44
 80022b6:	4b36      	ldr	r3, [pc, #216]	; (8002390 <HAL_UART_MspInit+0x10c>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	4b32      	ldr	r3, [pc, #200]	; (8002390 <HAL_UART_MspInit+0x10c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a31      	ldr	r2, [pc, #196]	; (8002390 <HAL_UART_MspInit+0x10c>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <HAL_UART_MspInit+0x10c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ec:	2303      	movs	r3, #3
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022f0:	2307      	movs	r3, #7
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	f107 031c 	add.w	r3, r7, #28
 80022f8:	4619      	mov	r1, r3
 80022fa:	4826      	ldr	r0, [pc, #152]	; (8002394 <HAL_UART_MspInit+0x110>)
 80022fc:	f000 fc2a 	bl	8002b54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	2025      	movs	r0, #37	; 0x25
 8002306:	f000 fb5c 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800230a:	2025      	movs	r0, #37	; 0x25
 800230c:	f000 fb75 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002310:	e038      	b.n	8002384 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a20      	ldr	r2, [pc, #128]	; (8002398 <HAL_UART_MspInit+0x114>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d133      	bne.n	8002384 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800231c:	2300      	movs	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_UART_MspInit+0x10c>)
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	4a1a      	ldr	r2, [pc, #104]	; (8002390 <HAL_UART_MspInit+0x10c>)
 8002326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232a:	6413      	str	r3, [r2, #64]	; 0x40
 800232c:	4b18      	ldr	r3, [pc, #96]	; (8002390 <HAL_UART_MspInit+0x10c>)
 800232e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002338:	2300      	movs	r3, #0
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b14      	ldr	r3, [pc, #80]	; (8002390 <HAL_UART_MspInit+0x10c>)
 800233e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002340:	4a13      	ldr	r2, [pc, #76]	; (8002390 <HAL_UART_MspInit+0x10c>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6313      	str	r3, [r2, #48]	; 0x30
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0x10c>)
 800234a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002354:	230c      	movs	r3, #12
 8002356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002358:	2302      	movs	r3, #2
 800235a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002364:	2307      	movs	r3, #7
 8002366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002368:	f107 031c 	add.w	r3, r7, #28
 800236c:	4619      	mov	r1, r3
 800236e:	4809      	ldr	r0, [pc, #36]	; (8002394 <HAL_UART_MspInit+0x110>)
 8002370:	f000 fbf0 	bl	8002b54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	2026      	movs	r0, #38	; 0x26
 800237a:	f000 fb22 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800237e:	2026      	movs	r0, #38	; 0x26
 8002380:	f000 fb3b 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8002384:	bf00      	nop
 8002386:	3730      	adds	r7, #48	; 0x30
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40011000 	.word	0x40011000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000
 8002398:	40004400 	.word	0x40004400

0800239c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023a0:	e7fe      	b.n	80023a0 <NMI_Handler+0x4>

080023a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <HardFault_Handler+0x4>

080023a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <MemManage_Handler+0x4>

080023ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <BusFault_Handler+0x4>

080023b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <UsageFault_Handler+0x4>

080023ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023d6:	b480      	push	{r7}
 80023d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023e8:	f000 f9cc 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 80023ec:	f7fe fda2 	bl	8000f34 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f000 fd61 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002406:	2002      	movs	r0, #2
 8002408:	f000 fd5a 	bl	8002ec0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002416:	f002 ff13 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000738 	.word	0x20000738

08002424 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800242a:	f002 ff09 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	20000738 	.word	0x20000738

08002438 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800243c:	4803      	ldr	r0, [pc, #12]	; (800244c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800243e:	f002 feff 	bl	8005240 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002442:	4803      	ldr	r0, [pc, #12]	; (8002450 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002444:	f002 fefc 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000738 	.word	0x20000738
 8002450:	20000810 	.word	0x20000810

08002454 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM1_CC_IRQHandler+0x10>)
 800245a:	f002 fef1 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000738 	.word	0x20000738

08002468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800246c:	4802      	ldr	r0, [pc, #8]	; (8002478 <TIM2_IRQHandler+0x10>)
 800246e:	f002 fee7 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000780 	.word	0x20000780

0800247c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <TIM3_IRQHandler+0x10>)
 8002482:	f002 fedd 	bl	8005240 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200007c8 	.word	0x200007c8

08002490 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002494:	4802      	ldr	r0, [pc, #8]	; (80024a0 <USART1_IRQHandler+0x10>)
 8002496:	f003 ffdf 	bl	8006458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20000858 	.word	0x20000858

080024a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <USART2_IRQHandler+0x10>)
 80024aa:	f003 ffd5 	bl	8006458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	2000089c 	.word	0x2000089c

080024b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e00a      	b.n	80024e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ca:	f3af 8000 	nop.w
 80024ce:	4601      	mov	r1, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf0      	blt.n	80024ca <_read+0x12>
	}

return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e009      	b.n	8002518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fcff 	bl	8000f10 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf1      	blt.n	8002504 <_write+0x12>
	}
	return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_close>:

int _close(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	return -1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002552:	605a      	str	r2, [r3, #4]
	return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_isatty>:

int _isatty(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	return 1;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f004 feb4 	bl	8007330 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20020000 	.word	0x20020000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	20000910 	.word	0x20000910
 80025fc:	20000938 	.word	0x20000938

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <HAL_TIM_IC_CaptureCallback>:
int distance, distance_chk; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_TIM_IC_CaptureCallback+0x58>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d11d      	bne.n	8002672 <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d107      	bne.n	800264e <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 8002646:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 800264c:	e011      	b.n	8002672 <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10d      	bne.n	8002672 <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 8002656:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 800265c:	2100      	movs	r1, #0
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f003 f91c 	bl	800589c <HAL_TIM_ReadCapturedValue>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_TIM_IC_CaptureCallback+0x60>)
 800266a:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_TIM_IC_CaptureCallback+0x64>)
 800266e:	2201      	movs	r2, #1
 8002670:	601a      	str	r2, [r3, #0]
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40010000 	.word	0x40010000
 8002680:	2000091c 	.word	0x2000091c
 8002684:	20000914 	.word	0x20000914
 8002688:	20000918 	.word	0x20000918

0800268c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800268c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002690:	480d      	ldr	r0, [pc, #52]	; (80026c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002692:	490e      	ldr	r1, [pc, #56]	; (80026cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800269c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026a8:	4c0b      	ldr	r4, [pc, #44]	; (80026d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026b6:	f7ff ffa3 	bl	8002600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ba:	f004 fe3f 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026be:	f7fe fccd 	bl	800105c <main>
  bx  lr    
 80026c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80026d0:	08008bb8 	.word	0x08008bb8
  ldr r2, =_sbss
 80026d4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80026d8:	20000934 	.word	0x20000934

080026dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC_IRQHandler>
	...

080026e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <HAL_Init+0x40>)
 80026ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_Init+0x40>)
 80026f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_Init+0x40>)
 8002702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f94f 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	2000      	movs	r0, #0
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7ff fc00 	bl	8001f18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f967 	bl	8002a16 <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f000 f92f 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000020 	.word	0x20000020
 800277c:	20000028 	.word	0x20000028
 8002780:	20000024 	.word	0x20000024

08002784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000028 	.word	0x20000028
 80027a8:	20000920 	.word	0x20000920

080027ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000920 	.word	0x20000920

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000028 	.word	0x20000028

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff29 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff3e 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff31 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b084      	sub	sp, #16
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff feb6 	bl	80027ac <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d008      	beq.n	8002a60 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2280      	movs	r2, #128	; 0x80
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e052      	b.n	8002b06 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0216 	bic.w	r2, r2, #22
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	695a      	ldr	r2, [r3, #20]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <HAL_DMA_Abort+0x62>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0208 	bic.w	r2, r2, #8
 8002a9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0201 	bic.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab0:	e013      	b.n	8002ada <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ab2:	f7ff fe7b 	bl	80027ac <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b05      	cmp	r3, #5
 8002abe:	d90c      	bls.n	8002ada <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e015      	b.n	8002b06 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e4      	bne.n	8002ab2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aec:	223f      	movs	r2, #63	; 0x3f
 8002aee:	409a      	lsls	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2280      	movs	r2, #128	; 0x80
 8002b26:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e00c      	b.n	8002b46 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2205      	movs	r2, #5
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
	...

08002b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	e159      	b.n	8002e24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b70:	2201      	movs	r2, #1
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	f040 8148 	bne.w	8002e1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d005      	beq.n	8002ba6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d130      	bne.n	8002c08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43db      	mvns	r3, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bdc:	2201      	movs	r2, #1
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	fa02 f303 	lsl.w	r3, r2, r3
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 0201 	and.w	r2, r3, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d017      	beq.n	8002c44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	2203      	movs	r2, #3
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d123      	bne.n	8002c98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	08da      	lsrs	r2, r3, #3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3208      	adds	r2, #8
 8002c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	220f      	movs	r2, #15
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	691a      	ldr	r2, [r3, #16]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3208      	adds	r2, #8
 8002c92:	69b9      	ldr	r1, [r7, #24]
 8002c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0203 	and.w	r2, r3, #3
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80a2 	beq.w	8002e1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	4b57      	ldr	r3, [pc, #348]	; (8002e3c <HAL_GPIO_Init+0x2e8>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	4a56      	ldr	r2, [pc, #344]	; (8002e3c <HAL_GPIO_Init+0x2e8>)
 8002ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cea:	4b54      	ldr	r3, [pc, #336]	; (8002e3c <HAL_GPIO_Init+0x2e8>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf6:	4a52      	ldr	r2, [pc, #328]	; (8002e40 <HAL_GPIO_Init+0x2ec>)
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a49      	ldr	r2, [pc, #292]	; (8002e44 <HAL_GPIO_Init+0x2f0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d019      	beq.n	8002d56 <HAL_GPIO_Init+0x202>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a48      	ldr	r2, [pc, #288]	; (8002e48 <HAL_GPIO_Init+0x2f4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d013      	beq.n	8002d52 <HAL_GPIO_Init+0x1fe>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a47      	ldr	r2, [pc, #284]	; (8002e4c <HAL_GPIO_Init+0x2f8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d00d      	beq.n	8002d4e <HAL_GPIO_Init+0x1fa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a46      	ldr	r2, [pc, #280]	; (8002e50 <HAL_GPIO_Init+0x2fc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d007      	beq.n	8002d4a <HAL_GPIO_Init+0x1f6>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a45      	ldr	r2, [pc, #276]	; (8002e54 <HAL_GPIO_Init+0x300>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_GPIO_Init+0x1f2>
 8002d42:	2304      	movs	r3, #4
 8002d44:	e008      	b.n	8002d58 <HAL_GPIO_Init+0x204>
 8002d46:	2307      	movs	r3, #7
 8002d48:	e006      	b.n	8002d58 <HAL_GPIO_Init+0x204>
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e004      	b.n	8002d58 <HAL_GPIO_Init+0x204>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_Init+0x204>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <HAL_GPIO_Init+0x204>
 8002d56:	2300      	movs	r3, #0
 8002d58:	69fa      	ldr	r2, [r7, #28]
 8002d5a:	f002 0203 	and.w	r2, r2, #3
 8002d5e:	0092      	lsls	r2, r2, #2
 8002d60:	4093      	lsls	r3, r2
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d68:	4935      	ldr	r1, [pc, #212]	; (8002e40 <HAL_GPIO_Init+0x2ec>)
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	089b      	lsrs	r3, r3, #2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d76:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	43db      	mvns	r3, r3
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	4013      	ands	r3, r2
 8002d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d003      	beq.n	8002d9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d9a:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002da0:	4b2d      	ldr	r3, [pc, #180]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	43db      	mvns	r3, r3
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	4013      	ands	r3, r2
 8002dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dc4:	4a24      	ldr	r2, [pc, #144]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dca:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dee:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d003      	beq.n	8002e18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e18:	4a0f      	ldr	r2, [pc, #60]	; (8002e58 <HAL_GPIO_Init+0x304>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3301      	adds	r3, #1
 8002e22:	61fb      	str	r3, [r7, #28]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	2b0f      	cmp	r3, #15
 8002e28:	f67f aea2 	bls.w	8002b70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40013800 	.word	0x40013800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40020400 	.word	0x40020400
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40020c00 	.word	0x40020c00
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40013c00 	.word	0x40013c00

08002e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e001      	b.n	8002e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e9c:	787b      	ldrb	r3, [r7, #1]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea8:	e003      	b.n	8002eb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eaa:	887b      	ldrh	r3, [r7, #2]
 8002eac:	041a      	lsls	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	619a      	str	r2, [r3, #24]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
	...

08002ec0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	88fb      	ldrh	r3, [r7, #6]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d006      	beq.n	8002ee4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed6:	4a05      	ldr	r2, [pc, #20]	; (8002eec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fe f872 	bl	8000fc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40013c00 	.word	0x40013c00

08002ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e12b      	b.n	800315a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff f826 	bl	8001f68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f54:	f001 f888 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8002f58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4a81      	ldr	r2, [pc, #516]	; (8003164 <HAL_I2C_Init+0x274>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d807      	bhi.n	8002f74 <HAL_I2C_Init+0x84>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4a80      	ldr	r2, [pc, #512]	; (8003168 <HAL_I2C_Init+0x278>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bf94      	ite	ls
 8002f6c:	2301      	movls	r3, #1
 8002f6e:	2300      	movhi	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e006      	b.n	8002f82 <HAL_I2C_Init+0x92>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_I2C_Init+0x27c>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf94      	ite	ls
 8002f7c:	2301      	movls	r3, #1
 8002f7e:	2300      	movhi	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e0e7      	b.n	800315a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a78      	ldr	r2, [pc, #480]	; (8003170 <HAL_I2C_Init+0x280>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	0c9b      	lsrs	r3, r3, #18
 8002f94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a6a      	ldr	r2, [pc, #424]	; (8003164 <HAL_I2C_Init+0x274>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d802      	bhi.n	8002fc4 <HAL_I2C_Init+0xd4>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	e009      	b.n	8002fd8 <HAL_I2C_Init+0xe8>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fca:	fb02 f303 	mul.w	r3, r2, r3
 8002fce:	4a69      	ldr	r2, [pc, #420]	; (8003174 <HAL_I2C_Init+0x284>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	495c      	ldr	r1, [pc, #368]	; (8003164 <HAL_I2C_Init+0x274>)
 8002ff4:	428b      	cmp	r3, r1
 8002ff6:	d819      	bhi.n	800302c <HAL_I2C_Init+0x13c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e59      	subs	r1, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	fbb1 f3f3 	udiv	r3, r1, r3
 8003006:	1c59      	adds	r1, r3, #1
 8003008:	f640 73fc 	movw	r3, #4092	; 0xffc
 800300c:	400b      	ands	r3, r1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HAL_I2C_Init+0x138>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1e59      	subs	r1, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003020:	3301      	adds	r3, #1
 8003022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003026:	e051      	b.n	80030cc <HAL_I2C_Init+0x1dc>
 8003028:	2304      	movs	r3, #4
 800302a:	e04f      	b.n	80030cc <HAL_I2C_Init+0x1dc>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d111      	bne.n	8003058 <HAL_I2C_Init+0x168>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1e58      	subs	r0, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	460b      	mov	r3, r1
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	440b      	add	r3, r1
 8003042:	fbb0 f3f3 	udiv	r3, r0, r3
 8003046:	3301      	adds	r3, #1
 8003048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	e012      	b.n	800307e <HAL_I2C_Init+0x18e>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	1e58      	subs	r0, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6859      	ldr	r1, [r3, #4]
 8003060:	460b      	mov	r3, r1
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	0099      	lsls	r1, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	fbb0 f3f3 	udiv	r3, r0, r3
 800306e:	3301      	adds	r3, #1
 8003070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003074:	2b00      	cmp	r3, #0
 8003076:	bf0c      	ite	eq
 8003078:	2301      	moveq	r3, #1
 800307a:	2300      	movne	r3, #0
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <HAL_I2C_Init+0x196>
 8003082:	2301      	movs	r3, #1
 8003084:	e022      	b.n	80030cc <HAL_I2C_Init+0x1dc>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10e      	bne.n	80030ac <HAL_I2C_Init+0x1bc>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1e58      	subs	r0, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6859      	ldr	r1, [r3, #4]
 8003096:	460b      	mov	r3, r1
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	440b      	add	r3, r1
 800309c:	fbb0 f3f3 	udiv	r3, r0, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030aa:	e00f      	b.n	80030cc <HAL_I2C_Init+0x1dc>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	1e58      	subs	r0, r3, #1
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6859      	ldr	r1, [r3, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	0099      	lsls	r1, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	fbb0 f3f3 	udiv	r3, r0, r3
 80030c2:	3301      	adds	r3, #1
 80030c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	6809      	ldr	r1, [r1, #0]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	6911      	ldr	r1, [r2, #16]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68d2      	ldr	r2, [r2, #12]
 8003106:	4311      	orrs	r1, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	695a      	ldr	r2, [r3, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	000186a0 	.word	0x000186a0
 8003168:	001e847f 	.word	0x001e847f
 800316c:	003d08ff 	.word	0x003d08ff
 8003170:	431bde83 	.word	0x431bde83
 8003174:	10624dd3 	.word	0x10624dd3

08003178 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af02      	add	r7, sp, #8
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	607a      	str	r2, [r7, #4]
 8003182:	461a      	mov	r2, r3
 8003184:	460b      	mov	r3, r1
 8003186:	817b      	strh	r3, [r7, #10]
 8003188:	4613      	mov	r3, r2
 800318a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff fb0e 	bl	80027ac <HAL_GetTick>
 8003190:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b20      	cmp	r3, #32
 800319c:	f040 80e0 	bne.w	8003360 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	4970      	ldr	r1, [pc, #448]	; (800336c <HAL_I2C_Master_Transmit+0x1f4>)
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f964 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
 80031b8:	e0d3      	b.n	8003362 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_I2C_Master_Transmit+0x50>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e0cc      	b.n	8003362 <HAL_I2C_Master_Transmit+0x1ea>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d007      	beq.n	80031ee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2221      	movs	r2, #33	; 0x21
 8003202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2210      	movs	r2, #16
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	893a      	ldrh	r2, [r7, #8]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003224:	b29a      	uxth	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4a50      	ldr	r2, [pc, #320]	; (8003370 <HAL_I2C_Master_Transmit+0x1f8>)
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003230:	8979      	ldrh	r1, [r7, #10]
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	6a3a      	ldr	r2, [r7, #32]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f89c 	bl	8003374 <I2C_MasterRequestWrite>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e08d      	b.n	8003362 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800325c:	e066      	b.n	800332c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	6a39      	ldr	r1, [r7, #32]
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f9de 	bl	8003624 <I2C_WaitOnTXEFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00d      	beq.n	800328a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	2b04      	cmp	r3, #4
 8003274:	d107      	bne.n	8003286 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003284:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e06b      	b.n	8003362 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	781a      	ldrb	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b2:	3b01      	subs	r3, #1
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d11b      	bne.n	8003300 <HAL_I2C_Master_Transmit+0x188>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d017      	beq.n	8003300 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003300:	697a      	ldr	r2, [r7, #20]
 8003302:	6a39      	ldr	r1, [r7, #32]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 f9ce 	bl	80036a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	2b04      	cmp	r3, #4
 8003316:	d107      	bne.n	8003328 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003326:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01a      	b.n	8003362 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003330:	2b00      	cmp	r3, #0
 8003332:	d194      	bne.n	800325e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	e000      	b.n	8003362 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003360:	2302      	movs	r3, #2
  }
}
 8003362:	4618      	mov	r0, r3
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	00100002 	.word	0x00100002
 8003370:	ffff0000 	.word	0xffff0000

08003374 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af02      	add	r7, sp, #8
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	460b      	mov	r3, r1
 8003382:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d006      	beq.n	800339e <I2C_MasterRequestWrite+0x2a>
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d003      	beq.n	800339e <I2C_MasterRequestWrite+0x2a>
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800339c:	d108      	bne.n	80033b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e00b      	b.n	80033c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	2b12      	cmp	r3, #18
 80033b6:	d107      	bne.n	80033c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f84f 	bl	8003478 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00d      	beq.n	80033fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ee:	d103      	bne.n	80033f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e035      	b.n	8003468 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003404:	d108      	bne.n	8003418 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003406:	897b      	ldrh	r3, [r7, #10]
 8003408:	b2db      	uxtb	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	e01b      	b.n	8003450 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003418:	897b      	ldrh	r3, [r7, #10]
 800341a:	11db      	asrs	r3, r3, #7
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 0306 	and.w	r3, r3, #6
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f063 030f 	orn	r3, r3, #15
 8003428:	b2da      	uxtb	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	490e      	ldr	r1, [pc, #56]	; (8003470 <I2C_MasterRequestWrite+0xfc>)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f875 	bl	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e010      	b.n	8003468 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003446:	897b      	ldrh	r3, [r7, #10]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4907      	ldr	r1, [pc, #28]	; (8003474 <I2C_MasterRequestWrite+0x100>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f865 	bl	8003526 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	00010008 	.word	0x00010008
 8003474:	00010002 	.word	0x00010002

08003478 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003488:	e025      	b.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003490:	d021      	beq.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7ff f98b 	bl	80027ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d116      	bne.n	80034d6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e023      	b.n	800351e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d10d      	bne.n	80034fc <I2C_WaitOnFlagUntilTimeout+0x84>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	43da      	mvns	r2, r3
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	e00c      	b.n	8003516 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	43da      	mvns	r2, r3
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d0b6      	beq.n	800348a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b084      	sub	sp, #16
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003534:	e051      	b.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003544:	d123      	bne.n	800358e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003554:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800355e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2220      	movs	r2, #32
 800356a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	f043 0204 	orr.w	r2, r3, #4
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e046      	b.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d021      	beq.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7ff f909 	bl	80027ac <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e020      	b.n	800361c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10c      	bne.n	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	e00b      	b.n	8003616 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	43da      	mvns	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d18d      	bne.n	8003536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003630:	e02d      	b.n	800368e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f878 	bl	8003728 <I2C_IsAcknowledgeFailed>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e02d      	b.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d021      	beq.n	800368e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	f7ff f8af 	bl	80027ac <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	429a      	cmp	r2, r3
 8003658:	d302      	bcc.n	8003660 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d116      	bne.n	800368e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f043 0220 	orr.w	r2, r3, #32
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e007      	b.n	800369e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b80      	cmp	r3, #128	; 0x80
 800369a:	d1ca      	bne.n	8003632 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b084      	sub	sp, #16
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	60f8      	str	r0, [r7, #12]
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036b2:	e02d      	b.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 f837 	bl	8003728 <I2C_IsAcknowledgeFailed>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e02d      	b.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ca:	d021      	beq.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	f7ff f86e 	bl	80027ac <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	68ba      	ldr	r2, [r7, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d116      	bne.n	8003710 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e007      	b.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d1ca      	bne.n	80036b4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d11b      	bne.n	8003778 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003748:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	f043 0204 	orr.w	r2, r3, #4
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e267      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d075      	beq.n	8003892 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037a6:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d00c      	beq.n	80037cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037b2:	4b85      	ldr	r3, [pc, #532]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ba:	2b08      	cmp	r3, #8
 80037bc:	d112      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037ca:	d10b      	bne.n	80037e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d05b      	beq.n	8003890 <HAL_RCC_OscConfig+0x108>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d157      	bne.n	8003890 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e242      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ec:	d106      	bne.n	80037fc <HAL_RCC_OscConfig+0x74>
 80037ee:	4b76      	ldr	r3, [pc, #472]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a75      	ldr	r2, [pc, #468]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	e01d      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003804:	d10c      	bne.n	8003820 <HAL_RCC_OscConfig+0x98>
 8003806:	4b70      	ldr	r3, [pc, #448]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6f      	ldr	r2, [pc, #444]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800380c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	4b6d      	ldr	r3, [pc, #436]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a6c      	ldr	r2, [pc, #432]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	e00b      	b.n	8003838 <HAL_RCC_OscConfig+0xb0>
 8003820:	4b69      	ldr	r3, [pc, #420]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a68      	ldr	r2, [pc, #416]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b66      	ldr	r3, [pc, #408]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a65      	ldr	r2, [pc, #404]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d013      	beq.n	8003868 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe ffb4 	bl	80027ac <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003848:	f7fe ffb0 	bl	80027ac <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e207      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800385a:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0xc0>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fe ffa0 	bl	80027ac <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003870:	f7fe ff9c 	bl	80027ac <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	; 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e1f3      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003882:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f0      	bne.n	8003870 <HAL_RCC_OscConfig+0xe8>
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d063      	beq.n	8003966 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800389e:	4b4a      	ldr	r3, [pc, #296]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038aa:	4b47      	ldr	r3, [pc, #284]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038b2:	2b08      	cmp	r3, #8
 80038b4:	d11c      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b44      	ldr	r3, [pc, #272]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d116      	bne.n	80038f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038c2:	4b41      	ldr	r3, [pc, #260]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d001      	beq.n	80038da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1c7      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038da:	4b3b      	ldr	r3, [pc, #236]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4937      	ldr	r1, [pc, #220]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ee:	e03a      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d020      	beq.n	800393a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f8:	4b34      	ldr	r3, [pc, #208]	; (80039cc <HAL_RCC_OscConfig+0x244>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe ff55 	bl	80027ac <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe ff51 	bl	80027ac <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e1a8      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003924:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4925      	ldr	r1, [pc, #148]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 8003934:	4313      	orrs	r3, r2
 8003936:	600b      	str	r3, [r1, #0]
 8003938:	e015      	b.n	8003966 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800393a:	4b24      	ldr	r3, [pc, #144]	; (80039cc <HAL_RCC_OscConfig+0x244>)
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003940:	f7fe ff34 	bl	80027ac <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003948:	f7fe ff30 	bl	80027ac <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e187      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800395a:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f0      	bne.n	8003948 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d036      	beq.n	80039e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800397a:	4b15      	ldr	r3, [pc, #84]	; (80039d0 <HAL_RCC_OscConfig+0x248>)
 800397c:	2201      	movs	r2, #1
 800397e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003980:	f7fe ff14 	bl	80027ac <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003988:	f7fe ff10 	bl	80027ac <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e167      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <HAL_RCC_OscConfig+0x240>)
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f0      	beq.n	8003988 <HAL_RCC_OscConfig+0x200>
 80039a6:	e01b      	b.n	80039e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039a8:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_OscConfig+0x248>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ae:	f7fe fefd 	bl	80027ac <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	e00e      	b.n	80039d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039b6:	f7fe fef9 	bl	80027ac <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d907      	bls.n	80039d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e150      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 80039c8:	40023800 	.word	0x40023800
 80039cc:	42470000 	.word	0x42470000
 80039d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	4b88      	ldr	r3, [pc, #544]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1ea      	bne.n	80039b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 8097 	beq.w	8003b1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b81      	ldr	r3, [pc, #516]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	4b7d      	ldr	r3, [pc, #500]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a7c      	ldr	r2, [pc, #496]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b77      	ldr	r3, [pc, #476]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b74      	ldr	r3, [pc, #464]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a73      	ldr	r2, [pc, #460]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fe feb9 	bl	80027ac <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fe feb5 	bl	80027ac <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e10c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <HAL_RCC_OscConfig+0x474>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2ea>
 8003a64:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	4a63      	ldr	r2, [pc, #396]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a70:	e01c      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b05      	cmp	r3, #5
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x30c>
 8003a7a:	4b5f      	ldr	r3, [pc, #380]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a5e      	ldr	r2, [pc, #376]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	4b5c      	ldr	r3, [pc, #368]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	4a5b      	ldr	r2, [pc, #364]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6713      	str	r3, [r2, #112]	; 0x70
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0x324>
 8003a94:	4b58      	ldr	r3, [pc, #352]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	4a57      	ldr	r2, [pc, #348]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa0:	4b55      	ldr	r3, [pc, #340]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	4a54      	ldr	r2, [pc, #336]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	f023 0304 	bic.w	r3, r3, #4
 8003aaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d015      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab4:	f7fe fe7a 	bl	80027ac <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aba:	e00a      	b.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003abc:	f7fe fe76 	bl	80027ac <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e0cb      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad2:	4b49      	ldr	r3, [pc, #292]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d0ee      	beq.n	8003abc <HAL_RCC_OscConfig+0x334>
 8003ade:	e014      	b.n	8003b0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae0:	f7fe fe64 	bl	80027ac <HAL_GetTick>
 8003ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ae6:	e00a      	b.n	8003afe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ae8:	f7fe fe60 	bl	80027ac <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0b5      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afe:	4b3e      	ldr	r3, [pc, #248]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b0a:	7dfb      	ldrb	r3, [r7, #23]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d105      	bne.n	8003b1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b10:	4b39      	ldr	r3, [pc, #228]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	4a38      	ldr	r2, [pc, #224]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 80a1 	beq.w	8003c68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b26:	4b34      	ldr	r3, [pc, #208]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b08      	cmp	r3, #8
 8003b30:	d05c      	beq.n	8003bec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d141      	bne.n	8003bbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b31      	ldr	r3, [pc, #196]	; (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fe fe34 	bl	80027ac <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fe fe30 	bl	80027ac <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e087      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	491b      	ldr	r1, [pc, #108]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7fe fe09 	bl	80027ac <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7fe fe05 	bl	80027ac <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e05c      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d0f0      	beq.n	8003b9e <HAL_RCC_OscConfig+0x416>
 8003bbc:	e054      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x478>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fdf2 	bl	80027ac <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bcc:	f7fe fdee 	bl	80027ac <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e045      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_OscConfig+0x470>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1f0      	bne.n	8003bcc <HAL_RCC_OscConfig+0x444>
 8003bea:	e03d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d107      	bne.n	8003c04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e038      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c04:	4b1b      	ldr	r3, [pc, #108]	; (8003c74 <HAL_RCC_OscConfig+0x4ec>)
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d028      	beq.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d121      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d11a      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c34:	4013      	ands	r3, r2
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d111      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800

08003c78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0cc      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b68      	ldr	r3, [pc, #416]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d90c      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b65      	ldr	r3, [pc, #404]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b63      	ldr	r3, [pc, #396]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0b8      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d020      	beq.n	8003d02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	4a58      	ldr	r2, [pc, #352]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d005      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce4:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	4a52      	ldr	r2, [pc, #328]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf0:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	494d      	ldr	r1, [pc, #308]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d044      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d16:	4b47      	ldr	r3, [pc, #284]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d119      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e07f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d003      	beq.n	8003d36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d32:	2b03      	cmp	r3, #3
 8003d34:	d107      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d36:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d109      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e06f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d46:	4b3b      	ldr	r3, [pc, #236]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d101      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e067      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 0203 	bic.w	r2, r3, #3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4934      	ldr	r1, [pc, #208]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d68:	f7fe fd20 	bl	80027ac <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d70:	f7fe fd1c 	bl	80027ac <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e04f      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d86:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 020c 	and.w	r2, r3, #12
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d1eb      	bne.n	8003d70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d20c      	bcs.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b22      	ldr	r3, [pc, #136]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <HAL_RCC_ClockConfig+0x1b8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e032      	b.n	8003e26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dcc:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4916      	ldr	r1, [pc, #88]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0308 	and.w	r3, r3, #8
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	490e      	ldr	r1, [pc, #56]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dfe:	f000 f821 	bl	8003e44 <HAL_RCC_GetSysClockFreq>
 8003e02:	4602      	mov	r2, r0
 8003e04:	4b0b      	ldr	r3, [pc, #44]	; (8003e34 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	091b      	lsrs	r3, r3, #4
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	490a      	ldr	r1, [pc, #40]	; (8003e38 <HAL_RCC_ClockConfig+0x1c0>)
 8003e10:	5ccb      	ldrb	r3, [r1, r3]
 8003e12:	fa22 f303 	lsr.w	r3, r2, r3
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1c4>)
 8003e18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e1a:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_ClockConfig+0x1c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fe fc80 	bl	8002724 <HAL_InitTick>

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023c00 	.word	0x40023c00
 8003e34:	40023800 	.word	0x40023800
 8003e38:	080089f4 	.word	0x080089f4
 8003e3c:	20000020 	.word	0x20000020
 8003e40:	20000024 	.word	0x20000024

08003e44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e48:	b094      	sub	sp, #80	; 0x50
 8003e4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e50:	2300      	movs	r3, #0
 8003e52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e54:	2300      	movs	r3, #0
 8003e56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e5c:	4b79      	ldr	r3, [pc, #484]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d00d      	beq.n	8003e84 <HAL_RCC_GetSysClockFreq+0x40>
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	f200 80e1 	bhi.w	8004030 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x34>
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003e76:	e0db      	b.n	8004030 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e78:	4b73      	ldr	r3, [pc, #460]	; (8004048 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e7a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003e7c:	e0db      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e7e:	4b73      	ldr	r3, [pc, #460]	; (800404c <HAL_RCC_GetSysClockFreq+0x208>)
 8003e80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e82:	e0d8      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e84:	4b6f      	ldr	r3, [pc, #444]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e8c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e8e:	4b6d      	ldr	r3, [pc, #436]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d063      	beq.n	8003f62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e9a:	4b6a      	ldr	r3, [pc, #424]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	099b      	lsrs	r3, r3, #6
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ea4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30
 8003eae:	2300      	movs	r3, #0
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8003eb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	462b      	mov	r3, r5
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	0159      	lsls	r1, r3, #5
 8003ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec8:	0150      	lsls	r0, r2, #5
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4621      	mov	r1, r4
 8003ed0:	1a51      	subs	r1, r2, r1
 8003ed2:	6139      	str	r1, [r7, #16]
 8003ed4:	4629      	mov	r1, r5
 8003ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ee8:	4659      	mov	r1, fp
 8003eea:	018b      	lsls	r3, r1, #6
 8003eec:	4651      	mov	r1, sl
 8003eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ef2:	4651      	mov	r1, sl
 8003ef4:	018a      	lsls	r2, r1, #6
 8003ef6:	4651      	mov	r1, sl
 8003ef8:	ebb2 0801 	subs.w	r8, r2, r1
 8003efc:	4659      	mov	r1, fp
 8003efe:	eb63 0901 	sbc.w	r9, r3, r1
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	eb18 0303 	adds.w	r3, r8, r3
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	462b      	mov	r3, r5
 8003f24:	eb49 0303 	adc.w	r3, r9, r3
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f36:	4629      	mov	r1, r5
 8003f38:	024b      	lsls	r3, r1, #9
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f40:	4621      	mov	r1, r4
 8003f42:	024a      	lsls	r2, r1, #9
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f54:	f7fc f994 	bl	8000280 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f60:	e058      	b.n	8004014 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f62:	4b38      	ldr	r3, [pc, #224]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	2200      	movs	r2, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f72:	623b      	str	r3, [r7, #32]
 8003f74:	2300      	movs	r3, #0
 8003f76:	627b      	str	r3, [r7, #36]	; 0x24
 8003f78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	464b      	mov	r3, r9
 8003f80:	f04f 0000 	mov.w	r0, #0
 8003f84:	f04f 0100 	mov.w	r1, #0
 8003f88:	0159      	lsls	r1, r3, #5
 8003f8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f8e:	0150      	lsls	r0, r2, #5
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4641      	mov	r1, r8
 8003f96:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fb4:	ebb2 040a 	subs.w	r4, r2, sl
 8003fb8:	eb63 050b 	sbc.w	r5, r3, fp
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	00eb      	lsls	r3, r5, #3
 8003fc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003fca:	00e2      	lsls	r2, r4, #3
 8003fcc:	4614      	mov	r4, r2
 8003fce:	461d      	mov	r5, r3
 8003fd0:	4643      	mov	r3, r8
 8003fd2:	18e3      	adds	r3, r4, r3
 8003fd4:	603b      	str	r3, [r7, #0]
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	eb45 0303 	adc.w	r3, r5, r3
 8003fdc:	607b      	str	r3, [r7, #4]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003fea:	4629      	mov	r1, r5
 8003fec:	028b      	lsls	r3, r1, #10
 8003fee:	4621      	mov	r1, r4
 8003ff0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	028a      	lsls	r2, r1, #10
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ffe:	2200      	movs	r2, #0
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	61fa      	str	r2, [r7, #28]
 8004004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004008:	f7fc f93a 	bl	8000280 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4613      	mov	r3, r2
 8004012:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004014:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <HAL_RCC_GetSysClockFreq+0x200>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0c1b      	lsrs	r3, r3, #16
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	3301      	adds	r3, #1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004024:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800402e:	e002      	b.n	8004036 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCC_GetSysClockFreq+0x204>)
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004034:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004038:	4618      	mov	r0, r3
 800403a:	3750      	adds	r7, #80	; 0x50
 800403c:	46bd      	mov	sp, r7
 800403e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004042:	bf00      	nop
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200

08004050 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <HAL_RCC_GetHCLKFreq+0x14>)
 8004056:	681b      	ldr	r3, [r3, #0]
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	20000020 	.word	0x20000020

08004068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800406c:	f7ff fff0 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004070:	4602      	mov	r2, r0
 8004072:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	0a9b      	lsrs	r3, r3, #10
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	4903      	ldr	r1, [pc, #12]	; (800408c <HAL_RCC_GetPCLK1Freq+0x24>)
 800407e:	5ccb      	ldrb	r3, [r1, r3]
 8004080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004084:	4618      	mov	r0, r3
 8004086:	bd80      	pop	{r7, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	08008a04 	.word	0x08008a04

08004090 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004094:	f7ff ffdc 	bl	8004050 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0b5b      	lsrs	r3, r3, #13
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	; (80040b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08008a04 	.word	0x08008a04

080040b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d038      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040e0:	4b68      	ldr	r3, [pc, #416]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80040e6:	f7fe fb61 	bl	80027ac <HAL_GetTick>
 80040ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80040ee:	f7fe fb5d 	bl	80027ac <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e0bd      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004100:	4b61      	ldr	r3, [pc, #388]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	071b      	lsls	r3, r3, #28
 800411e:	495a      	ldr	r1, [pc, #360]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004126:	4b57      	ldr	r3, [pc, #348]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800412c:	f7fe fb3e 	bl	80027ac <HAL_GetTick>
 8004130:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004134:	f7fe fb3a 	bl	80027ac <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e09a      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004146:	4b50      	ldr	r3, [pc, #320]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8083 	beq.w	8004266 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	4b48      	ldr	r3, [pc, #288]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a47      	ldr	r2, [pc, #284]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
 8004170:	4b45      	ldr	r3, [pc, #276]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800417c:	4b43      	ldr	r3, [pc, #268]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a42      	ldr	r2, [pc, #264]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004188:	f7fe fb10 	bl	80027ac <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fe fb0c 	bl	80027ac <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e06c      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80041a2:	4b3a      	ldr	r3, [pc, #232]	; (800428c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041ae:	4b36      	ldr	r3, [pc, #216]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d028      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041cc:	4b2e      	ldr	r3, [pc, #184]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041d4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041d6:	4b2e      	ldr	r3, [pc, #184]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041dc:	4b2c      	ldr	r3, [pc, #176]	; (8004290 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80041e2:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041e8:	4b27      	ldr	r3, [pc, #156]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d114      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fe fada 	bl	80027ac <HAL_GetTick>
 80041f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fa:	e00a      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041fc:	f7fe fad6 	bl	80027ac <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	; 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e034      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004212:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0ee      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800422a:	d10d      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800422c:	4b16      	ldr	r3, [pc, #88]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800423c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004240:	4911      	ldr	r1, [pc, #68]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004242:	4313      	orrs	r3, r2
 8004244:	608b      	str	r3, [r1, #8]
 8004246:	e005      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004248:	4b0f      	ldr	r3, [pc, #60]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004252:	6093      	str	r3, [r2, #8]
 8004254:	4b0c      	ldr	r3, [pc, #48]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004260:	4909      	ldr	r1, [pc, #36]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	4313      	orrs	r3, r2
 8004264:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0308 	and.w	r3, r3, #8
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	7d1a      	ldrb	r2, [r3, #20]
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004278:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	42470068 	.word	0x42470068
 8004288:	40023800 	.word	0x40023800
 800428c:	40007000 	.word	0x40007000
 8004290:	42470e40 	.word	0x42470e40
 8004294:	424711e0 	.word	0x424711e0

08004298 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e066      	b.n	800437c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	7f5b      	ldrb	r3, [r3, #29]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fe9a 	bl	8001ff8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	22ca      	movs	r2, #202	; 0xca
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2253      	movs	r2, #83	; 0x53
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 fa45 	bl	800476a <RTC_EnterInitMode>
 80042e0:	4603      	mov	r3, r0
 80042e2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80042e4:	7bfb      	ldrb	r3, [r7, #15]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12c      	bne.n	8004344 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	6812      	ldr	r2, [r2, #0]
 80042f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80042f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042fc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	431a      	orrs	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68d2      	ldr	r2, [r2, #12]
 8004324:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6919      	ldr	r1, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	041a      	lsls	r2, r3, #16
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fa4c 	bl	80047d8 <RTC_ExitInitMode>
 8004340:	4603      	mov	r3, r0
 8004342:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699a      	ldr	r2, [r3, #24]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	22ff      	movs	r2, #255	; 0xff
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800437a:	7bfb      	ldrb	r3, [r7, #15]
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004384:	b590      	push	{r4, r7, lr}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	7f1b      	ldrb	r3, [r3, #28]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_RTC_SetTime+0x1c>
 800439c:	2302      	movs	r3, #2
 800439e:	e087      	b.n	80044b0 <HAL_RTC_SetTime+0x12c>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2202      	movs	r2, #2
 80043aa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d126      	bne.n	8004400 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d102      	bne.n	80043c6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fa29 	bl	8004822 <RTC_ByteToBcd2>
 80043d0:	4603      	mov	r3, r0
 80043d2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 fa22 	bl	8004822 <RTC_ByteToBcd2>
 80043de:	4603      	mov	r3, r0
 80043e0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043e2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	789b      	ldrb	r3, [r3, #2]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fa1a 	bl	8004822 <RTC_ByteToBcd2>
 80043ee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043f0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	78db      	ldrb	r3, [r3, #3]
 80043f8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80043fa:	4313      	orrs	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e018      	b.n	8004432 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d102      	bne.n	8004414 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004420:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004426:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	78db      	ldrb	r3, [r3, #3]
 800442c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	22ca      	movs	r2, #202	; 0xca
 8004438:	625a      	str	r2, [r3, #36]	; 0x24
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2253      	movs	r2, #83	; 0x53
 8004440:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 f991 	bl	800476a <RTC_EnterInitMode>
 8004448:	4603      	mov	r3, r0
 800444a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d120      	bne.n	8004494 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800445c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004470:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6899      	ldr	r1, [r3, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	431a      	orrs	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f9a4 	bl	80047d8 <RTC_ExitInitMode>
 8004490:	4603      	mov	r3, r0
 8004492:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004494:	7cfb      	ldrb	r3, [r7, #19]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d102      	bne.n	80044a0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2201      	movs	r2, #1
 800449e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	22ff      	movs	r2, #255	; 0xff
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	771a      	strb	r2, [r3, #28]

  return status;
 80044ae:	7cfb      	ldrb	r3, [r7, #19]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	371c      	adds	r7, #28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd90      	pop	{r4, r7, pc}

080044b8 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044ea:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044ee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	0c1b      	lsrs	r3, r3, #16
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	0d9b      	lsrs	r3, r3, #22
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 0301 	and.w	r3, r3, #1
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11a      	bne.n	800456a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f98f 	bl	800485c <RTC_Bcd2ToByte>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f986 	bl	800485c <RTC_Bcd2ToByte>
 8004550:	4603      	mov	r3, r0
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	789b      	ldrb	r3, [r3, #2]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f97d 	bl	800485c <RTC_Bcd2ToByte>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004574:	b590      	push	{r4, r7, lr}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	60b9      	str	r1, [r7, #8]
 800457e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	7f1b      	ldrb	r3, [r3, #28]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_RTC_SetDate+0x1c>
 800458c:	2302      	movs	r3, #2
 800458e:	e071      	b.n	8004674 <HAL_RTC_SetDate+0x100>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2202      	movs	r2, #2
 800459a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10e      	bne.n	80045c0 <HAL_RTC_SetDate+0x4c>
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	785b      	ldrb	r3, [r3, #1]
 80045a6:	f003 0310 	and.w	r3, r3, #16
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d008      	beq.n	80045c0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	785b      	ldrb	r3, [r3, #1]
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	330a      	adds	r3, #10
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d11c      	bne.n	8004600 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	78db      	ldrb	r3, [r3, #3]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f929 	bl	8004822 <RTC_ByteToBcd2>
 80045d0:	4603      	mov	r3, r0
 80045d2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	785b      	ldrb	r3, [r3, #1]
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f922 	bl	8004822 <RTC_ByteToBcd2>
 80045de:	4603      	mov	r3, r0
 80045e0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045e2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	789b      	ldrb	r3, [r3, #2]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f91a 	bl	8004822 <RTC_ByteToBcd2>
 80045ee:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80045f0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80045fa:	4313      	orrs	r3, r2
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e00e      	b.n	800461e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	78db      	ldrb	r3, [r3, #3]
 8004604:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	785b      	ldrb	r3, [r3, #1]
 800460a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800460c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004612:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800461a:	4313      	orrs	r3, r2
 800461c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	22ca      	movs	r2, #202	; 0xca
 8004624:	625a      	str	r2, [r3, #36]	; 0x24
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2253      	movs	r2, #83	; 0x53
 800462c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f89b 	bl	800476a <RTC_EnterInitMode>
 8004634:	4603      	mov	r3, r0
 8004636:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004638:	7cfb      	ldrb	r3, [r7, #19]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10c      	bne.n	8004658 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004648:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800464c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f8c2 	bl	80047d8 <RTC_ExitInitMode>
 8004654:	4603      	mov	r3, r0
 8004656:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004658:	7cfb      	ldrb	r3, [r7, #19]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	771a      	strb	r2, [r3, #28]

  return status;
 8004672:	7cfb      	ldrb	r3, [r7, #19]
}
 8004674:	4618      	mov	r0, r3
 8004676:	371c      	adds	r7, #28
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}

0800467c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004696:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800469a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	0c1b      	lsrs	r3, r3, #16
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 031f 	and.w	r3, r3, #31
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	0b5b      	lsrs	r3, r3, #13
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11a      	bne.n	8004710 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	78db      	ldrb	r3, [r3, #3]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 f8bc 	bl	800485c <RTC_Bcd2ToByte>
 80046e4:	4603      	mov	r3, r0
 80046e6:	461a      	mov	r2, r3
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	785b      	ldrb	r3, [r3, #1]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 f8b3 	bl	800485c <RTC_Bcd2ToByte>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	789b      	ldrb	r3, [r3, #2]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f8aa 	bl	800485c <RTC_Bcd2ToByte>
 8004708:	4603      	mov	r3, r0
 800470a:	461a      	mov	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3718      	adds	r7, #24
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004734:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004736:	f7fe f839 	bl	80027ac <HAL_GetTick>
 800473a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800473c:	e009      	b.n	8004752 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800473e:	f7fe f835 	bl	80027ac <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800474c:	d901      	bls.n	8004752 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e007      	b.n	8004762 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d0ee      	beq.n	800473e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b084      	sub	sp, #16
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004784:	2b00      	cmp	r3, #0
 8004786:	d122      	bne.n	80047ce <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004796:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004798:	f7fe f808 	bl	80027ac <HAL_GetTick>
 800479c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800479e:	e00c      	b.n	80047ba <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047a0:	f7fe f804 	bl	80027ac <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ae:	d904      	bls.n	80047ba <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2204      	movs	r2, #4
 80047b4:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d102      	bne.n	80047ce <RTC_EnterInitMode+0x64>
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d1e8      	bne.n	80047a0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ff89 	bl	800471a <HAL_RTC_WaitForSynchro>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d004      	beq.n	8004818 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2204      	movs	r2, #4
 8004812:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	4603      	mov	r3, r0
 800482a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004830:	e005      	b.n	800483e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3301      	adds	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	3b0a      	subs	r3, #10
 800483c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	2b09      	cmp	r3, #9
 8004842:	d8f6      	bhi.n	8004832 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	b2da      	uxtb	r2, r3
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	4313      	orrs	r3, r2
 800484e:	b2db      	uxtb	r3, r3
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
 8004872:	0092      	lsls	r2, r2, #2
 8004874:	4413      	add	r3, r2
 8004876:	005b      	lsls	r3, r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	b2da      	uxtb	r2, r3
 8004882:	7bfb      	ldrb	r3, [r7, #15]
 8004884:	4413      	add	r3, r2
 8004886:	b2db      	uxtb	r3, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e041      	b.n	800492a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fd fbc8 	bl	8002050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f001 f844 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004928:	2300      	movs	r3, #0
}
 800492a:	4618      	mov	r0, r3
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
	...

08004934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004934:	b480      	push	{r7}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	d001      	beq.n	800494c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e044      	b.n	80049d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0201 	orr.w	r2, r2, #1
 8004962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d018      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x6c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d013      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1a      	ldr	r2, [pc, #104]	; (80049e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00e      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a19      	ldr	r2, [pc, #100]	; (80049ec <HAL_TIM_Base_Start_IT+0xb8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x6c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a17      	ldr	r2, [pc, #92]	; (80049f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d004      	beq.n	80049a0 <HAL_TIM_Base_Start_IT+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d111      	bne.n	80049c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d010      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f042 0201 	orr.w	r2, r2, #1
 80049c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c2:	e007      	b.n	80049d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40014000 	.word	0x40014000

080049f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e041      	b.n	8004a8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d106      	bne.n	8004a24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fba8 	bl	8002174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3304      	adds	r3, #4
 8004a34:	4619      	mov	r1, r3
 8004a36:	4610      	mov	r0, r2
 8004a38:	f000 ff92 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d109      	bne.n	8004abc <HAL_TIM_PWM_Start+0x24>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e022      	b.n	8004b02 <HAL_TIM_PWM_Start+0x6a>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d109      	bne.n	8004ad6 <HAL_TIM_PWM_Start+0x3e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	e015      	b.n	8004b02 <HAL_TIM_PWM_Start+0x6a>
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d109      	bne.n	8004af0 <HAL_TIM_PWM_Start+0x58>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e008      	b.n	8004b02 <HAL_TIM_PWM_Start+0x6a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	bf14      	ite	ne
 8004afc:	2301      	movne	r3, #1
 8004afe:	2300      	moveq	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e068      	b.n	8004bdc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_PWM_Start+0x82>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b18:	e013      	b.n	8004b42 <HAL_TIM_PWM_Start+0xaa>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0x92>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	e00b      	b.n	8004b42 <HAL_TIM_PWM_Start+0xaa>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xa2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b38:	e003      	b.n	8004b42 <HAL_TIM_PWM_Start+0xaa>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2201      	movs	r2, #1
 8004b48:	6839      	ldr	r1, [r7, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 facc 	bl	80060e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a23      	ldr	r2, [pc, #140]	; (8004be4 <HAL_TIM_PWM_Start+0x14c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d107      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a1d      	ldr	r2, [pc, #116]	; (8004be4 <HAL_TIM_PWM_Start+0x14c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d018      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7c:	d013      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a19      	ldr	r2, [pc, #100]	; (8004be8 <HAL_TIM_PWM_Start+0x150>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d00e      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a17      	ldr	r2, [pc, #92]	; (8004bec <HAL_TIM_PWM_Start+0x154>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d009      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a16      	ldr	r2, [pc, #88]	; (8004bf0 <HAL_TIM_PWM_Start+0x158>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d004      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x10e>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a14      	ldr	r2, [pc, #80]	; (8004bf4 <HAL_TIM_PWM_Start+0x15c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d111      	bne.n	8004bca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d010      	beq.n	8004bda <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bc8:	e007      	b.n	8004bda <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f042 0201 	orr.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40010000 	.word	0x40010000
 8004be8:	40000400 	.word	0x40000400
 8004bec:	40000800 	.word	0x40000800
 8004bf0:	40000c00 	.word	0x40000c00
 8004bf4:	40014000 	.word	0x40014000

08004bf8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d109      	bne.n	8004c20 <HAL_TIM_PWM_Start_IT+0x28>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	bf14      	ite	ne
 8004c18:	2301      	movne	r3, #1
 8004c1a:	2300      	moveq	r3, #0
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	e022      	b.n	8004c66 <HAL_TIM_PWM_Start_IT+0x6e>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d109      	bne.n	8004c3a <HAL_TIM_PWM_Start_IT+0x42>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e015      	b.n	8004c66 <HAL_TIM_PWM_Start_IT+0x6e>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d109      	bne.n	8004c54 <HAL_TIM_PWM_Start_IT+0x5c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e008      	b.n	8004c66 <HAL_TIM_PWM_Start_IT+0x6e>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	bf14      	ite	ne
 8004c60:	2301      	movne	r3, #1
 8004c62:	2300      	moveq	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0b3      	b.n	8004dd6 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d104      	bne.n	8004c7e <HAL_TIM_PWM_Start_IT+0x86>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c7c:	e013      	b.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xae>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start_IT+0x96>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c8c:	e00b      	b.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xae>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start_IT+0xa6>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c9c:	e003      	b.n	8004ca6 <HAL_TIM_PWM_Start_IT+0xae>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b0c      	cmp	r3, #12
 8004caa:	d841      	bhi.n	8004d30 <HAL_TIM_PWM_Start_IT+0x138>
 8004cac:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb2:	bf00      	nop
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004d31 	.word	0x08004d31
 8004cbc:	08004d31 	.word	0x08004d31
 8004cc0:	08004d31 	.word	0x08004d31
 8004cc4:	08004cfb 	.word	0x08004cfb
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004d31 	.word	0x08004d31
 8004cd4:	08004d0d 	.word	0x08004d0d
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004d1f 	.word	0x08004d1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0202 	orr.w	r2, r2, #2
 8004cf6:	60da      	str	r2, [r3, #12]
      break;
 8004cf8:	e01d      	b.n	8004d36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68da      	ldr	r2, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0204 	orr.w	r2, r2, #4
 8004d08:	60da      	str	r2, [r3, #12]
      break;
 8004d0a:	e014      	b.n	8004d36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	60da      	str	r2, [r3, #12]
      break;
 8004d1c:	e00b      	b.n	8004d36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68da      	ldr	r2, [r3, #12]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0210 	orr.w	r2, r2, #16
 8004d2c:	60da      	str	r2, [r3, #12]
      break;
 8004d2e:	e002      	b.n	8004d36 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      break;
 8004d34:	bf00      	nop
  }

  if (status == HAL_OK)
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d14b      	bne.n	8004dd4 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2201      	movs	r2, #1
 8004d42:	6839      	ldr	r1, [r7, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f001 f9cf 	bl	80060e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a24      	ldr	r2, [pc, #144]	; (8004de0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d107      	bne.n	8004d64 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d018      	beq.n	8004da0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d013      	beq.n	8004da0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a19      	ldr	r2, [pc, #100]	; (8004de4 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a18      	ldr	r2, [pc, #96]	; (8004de8 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a16      	ldr	r2, [pc, #88]	; (8004dec <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d004      	beq.n	8004da0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a15      	ldr	r2, [pc, #84]	; (8004df0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d111      	bne.n	8004dc4 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f003 0307 	and.w	r3, r3, #7
 8004daa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d010      	beq.n	8004dd4 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0201 	orr.w	r2, r2, #1
 8004dc0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc2:	e007      	b.n	8004dd4 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40014000 	.word	0x40014000

08004df4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b0c      	cmp	r3, #12
 8004e06:	d841      	bhi.n	8004e8c <HAL_TIM_PWM_Stop_IT+0x98>
 8004e08:	a201      	add	r2, pc, #4	; (adr r2, 8004e10 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0e:	bf00      	nop
 8004e10:	08004e45 	.word	0x08004e45
 8004e14:	08004e8d 	.word	0x08004e8d
 8004e18:	08004e8d 	.word	0x08004e8d
 8004e1c:	08004e8d 	.word	0x08004e8d
 8004e20:	08004e57 	.word	0x08004e57
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e8d 	.word	0x08004e8d
 8004e2c:	08004e8d 	.word	0x08004e8d
 8004e30:	08004e69 	.word	0x08004e69
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e8d 	.word	0x08004e8d
 8004e40:	08004e7b 	.word	0x08004e7b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0202 	bic.w	r2, r2, #2
 8004e52:	60da      	str	r2, [r3, #12]
      break;
 8004e54:	e01d      	b.n	8004e92 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68da      	ldr	r2, [r3, #12]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0204 	bic.w	r2, r2, #4
 8004e64:	60da      	str	r2, [r3, #12]
      break;
 8004e66:	e014      	b.n	8004e92 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	68da      	ldr	r2, [r3, #12]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f022 0208 	bic.w	r2, r2, #8
 8004e76:	60da      	str	r2, [r3, #12]
      break;
 8004e78:	e00b      	b.n	8004e92 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 0210 	bic.w	r2, r2, #16
 8004e88:	60da      	str	r2, [r3, #12]
      break;
 8004e8a:	e002      	b.n	8004e92 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e90:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e92:	7bfb      	ldrb	r3, [r7, #15]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d157      	bne.n	8004f48 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f921 	bl	80060e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a2a      	ldr	r2, [pc, #168]	; (8004f54 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d117      	bne.n	8004ee0 <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6a1a      	ldr	r2, [r3, #32]
 8004eb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eba:	4013      	ands	r3, r2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <HAL_TIM_PWM_Stop_IT+0xec>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	f240 4344 	movw	r3, #1092	; 0x444
 8004eca:	4013      	ands	r3, r2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d107      	bne.n	8004ee0 <HAL_TIM_PWM_Stop_IT+0xec>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6a1a      	ldr	r2, [r3, #32]
 8004ee6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10f      	bne.n	8004f10 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6a1a      	ldr	r2, [r3, #32]
 8004ef6:	f240 4344 	movw	r3, #1092	; 0x444
 8004efa:	4013      	ands	r3, r2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_PWM_Stop_IT+0x11c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d104      	bne.n	8004f20 <HAL_TIM_PWM_Stop_IT+0x12c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1e:	e013      	b.n	8004f48 <HAL_TIM_PWM_Stop_IT+0x154>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d104      	bne.n	8004f30 <HAL_TIM_PWM_Stop_IT+0x13c>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2e:	e00b      	b.n	8004f48 <HAL_TIM_PWM_Stop_IT+0x154>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d104      	bne.n	8004f40 <HAL_TIM_PWM_Stop_IT+0x14c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f3e:	e003      	b.n	8004f48 <HAL_TIM_PWM_Stop_IT+0x154>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000

08004f58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e041      	b.n	8004fee <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f839 	bl	8004ff6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681a      	ldr	r2, [r3, #0]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f000 fce2 	bl	8005960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d104      	bne.n	800502a <HAL_TIM_IC_Start_IT+0x1e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005026:	b2db      	uxtb	r3, r3
 8005028:	e013      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x46>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d104      	bne.n	800503a <HAL_TIM_IC_Start_IT+0x2e>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005036:	b2db      	uxtb	r3, r3
 8005038:	e00b      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x46>
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d104      	bne.n	800504a <HAL_TIM_IC_Start_IT+0x3e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005046:	b2db      	uxtb	r3, r3
 8005048:	e003      	b.n	8005052 <HAL_TIM_IC_Start_IT+0x46>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005050:	b2db      	uxtb	r3, r3
 8005052:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <HAL_TIM_IC_Start_IT+0x58>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005060:	b2db      	uxtb	r3, r3
 8005062:	e013      	b.n	800508c <HAL_TIM_IC_Start_IT+0x80>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b04      	cmp	r3, #4
 8005068:	d104      	bne.n	8005074 <HAL_TIM_IC_Start_IT+0x68>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005070:	b2db      	uxtb	r3, r3
 8005072:	e00b      	b.n	800508c <HAL_TIM_IC_Start_IT+0x80>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b08      	cmp	r3, #8
 8005078:	d104      	bne.n	8005084 <HAL_TIM_IC_Start_IT+0x78>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e003      	b.n	800508c <HAL_TIM_IC_Start_IT+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800508a:	b2db      	uxtb	r3, r3
 800508c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800508e:	7bbb      	ldrb	r3, [r7, #14]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d102      	bne.n	800509a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005094:	7b7b      	ldrb	r3, [r7, #13]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e0c2      	b.n	8005224 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d104      	bne.n	80050ae <HAL_TIM_IC_Start_IT+0xa2>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2202      	movs	r2, #2
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ac:	e013      	b.n	80050d6 <HAL_TIM_IC_Start_IT+0xca>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d104      	bne.n	80050be <HAL_TIM_IC_Start_IT+0xb2>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050bc:	e00b      	b.n	80050d6 <HAL_TIM_IC_Start_IT+0xca>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d104      	bne.n	80050ce <HAL_TIM_IC_Start_IT+0xc2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050cc:	e003      	b.n	80050d6 <HAL_TIM_IC_Start_IT+0xca>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_IC_Start_IT+0xda>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e4:	e013      	b.n	800510e <HAL_TIM_IC_Start_IT+0x102>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d104      	bne.n	80050f6 <HAL_TIM_IC_Start_IT+0xea>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f4:	e00b      	b.n	800510e <HAL_TIM_IC_Start_IT+0x102>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d104      	bne.n	8005106 <HAL_TIM_IC_Start_IT+0xfa>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005104:	e003      	b.n	800510e <HAL_TIM_IC_Start_IT+0x102>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d841      	bhi.n	8005198 <HAL_TIM_IC_Start_IT+0x18c>
 8005114:	a201      	add	r2, pc, #4	; (adr r2, 800511c <HAL_TIM_IC_Start_IT+0x110>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	08005151 	.word	0x08005151
 8005120:	08005199 	.word	0x08005199
 8005124:	08005199 	.word	0x08005199
 8005128:	08005199 	.word	0x08005199
 800512c:	08005163 	.word	0x08005163
 8005130:	08005199 	.word	0x08005199
 8005134:	08005199 	.word	0x08005199
 8005138:	08005199 	.word	0x08005199
 800513c:	08005175 	.word	0x08005175
 8005140:	08005199 	.word	0x08005199
 8005144:	08005199 	.word	0x08005199
 8005148:	08005199 	.word	0x08005199
 800514c:	08005187 	.word	0x08005187
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68da      	ldr	r2, [r3, #12]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0202 	orr.w	r2, r2, #2
 800515e:	60da      	str	r2, [r3, #12]
      break;
 8005160:	e01d      	b.n	800519e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0204 	orr.w	r2, r2, #4
 8005170:	60da      	str	r2, [r3, #12]
      break;
 8005172:	e014      	b.n	800519e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	60da      	str	r2, [r3, #12]
      break;
 8005184:	e00b      	b.n	800519e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0210 	orr.w	r2, r2, #16
 8005194:	60da      	str	r2, [r3, #12]
      break;
 8005196:	e002      	b.n	800519e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	bf00      	nop
  }

  if (status == HAL_OK)
 800519e:	7bfb      	ldrb	r3, [r7, #15]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d13e      	bne.n	8005222 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2201      	movs	r2, #1
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f000 ff9b 	bl	80060e8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1d      	ldr	r2, [pc, #116]	; (800522c <HAL_TIM_IC_Start_IT+0x220>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d018      	beq.n	80051ee <HAL_TIM_IC_Start_IT+0x1e2>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c4:	d013      	beq.n	80051ee <HAL_TIM_IC_Start_IT+0x1e2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a19      	ldr	r2, [pc, #100]	; (8005230 <HAL_TIM_IC_Start_IT+0x224>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIM_IC_Start_IT+0x1e2>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a17      	ldr	r2, [pc, #92]	; (8005234 <HAL_TIM_IC_Start_IT+0x228>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d009      	beq.n	80051ee <HAL_TIM_IC_Start_IT+0x1e2>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a16      	ldr	r2, [pc, #88]	; (8005238 <HAL_TIM_IC_Start_IT+0x22c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIM_IC_Start_IT+0x1e2>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a14      	ldr	r2, [pc, #80]	; (800523c <HAL_TIM_IC_Start_IT+0x230>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d111      	bne.n	8005212 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0307 	and.w	r3, r3, #7
 80051f8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b06      	cmp	r3, #6
 80051fe:	d010      	beq.n	8005222 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005210:	e007      	b.n	8005222 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005222:	7bfb      	ldrb	r3, [r7, #15]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	40010000 	.word	0x40010000
 8005230:	40000400 	.word	0x40000400
 8005234:	40000800 	.word	0x40000800
 8005238:	40000c00 	.word	0x40000c00
 800523c:	40014000 	.word	0x40014000

08005240 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d122      	bne.n	800529c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b02      	cmp	r3, #2
 8005262:	d11b      	bne.n	800529c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0202 	mvn.w	r2, #2
 800526c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd f9ce 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 8005288:	e005      	b.n	8005296 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb4a 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f000 fb51 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d122      	bne.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d11b      	bne.n	80052f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0204 	mvn.w	r2, #4
 80052c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2202      	movs	r2, #2
 80052c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fd f9a4 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 80052dc:	e005      	b.n	80052ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fb20 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 fb27 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b08      	cmp	r3, #8
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0208 	mvn.w	r2, #8
 8005314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2204      	movs	r2, #4
 800531a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fd f97a 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 faf6 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fafd 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b10      	cmp	r3, #16
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0210 	mvn.w	r2, #16
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2208      	movs	r2, #8
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7fd f950 	bl	8002624 <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 facc 	bl	8005924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fad3 	bl	8005938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d10e      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d107      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0201 	mvn.w	r2, #1
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7fb fdd4 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b80      	cmp	r3, #128	; 0x80
 80053d0:	d10e      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d107      	bne.n	80053f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 ff1a 	bl	8006224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d10e      	bne.n	800541c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d107      	bne.n	800541c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa98 	bl	800594c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b20      	cmp	r3, #32
 8005428:	d10e      	bne.n	8005448 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b20      	cmp	r3, #32
 8005436:	d107      	bne.n	8005448 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f06f 0220 	mvn.w	r2, #32
 8005440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fee4 	bl	8006210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800545c:	2300      	movs	r3, #0
 800545e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_TIM_IC_ConfigChannel+0x1e>
 800546a:	2302      	movs	r3, #2
 800546c:	e088      	b.n	8005580 <HAL_TIM_IC_ConfigChannel+0x130>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11b      	bne.n	80054b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f000 fc74 	bl	8005d78 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699a      	ldr	r2, [r3, #24]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 020c 	bic.w	r2, r2, #12
 800549e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6999      	ldr	r1, [r3, #24]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	619a      	str	r2, [r3, #24]
 80054b2:	e060      	b.n	8005576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b04      	cmp	r3, #4
 80054b8:	d11c      	bne.n	80054f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6819      	ldr	r1, [r3, #0]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f000 fcec 	bl	8005ea6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	6999      	ldr	r1, [r3, #24]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	021a      	lsls	r2, r3, #8
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	619a      	str	r2, [r3, #24]
 80054f2:	e040      	b.n	8005576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d11b      	bne.n	8005532 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	6819      	ldr	r1, [r3, #0]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	685a      	ldr	r2, [r3, #4]
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f000 fd39 	bl	8005f80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 020c 	bic.w	r2, r2, #12
 800551c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69d9      	ldr	r1, [r3, #28]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	689a      	ldr	r2, [r3, #8]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	61da      	str	r2, [r3, #28]
 8005530:	e021      	b.n	8005576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d11c      	bne.n	8005572 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6818      	ldr	r0, [r3, #0]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6819      	ldr	r1, [r3, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	685a      	ldr	r2, [r3, #4]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f000 fd56 	bl	8005ff8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800555a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69d9      	ldr	r1, [r3, #28]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	430a      	orrs	r2, r1
 800556e:	61da      	str	r2, [r3, #28]
 8005570:	e001      	b.n	8005576 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005594:	2300      	movs	r3, #0
 8005596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d101      	bne.n	80055a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055a2:	2302      	movs	r3, #2
 80055a4:	e0ae      	b.n	8005704 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	f200 809f 	bhi.w	80056f4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055b6:	a201      	add	r2, pc, #4	; (adr r2, 80055bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080055f1 	.word	0x080055f1
 80055c0:	080056f5 	.word	0x080056f5
 80055c4:	080056f5 	.word	0x080056f5
 80055c8:	080056f5 	.word	0x080056f5
 80055cc:	08005631 	.word	0x08005631
 80055d0:	080056f5 	.word	0x080056f5
 80055d4:	080056f5 	.word	0x080056f5
 80055d8:	080056f5 	.word	0x080056f5
 80055dc:	08005673 	.word	0x08005673
 80055e0:	080056f5 	.word	0x080056f5
 80055e4:	080056f5 	.word	0x080056f5
 80055e8:	080056f5 	.word	0x080056f5
 80055ec:	080056b3 	.word	0x080056b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa32 	bl	8005a60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	619a      	str	r2, [r3, #24]
      break;
 800562e:	e064      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fa78 	bl	8005b2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	619a      	str	r2, [r3, #24]
      break;
 8005670:	e043      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fac3 	bl	8005c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0208 	orr.w	r2, r2, #8
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
      break;
 80056b0:	e023      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fb0d 	bl	8005cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69d9      	ldr	r1, [r3, #28]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	021a      	lsls	r2, r3, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	61da      	str	r2, [r3, #28]
      break;
 80056f2:	e002      	b.n	80056fa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	75fb      	strb	r3, [r7, #23]
      break;
 80056f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005702:	7dfb      	ldrb	r3, [r7, #23]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIM_ConfigClockSource+0x1c>
 8005724:	2302      	movs	r3, #2
 8005726:	e0b4      	b.n	8005892 <HAL_TIM_ConfigClockSource+0x186>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800574e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005760:	d03e      	beq.n	80057e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005766:	f200 8087 	bhi.w	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 800576a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576e:	f000 8086 	beq.w	800587e <HAL_TIM_ConfigClockSource+0x172>
 8005772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005776:	d87f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005778:	2b70      	cmp	r3, #112	; 0x70
 800577a:	d01a      	beq.n	80057b2 <HAL_TIM_ConfigClockSource+0xa6>
 800577c:	2b70      	cmp	r3, #112	; 0x70
 800577e:	d87b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005780:	2b60      	cmp	r3, #96	; 0x60
 8005782:	d050      	beq.n	8005826 <HAL_TIM_ConfigClockSource+0x11a>
 8005784:	2b60      	cmp	r3, #96	; 0x60
 8005786:	d877      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005788:	2b50      	cmp	r3, #80	; 0x50
 800578a:	d03c      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0xfa>
 800578c:	2b50      	cmp	r3, #80	; 0x50
 800578e:	d873      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005790:	2b40      	cmp	r3, #64	; 0x40
 8005792:	d058      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0x13a>
 8005794:	2b40      	cmp	r3, #64	; 0x40
 8005796:	d86f      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 8005798:	2b30      	cmp	r3, #48	; 0x30
 800579a:	d064      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 800579c:	2b30      	cmp	r3, #48	; 0x30
 800579e:	d86b      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d060      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 80057a4:	2b20      	cmp	r3, #32
 80057a6:	d867      	bhi.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d05c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 80057ac:	2b10      	cmp	r3, #16
 80057ae:	d05a      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0x15a>
 80057b0:	e062      	b.n	8005878 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6899      	ldr	r1, [r3, #8]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f000 fc71 	bl	80060a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
      break;
 80057de:	e04f      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	6899      	ldr	r1, [r3, #8]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	f000 fc5a 	bl	80060a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	689a      	ldr	r2, [r3, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005802:	609a      	str	r2, [r3, #8]
      break;
 8005804:	e03c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	6859      	ldr	r1, [r3, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	461a      	mov	r2, r3
 8005814:	f000 fb18 	bl	8005e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2150      	movs	r1, #80	; 0x50
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fc27 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005824:	e02c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6818      	ldr	r0, [r3, #0]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6859      	ldr	r1, [r3, #4]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	461a      	mov	r2, r3
 8005834:	f000 fb74 	bl	8005f20 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2160      	movs	r1, #96	; 0x60
 800583e:	4618      	mov	r0, r3
 8005840:	f000 fc17 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005844:	e01c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6859      	ldr	r1, [r3, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	461a      	mov	r2, r3
 8005854:	f000 faf8 	bl	8005e48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2140      	movs	r1, #64	; 0x40
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc07 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005864:	e00c      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4619      	mov	r1, r3
 8005870:	4610      	mov	r0, r2
 8005872:	f000 fbfe 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005876:	e003      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
      break;
 800587c:	e000      	b.n	8005880 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800587e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d831      	bhi.n	8005914 <HAL_TIM_ReadCapturedValue+0x78>
 80058b0:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80058b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b6:	bf00      	nop
 80058b8:	080058ed 	.word	0x080058ed
 80058bc:	08005915 	.word	0x08005915
 80058c0:	08005915 	.word	0x08005915
 80058c4:	08005915 	.word	0x08005915
 80058c8:	080058f7 	.word	0x080058f7
 80058cc:	08005915 	.word	0x08005915
 80058d0:	08005915 	.word	0x08005915
 80058d4:	08005915 	.word	0x08005915
 80058d8:	08005901 	.word	0x08005901
 80058dc:	08005915 	.word	0x08005915
 80058e0:	08005915 	.word	0x08005915
 80058e4:	08005915 	.word	0x08005915
 80058e8:	0800590b 	.word	0x0800590b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	60fb      	str	r3, [r7, #12]

      break;
 80058f4:	e00f      	b.n	8005916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	60fb      	str	r3, [r7, #12]

      break;
 80058fe:	e00a      	b.n	8005916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005906:	60fb      	str	r3, [r7, #12]

      break;
 8005908:	e005      	b.n	8005916 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	60fb      	str	r3, [r7, #12]

      break;
 8005912:	e000      	b.n	8005916 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005914:	bf00      	nop
  }

  return tmpreg;
 8005916:	68fb      	ldr	r3, [r7, #12]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a34      	ldr	r2, [pc, #208]	; (8005a44 <TIM_Base_SetConfig+0xe4>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0x38>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0x38>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a31      	ldr	r2, [pc, #196]	; (8005a48 <TIM_Base_SetConfig+0xe8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0x38>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a30      	ldr	r2, [pc, #192]	; (8005a4c <TIM_Base_SetConfig+0xec>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0x38>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a2f      	ldr	r2, [pc, #188]	; (8005a50 <TIM_Base_SetConfig+0xf0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a25      	ldr	r2, [pc, #148]	; (8005a44 <TIM_Base_SetConfig+0xe4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01b      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b8:	d017      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a22      	ldr	r2, [pc, #136]	; (8005a48 <TIM_Base_SetConfig+0xe8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d013      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a21      	ldr	r2, [pc, #132]	; (8005a4c <TIM_Base_SetConfig+0xec>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00f      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a20      	ldr	r2, [pc, #128]	; (8005a50 <TIM_Base_SetConfig+0xf0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00b      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a1f      	ldr	r2, [pc, #124]	; (8005a54 <TIM_Base_SetConfig+0xf4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <TIM_Base_SetConfig+0xf8>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0x8a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a1d      	ldr	r2, [pc, #116]	; (8005a5c <TIM_Base_SetConfig+0xfc>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d108      	bne.n	80059fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <TIM_Base_SetConfig+0xe4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d103      	bne.n	8005a30 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000800 	.word	0x40000800
 8005a50:	40000c00 	.word	0x40000c00
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800

08005a60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b087      	sub	sp, #28
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0303 	bic.w	r3, r3, #3
 8005a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	f023 0302 	bic.w	r3, r3, #2
 8005aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a1c      	ldr	r2, [pc, #112]	; (8005b28 <TIM_OC1_SetConfig+0xc8>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d10c      	bne.n	8005ad6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f023 0308 	bic.w	r3, r3, #8
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a13      	ldr	r2, [pc, #76]	; (8005b28 <TIM_OC1_SetConfig+0xc8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d111      	bne.n	8005b02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	621a      	str	r2, [r3, #32]
}
 8005b1c:	bf00      	nop
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	40010000 	.word	0x40010000

08005b2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0210 	bic.w	r2, r3, #16
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	021b      	lsls	r3, r3, #8
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f023 0320 	bic.w	r3, r3, #32
 8005b76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a1e      	ldr	r2, [pc, #120]	; (8005c00 <TIM_OC2_SetConfig+0xd4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10d      	bne.n	8005ba8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	011b      	lsls	r3, r3, #4
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <TIM_OC2_SetConfig+0xd4>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d113      	bne.n	8005bd8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	621a      	str	r2, [r3, #32]
}
 8005bf2:	bf00      	nop
 8005bf4:	371c      	adds	r7, #28
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	40010000 	.word	0x40010000

08005c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a1d      	ldr	r2, [pc, #116]	; (8005cd4 <TIM_OC3_SetConfig+0xd0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10d      	bne.n	8005c7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a14      	ldr	r2, [pc, #80]	; (8005cd4 <TIM_OC3_SetConfig+0xd0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d113      	bne.n	8005cae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	011b      	lsls	r3, r3, #4
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	693a      	ldr	r2, [r7, #16]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	693a      	ldr	r2, [r7, #16]
 8005cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	621a      	str	r2, [r3, #32]
}
 8005cc8:	bf00      	nop
 8005cca:	371c      	adds	r7, #28
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr
 8005cd4:	40010000 	.word	0x40010000

08005cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b087      	sub	sp, #28
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	021b      	lsls	r3, r3, #8
 8005d16:	68fa      	ldr	r2, [r7, #12]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	031b      	lsls	r3, r3, #12
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <TIM_OC4_SetConfig+0x9c>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d109      	bne.n	8005d4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	019b      	lsls	r3, r3, #6
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	693a      	ldr	r2, [r7, #16]
 8005d64:	621a      	str	r2, [r3, #32]
}
 8005d66:	bf00      	nop
 8005d68:	371c      	adds	r7, #28
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40010000 	.word	0x40010000

08005d78 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <TIM_TI1_SetConfig+0xbc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <TIM_TI1_SetConfig+0x56>
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dac:	d00f      	beq.n	8005dce <TIM_TI1_SetConfig+0x56>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4a21      	ldr	r2, [pc, #132]	; (8005e38 <TIM_TI1_SetConfig+0xc0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00b      	beq.n	8005dce <TIM_TI1_SetConfig+0x56>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a20      	ldr	r2, [pc, #128]	; (8005e3c <TIM_TI1_SetConfig+0xc4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <TIM_TI1_SetConfig+0x56>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a1f      	ldr	r2, [pc, #124]	; (8005e40 <TIM_TI1_SetConfig+0xc8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_TI1_SetConfig+0x56>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a1e      	ldr	r2, [pc, #120]	; (8005e44 <TIM_TI1_SetConfig+0xcc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d101      	bne.n	8005dd2 <TIM_TI1_SetConfig+0x5a>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <TIM_TI1_SetConfig+0x5c>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 0303 	bic.w	r3, r3, #3
 8005dde:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e003      	b.n	8005df2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	011b      	lsls	r3, r3, #4
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f023 030a 	bic.w	r3, r3, #10
 8005e0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f003 030a 	and.w	r3, r3, #10
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	621a      	str	r2, [r3, #32]
}
 8005e26:	bf00      	nop
 8005e28:	371c      	adds	r7, #28
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40014000 	.word	0x40014000

08005e48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	f023 0201 	bic.w	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 030a 	bic.w	r3, r3, #10
 8005e84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	621a      	str	r2, [r3, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b087      	sub	sp, #28
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	607a      	str	r2, [r7, #4]
 8005eb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f023 0210 	bic.w	r2, r3, #16
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	031b      	lsls	r3, r3, #12
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	621a      	str	r2, [r3, #32]
}
 8005f14:	bf00      	nop
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f023 0210 	bic.w	r2, r3, #16
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	031b      	lsls	r3, r3, #12
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	693a      	ldr	r2, [r7, #16]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	621a      	str	r2, [r3, #32]
}
 8005f74:	bf00      	nop
 8005f76:	371c      	adds	r7, #28
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
 8005f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6a1b      	ldr	r3, [r3, #32]
 8005f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f023 0303 	bic.w	r3, r3, #3
 8005fac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b087      	sub	sp, #28
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006036:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	031b      	lsls	r3, r3, #12
 800603c:	b29b      	uxth	r3, r3
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800604a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	031b      	lsls	r3, r3, #12
 8006050:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	f043 0307 	orr.w	r3, r3, #7
 8006094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f003 031f 	and.w	r3, r3, #31
 80060fa:	2201      	movs	r2, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a1a      	ldr	r2, [r3, #32]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	43db      	mvns	r3, r3
 800610a:	401a      	ands	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6a1a      	ldr	r2, [r3, #32]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 031f 	and.w	r3, r3, #31
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	431a      	orrs	r2, r3
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006144:	2b01      	cmp	r3, #1
 8006146:	d101      	bne.n	800614c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006148:	2302      	movs	r3, #2
 800614a:	e050      	b.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d018      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006198:	d013      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a18      	ldr	r2, [pc, #96]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a16      	ldr	r2, [pc, #88]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a13      	ldr	r2, [pc, #76]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10c      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40014000 	.word	0x40014000

08006210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e03f      	b.n	80062ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b00      	cmp	r3, #0
 8006254:	d106      	bne.n	8006264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fc f810 	bl	8002284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2224      	movs	r2, #36	; 0x24
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800627a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fddf 	bl	8006e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2220      	movs	r2, #32
 80062c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b08a      	sub	sp, #40	; 0x28
 80062d6:	af02      	add	r7, sp, #8
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	d17c      	bne.n	80063ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_UART_Transmit+0x2c>
 80062f8:	88fb      	ldrh	r3, [r7, #6]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e075      	b.n	80063ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_UART_Transmit+0x3e>
 800630c:	2302      	movs	r3, #2
 800630e:	e06e      	b.n	80063ee <HAL_UART_Transmit+0x11c>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2200      	movs	r2, #0
 800631c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2221      	movs	r2, #33	; 0x21
 8006322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006326:	f7fc fa41 	bl	80027ac <HAL_GetTick>
 800632a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	88fa      	ldrh	r2, [r7, #6]
 8006336:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006340:	d108      	bne.n	8006354 <HAL_UART_Transmit+0x82>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d104      	bne.n	8006354 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	e003      	b.n	800635c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006358:	2300      	movs	r3, #0
 800635a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006364:	e02a      	b.n	80063bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fb1f 	bl	80069b4 <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d001      	beq.n	8006380 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e036      	b.n	80063ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10b      	bne.n	800639e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3302      	adds	r3, #2
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e007      	b.n	80063ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	781a      	ldrb	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	3301      	adds	r3, #1
 80063ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	3b01      	subs	r3, #1
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1cf      	bne.n	8006366 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	9300      	str	r3, [sp, #0]
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	2140      	movs	r1, #64	; 0x40
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 faef 	bl	80069b4 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063dc:	2303      	movs	r3, #3
 80063de:	e006      	b.n	80063ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e000      	b.n	80063ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
  }
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3720      	adds	r7, #32
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	60b9      	str	r1, [r7, #8]
 8006400:	4613      	mov	r3, r2
 8006402:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b20      	cmp	r3, #32
 800640e:	d11d      	bne.n	800644c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_UART_Receive_IT+0x26>
 8006416:	88fb      	ldrh	r3, [r7, #6]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d101      	bne.n	8006420 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e016      	b.n	800644e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_UART_Receive_IT+0x38>
 800642a:	2302      	movs	r3, #2
 800642c:	e00f      	b.n	800644e <HAL_UART_Receive_IT+0x58>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800643c:	88fb      	ldrh	r3, [r7, #6]
 800643e:	461a      	mov	r2, r3
 8006440:	68b9      	ldr	r1, [r7, #8]
 8006442:	68f8      	ldr	r0, [r7, #12]
 8006444:	f000 fb24 	bl	8006a90 <UART_Start_Receive_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	e000      	b.n	800644e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800644c:	2302      	movs	r3, #2
  }
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
	...

08006458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b0ba      	sub	sp, #232	; 0xe8
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800647e:	2300      	movs	r3, #0
 8006480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006484:	2300      	movs	r3, #0
 8006486:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648e:	f003 030f 	and.w	r3, r3, #15
 8006492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10f      	bne.n	80064be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800649e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d009      	beq.n	80064be <HAL_UART_IRQHandler+0x66>
 80064aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ae:	f003 0320 	and.w	r3, r3, #32
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fc07 	bl	8006cca <UART_Receive_IT>
      return;
 80064bc:	e256      	b.n	800696c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 80de 	beq.w	8006684 <HAL_UART_IRQHandler+0x22c>
 80064c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d106      	bne.n	80064e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80d1 	beq.w	8006684 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00b      	beq.n	8006506 <HAL_UART_IRQHandler+0xae>
 80064ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d005      	beq.n	8006506 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	f043 0201 	orr.w	r2, r3, #1
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00b      	beq.n	800652a <HAL_UART_IRQHandler+0xd2>
 8006512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006522:	f043 0202 	orr.w	r2, r3, #2
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800652a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00b      	beq.n	800654e <HAL_UART_IRQHandler+0xf6>
 8006536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d005      	beq.n	800654e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f043 0204 	orr.w	r2, r3, #4
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800654e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006552:	f003 0308 	and.w	r3, r3, #8
 8006556:	2b00      	cmp	r3, #0
 8006558:	d011      	beq.n	800657e <HAL_UART_IRQHandler+0x126>
 800655a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655e:	f003 0320 	and.w	r3, r3, #32
 8006562:	2b00      	cmp	r3, #0
 8006564:	d105      	bne.n	8006572 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d005      	beq.n	800657e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	f043 0208 	orr.w	r2, r3, #8
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	f000 81ed 	beq.w	8006962 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d008      	beq.n	80065a6 <HAL_UART_IRQHandler+0x14e>
 8006594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fb92 	bl	8006cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	695b      	ldr	r3, [r3, #20]
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b40      	cmp	r3, #64	; 0x40
 80065b2:	bf0c      	ite	eq
 80065b4:	2301      	moveq	r3, #1
 80065b6:	2300      	movne	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d103      	bne.n	80065d2 <HAL_UART_IRQHandler+0x17a>
 80065ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d04f      	beq.n	8006672 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fa9a 	bl	8006b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e2:	2b40      	cmp	r3, #64	; 0x40
 80065e4:	d141      	bne.n	800666a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3314      	adds	r3, #20
 80065ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006604:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3314      	adds	r3, #20
 800660e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006612:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800661e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800662a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1d9      	bne.n	80065e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006636:	2b00      	cmp	r3, #0
 8006638:	d013      	beq.n	8006662 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	4a7d      	ldr	r2, [pc, #500]	; (8006834 <HAL_UART_IRQHandler+0x3dc>)
 8006640:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006646:	4618      	mov	r0, r3
 8006648:	f7fc fa61 	bl	8002b0e <HAL_DMA_Abort_IT>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d016      	beq.n	8006680 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800665c:	4610      	mov	r0, r2
 800665e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006660:	e00e      	b.n	8006680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f990 	bl	8006988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006668:	e00a      	b.n	8006680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f98c 	bl	8006988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006670:	e006      	b.n	8006680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f988 	bl	8006988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800667e:	e170      	b.n	8006962 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006680:	bf00      	nop
    return;
 8006682:	e16e      	b.n	8006962 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	f040 814a 	bne.w	8006922 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 8143 	beq.w	8006922 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800669c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 813c 	beq.w	8006922 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066aa:	2300      	movs	r3, #0
 80066ac:	60bb      	str	r3, [r7, #8]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60bb      	str	r3, [r7, #8]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ca:	2b40      	cmp	r3, #64	; 0x40
 80066cc:	f040 80b4 	bne.w	8006838 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8140 	beq.w	8006966 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066ee:	429a      	cmp	r2, r3
 80066f0:	f080 8139 	bcs.w	8006966 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80066fa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006706:	f000 8088 	beq.w	800681a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	330c      	adds	r3, #12
 8006710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006714:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006720:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006736:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800673a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006742:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006746:	e841 2300 	strex	r3, r2, [r1]
 800674a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800674e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1d9      	bne.n	800670a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3314      	adds	r3, #20
 800675c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800675e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006760:	e853 3f00 	ldrex	r3, [r3]
 8006764:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3314      	adds	r3, #20
 8006776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800677a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800677e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006782:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800678c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e1      	bne.n	8006756 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3314      	adds	r3, #20
 8006798:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3314      	adds	r3, #20
 80067b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067be:	e841 2300 	strex	r3, r2, [r1]
 80067c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1e3      	bne.n	8006792 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	330c      	adds	r3, #12
 80067de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e2:	e853 3f00 	ldrex	r3, [r3]
 80067e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80067e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ea:	f023 0310 	bic.w	r3, r3, #16
 80067ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	330c      	adds	r3, #12
 80067f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80067fc:	65ba      	str	r2, [r7, #88]	; 0x58
 80067fe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006800:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006804:	e841 2300 	strex	r3, r2, [r1]
 8006808:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800680a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1e3      	bne.n	80067d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	4618      	mov	r0, r3
 8006816:	f7fc f90a 	bl	8002a2e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006822:	b29b      	uxth	r3, r3
 8006824:	1ad3      	subs	r3, r2, r3
 8006826:	b29b      	uxth	r3, r3
 8006828:	4619      	mov	r1, r3
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 f8b6 	bl	800699c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006830:	e099      	b.n	8006966 <HAL_UART_IRQHandler+0x50e>
 8006832:	bf00      	nop
 8006834:	08006bd3 	.word	0x08006bd3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006840:	b29b      	uxth	r3, r3
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800684c:	b29b      	uxth	r3, r3
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 808b 	beq.w	800696a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006854:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8086 	beq.w	800696a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	330c      	adds	r3, #12
 8006864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800686e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006870:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	330c      	adds	r3, #12
 800687e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006882:	647a      	str	r2, [r7, #68]	; 0x44
 8006884:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006888:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e3      	bne.n	800685e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	623b      	str	r3, [r7, #32]
   return(result);
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	f023 0301 	bic.w	r3, r3, #1
 80068ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3314      	adds	r3, #20
 80068b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068ba:	633a      	str	r2, [r7, #48]	; 0x30
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e3      	bne.n	8006896 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	330c      	adds	r3, #12
 80068e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	e853 3f00 	ldrex	r3, [r3]
 80068ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0310 	bic.w	r3, r3, #16
 80068f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	330c      	adds	r3, #12
 80068fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006900:	61fa      	str	r2, [r7, #28]
 8006902:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	69b9      	ldr	r1, [r7, #24]
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	617b      	str	r3, [r7, #20]
   return(result);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e3      	bne.n	80068dc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006914:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006918:	4619      	mov	r1, r3
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f83e 	bl	800699c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006920:	e023      	b.n	800696a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <HAL_UART_IRQHandler+0x4ea>
 800692e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f95d 	bl	8006bfa <UART_Transmit_IT>
    return;
 8006940:	e014      	b.n	800696c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <HAL_UART_IRQHandler+0x514>
 800694e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f99d 	bl	8006c9a <UART_EndTransmit_IT>
    return;
 8006960:	e004      	b.n	800696c <HAL_UART_IRQHandler+0x514>
    return;
 8006962:	bf00      	nop
 8006964:	e002      	b.n	800696c <HAL_UART_IRQHandler+0x514>
      return;
 8006966:	bf00      	nop
 8006968:	e000      	b.n	800696c <HAL_UART_IRQHandler+0x514>
      return;
 800696a:	bf00      	nop
  }
}
 800696c:	37e8      	adds	r7, #232	; 0xe8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop

08006974 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b090      	sub	sp, #64	; 0x40
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c4:	e050      	b.n	8006a68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d04c      	beq.n	8006a68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d007      	beq.n	80069e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069d4:	f7fb feea 	bl	80027ac <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d241      	bcs.n	8006a68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	330c      	adds	r3, #12
 80069ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	330c      	adds	r3, #12
 8006a02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a04:	637a      	str	r2, [r7, #52]	; 0x34
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e5      	bne.n	80069e4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3314      	adds	r3, #20
 8006a1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	613b      	str	r3, [r7, #16]
   return(result);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	f023 0301 	bic.w	r3, r3, #1
 8006a2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a38:	623a      	str	r2, [r7, #32]
 8006a3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	69f9      	ldr	r1, [r7, #28]
 8006a3e:	6a3a      	ldr	r2, [r7, #32]
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e00f      	b.n	8006a88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4013      	ands	r3, r2
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d09f      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3740      	adds	r7, #64	; 0x40
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	88fa      	ldrh	r2, [r7, #6]
 8006aa8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2222      	movs	r2, #34	; 0x22
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68da      	ldr	r2, [r3, #12]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006adc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	695a      	ldr	r2, [r3, #20]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f042 0201 	orr.w	r2, r2, #1
 8006aec:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f042 0220 	orr.w	r2, r2, #32
 8006afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b095      	sub	sp, #84	; 0x54
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	330c      	adds	r3, #12
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	330c      	adds	r3, #12
 8006b32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b34:	643a      	str	r2, [r7, #64]	; 0x40
 8006b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e5      	bne.n	8006b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3314      	adds	r3, #20
 8006b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b58:	69fb      	ldr	r3, [r7, #28]
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3314      	adds	r3, #20
 8006b66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d119      	bne.n	8006bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0310 	bic.w	r3, r3, #16
 8006b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ba4:	61ba      	str	r2, [r7, #24]
 8006ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6979      	ldr	r1, [r7, #20]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e5      	bne.n	8006b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bc6:	bf00      	nop
 8006bc8:	3754      	adds	r7, #84	; 0x54
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr

08006bd2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b084      	sub	sp, #16
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f7ff fecb 	bl	8006988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	b085      	sub	sp, #20
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b21      	cmp	r3, #33	; 0x21
 8006c0c:	d13e      	bne.n	8006c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c16:	d114      	bne.n	8006c42 <UART_Transmit_IT+0x48>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d110      	bne.n	8006c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	1c9a      	adds	r2, r3, #2
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]
 8006c40:	e008      	b.n	8006c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	1c59      	adds	r1, r3, #1
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6211      	str	r1, [r2, #32]
 8006c4c:	781a      	ldrb	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	4619      	mov	r1, r3
 8006c62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10f      	bne.n	8006c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68da      	ldr	r2, [r3, #12]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e000      	b.n	8006c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c8c:	2302      	movs	r3, #2
  }
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68da      	ldr	r2, [r3, #12]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fe5a 	bl	8006974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b08c      	sub	sp, #48	; 0x30
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b22      	cmp	r3, #34	; 0x22
 8006cdc:	f040 80ab 	bne.w	8006e36 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ce8:	d117      	bne.n	8006d1a <UART_Receive_IT+0x50>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d113      	bne.n	8006d1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d12:	1c9a      	adds	r2, r3, #2
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	629a      	str	r2, [r3, #40]	; 0x28
 8006d18:	e026      	b.n	8006d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d20:	2300      	movs	r3, #0
 8006d22:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2c:	d007      	beq.n	8006d3e <UART_Receive_IT+0x74>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <UART_Receive_IT+0x82>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d106      	bne.n	8006d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d48:	701a      	strb	r2, [r3, #0]
 8006d4a:	e008      	b.n	8006d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	4619      	mov	r1, r3
 8006d76:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d15a      	bne.n	8006e32 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68da      	ldr	r2, [r3, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0220 	bic.w	r2, r2, #32
 8006d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68da      	ldr	r2, [r3, #12]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	695a      	ldr	r2, [r3, #20]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f022 0201 	bic.w	r2, r2, #1
 8006daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d135      	bne.n	8006e28 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f023 0310 	bic.w	r3, r3, #16
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	330c      	adds	r3, #12
 8006de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de2:	623a      	str	r2, [r7, #32]
 8006de4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	69f9      	ldr	r1, [r7, #28]
 8006de8:	6a3a      	ldr	r2, [r7, #32]
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	61bb      	str	r3, [r7, #24]
   return(result);
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e5      	bne.n	8006dc2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0310 	and.w	r3, r3, #16
 8006e00:	2b10      	cmp	r3, #16
 8006e02:	d10a      	bne.n	8006e1a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	60fb      	str	r3, [r7, #12]
 8006e18:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff fdbb 	bl	800699c <HAL_UARTEx_RxEventCallback>
 8006e26:	e002      	b.n	8006e2e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7f9 fbab 	bl	8000584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e002      	b.n	8006e38 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	e000      	b.n	8006e38 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e36:	2302      	movs	r3, #2
  }
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3730      	adds	r7, #48	; 0x30
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e44:	b0c0      	sub	sp, #256	; 0x100
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e5c:	68d9      	ldr	r1, [r3, #12]
 8006e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	ea40 0301 	orr.w	r3, r0, r1
 8006e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	431a      	orrs	r2, r3
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006e98:	f021 010c 	bic.w	r1, r1, #12
 8006e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eba:	6999      	ldr	r1, [r3, #24]
 8006ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	ea40 0301 	orr.w	r3, r0, r1
 8006ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b8f      	ldr	r3, [pc, #572]	; (800710c <UART_SetConfig+0x2cc>)
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d005      	beq.n	8006ee0 <UART_SetConfig+0xa0>
 8006ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b8d      	ldr	r3, [pc, #564]	; (8007110 <UART_SetConfig+0x2d0>)
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d104      	bne.n	8006eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ee0:	f7fd f8d6 	bl	8004090 <HAL_RCC_GetPCLK2Freq>
 8006ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006ee8:	e003      	b.n	8006ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006eea:	f7fd f8bd 	bl	8004068 <HAL_RCC_GetPCLK1Freq>
 8006eee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efc:	f040 810c 	bne.w	8007118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f12:	4622      	mov	r2, r4
 8006f14:	462b      	mov	r3, r5
 8006f16:	1891      	adds	r1, r2, r2
 8006f18:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f1a:	415b      	adcs	r3, r3
 8006f1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f22:	4621      	mov	r1, r4
 8006f24:	eb12 0801 	adds.w	r8, r2, r1
 8006f28:	4629      	mov	r1, r5
 8006f2a:	eb43 0901 	adc.w	r9, r3, r1
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f42:	4690      	mov	r8, r2
 8006f44:	4699      	mov	r9, r3
 8006f46:	4623      	mov	r3, r4
 8006f48:	eb18 0303 	adds.w	r3, r8, r3
 8006f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f50:	462b      	mov	r3, r5
 8006f52:	eb49 0303 	adc.w	r3, r9, r3
 8006f56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006f6e:	460b      	mov	r3, r1
 8006f70:	18db      	adds	r3, r3, r3
 8006f72:	653b      	str	r3, [r7, #80]	; 0x50
 8006f74:	4613      	mov	r3, r2
 8006f76:	eb42 0303 	adc.w	r3, r2, r3
 8006f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006f84:	f7f9 f97c 	bl	8000280 <__aeabi_uldivmod>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	4b61      	ldr	r3, [pc, #388]	; (8007114 <UART_SetConfig+0x2d4>)
 8006f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f92:	095b      	lsrs	r3, r3, #5
 8006f94:	011c      	lsls	r4, r3, #4
 8006f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fa8:	4642      	mov	r2, r8
 8006faa:	464b      	mov	r3, r9
 8006fac:	1891      	adds	r1, r2, r2
 8006fae:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fb0:	415b      	adcs	r3, r3
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fb8:	4641      	mov	r1, r8
 8006fba:	eb12 0a01 	adds.w	sl, r2, r1
 8006fbe:	4649      	mov	r1, r9
 8006fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8006fc4:	f04f 0200 	mov.w	r2, #0
 8006fc8:	f04f 0300 	mov.w	r3, #0
 8006fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006fd8:	4692      	mov	sl, r2
 8006fda:	469b      	mov	fp, r3
 8006fdc:	4643      	mov	r3, r8
 8006fde:	eb1a 0303 	adds.w	r3, sl, r3
 8006fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006fe6:	464b      	mov	r3, r9
 8006fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8006fec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007004:	460b      	mov	r3, r1
 8007006:	18db      	adds	r3, r3, r3
 8007008:	643b      	str	r3, [r7, #64]	; 0x40
 800700a:	4613      	mov	r3, r2
 800700c:	eb42 0303 	adc.w	r3, r2, r3
 8007010:	647b      	str	r3, [r7, #68]	; 0x44
 8007012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800701a:	f7f9 f931 	bl	8000280 <__aeabi_uldivmod>
 800701e:	4602      	mov	r2, r0
 8007020:	460b      	mov	r3, r1
 8007022:	4611      	mov	r1, r2
 8007024:	4b3b      	ldr	r3, [pc, #236]	; (8007114 <UART_SetConfig+0x2d4>)
 8007026:	fba3 2301 	umull	r2, r3, r3, r1
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	2264      	movs	r2, #100	; 0x64
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	1acb      	subs	r3, r1, r3
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800703a:	4b36      	ldr	r3, [pc, #216]	; (8007114 <UART_SetConfig+0x2d4>)
 800703c:	fba3 2302 	umull	r2, r3, r3, r2
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007048:	441c      	add	r4, r3
 800704a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800704e:	2200      	movs	r2, #0
 8007050:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007054:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800705c:	4642      	mov	r2, r8
 800705e:	464b      	mov	r3, r9
 8007060:	1891      	adds	r1, r2, r2
 8007062:	63b9      	str	r1, [r7, #56]	; 0x38
 8007064:	415b      	adcs	r3, r3
 8007066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800706c:	4641      	mov	r1, r8
 800706e:	1851      	adds	r1, r2, r1
 8007070:	6339      	str	r1, [r7, #48]	; 0x30
 8007072:	4649      	mov	r1, r9
 8007074:	414b      	adcs	r3, r1
 8007076:	637b      	str	r3, [r7, #52]	; 0x34
 8007078:	f04f 0200 	mov.w	r2, #0
 800707c:	f04f 0300 	mov.w	r3, #0
 8007080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007084:	4659      	mov	r1, fp
 8007086:	00cb      	lsls	r3, r1, #3
 8007088:	4651      	mov	r1, sl
 800708a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800708e:	4651      	mov	r1, sl
 8007090:	00ca      	lsls	r2, r1, #3
 8007092:	4610      	mov	r0, r2
 8007094:	4619      	mov	r1, r3
 8007096:	4603      	mov	r3, r0
 8007098:	4642      	mov	r2, r8
 800709a:	189b      	adds	r3, r3, r2
 800709c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070a0:	464b      	mov	r3, r9
 80070a2:	460a      	mov	r2, r1
 80070a4:	eb42 0303 	adc.w	r3, r2, r3
 80070a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070c0:	460b      	mov	r3, r1
 80070c2:	18db      	adds	r3, r3, r3
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80070c6:	4613      	mov	r3, r2
 80070c8:	eb42 0303 	adc.w	r3, r2, r3
 80070cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80070d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80070d6:	f7f9 f8d3 	bl	8000280 <__aeabi_uldivmod>
 80070da:	4602      	mov	r2, r0
 80070dc:	460b      	mov	r3, r1
 80070de:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <UART_SetConfig+0x2d4>)
 80070e0:	fba3 1302 	umull	r1, r3, r3, r2
 80070e4:	095b      	lsrs	r3, r3, #5
 80070e6:	2164      	movs	r1, #100	; 0x64
 80070e8:	fb01 f303 	mul.w	r3, r1, r3
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	3332      	adds	r3, #50	; 0x32
 80070f2:	4a08      	ldr	r2, [pc, #32]	; (8007114 <UART_SetConfig+0x2d4>)
 80070f4:	fba2 2303 	umull	r2, r3, r2, r3
 80070f8:	095b      	lsrs	r3, r3, #5
 80070fa:	f003 0207 	and.w	r2, r3, #7
 80070fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4422      	add	r2, r4
 8007106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007108:	e105      	b.n	8007316 <UART_SetConfig+0x4d6>
 800710a:	bf00      	nop
 800710c:	40011000 	.word	0x40011000
 8007110:	40011400 	.word	0x40011400
 8007114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800711c:	2200      	movs	r2, #0
 800711e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007122:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800712a:	4642      	mov	r2, r8
 800712c:	464b      	mov	r3, r9
 800712e:	1891      	adds	r1, r2, r2
 8007130:	6239      	str	r1, [r7, #32]
 8007132:	415b      	adcs	r3, r3
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
 8007136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800713a:	4641      	mov	r1, r8
 800713c:	1854      	adds	r4, r2, r1
 800713e:	4649      	mov	r1, r9
 8007140:	eb43 0501 	adc.w	r5, r3, r1
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	00eb      	lsls	r3, r5, #3
 800714e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007152:	00e2      	lsls	r2, r4, #3
 8007154:	4614      	mov	r4, r2
 8007156:	461d      	mov	r5, r3
 8007158:	4643      	mov	r3, r8
 800715a:	18e3      	adds	r3, r4, r3
 800715c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007160:	464b      	mov	r3, r9
 8007162:	eb45 0303 	adc.w	r3, r5, r3
 8007166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007176:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007186:	4629      	mov	r1, r5
 8007188:	008b      	lsls	r3, r1, #2
 800718a:	4621      	mov	r1, r4
 800718c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007190:	4621      	mov	r1, r4
 8007192:	008a      	lsls	r2, r1, #2
 8007194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007198:	f7f9 f872 	bl	8000280 <__aeabi_uldivmod>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4b60      	ldr	r3, [pc, #384]	; (8007324 <UART_SetConfig+0x4e4>)
 80071a2:	fba3 2302 	umull	r2, r3, r3, r2
 80071a6:	095b      	lsrs	r3, r3, #5
 80071a8:	011c      	lsls	r4, r3, #4
 80071aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071bc:	4642      	mov	r2, r8
 80071be:	464b      	mov	r3, r9
 80071c0:	1891      	adds	r1, r2, r2
 80071c2:	61b9      	str	r1, [r7, #24]
 80071c4:	415b      	adcs	r3, r3
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071cc:	4641      	mov	r1, r8
 80071ce:	1851      	adds	r1, r2, r1
 80071d0:	6139      	str	r1, [r7, #16]
 80071d2:	4649      	mov	r1, r9
 80071d4:	414b      	adcs	r3, r1
 80071d6:	617b      	str	r3, [r7, #20]
 80071d8:	f04f 0200 	mov.w	r2, #0
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80071e4:	4659      	mov	r1, fp
 80071e6:	00cb      	lsls	r3, r1, #3
 80071e8:	4651      	mov	r1, sl
 80071ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ee:	4651      	mov	r1, sl
 80071f0:	00ca      	lsls	r2, r1, #3
 80071f2:	4610      	mov	r0, r2
 80071f4:	4619      	mov	r1, r3
 80071f6:	4603      	mov	r3, r0
 80071f8:	4642      	mov	r2, r8
 80071fa:	189b      	adds	r3, r3, r2
 80071fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007200:	464b      	mov	r3, r9
 8007202:	460a      	mov	r2, r1
 8007204:	eb42 0303 	adc.w	r3, r2, r3
 8007208:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	67bb      	str	r3, [r7, #120]	; 0x78
 8007216:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007218:	f04f 0200 	mov.w	r2, #0
 800721c:	f04f 0300 	mov.w	r3, #0
 8007220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007224:	4649      	mov	r1, r9
 8007226:	008b      	lsls	r3, r1, #2
 8007228:	4641      	mov	r1, r8
 800722a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800722e:	4641      	mov	r1, r8
 8007230:	008a      	lsls	r2, r1, #2
 8007232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007236:	f7f9 f823 	bl	8000280 <__aeabi_uldivmod>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	4b39      	ldr	r3, [pc, #228]	; (8007324 <UART_SetConfig+0x4e4>)
 8007240:	fba3 1302 	umull	r1, r3, r3, r2
 8007244:	095b      	lsrs	r3, r3, #5
 8007246:	2164      	movs	r1, #100	; 0x64
 8007248:	fb01 f303 	mul.w	r3, r1, r3
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	3332      	adds	r3, #50	; 0x32
 8007252:	4a34      	ldr	r2, [pc, #208]	; (8007324 <UART_SetConfig+0x4e4>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800725e:	441c      	add	r4, r3
 8007260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007264:	2200      	movs	r2, #0
 8007266:	673b      	str	r3, [r7, #112]	; 0x70
 8007268:	677a      	str	r2, [r7, #116]	; 0x74
 800726a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800726e:	4642      	mov	r2, r8
 8007270:	464b      	mov	r3, r9
 8007272:	1891      	adds	r1, r2, r2
 8007274:	60b9      	str	r1, [r7, #8]
 8007276:	415b      	adcs	r3, r3
 8007278:	60fb      	str	r3, [r7, #12]
 800727a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800727e:	4641      	mov	r1, r8
 8007280:	1851      	adds	r1, r2, r1
 8007282:	6039      	str	r1, [r7, #0]
 8007284:	4649      	mov	r1, r9
 8007286:	414b      	adcs	r3, r1
 8007288:	607b      	str	r3, [r7, #4]
 800728a:	f04f 0200 	mov.w	r2, #0
 800728e:	f04f 0300 	mov.w	r3, #0
 8007292:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007296:	4659      	mov	r1, fp
 8007298:	00cb      	lsls	r3, r1, #3
 800729a:	4651      	mov	r1, sl
 800729c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072a0:	4651      	mov	r1, sl
 80072a2:	00ca      	lsls	r2, r1, #3
 80072a4:	4610      	mov	r0, r2
 80072a6:	4619      	mov	r1, r3
 80072a8:	4603      	mov	r3, r0
 80072aa:	4642      	mov	r2, r8
 80072ac:	189b      	adds	r3, r3, r2
 80072ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80072b0:	464b      	mov	r3, r9
 80072b2:	460a      	mov	r2, r1
 80072b4:	eb42 0303 	adc.w	r3, r2, r3
 80072b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	663b      	str	r3, [r7, #96]	; 0x60
 80072c4:	667a      	str	r2, [r7, #100]	; 0x64
 80072c6:	f04f 0200 	mov.w	r2, #0
 80072ca:	f04f 0300 	mov.w	r3, #0
 80072ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80072d2:	4649      	mov	r1, r9
 80072d4:	008b      	lsls	r3, r1, #2
 80072d6:	4641      	mov	r1, r8
 80072d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072dc:	4641      	mov	r1, r8
 80072de:	008a      	lsls	r2, r1, #2
 80072e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80072e4:	f7f8 ffcc 	bl	8000280 <__aeabi_uldivmod>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	4b0d      	ldr	r3, [pc, #52]	; (8007324 <UART_SetConfig+0x4e4>)
 80072ee:	fba3 1302 	umull	r1, r3, r3, r2
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	2164      	movs	r1, #100	; 0x64
 80072f6:	fb01 f303 	mul.w	r3, r1, r3
 80072fa:	1ad3      	subs	r3, r2, r3
 80072fc:	011b      	lsls	r3, r3, #4
 80072fe:	3332      	adds	r3, #50	; 0x32
 8007300:	4a08      	ldr	r2, [pc, #32]	; (8007324 <UART_SetConfig+0x4e4>)
 8007302:	fba2 2303 	umull	r2, r3, r2, r3
 8007306:	095b      	lsrs	r3, r3, #5
 8007308:	f003 020f 	and.w	r2, r3, #15
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4422      	add	r2, r4
 8007314:	609a      	str	r2, [r3, #8]
}
 8007316:	bf00      	nop
 8007318:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800731c:	46bd      	mov	sp, r7
 800731e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007322:	bf00      	nop
 8007324:	51eb851f 	.word	0x51eb851f

08007328 <atoi>:
 8007328:	220a      	movs	r2, #10
 800732a:	2100      	movs	r1, #0
 800732c:	f000 b98a 	b.w	8007644 <strtol>

08007330 <__errno>:
 8007330:	4b01      	ldr	r3, [pc, #4]	; (8007338 <__errno+0x8>)
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	2000002c 	.word	0x2000002c

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	; (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	; (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	; (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	; (8007380 <__libc_init_array+0x44>)
 8007350:	f001 fab4 	bl	80088bc <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	08008bb0 	.word	0x08008bb0
 8007378:	08008bb0 	.word	0x08008bb0
 800737c:	08008bb0 	.word	0x08008bb0
 8007380:	08008bb4 	.word	0x08008bb4

08007384 <memset>:
 8007384:	4402      	add	r2, r0
 8007386:	4603      	mov	r3, r0
 8007388:	4293      	cmp	r3, r2
 800738a:	d100      	bne.n	800738e <memset+0xa>
 800738c:	4770      	bx	lr
 800738e:	f803 1b01 	strb.w	r1, [r3], #1
 8007392:	e7f9      	b.n	8007388 <memset+0x4>

08007394 <iprintf>:
 8007394:	b40f      	push	{r0, r1, r2, r3}
 8007396:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <iprintf+0x2c>)
 8007398:	b513      	push	{r0, r1, r4, lr}
 800739a:	681c      	ldr	r4, [r3, #0]
 800739c:	b124      	cbz	r4, 80073a8 <iprintf+0x14>
 800739e:	69a3      	ldr	r3, [r4, #24]
 80073a0:	b913      	cbnz	r3, 80073a8 <iprintf+0x14>
 80073a2:	4620      	mov	r0, r4
 80073a4:	f000 fb32 	bl	8007a0c <__sinit>
 80073a8:	ab05      	add	r3, sp, #20
 80073aa:	9a04      	ldr	r2, [sp, #16]
 80073ac:	68a1      	ldr	r1, [r4, #8]
 80073ae:	9301      	str	r3, [sp, #4]
 80073b0:	4620      	mov	r0, r4
 80073b2:	f000 fe97 	bl	80080e4 <_vfiprintf_r>
 80073b6:	b002      	add	sp, #8
 80073b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073bc:	b004      	add	sp, #16
 80073be:	4770      	bx	lr
 80073c0:	2000002c 	.word	0x2000002c

080073c4 <_puts_r>:
 80073c4:	b570      	push	{r4, r5, r6, lr}
 80073c6:	460e      	mov	r6, r1
 80073c8:	4605      	mov	r5, r0
 80073ca:	b118      	cbz	r0, 80073d4 <_puts_r+0x10>
 80073cc:	6983      	ldr	r3, [r0, #24]
 80073ce:	b90b      	cbnz	r3, 80073d4 <_puts_r+0x10>
 80073d0:	f000 fb1c 	bl	8007a0c <__sinit>
 80073d4:	69ab      	ldr	r3, [r5, #24]
 80073d6:	68ac      	ldr	r4, [r5, #8]
 80073d8:	b913      	cbnz	r3, 80073e0 <_puts_r+0x1c>
 80073da:	4628      	mov	r0, r5
 80073dc:	f000 fb16 	bl	8007a0c <__sinit>
 80073e0:	4b2c      	ldr	r3, [pc, #176]	; (8007494 <_puts_r+0xd0>)
 80073e2:	429c      	cmp	r4, r3
 80073e4:	d120      	bne.n	8007428 <_puts_r+0x64>
 80073e6:	686c      	ldr	r4, [r5, #4]
 80073e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073ea:	07db      	lsls	r3, r3, #31
 80073ec:	d405      	bmi.n	80073fa <_puts_r+0x36>
 80073ee:	89a3      	ldrh	r3, [r4, #12]
 80073f0:	0598      	lsls	r0, r3, #22
 80073f2:	d402      	bmi.n	80073fa <_puts_r+0x36>
 80073f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f6:	f000 fba7 	bl	8007b48 <__retarget_lock_acquire_recursive>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	0719      	lsls	r1, r3, #28
 80073fe:	d51d      	bpl.n	800743c <_puts_r+0x78>
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b1db      	cbz	r3, 800743c <_puts_r+0x78>
 8007404:	3e01      	subs	r6, #1
 8007406:	68a3      	ldr	r3, [r4, #8]
 8007408:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800740c:	3b01      	subs	r3, #1
 800740e:	60a3      	str	r3, [r4, #8]
 8007410:	bb39      	cbnz	r1, 8007462 <_puts_r+0x9e>
 8007412:	2b00      	cmp	r3, #0
 8007414:	da38      	bge.n	8007488 <_puts_r+0xc4>
 8007416:	4622      	mov	r2, r4
 8007418:	210a      	movs	r1, #10
 800741a:	4628      	mov	r0, r5
 800741c:	f000 f91c 	bl	8007658 <__swbuf_r>
 8007420:	3001      	adds	r0, #1
 8007422:	d011      	beq.n	8007448 <_puts_r+0x84>
 8007424:	250a      	movs	r5, #10
 8007426:	e011      	b.n	800744c <_puts_r+0x88>
 8007428:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <_puts_r+0xd4>)
 800742a:	429c      	cmp	r4, r3
 800742c:	d101      	bne.n	8007432 <_puts_r+0x6e>
 800742e:	68ac      	ldr	r4, [r5, #8]
 8007430:	e7da      	b.n	80073e8 <_puts_r+0x24>
 8007432:	4b1a      	ldr	r3, [pc, #104]	; (800749c <_puts_r+0xd8>)
 8007434:	429c      	cmp	r4, r3
 8007436:	bf08      	it	eq
 8007438:	68ec      	ldreq	r4, [r5, #12]
 800743a:	e7d5      	b.n	80073e8 <_puts_r+0x24>
 800743c:	4621      	mov	r1, r4
 800743e:	4628      	mov	r0, r5
 8007440:	f000 f95c 	bl	80076fc <__swsetup_r>
 8007444:	2800      	cmp	r0, #0
 8007446:	d0dd      	beq.n	8007404 <_puts_r+0x40>
 8007448:	f04f 35ff 	mov.w	r5, #4294967295
 800744c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d405      	bmi.n	800745e <_puts_r+0x9a>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	059b      	lsls	r3, r3, #22
 8007456:	d402      	bmi.n	800745e <_puts_r+0x9a>
 8007458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800745a:	f000 fb76 	bl	8007b4a <__retarget_lock_release_recursive>
 800745e:	4628      	mov	r0, r5
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	2b00      	cmp	r3, #0
 8007464:	da04      	bge.n	8007470 <_puts_r+0xac>
 8007466:	69a2      	ldr	r2, [r4, #24]
 8007468:	429a      	cmp	r2, r3
 800746a:	dc06      	bgt.n	800747a <_puts_r+0xb6>
 800746c:	290a      	cmp	r1, #10
 800746e:	d004      	beq.n	800747a <_puts_r+0xb6>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	6022      	str	r2, [r4, #0]
 8007476:	7019      	strb	r1, [r3, #0]
 8007478:	e7c5      	b.n	8007406 <_puts_r+0x42>
 800747a:	4622      	mov	r2, r4
 800747c:	4628      	mov	r0, r5
 800747e:	f000 f8eb 	bl	8007658 <__swbuf_r>
 8007482:	3001      	adds	r0, #1
 8007484:	d1bf      	bne.n	8007406 <_puts_r+0x42>
 8007486:	e7df      	b.n	8007448 <_puts_r+0x84>
 8007488:	6823      	ldr	r3, [r4, #0]
 800748a:	250a      	movs	r5, #10
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	6022      	str	r2, [r4, #0]
 8007490:	701d      	strb	r5, [r3, #0]
 8007492:	e7db      	b.n	800744c <_puts_r+0x88>
 8007494:	08008b34 	.word	0x08008b34
 8007498:	08008b54 	.word	0x08008b54
 800749c:	08008b14 	.word	0x08008b14

080074a0 <puts>:
 80074a0:	4b02      	ldr	r3, [pc, #8]	; (80074ac <puts+0xc>)
 80074a2:	4601      	mov	r1, r0
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	f7ff bf8d 	b.w	80073c4 <_puts_r>
 80074aa:	bf00      	nop
 80074ac:	2000002c 	.word	0x2000002c

080074b0 <siprintf>:
 80074b0:	b40e      	push	{r1, r2, r3}
 80074b2:	b500      	push	{lr}
 80074b4:	b09c      	sub	sp, #112	; 0x70
 80074b6:	ab1d      	add	r3, sp, #116	; 0x74
 80074b8:	9002      	str	r0, [sp, #8]
 80074ba:	9006      	str	r0, [sp, #24]
 80074bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074c0:	4809      	ldr	r0, [pc, #36]	; (80074e8 <siprintf+0x38>)
 80074c2:	9107      	str	r1, [sp, #28]
 80074c4:	9104      	str	r1, [sp, #16]
 80074c6:	4909      	ldr	r1, [pc, #36]	; (80074ec <siprintf+0x3c>)
 80074c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074cc:	9105      	str	r1, [sp, #20]
 80074ce:	6800      	ldr	r0, [r0, #0]
 80074d0:	9301      	str	r3, [sp, #4]
 80074d2:	a902      	add	r1, sp, #8
 80074d4:	f000 fcdc 	bl	8007e90 <_svfiprintf_r>
 80074d8:	9b02      	ldr	r3, [sp, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	b01c      	add	sp, #112	; 0x70
 80074e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80074e4:	b003      	add	sp, #12
 80074e6:	4770      	bx	lr
 80074e8:	2000002c 	.word	0x2000002c
 80074ec:	ffff0208 	.word	0xffff0208

080074f0 <strncmp>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	b17a      	cbz	r2, 8007514 <strncmp+0x24>
 80074f4:	4603      	mov	r3, r0
 80074f6:	3901      	subs	r1, #1
 80074f8:	1884      	adds	r4, r0, r2
 80074fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007502:	4290      	cmp	r0, r2
 8007504:	d101      	bne.n	800750a <strncmp+0x1a>
 8007506:	42a3      	cmp	r3, r4
 8007508:	d101      	bne.n	800750e <strncmp+0x1e>
 800750a:	1a80      	subs	r0, r0, r2
 800750c:	bd10      	pop	{r4, pc}
 800750e:	2800      	cmp	r0, #0
 8007510:	d1f3      	bne.n	80074fa <strncmp+0xa>
 8007512:	e7fa      	b.n	800750a <strncmp+0x1a>
 8007514:	4610      	mov	r0, r2
 8007516:	e7f9      	b.n	800750c <strncmp+0x1c>

08007518 <strncpy>:
 8007518:	b510      	push	{r4, lr}
 800751a:	3901      	subs	r1, #1
 800751c:	4603      	mov	r3, r0
 800751e:	b132      	cbz	r2, 800752e <strncpy+0x16>
 8007520:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007524:	f803 4b01 	strb.w	r4, [r3], #1
 8007528:	3a01      	subs	r2, #1
 800752a:	2c00      	cmp	r4, #0
 800752c:	d1f7      	bne.n	800751e <strncpy+0x6>
 800752e:	441a      	add	r2, r3
 8007530:	2100      	movs	r1, #0
 8007532:	4293      	cmp	r3, r2
 8007534:	d100      	bne.n	8007538 <strncpy+0x20>
 8007536:	bd10      	pop	{r4, pc}
 8007538:	f803 1b01 	strb.w	r1, [r3], #1
 800753c:	e7f9      	b.n	8007532 <strncpy+0x1a>
	...

08007540 <_strtol_l.constprop.0>:
 8007540:	2b01      	cmp	r3, #1
 8007542:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007546:	d001      	beq.n	800754c <_strtol_l.constprop.0+0xc>
 8007548:	2b24      	cmp	r3, #36	; 0x24
 800754a:	d906      	bls.n	800755a <_strtol_l.constprop.0+0x1a>
 800754c:	f7ff fef0 	bl	8007330 <__errno>
 8007550:	2316      	movs	r3, #22
 8007552:	6003      	str	r3, [r0, #0]
 8007554:	2000      	movs	r0, #0
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007640 <_strtol_l.constprop.0+0x100>
 800755e:	460d      	mov	r5, r1
 8007560:	462e      	mov	r6, r5
 8007562:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007566:	f814 700c 	ldrb.w	r7, [r4, ip]
 800756a:	f017 0708 	ands.w	r7, r7, #8
 800756e:	d1f7      	bne.n	8007560 <_strtol_l.constprop.0+0x20>
 8007570:	2c2d      	cmp	r4, #45	; 0x2d
 8007572:	d132      	bne.n	80075da <_strtol_l.constprop.0+0x9a>
 8007574:	782c      	ldrb	r4, [r5, #0]
 8007576:	2701      	movs	r7, #1
 8007578:	1cb5      	adds	r5, r6, #2
 800757a:	2b00      	cmp	r3, #0
 800757c:	d05b      	beq.n	8007636 <_strtol_l.constprop.0+0xf6>
 800757e:	2b10      	cmp	r3, #16
 8007580:	d109      	bne.n	8007596 <_strtol_l.constprop.0+0x56>
 8007582:	2c30      	cmp	r4, #48	; 0x30
 8007584:	d107      	bne.n	8007596 <_strtol_l.constprop.0+0x56>
 8007586:	782c      	ldrb	r4, [r5, #0]
 8007588:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800758c:	2c58      	cmp	r4, #88	; 0x58
 800758e:	d14d      	bne.n	800762c <_strtol_l.constprop.0+0xec>
 8007590:	786c      	ldrb	r4, [r5, #1]
 8007592:	2310      	movs	r3, #16
 8007594:	3502      	adds	r5, #2
 8007596:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800759a:	f108 38ff 	add.w	r8, r8, #4294967295
 800759e:	f04f 0c00 	mov.w	ip, #0
 80075a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80075a6:	4666      	mov	r6, ip
 80075a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80075ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80075b0:	f1be 0f09 	cmp.w	lr, #9
 80075b4:	d816      	bhi.n	80075e4 <_strtol_l.constprop.0+0xa4>
 80075b6:	4674      	mov	r4, lr
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	dd24      	ble.n	8007606 <_strtol_l.constprop.0+0xc6>
 80075bc:	f1bc 0f00 	cmp.w	ip, #0
 80075c0:	db1e      	blt.n	8007600 <_strtol_l.constprop.0+0xc0>
 80075c2:	45b1      	cmp	r9, r6
 80075c4:	d31c      	bcc.n	8007600 <_strtol_l.constprop.0+0xc0>
 80075c6:	d101      	bne.n	80075cc <_strtol_l.constprop.0+0x8c>
 80075c8:	45a2      	cmp	sl, r4
 80075ca:	db19      	blt.n	8007600 <_strtol_l.constprop.0+0xc0>
 80075cc:	fb06 4603 	mla	r6, r6, r3, r4
 80075d0:	f04f 0c01 	mov.w	ip, #1
 80075d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80075d8:	e7e8      	b.n	80075ac <_strtol_l.constprop.0+0x6c>
 80075da:	2c2b      	cmp	r4, #43	; 0x2b
 80075dc:	bf04      	itt	eq
 80075de:	782c      	ldrbeq	r4, [r5, #0]
 80075e0:	1cb5      	addeq	r5, r6, #2
 80075e2:	e7ca      	b.n	800757a <_strtol_l.constprop.0+0x3a>
 80075e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80075e8:	f1be 0f19 	cmp.w	lr, #25
 80075ec:	d801      	bhi.n	80075f2 <_strtol_l.constprop.0+0xb2>
 80075ee:	3c37      	subs	r4, #55	; 0x37
 80075f0:	e7e2      	b.n	80075b8 <_strtol_l.constprop.0+0x78>
 80075f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80075f6:	f1be 0f19 	cmp.w	lr, #25
 80075fa:	d804      	bhi.n	8007606 <_strtol_l.constprop.0+0xc6>
 80075fc:	3c57      	subs	r4, #87	; 0x57
 80075fe:	e7db      	b.n	80075b8 <_strtol_l.constprop.0+0x78>
 8007600:	f04f 3cff 	mov.w	ip, #4294967295
 8007604:	e7e6      	b.n	80075d4 <_strtol_l.constprop.0+0x94>
 8007606:	f1bc 0f00 	cmp.w	ip, #0
 800760a:	da05      	bge.n	8007618 <_strtol_l.constprop.0+0xd8>
 800760c:	2322      	movs	r3, #34	; 0x22
 800760e:	6003      	str	r3, [r0, #0]
 8007610:	4646      	mov	r6, r8
 8007612:	b942      	cbnz	r2, 8007626 <_strtol_l.constprop.0+0xe6>
 8007614:	4630      	mov	r0, r6
 8007616:	e79e      	b.n	8007556 <_strtol_l.constprop.0+0x16>
 8007618:	b107      	cbz	r7, 800761c <_strtol_l.constprop.0+0xdc>
 800761a:	4276      	negs	r6, r6
 800761c:	2a00      	cmp	r2, #0
 800761e:	d0f9      	beq.n	8007614 <_strtol_l.constprop.0+0xd4>
 8007620:	f1bc 0f00 	cmp.w	ip, #0
 8007624:	d000      	beq.n	8007628 <_strtol_l.constprop.0+0xe8>
 8007626:	1e69      	subs	r1, r5, #1
 8007628:	6011      	str	r1, [r2, #0]
 800762a:	e7f3      	b.n	8007614 <_strtol_l.constprop.0+0xd4>
 800762c:	2430      	movs	r4, #48	; 0x30
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1b1      	bne.n	8007596 <_strtol_l.constprop.0+0x56>
 8007632:	2308      	movs	r3, #8
 8007634:	e7af      	b.n	8007596 <_strtol_l.constprop.0+0x56>
 8007636:	2c30      	cmp	r4, #48	; 0x30
 8007638:	d0a5      	beq.n	8007586 <_strtol_l.constprop.0+0x46>
 800763a:	230a      	movs	r3, #10
 800763c:	e7ab      	b.n	8007596 <_strtol_l.constprop.0+0x56>
 800763e:	bf00      	nop
 8007640:	08008a11 	.word	0x08008a11

08007644 <strtol>:
 8007644:	4613      	mov	r3, r2
 8007646:	460a      	mov	r2, r1
 8007648:	4601      	mov	r1, r0
 800764a:	4802      	ldr	r0, [pc, #8]	; (8007654 <strtol+0x10>)
 800764c:	6800      	ldr	r0, [r0, #0]
 800764e:	f7ff bf77 	b.w	8007540 <_strtol_l.constprop.0>
 8007652:	bf00      	nop
 8007654:	2000002c 	.word	0x2000002c

08007658 <__swbuf_r>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	460e      	mov	r6, r1
 800765c:	4614      	mov	r4, r2
 800765e:	4605      	mov	r5, r0
 8007660:	b118      	cbz	r0, 800766a <__swbuf_r+0x12>
 8007662:	6983      	ldr	r3, [r0, #24]
 8007664:	b90b      	cbnz	r3, 800766a <__swbuf_r+0x12>
 8007666:	f000 f9d1 	bl	8007a0c <__sinit>
 800766a:	4b21      	ldr	r3, [pc, #132]	; (80076f0 <__swbuf_r+0x98>)
 800766c:	429c      	cmp	r4, r3
 800766e:	d12b      	bne.n	80076c8 <__swbuf_r+0x70>
 8007670:	686c      	ldr	r4, [r5, #4]
 8007672:	69a3      	ldr	r3, [r4, #24]
 8007674:	60a3      	str	r3, [r4, #8]
 8007676:	89a3      	ldrh	r3, [r4, #12]
 8007678:	071a      	lsls	r2, r3, #28
 800767a:	d52f      	bpl.n	80076dc <__swbuf_r+0x84>
 800767c:	6923      	ldr	r3, [r4, #16]
 800767e:	b36b      	cbz	r3, 80076dc <__swbuf_r+0x84>
 8007680:	6923      	ldr	r3, [r4, #16]
 8007682:	6820      	ldr	r0, [r4, #0]
 8007684:	1ac0      	subs	r0, r0, r3
 8007686:	6963      	ldr	r3, [r4, #20]
 8007688:	b2f6      	uxtb	r6, r6
 800768a:	4283      	cmp	r3, r0
 800768c:	4637      	mov	r7, r6
 800768e:	dc04      	bgt.n	800769a <__swbuf_r+0x42>
 8007690:	4621      	mov	r1, r4
 8007692:	4628      	mov	r0, r5
 8007694:	f000 f926 	bl	80078e4 <_fflush_r>
 8007698:	bb30      	cbnz	r0, 80076e8 <__swbuf_r+0x90>
 800769a:	68a3      	ldr	r3, [r4, #8]
 800769c:	3b01      	subs	r3, #1
 800769e:	60a3      	str	r3, [r4, #8]
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	6022      	str	r2, [r4, #0]
 80076a6:	701e      	strb	r6, [r3, #0]
 80076a8:	6963      	ldr	r3, [r4, #20]
 80076aa:	3001      	adds	r0, #1
 80076ac:	4283      	cmp	r3, r0
 80076ae:	d004      	beq.n	80076ba <__swbuf_r+0x62>
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	07db      	lsls	r3, r3, #31
 80076b4:	d506      	bpl.n	80076c4 <__swbuf_r+0x6c>
 80076b6:	2e0a      	cmp	r6, #10
 80076b8:	d104      	bne.n	80076c4 <__swbuf_r+0x6c>
 80076ba:	4621      	mov	r1, r4
 80076bc:	4628      	mov	r0, r5
 80076be:	f000 f911 	bl	80078e4 <_fflush_r>
 80076c2:	b988      	cbnz	r0, 80076e8 <__swbuf_r+0x90>
 80076c4:	4638      	mov	r0, r7
 80076c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c8:	4b0a      	ldr	r3, [pc, #40]	; (80076f4 <__swbuf_r+0x9c>)
 80076ca:	429c      	cmp	r4, r3
 80076cc:	d101      	bne.n	80076d2 <__swbuf_r+0x7a>
 80076ce:	68ac      	ldr	r4, [r5, #8]
 80076d0:	e7cf      	b.n	8007672 <__swbuf_r+0x1a>
 80076d2:	4b09      	ldr	r3, [pc, #36]	; (80076f8 <__swbuf_r+0xa0>)
 80076d4:	429c      	cmp	r4, r3
 80076d6:	bf08      	it	eq
 80076d8:	68ec      	ldreq	r4, [r5, #12]
 80076da:	e7ca      	b.n	8007672 <__swbuf_r+0x1a>
 80076dc:	4621      	mov	r1, r4
 80076de:	4628      	mov	r0, r5
 80076e0:	f000 f80c 	bl	80076fc <__swsetup_r>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d0cb      	beq.n	8007680 <__swbuf_r+0x28>
 80076e8:	f04f 37ff 	mov.w	r7, #4294967295
 80076ec:	e7ea      	b.n	80076c4 <__swbuf_r+0x6c>
 80076ee:	bf00      	nop
 80076f0:	08008b34 	.word	0x08008b34
 80076f4:	08008b54 	.word	0x08008b54
 80076f8:	08008b14 	.word	0x08008b14

080076fc <__swsetup_r>:
 80076fc:	4b32      	ldr	r3, [pc, #200]	; (80077c8 <__swsetup_r+0xcc>)
 80076fe:	b570      	push	{r4, r5, r6, lr}
 8007700:	681d      	ldr	r5, [r3, #0]
 8007702:	4606      	mov	r6, r0
 8007704:	460c      	mov	r4, r1
 8007706:	b125      	cbz	r5, 8007712 <__swsetup_r+0x16>
 8007708:	69ab      	ldr	r3, [r5, #24]
 800770a:	b913      	cbnz	r3, 8007712 <__swsetup_r+0x16>
 800770c:	4628      	mov	r0, r5
 800770e:	f000 f97d 	bl	8007a0c <__sinit>
 8007712:	4b2e      	ldr	r3, [pc, #184]	; (80077cc <__swsetup_r+0xd0>)
 8007714:	429c      	cmp	r4, r3
 8007716:	d10f      	bne.n	8007738 <__swsetup_r+0x3c>
 8007718:	686c      	ldr	r4, [r5, #4]
 800771a:	89a3      	ldrh	r3, [r4, #12]
 800771c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007720:	0719      	lsls	r1, r3, #28
 8007722:	d42c      	bmi.n	800777e <__swsetup_r+0x82>
 8007724:	06dd      	lsls	r5, r3, #27
 8007726:	d411      	bmi.n	800774c <__swsetup_r+0x50>
 8007728:	2309      	movs	r3, #9
 800772a:	6033      	str	r3, [r6, #0]
 800772c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007730:	81a3      	strh	r3, [r4, #12]
 8007732:	f04f 30ff 	mov.w	r0, #4294967295
 8007736:	e03e      	b.n	80077b6 <__swsetup_r+0xba>
 8007738:	4b25      	ldr	r3, [pc, #148]	; (80077d0 <__swsetup_r+0xd4>)
 800773a:	429c      	cmp	r4, r3
 800773c:	d101      	bne.n	8007742 <__swsetup_r+0x46>
 800773e:	68ac      	ldr	r4, [r5, #8]
 8007740:	e7eb      	b.n	800771a <__swsetup_r+0x1e>
 8007742:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <__swsetup_r+0xd8>)
 8007744:	429c      	cmp	r4, r3
 8007746:	bf08      	it	eq
 8007748:	68ec      	ldreq	r4, [r5, #12]
 800774a:	e7e6      	b.n	800771a <__swsetup_r+0x1e>
 800774c:	0758      	lsls	r0, r3, #29
 800774e:	d512      	bpl.n	8007776 <__swsetup_r+0x7a>
 8007750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007752:	b141      	cbz	r1, 8007766 <__swsetup_r+0x6a>
 8007754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007758:	4299      	cmp	r1, r3
 800775a:	d002      	beq.n	8007762 <__swsetup_r+0x66>
 800775c:	4630      	mov	r0, r6
 800775e:	f000 fa5b 	bl	8007c18 <_free_r>
 8007762:	2300      	movs	r3, #0
 8007764:	6363      	str	r3, [r4, #52]	; 0x34
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800776c:	81a3      	strh	r3, [r4, #12]
 800776e:	2300      	movs	r3, #0
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	89a3      	ldrh	r3, [r4, #12]
 8007778:	f043 0308 	orr.w	r3, r3, #8
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	b94b      	cbnz	r3, 8007796 <__swsetup_r+0x9a>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778c:	d003      	beq.n	8007796 <__swsetup_r+0x9a>
 800778e:	4621      	mov	r1, r4
 8007790:	4630      	mov	r0, r6
 8007792:	f000 fa01 	bl	8007b98 <__smakebuf_r>
 8007796:	89a0      	ldrh	r0, [r4, #12]
 8007798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800779c:	f010 0301 	ands.w	r3, r0, #1
 80077a0:	d00a      	beq.n	80077b8 <__swsetup_r+0xbc>
 80077a2:	2300      	movs	r3, #0
 80077a4:	60a3      	str	r3, [r4, #8]
 80077a6:	6963      	ldr	r3, [r4, #20]
 80077a8:	425b      	negs	r3, r3
 80077aa:	61a3      	str	r3, [r4, #24]
 80077ac:	6923      	ldr	r3, [r4, #16]
 80077ae:	b943      	cbnz	r3, 80077c2 <__swsetup_r+0xc6>
 80077b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80077b4:	d1ba      	bne.n	800772c <__swsetup_r+0x30>
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	0781      	lsls	r1, r0, #30
 80077ba:	bf58      	it	pl
 80077bc:	6963      	ldrpl	r3, [r4, #20]
 80077be:	60a3      	str	r3, [r4, #8]
 80077c0:	e7f4      	b.n	80077ac <__swsetup_r+0xb0>
 80077c2:	2000      	movs	r0, #0
 80077c4:	e7f7      	b.n	80077b6 <__swsetup_r+0xba>
 80077c6:	bf00      	nop
 80077c8:	2000002c 	.word	0x2000002c
 80077cc:	08008b34 	.word	0x08008b34
 80077d0:	08008b54 	.word	0x08008b54
 80077d4:	08008b14 	.word	0x08008b14

080077d8 <__sflush_r>:
 80077d8:	898a      	ldrh	r2, [r1, #12]
 80077da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077de:	4605      	mov	r5, r0
 80077e0:	0710      	lsls	r0, r2, #28
 80077e2:	460c      	mov	r4, r1
 80077e4:	d458      	bmi.n	8007898 <__sflush_r+0xc0>
 80077e6:	684b      	ldr	r3, [r1, #4]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	dc05      	bgt.n	80077f8 <__sflush_r+0x20>
 80077ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	dc02      	bgt.n	80077f8 <__sflush_r+0x20>
 80077f2:	2000      	movs	r0, #0
 80077f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077fa:	2e00      	cmp	r6, #0
 80077fc:	d0f9      	beq.n	80077f2 <__sflush_r+0x1a>
 80077fe:	2300      	movs	r3, #0
 8007800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007804:	682f      	ldr	r7, [r5, #0]
 8007806:	602b      	str	r3, [r5, #0]
 8007808:	d032      	beq.n	8007870 <__sflush_r+0x98>
 800780a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	075a      	lsls	r2, r3, #29
 8007810:	d505      	bpl.n	800781e <__sflush_r+0x46>
 8007812:	6863      	ldr	r3, [r4, #4]
 8007814:	1ac0      	subs	r0, r0, r3
 8007816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007818:	b10b      	cbz	r3, 800781e <__sflush_r+0x46>
 800781a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800781c:	1ac0      	subs	r0, r0, r3
 800781e:	2300      	movs	r3, #0
 8007820:	4602      	mov	r2, r0
 8007822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007824:	6a21      	ldr	r1, [r4, #32]
 8007826:	4628      	mov	r0, r5
 8007828:	47b0      	blx	r6
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	89a3      	ldrh	r3, [r4, #12]
 800782e:	d106      	bne.n	800783e <__sflush_r+0x66>
 8007830:	6829      	ldr	r1, [r5, #0]
 8007832:	291d      	cmp	r1, #29
 8007834:	d82c      	bhi.n	8007890 <__sflush_r+0xb8>
 8007836:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <__sflush_r+0x108>)
 8007838:	40ca      	lsrs	r2, r1
 800783a:	07d6      	lsls	r6, r2, #31
 800783c:	d528      	bpl.n	8007890 <__sflush_r+0xb8>
 800783e:	2200      	movs	r2, #0
 8007840:	6062      	str	r2, [r4, #4]
 8007842:	04d9      	lsls	r1, r3, #19
 8007844:	6922      	ldr	r2, [r4, #16]
 8007846:	6022      	str	r2, [r4, #0]
 8007848:	d504      	bpl.n	8007854 <__sflush_r+0x7c>
 800784a:	1c42      	adds	r2, r0, #1
 800784c:	d101      	bne.n	8007852 <__sflush_r+0x7a>
 800784e:	682b      	ldr	r3, [r5, #0]
 8007850:	b903      	cbnz	r3, 8007854 <__sflush_r+0x7c>
 8007852:	6560      	str	r0, [r4, #84]	; 0x54
 8007854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007856:	602f      	str	r7, [r5, #0]
 8007858:	2900      	cmp	r1, #0
 800785a:	d0ca      	beq.n	80077f2 <__sflush_r+0x1a>
 800785c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007860:	4299      	cmp	r1, r3
 8007862:	d002      	beq.n	800786a <__sflush_r+0x92>
 8007864:	4628      	mov	r0, r5
 8007866:	f000 f9d7 	bl	8007c18 <_free_r>
 800786a:	2000      	movs	r0, #0
 800786c:	6360      	str	r0, [r4, #52]	; 0x34
 800786e:	e7c1      	b.n	80077f4 <__sflush_r+0x1c>
 8007870:	6a21      	ldr	r1, [r4, #32]
 8007872:	2301      	movs	r3, #1
 8007874:	4628      	mov	r0, r5
 8007876:	47b0      	blx	r6
 8007878:	1c41      	adds	r1, r0, #1
 800787a:	d1c7      	bne.n	800780c <__sflush_r+0x34>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0c4      	beq.n	800780c <__sflush_r+0x34>
 8007882:	2b1d      	cmp	r3, #29
 8007884:	d001      	beq.n	800788a <__sflush_r+0xb2>
 8007886:	2b16      	cmp	r3, #22
 8007888:	d101      	bne.n	800788e <__sflush_r+0xb6>
 800788a:	602f      	str	r7, [r5, #0]
 800788c:	e7b1      	b.n	80077f2 <__sflush_r+0x1a>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	e7ad      	b.n	80077f4 <__sflush_r+0x1c>
 8007898:	690f      	ldr	r7, [r1, #16]
 800789a:	2f00      	cmp	r7, #0
 800789c:	d0a9      	beq.n	80077f2 <__sflush_r+0x1a>
 800789e:	0793      	lsls	r3, r2, #30
 80078a0:	680e      	ldr	r6, [r1, #0]
 80078a2:	bf08      	it	eq
 80078a4:	694b      	ldreq	r3, [r1, #20]
 80078a6:	600f      	str	r7, [r1, #0]
 80078a8:	bf18      	it	ne
 80078aa:	2300      	movne	r3, #0
 80078ac:	eba6 0807 	sub.w	r8, r6, r7
 80078b0:	608b      	str	r3, [r1, #8]
 80078b2:	f1b8 0f00 	cmp.w	r8, #0
 80078b6:	dd9c      	ble.n	80077f2 <__sflush_r+0x1a>
 80078b8:	6a21      	ldr	r1, [r4, #32]
 80078ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078bc:	4643      	mov	r3, r8
 80078be:	463a      	mov	r2, r7
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b0      	blx	r6
 80078c4:	2800      	cmp	r0, #0
 80078c6:	dc06      	bgt.n	80078d6 <__sflush_r+0xfe>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078ce:	81a3      	strh	r3, [r4, #12]
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	e78e      	b.n	80077f4 <__sflush_r+0x1c>
 80078d6:	4407      	add	r7, r0
 80078d8:	eba8 0800 	sub.w	r8, r8, r0
 80078dc:	e7e9      	b.n	80078b2 <__sflush_r+0xda>
 80078de:	bf00      	nop
 80078e0:	20400001 	.word	0x20400001

080078e4 <_fflush_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	690b      	ldr	r3, [r1, #16]
 80078e8:	4605      	mov	r5, r0
 80078ea:	460c      	mov	r4, r1
 80078ec:	b913      	cbnz	r3, 80078f4 <_fflush_r+0x10>
 80078ee:	2500      	movs	r5, #0
 80078f0:	4628      	mov	r0, r5
 80078f2:	bd38      	pop	{r3, r4, r5, pc}
 80078f4:	b118      	cbz	r0, 80078fe <_fflush_r+0x1a>
 80078f6:	6983      	ldr	r3, [r0, #24]
 80078f8:	b90b      	cbnz	r3, 80078fe <_fflush_r+0x1a>
 80078fa:	f000 f887 	bl	8007a0c <__sinit>
 80078fe:	4b14      	ldr	r3, [pc, #80]	; (8007950 <_fflush_r+0x6c>)
 8007900:	429c      	cmp	r4, r3
 8007902:	d11b      	bne.n	800793c <_fflush_r+0x58>
 8007904:	686c      	ldr	r4, [r5, #4]
 8007906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0ef      	beq.n	80078ee <_fflush_r+0xa>
 800790e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007910:	07d0      	lsls	r0, r2, #31
 8007912:	d404      	bmi.n	800791e <_fflush_r+0x3a>
 8007914:	0599      	lsls	r1, r3, #22
 8007916:	d402      	bmi.n	800791e <_fflush_r+0x3a>
 8007918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800791a:	f000 f915 	bl	8007b48 <__retarget_lock_acquire_recursive>
 800791e:	4628      	mov	r0, r5
 8007920:	4621      	mov	r1, r4
 8007922:	f7ff ff59 	bl	80077d8 <__sflush_r>
 8007926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007928:	07da      	lsls	r2, r3, #31
 800792a:	4605      	mov	r5, r0
 800792c:	d4e0      	bmi.n	80078f0 <_fflush_r+0xc>
 800792e:	89a3      	ldrh	r3, [r4, #12]
 8007930:	059b      	lsls	r3, r3, #22
 8007932:	d4dd      	bmi.n	80078f0 <_fflush_r+0xc>
 8007934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007936:	f000 f908 	bl	8007b4a <__retarget_lock_release_recursive>
 800793a:	e7d9      	b.n	80078f0 <_fflush_r+0xc>
 800793c:	4b05      	ldr	r3, [pc, #20]	; (8007954 <_fflush_r+0x70>)
 800793e:	429c      	cmp	r4, r3
 8007940:	d101      	bne.n	8007946 <_fflush_r+0x62>
 8007942:	68ac      	ldr	r4, [r5, #8]
 8007944:	e7df      	b.n	8007906 <_fflush_r+0x22>
 8007946:	4b04      	ldr	r3, [pc, #16]	; (8007958 <_fflush_r+0x74>)
 8007948:	429c      	cmp	r4, r3
 800794a:	bf08      	it	eq
 800794c:	68ec      	ldreq	r4, [r5, #12]
 800794e:	e7da      	b.n	8007906 <_fflush_r+0x22>
 8007950:	08008b34 	.word	0x08008b34
 8007954:	08008b54 	.word	0x08008b54
 8007958:	08008b14 	.word	0x08008b14

0800795c <std>:
 800795c:	2300      	movs	r3, #0
 800795e:	b510      	push	{r4, lr}
 8007960:	4604      	mov	r4, r0
 8007962:	e9c0 3300 	strd	r3, r3, [r0]
 8007966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800796a:	6083      	str	r3, [r0, #8]
 800796c:	8181      	strh	r1, [r0, #12]
 800796e:	6643      	str	r3, [r0, #100]	; 0x64
 8007970:	81c2      	strh	r2, [r0, #14]
 8007972:	6183      	str	r3, [r0, #24]
 8007974:	4619      	mov	r1, r3
 8007976:	2208      	movs	r2, #8
 8007978:	305c      	adds	r0, #92	; 0x5c
 800797a:	f7ff fd03 	bl	8007384 <memset>
 800797e:	4b05      	ldr	r3, [pc, #20]	; (8007994 <std+0x38>)
 8007980:	6263      	str	r3, [r4, #36]	; 0x24
 8007982:	4b05      	ldr	r3, [pc, #20]	; (8007998 <std+0x3c>)
 8007984:	62a3      	str	r3, [r4, #40]	; 0x28
 8007986:	4b05      	ldr	r3, [pc, #20]	; (800799c <std+0x40>)
 8007988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800798a:	4b05      	ldr	r3, [pc, #20]	; (80079a0 <std+0x44>)
 800798c:	6224      	str	r4, [r4, #32]
 800798e:	6323      	str	r3, [r4, #48]	; 0x30
 8007990:	bd10      	pop	{r4, pc}
 8007992:	bf00      	nop
 8007994:	0800868d 	.word	0x0800868d
 8007998:	080086af 	.word	0x080086af
 800799c:	080086e7 	.word	0x080086e7
 80079a0:	0800870b 	.word	0x0800870b

080079a4 <_cleanup_r>:
 80079a4:	4901      	ldr	r1, [pc, #4]	; (80079ac <_cleanup_r+0x8>)
 80079a6:	f000 b8af 	b.w	8007b08 <_fwalk_reent>
 80079aa:	bf00      	nop
 80079ac:	080078e5 	.word	0x080078e5

080079b0 <__sfmoreglue>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	2268      	movs	r2, #104	; 0x68
 80079b4:	1e4d      	subs	r5, r1, #1
 80079b6:	4355      	muls	r5, r2
 80079b8:	460e      	mov	r6, r1
 80079ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80079be:	f000 f997 	bl	8007cf0 <_malloc_r>
 80079c2:	4604      	mov	r4, r0
 80079c4:	b140      	cbz	r0, 80079d8 <__sfmoreglue+0x28>
 80079c6:	2100      	movs	r1, #0
 80079c8:	e9c0 1600 	strd	r1, r6, [r0]
 80079cc:	300c      	adds	r0, #12
 80079ce:	60a0      	str	r0, [r4, #8]
 80079d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079d4:	f7ff fcd6 	bl	8007384 <memset>
 80079d8:	4620      	mov	r0, r4
 80079da:	bd70      	pop	{r4, r5, r6, pc}

080079dc <__sfp_lock_acquire>:
 80079dc:	4801      	ldr	r0, [pc, #4]	; (80079e4 <__sfp_lock_acquire+0x8>)
 80079de:	f000 b8b3 	b.w	8007b48 <__retarget_lock_acquire_recursive>
 80079e2:	bf00      	nop
 80079e4:	20000925 	.word	0x20000925

080079e8 <__sfp_lock_release>:
 80079e8:	4801      	ldr	r0, [pc, #4]	; (80079f0 <__sfp_lock_release+0x8>)
 80079ea:	f000 b8ae 	b.w	8007b4a <__retarget_lock_release_recursive>
 80079ee:	bf00      	nop
 80079f0:	20000925 	.word	0x20000925

080079f4 <__sinit_lock_acquire>:
 80079f4:	4801      	ldr	r0, [pc, #4]	; (80079fc <__sinit_lock_acquire+0x8>)
 80079f6:	f000 b8a7 	b.w	8007b48 <__retarget_lock_acquire_recursive>
 80079fa:	bf00      	nop
 80079fc:	20000926 	.word	0x20000926

08007a00 <__sinit_lock_release>:
 8007a00:	4801      	ldr	r0, [pc, #4]	; (8007a08 <__sinit_lock_release+0x8>)
 8007a02:	f000 b8a2 	b.w	8007b4a <__retarget_lock_release_recursive>
 8007a06:	bf00      	nop
 8007a08:	20000926 	.word	0x20000926

08007a0c <__sinit>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	4604      	mov	r4, r0
 8007a10:	f7ff fff0 	bl	80079f4 <__sinit_lock_acquire>
 8007a14:	69a3      	ldr	r3, [r4, #24]
 8007a16:	b11b      	cbz	r3, 8007a20 <__sinit+0x14>
 8007a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a1c:	f7ff bff0 	b.w	8007a00 <__sinit_lock_release>
 8007a20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007a24:	6523      	str	r3, [r4, #80]	; 0x50
 8007a26:	4b13      	ldr	r3, [pc, #76]	; (8007a74 <__sinit+0x68>)
 8007a28:	4a13      	ldr	r2, [pc, #76]	; (8007a78 <__sinit+0x6c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	bf04      	itt	eq
 8007a32:	2301      	moveq	r3, #1
 8007a34:	61a3      	streq	r3, [r4, #24]
 8007a36:	4620      	mov	r0, r4
 8007a38:	f000 f820 	bl	8007a7c <__sfp>
 8007a3c:	6060      	str	r0, [r4, #4]
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f000 f81c 	bl	8007a7c <__sfp>
 8007a44:	60a0      	str	r0, [r4, #8]
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 f818 	bl	8007a7c <__sfp>
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	60e0      	str	r0, [r4, #12]
 8007a50:	2104      	movs	r1, #4
 8007a52:	6860      	ldr	r0, [r4, #4]
 8007a54:	f7ff ff82 	bl	800795c <std>
 8007a58:	68a0      	ldr	r0, [r4, #8]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	2109      	movs	r1, #9
 8007a5e:	f7ff ff7d 	bl	800795c <std>
 8007a62:	68e0      	ldr	r0, [r4, #12]
 8007a64:	2202      	movs	r2, #2
 8007a66:	2112      	movs	r1, #18
 8007a68:	f7ff ff78 	bl	800795c <std>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	61a3      	str	r3, [r4, #24]
 8007a70:	e7d2      	b.n	8007a18 <__sinit+0xc>
 8007a72:	bf00      	nop
 8007a74:	08008a0c 	.word	0x08008a0c
 8007a78:	080079a5 	.word	0x080079a5

08007a7c <__sfp>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	4607      	mov	r7, r0
 8007a80:	f7ff ffac 	bl	80079dc <__sfp_lock_acquire>
 8007a84:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <__sfp+0x84>)
 8007a86:	681e      	ldr	r6, [r3, #0]
 8007a88:	69b3      	ldr	r3, [r6, #24]
 8007a8a:	b913      	cbnz	r3, 8007a92 <__sfp+0x16>
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff ffbd 	bl	8007a0c <__sinit>
 8007a92:	3648      	adds	r6, #72	; 0x48
 8007a94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	d503      	bpl.n	8007aa4 <__sfp+0x28>
 8007a9c:	6833      	ldr	r3, [r6, #0]
 8007a9e:	b30b      	cbz	r3, 8007ae4 <__sfp+0x68>
 8007aa0:	6836      	ldr	r6, [r6, #0]
 8007aa2:	e7f7      	b.n	8007a94 <__sfp+0x18>
 8007aa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007aa8:	b9d5      	cbnz	r5, 8007ae0 <__sfp+0x64>
 8007aaa:	4b16      	ldr	r3, [pc, #88]	; (8007b04 <__sfp+0x88>)
 8007aac:	60e3      	str	r3, [r4, #12]
 8007aae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ab2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ab4:	f000 f847 	bl	8007b46 <__retarget_lock_init_recursive>
 8007ab8:	f7ff ff96 	bl	80079e8 <__sfp_lock_release>
 8007abc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007ac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ac4:	6025      	str	r5, [r4, #0]
 8007ac6:	61a5      	str	r5, [r4, #24]
 8007ac8:	2208      	movs	r2, #8
 8007aca:	4629      	mov	r1, r5
 8007acc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007ad0:	f7ff fc58 	bl	8007384 <memset>
 8007ad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007adc:	4620      	mov	r0, r4
 8007ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ae0:	3468      	adds	r4, #104	; 0x68
 8007ae2:	e7d9      	b.n	8007a98 <__sfp+0x1c>
 8007ae4:	2104      	movs	r1, #4
 8007ae6:	4638      	mov	r0, r7
 8007ae8:	f7ff ff62 	bl	80079b0 <__sfmoreglue>
 8007aec:	4604      	mov	r4, r0
 8007aee:	6030      	str	r0, [r6, #0]
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d1d5      	bne.n	8007aa0 <__sfp+0x24>
 8007af4:	f7ff ff78 	bl	80079e8 <__sfp_lock_release>
 8007af8:	230c      	movs	r3, #12
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	e7ee      	b.n	8007adc <__sfp+0x60>
 8007afe:	bf00      	nop
 8007b00:	08008a0c 	.word	0x08008a0c
 8007b04:	ffff0001 	.word	0xffff0001

08007b08 <_fwalk_reent>:
 8007b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b0c:	4606      	mov	r6, r0
 8007b0e:	4688      	mov	r8, r1
 8007b10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007b14:	2700      	movs	r7, #0
 8007b16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007b1e:	d505      	bpl.n	8007b2c <_fwalk_reent+0x24>
 8007b20:	6824      	ldr	r4, [r4, #0]
 8007b22:	2c00      	cmp	r4, #0
 8007b24:	d1f7      	bne.n	8007b16 <_fwalk_reent+0xe>
 8007b26:	4638      	mov	r0, r7
 8007b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b2c:	89ab      	ldrh	r3, [r5, #12]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d907      	bls.n	8007b42 <_fwalk_reent+0x3a>
 8007b32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b36:	3301      	adds	r3, #1
 8007b38:	d003      	beq.n	8007b42 <_fwalk_reent+0x3a>
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	47c0      	blx	r8
 8007b40:	4307      	orrs	r7, r0
 8007b42:	3568      	adds	r5, #104	; 0x68
 8007b44:	e7e9      	b.n	8007b1a <_fwalk_reent+0x12>

08007b46 <__retarget_lock_init_recursive>:
 8007b46:	4770      	bx	lr

08007b48 <__retarget_lock_acquire_recursive>:
 8007b48:	4770      	bx	lr

08007b4a <__retarget_lock_release_recursive>:
 8007b4a:	4770      	bx	lr

08007b4c <__swhatbuf_r>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	460e      	mov	r6, r1
 8007b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b54:	2900      	cmp	r1, #0
 8007b56:	b096      	sub	sp, #88	; 0x58
 8007b58:	4614      	mov	r4, r2
 8007b5a:	461d      	mov	r5, r3
 8007b5c:	da08      	bge.n	8007b70 <__swhatbuf_r+0x24>
 8007b5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	602a      	str	r2, [r5, #0]
 8007b66:	061a      	lsls	r2, r3, #24
 8007b68:	d410      	bmi.n	8007b8c <__swhatbuf_r+0x40>
 8007b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b6e:	e00e      	b.n	8007b8e <__swhatbuf_r+0x42>
 8007b70:	466a      	mov	r2, sp
 8007b72:	f000 fdf1 	bl	8008758 <_fstat_r>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	dbf1      	blt.n	8007b5e <__swhatbuf_r+0x12>
 8007b7a:	9a01      	ldr	r2, [sp, #4]
 8007b7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007b80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007b84:	425a      	negs	r2, r3
 8007b86:	415a      	adcs	r2, r3
 8007b88:	602a      	str	r2, [r5, #0]
 8007b8a:	e7ee      	b.n	8007b6a <__swhatbuf_r+0x1e>
 8007b8c:	2340      	movs	r3, #64	; 0x40
 8007b8e:	2000      	movs	r0, #0
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	b016      	add	sp, #88	; 0x58
 8007b94:	bd70      	pop	{r4, r5, r6, pc}
	...

08007b98 <__smakebuf_r>:
 8007b98:	898b      	ldrh	r3, [r1, #12]
 8007b9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007b9c:	079d      	lsls	r5, r3, #30
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	d507      	bpl.n	8007bb4 <__smakebuf_r+0x1c>
 8007ba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ba8:	6023      	str	r3, [r4, #0]
 8007baa:	6123      	str	r3, [r4, #16]
 8007bac:	2301      	movs	r3, #1
 8007bae:	6163      	str	r3, [r4, #20]
 8007bb0:	b002      	add	sp, #8
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	ab01      	add	r3, sp, #4
 8007bb6:	466a      	mov	r2, sp
 8007bb8:	f7ff ffc8 	bl	8007b4c <__swhatbuf_r>
 8007bbc:	9900      	ldr	r1, [sp, #0]
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f000 f895 	bl	8007cf0 <_malloc_r>
 8007bc6:	b948      	cbnz	r0, 8007bdc <__smakebuf_r+0x44>
 8007bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bcc:	059a      	lsls	r2, r3, #22
 8007bce:	d4ef      	bmi.n	8007bb0 <__smakebuf_r+0x18>
 8007bd0:	f023 0303 	bic.w	r3, r3, #3
 8007bd4:	f043 0302 	orr.w	r3, r3, #2
 8007bd8:	81a3      	strh	r3, [r4, #12]
 8007bda:	e7e3      	b.n	8007ba4 <__smakebuf_r+0xc>
 8007bdc:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <__smakebuf_r+0x7c>)
 8007bde:	62b3      	str	r3, [r6, #40]	; 0x28
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	6020      	str	r0, [r4, #0]
 8007be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007be8:	81a3      	strh	r3, [r4, #12]
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	6163      	str	r3, [r4, #20]
 8007bee:	9b01      	ldr	r3, [sp, #4]
 8007bf0:	6120      	str	r0, [r4, #16]
 8007bf2:	b15b      	cbz	r3, 8007c0c <__smakebuf_r+0x74>
 8007bf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f000 fdbf 	bl	800877c <_isatty_r>
 8007bfe:	b128      	cbz	r0, 8007c0c <__smakebuf_r+0x74>
 8007c00:	89a3      	ldrh	r3, [r4, #12]
 8007c02:	f023 0303 	bic.w	r3, r3, #3
 8007c06:	f043 0301 	orr.w	r3, r3, #1
 8007c0a:	81a3      	strh	r3, [r4, #12]
 8007c0c:	89a0      	ldrh	r0, [r4, #12]
 8007c0e:	4305      	orrs	r5, r0
 8007c10:	81a5      	strh	r5, [r4, #12]
 8007c12:	e7cd      	b.n	8007bb0 <__smakebuf_r+0x18>
 8007c14:	080079a5 	.word	0x080079a5

08007c18 <_free_r>:
 8007c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	d044      	beq.n	8007ca8 <_free_r+0x90>
 8007c1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c22:	9001      	str	r0, [sp, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f1a1 0404 	sub.w	r4, r1, #4
 8007c2a:	bfb8      	it	lt
 8007c2c:	18e4      	addlt	r4, r4, r3
 8007c2e:	f000 fdef 	bl	8008810 <__malloc_lock>
 8007c32:	4a1e      	ldr	r2, [pc, #120]	; (8007cac <_free_r+0x94>)
 8007c34:	9801      	ldr	r0, [sp, #4]
 8007c36:	6813      	ldr	r3, [r2, #0]
 8007c38:	b933      	cbnz	r3, 8007c48 <_free_r+0x30>
 8007c3a:	6063      	str	r3, [r4, #4]
 8007c3c:	6014      	str	r4, [r2, #0]
 8007c3e:	b003      	add	sp, #12
 8007c40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c44:	f000 bdea 	b.w	800881c <__malloc_unlock>
 8007c48:	42a3      	cmp	r3, r4
 8007c4a:	d908      	bls.n	8007c5e <_free_r+0x46>
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	1961      	adds	r1, r4, r5
 8007c50:	428b      	cmp	r3, r1
 8007c52:	bf01      	itttt	eq
 8007c54:	6819      	ldreq	r1, [r3, #0]
 8007c56:	685b      	ldreq	r3, [r3, #4]
 8007c58:	1949      	addeq	r1, r1, r5
 8007c5a:	6021      	streq	r1, [r4, #0]
 8007c5c:	e7ed      	b.n	8007c3a <_free_r+0x22>
 8007c5e:	461a      	mov	r2, r3
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	b10b      	cbz	r3, 8007c68 <_free_r+0x50>
 8007c64:	42a3      	cmp	r3, r4
 8007c66:	d9fa      	bls.n	8007c5e <_free_r+0x46>
 8007c68:	6811      	ldr	r1, [r2, #0]
 8007c6a:	1855      	adds	r5, r2, r1
 8007c6c:	42a5      	cmp	r5, r4
 8007c6e:	d10b      	bne.n	8007c88 <_free_r+0x70>
 8007c70:	6824      	ldr	r4, [r4, #0]
 8007c72:	4421      	add	r1, r4
 8007c74:	1854      	adds	r4, r2, r1
 8007c76:	42a3      	cmp	r3, r4
 8007c78:	6011      	str	r1, [r2, #0]
 8007c7a:	d1e0      	bne.n	8007c3e <_free_r+0x26>
 8007c7c:	681c      	ldr	r4, [r3, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	6053      	str	r3, [r2, #4]
 8007c82:	4421      	add	r1, r4
 8007c84:	6011      	str	r1, [r2, #0]
 8007c86:	e7da      	b.n	8007c3e <_free_r+0x26>
 8007c88:	d902      	bls.n	8007c90 <_free_r+0x78>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6003      	str	r3, [r0, #0]
 8007c8e:	e7d6      	b.n	8007c3e <_free_r+0x26>
 8007c90:	6825      	ldr	r5, [r4, #0]
 8007c92:	1961      	adds	r1, r4, r5
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf04      	itt	eq
 8007c98:	6819      	ldreq	r1, [r3, #0]
 8007c9a:	685b      	ldreq	r3, [r3, #4]
 8007c9c:	6063      	str	r3, [r4, #4]
 8007c9e:	bf04      	itt	eq
 8007ca0:	1949      	addeq	r1, r1, r5
 8007ca2:	6021      	streq	r1, [r4, #0]
 8007ca4:	6054      	str	r4, [r2, #4]
 8007ca6:	e7ca      	b.n	8007c3e <_free_r+0x26>
 8007ca8:	b003      	add	sp, #12
 8007caa:	bd30      	pop	{r4, r5, pc}
 8007cac:	20000928 	.word	0x20000928

08007cb0 <sbrk_aligned>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4e0e      	ldr	r6, [pc, #56]	; (8007cec <sbrk_aligned+0x3c>)
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6831      	ldr	r1, [r6, #0]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	b911      	cbnz	r1, 8007cc2 <sbrk_aligned+0x12>
 8007cbc:	f000 fcd6 	bl	800866c <_sbrk_r>
 8007cc0:	6030      	str	r0, [r6, #0]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 fcd1 	bl	800866c <_sbrk_r>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d00a      	beq.n	8007ce4 <sbrk_aligned+0x34>
 8007cce:	1cc4      	adds	r4, r0, #3
 8007cd0:	f024 0403 	bic.w	r4, r4, #3
 8007cd4:	42a0      	cmp	r0, r4
 8007cd6:	d007      	beq.n	8007ce8 <sbrk_aligned+0x38>
 8007cd8:	1a21      	subs	r1, r4, r0
 8007cda:	4628      	mov	r0, r5
 8007cdc:	f000 fcc6 	bl	800866c <_sbrk_r>
 8007ce0:	3001      	adds	r0, #1
 8007ce2:	d101      	bne.n	8007ce8 <sbrk_aligned+0x38>
 8007ce4:	f04f 34ff 	mov.w	r4, #4294967295
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	2000092c 	.word	0x2000092c

08007cf0 <_malloc_r>:
 8007cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf4:	1ccd      	adds	r5, r1, #3
 8007cf6:	f025 0503 	bic.w	r5, r5, #3
 8007cfa:	3508      	adds	r5, #8
 8007cfc:	2d0c      	cmp	r5, #12
 8007cfe:	bf38      	it	cc
 8007d00:	250c      	movcc	r5, #12
 8007d02:	2d00      	cmp	r5, #0
 8007d04:	4607      	mov	r7, r0
 8007d06:	db01      	blt.n	8007d0c <_malloc_r+0x1c>
 8007d08:	42a9      	cmp	r1, r5
 8007d0a:	d905      	bls.n	8007d18 <_malloc_r+0x28>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	2600      	movs	r6, #0
 8007d12:	4630      	mov	r0, r6
 8007d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d18:	4e2e      	ldr	r6, [pc, #184]	; (8007dd4 <_malloc_r+0xe4>)
 8007d1a:	f000 fd79 	bl	8008810 <__malloc_lock>
 8007d1e:	6833      	ldr	r3, [r6, #0]
 8007d20:	461c      	mov	r4, r3
 8007d22:	bb34      	cbnz	r4, 8007d72 <_malloc_r+0x82>
 8007d24:	4629      	mov	r1, r5
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7ff ffc2 	bl	8007cb0 <sbrk_aligned>
 8007d2c:	1c43      	adds	r3, r0, #1
 8007d2e:	4604      	mov	r4, r0
 8007d30:	d14d      	bne.n	8007dce <_malloc_r+0xde>
 8007d32:	6834      	ldr	r4, [r6, #0]
 8007d34:	4626      	mov	r6, r4
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	d140      	bne.n	8007dbc <_malloc_r+0xcc>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4638      	mov	r0, r7
 8007d40:	eb04 0803 	add.w	r8, r4, r3
 8007d44:	f000 fc92 	bl	800866c <_sbrk_r>
 8007d48:	4580      	cmp	r8, r0
 8007d4a:	d13a      	bne.n	8007dc2 <_malloc_r+0xd2>
 8007d4c:	6821      	ldr	r1, [r4, #0]
 8007d4e:	3503      	adds	r5, #3
 8007d50:	1a6d      	subs	r5, r5, r1
 8007d52:	f025 0503 	bic.w	r5, r5, #3
 8007d56:	3508      	adds	r5, #8
 8007d58:	2d0c      	cmp	r5, #12
 8007d5a:	bf38      	it	cc
 8007d5c:	250c      	movcc	r5, #12
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7ff ffa5 	bl	8007cb0 <sbrk_aligned>
 8007d66:	3001      	adds	r0, #1
 8007d68:	d02b      	beq.n	8007dc2 <_malloc_r+0xd2>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	442b      	add	r3, r5
 8007d6e:	6023      	str	r3, [r4, #0]
 8007d70:	e00e      	b.n	8007d90 <_malloc_r+0xa0>
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	1b52      	subs	r2, r2, r5
 8007d76:	d41e      	bmi.n	8007db6 <_malloc_r+0xc6>
 8007d78:	2a0b      	cmp	r2, #11
 8007d7a:	d916      	bls.n	8007daa <_malloc_r+0xba>
 8007d7c:	1961      	adds	r1, r4, r5
 8007d7e:	42a3      	cmp	r3, r4
 8007d80:	6025      	str	r5, [r4, #0]
 8007d82:	bf18      	it	ne
 8007d84:	6059      	strne	r1, [r3, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	bf08      	it	eq
 8007d8a:	6031      	streq	r1, [r6, #0]
 8007d8c:	5162      	str	r2, [r4, r5]
 8007d8e:	604b      	str	r3, [r1, #4]
 8007d90:	4638      	mov	r0, r7
 8007d92:	f104 060b 	add.w	r6, r4, #11
 8007d96:	f000 fd41 	bl	800881c <__malloc_unlock>
 8007d9a:	f026 0607 	bic.w	r6, r6, #7
 8007d9e:	1d23      	adds	r3, r4, #4
 8007da0:	1af2      	subs	r2, r6, r3
 8007da2:	d0b6      	beq.n	8007d12 <_malloc_r+0x22>
 8007da4:	1b9b      	subs	r3, r3, r6
 8007da6:	50a3      	str	r3, [r4, r2]
 8007da8:	e7b3      	b.n	8007d12 <_malloc_r+0x22>
 8007daa:	6862      	ldr	r2, [r4, #4]
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	bf0c      	ite	eq
 8007db0:	6032      	streq	r2, [r6, #0]
 8007db2:	605a      	strne	r2, [r3, #4]
 8007db4:	e7ec      	b.n	8007d90 <_malloc_r+0xa0>
 8007db6:	4623      	mov	r3, r4
 8007db8:	6864      	ldr	r4, [r4, #4]
 8007dba:	e7b2      	b.n	8007d22 <_malloc_r+0x32>
 8007dbc:	4634      	mov	r4, r6
 8007dbe:	6876      	ldr	r6, [r6, #4]
 8007dc0:	e7b9      	b.n	8007d36 <_malloc_r+0x46>
 8007dc2:	230c      	movs	r3, #12
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	f000 fd28 	bl	800881c <__malloc_unlock>
 8007dcc:	e7a1      	b.n	8007d12 <_malloc_r+0x22>
 8007dce:	6025      	str	r5, [r4, #0]
 8007dd0:	e7de      	b.n	8007d90 <_malloc_r+0xa0>
 8007dd2:	bf00      	nop
 8007dd4:	20000928 	.word	0x20000928

08007dd8 <__ssputs_r>:
 8007dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ddc:	688e      	ldr	r6, [r1, #8]
 8007dde:	429e      	cmp	r6, r3
 8007de0:	4682      	mov	sl, r0
 8007de2:	460c      	mov	r4, r1
 8007de4:	4690      	mov	r8, r2
 8007de6:	461f      	mov	r7, r3
 8007de8:	d838      	bhi.n	8007e5c <__ssputs_r+0x84>
 8007dea:	898a      	ldrh	r2, [r1, #12]
 8007dec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007df0:	d032      	beq.n	8007e58 <__ssputs_r+0x80>
 8007df2:	6825      	ldr	r5, [r4, #0]
 8007df4:	6909      	ldr	r1, [r1, #16]
 8007df6:	eba5 0901 	sub.w	r9, r5, r1
 8007dfa:	6965      	ldr	r5, [r4, #20]
 8007dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e04:	3301      	adds	r3, #1
 8007e06:	444b      	add	r3, r9
 8007e08:	106d      	asrs	r5, r5, #1
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	bf38      	it	cc
 8007e0e:	461d      	movcc	r5, r3
 8007e10:	0553      	lsls	r3, r2, #21
 8007e12:	d531      	bpl.n	8007e78 <__ssputs_r+0xa0>
 8007e14:	4629      	mov	r1, r5
 8007e16:	f7ff ff6b 	bl	8007cf0 <_malloc_r>
 8007e1a:	4606      	mov	r6, r0
 8007e1c:	b950      	cbnz	r0, 8007e34 <__ssputs_r+0x5c>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	f8ca 3000 	str.w	r3, [sl]
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e34:	6921      	ldr	r1, [r4, #16]
 8007e36:	464a      	mov	r2, r9
 8007e38:	f000 fcc2 	bl	80087c0 <memcpy>
 8007e3c:	89a3      	ldrh	r3, [r4, #12]
 8007e3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e46:	81a3      	strh	r3, [r4, #12]
 8007e48:	6126      	str	r6, [r4, #16]
 8007e4a:	6165      	str	r5, [r4, #20]
 8007e4c:	444e      	add	r6, r9
 8007e4e:	eba5 0509 	sub.w	r5, r5, r9
 8007e52:	6026      	str	r6, [r4, #0]
 8007e54:	60a5      	str	r5, [r4, #8]
 8007e56:	463e      	mov	r6, r7
 8007e58:	42be      	cmp	r6, r7
 8007e5a:	d900      	bls.n	8007e5e <__ssputs_r+0x86>
 8007e5c:	463e      	mov	r6, r7
 8007e5e:	6820      	ldr	r0, [r4, #0]
 8007e60:	4632      	mov	r2, r6
 8007e62:	4641      	mov	r1, r8
 8007e64:	f000 fcba 	bl	80087dc <memmove>
 8007e68:	68a3      	ldr	r3, [r4, #8]
 8007e6a:	1b9b      	subs	r3, r3, r6
 8007e6c:	60a3      	str	r3, [r4, #8]
 8007e6e:	6823      	ldr	r3, [r4, #0]
 8007e70:	4433      	add	r3, r6
 8007e72:	6023      	str	r3, [r4, #0]
 8007e74:	2000      	movs	r0, #0
 8007e76:	e7db      	b.n	8007e30 <__ssputs_r+0x58>
 8007e78:	462a      	mov	r2, r5
 8007e7a:	f000 fcd5 	bl	8008828 <_realloc_r>
 8007e7e:	4606      	mov	r6, r0
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d1e1      	bne.n	8007e48 <__ssputs_r+0x70>
 8007e84:	6921      	ldr	r1, [r4, #16]
 8007e86:	4650      	mov	r0, sl
 8007e88:	f7ff fec6 	bl	8007c18 <_free_r>
 8007e8c:	e7c7      	b.n	8007e1e <__ssputs_r+0x46>
	...

08007e90 <_svfiprintf_r>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4698      	mov	r8, r3
 8007e96:	898b      	ldrh	r3, [r1, #12]
 8007e98:	061b      	lsls	r3, r3, #24
 8007e9a:	b09d      	sub	sp, #116	; 0x74
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	460d      	mov	r5, r1
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	d50e      	bpl.n	8007ec2 <_svfiprintf_r+0x32>
 8007ea4:	690b      	ldr	r3, [r1, #16]
 8007ea6:	b963      	cbnz	r3, 8007ec2 <_svfiprintf_r+0x32>
 8007ea8:	2140      	movs	r1, #64	; 0x40
 8007eaa:	f7ff ff21 	bl	8007cf0 <_malloc_r>
 8007eae:	6028      	str	r0, [r5, #0]
 8007eb0:	6128      	str	r0, [r5, #16]
 8007eb2:	b920      	cbnz	r0, 8007ebe <_svfiprintf_r+0x2e>
 8007eb4:	230c      	movs	r3, #12
 8007eb6:	603b      	str	r3, [r7, #0]
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	e0d1      	b.n	8008062 <_svfiprintf_r+0x1d2>
 8007ebe:	2340      	movs	r3, #64	; 0x40
 8007ec0:	616b      	str	r3, [r5, #20]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ec6:	2320      	movs	r3, #32
 8007ec8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ed0:	2330      	movs	r3, #48	; 0x30
 8007ed2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800807c <_svfiprintf_r+0x1ec>
 8007ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007eda:	f04f 0901 	mov.w	r9, #1
 8007ede:	4623      	mov	r3, r4
 8007ee0:	469a      	mov	sl, r3
 8007ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ee6:	b10a      	cbz	r2, 8007eec <_svfiprintf_r+0x5c>
 8007ee8:	2a25      	cmp	r2, #37	; 0x25
 8007eea:	d1f9      	bne.n	8007ee0 <_svfiprintf_r+0x50>
 8007eec:	ebba 0b04 	subs.w	fp, sl, r4
 8007ef0:	d00b      	beq.n	8007f0a <_svfiprintf_r+0x7a>
 8007ef2:	465b      	mov	r3, fp
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7ff ff6d 	bl	8007dd8 <__ssputs_r>
 8007efe:	3001      	adds	r0, #1
 8007f00:	f000 80aa 	beq.w	8008058 <_svfiprintf_r+0x1c8>
 8007f04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f06:	445a      	add	r2, fp
 8007f08:	9209      	str	r2, [sp, #36]	; 0x24
 8007f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 80a2 	beq.w	8008058 <_svfiprintf_r+0x1c8>
 8007f14:	2300      	movs	r3, #0
 8007f16:	f04f 32ff 	mov.w	r2, #4294967295
 8007f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f1e:	f10a 0a01 	add.w	sl, sl, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	9307      	str	r3, [sp, #28]
 8007f26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f2c:	4654      	mov	r4, sl
 8007f2e:	2205      	movs	r2, #5
 8007f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f34:	4851      	ldr	r0, [pc, #324]	; (800807c <_svfiprintf_r+0x1ec>)
 8007f36:	f7f8 f953 	bl	80001e0 <memchr>
 8007f3a:	9a04      	ldr	r2, [sp, #16]
 8007f3c:	b9d8      	cbnz	r0, 8007f76 <_svfiprintf_r+0xe6>
 8007f3e:	06d0      	lsls	r0, r2, #27
 8007f40:	bf44      	itt	mi
 8007f42:	2320      	movmi	r3, #32
 8007f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f48:	0711      	lsls	r1, r2, #28
 8007f4a:	bf44      	itt	mi
 8007f4c:	232b      	movmi	r3, #43	; 0x2b
 8007f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007f52:	f89a 3000 	ldrb.w	r3, [sl]
 8007f56:	2b2a      	cmp	r3, #42	; 0x2a
 8007f58:	d015      	beq.n	8007f86 <_svfiprintf_r+0xf6>
 8007f5a:	9a07      	ldr	r2, [sp, #28]
 8007f5c:	4654      	mov	r4, sl
 8007f5e:	2000      	movs	r0, #0
 8007f60:	f04f 0c0a 	mov.w	ip, #10
 8007f64:	4621      	mov	r1, r4
 8007f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f6a:	3b30      	subs	r3, #48	; 0x30
 8007f6c:	2b09      	cmp	r3, #9
 8007f6e:	d94e      	bls.n	800800e <_svfiprintf_r+0x17e>
 8007f70:	b1b0      	cbz	r0, 8007fa0 <_svfiprintf_r+0x110>
 8007f72:	9207      	str	r2, [sp, #28]
 8007f74:	e014      	b.n	8007fa0 <_svfiprintf_r+0x110>
 8007f76:	eba0 0308 	sub.w	r3, r0, r8
 8007f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	9304      	str	r3, [sp, #16]
 8007f82:	46a2      	mov	sl, r4
 8007f84:	e7d2      	b.n	8007f2c <_svfiprintf_r+0x9c>
 8007f86:	9b03      	ldr	r3, [sp, #12]
 8007f88:	1d19      	adds	r1, r3, #4
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	9103      	str	r1, [sp, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	bfbb      	ittet	lt
 8007f92:	425b      	neglt	r3, r3
 8007f94:	f042 0202 	orrlt.w	r2, r2, #2
 8007f98:	9307      	strge	r3, [sp, #28]
 8007f9a:	9307      	strlt	r3, [sp, #28]
 8007f9c:	bfb8      	it	lt
 8007f9e:	9204      	strlt	r2, [sp, #16]
 8007fa0:	7823      	ldrb	r3, [r4, #0]
 8007fa2:	2b2e      	cmp	r3, #46	; 0x2e
 8007fa4:	d10c      	bne.n	8007fc0 <_svfiprintf_r+0x130>
 8007fa6:	7863      	ldrb	r3, [r4, #1]
 8007fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8007faa:	d135      	bne.n	8008018 <_svfiprintf_r+0x188>
 8007fac:	9b03      	ldr	r3, [sp, #12]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	9203      	str	r2, [sp, #12]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	bfb8      	it	lt
 8007fb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007fbc:	3402      	adds	r4, #2
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800808c <_svfiprintf_r+0x1fc>
 8007fc4:	7821      	ldrb	r1, [r4, #0]
 8007fc6:	2203      	movs	r2, #3
 8007fc8:	4650      	mov	r0, sl
 8007fca:	f7f8 f909 	bl	80001e0 <memchr>
 8007fce:	b140      	cbz	r0, 8007fe2 <_svfiprintf_r+0x152>
 8007fd0:	2340      	movs	r3, #64	; 0x40
 8007fd2:	eba0 000a 	sub.w	r0, r0, sl
 8007fd6:	fa03 f000 	lsl.w	r0, r3, r0
 8007fda:	9b04      	ldr	r3, [sp, #16]
 8007fdc:	4303      	orrs	r3, r0
 8007fde:	3401      	adds	r4, #1
 8007fe0:	9304      	str	r3, [sp, #16]
 8007fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe6:	4826      	ldr	r0, [pc, #152]	; (8008080 <_svfiprintf_r+0x1f0>)
 8007fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fec:	2206      	movs	r2, #6
 8007fee:	f7f8 f8f7 	bl	80001e0 <memchr>
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d038      	beq.n	8008068 <_svfiprintf_r+0x1d8>
 8007ff6:	4b23      	ldr	r3, [pc, #140]	; (8008084 <_svfiprintf_r+0x1f4>)
 8007ff8:	bb1b      	cbnz	r3, 8008042 <_svfiprintf_r+0x1b2>
 8007ffa:	9b03      	ldr	r3, [sp, #12]
 8007ffc:	3307      	adds	r3, #7
 8007ffe:	f023 0307 	bic.w	r3, r3, #7
 8008002:	3308      	adds	r3, #8
 8008004:	9303      	str	r3, [sp, #12]
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	4433      	add	r3, r6
 800800a:	9309      	str	r3, [sp, #36]	; 0x24
 800800c:	e767      	b.n	8007ede <_svfiprintf_r+0x4e>
 800800e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008012:	460c      	mov	r4, r1
 8008014:	2001      	movs	r0, #1
 8008016:	e7a5      	b.n	8007f64 <_svfiprintf_r+0xd4>
 8008018:	2300      	movs	r3, #0
 800801a:	3401      	adds	r4, #1
 800801c:	9305      	str	r3, [sp, #20]
 800801e:	4619      	mov	r1, r3
 8008020:	f04f 0c0a 	mov.w	ip, #10
 8008024:	4620      	mov	r0, r4
 8008026:	f810 2b01 	ldrb.w	r2, [r0], #1
 800802a:	3a30      	subs	r2, #48	; 0x30
 800802c:	2a09      	cmp	r2, #9
 800802e:	d903      	bls.n	8008038 <_svfiprintf_r+0x1a8>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0c5      	beq.n	8007fc0 <_svfiprintf_r+0x130>
 8008034:	9105      	str	r1, [sp, #20]
 8008036:	e7c3      	b.n	8007fc0 <_svfiprintf_r+0x130>
 8008038:	fb0c 2101 	mla	r1, ip, r1, r2
 800803c:	4604      	mov	r4, r0
 800803e:	2301      	movs	r3, #1
 8008040:	e7f0      	b.n	8008024 <_svfiprintf_r+0x194>
 8008042:	ab03      	add	r3, sp, #12
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	462a      	mov	r2, r5
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <_svfiprintf_r+0x1f8>)
 800804a:	a904      	add	r1, sp, #16
 800804c:	4638      	mov	r0, r7
 800804e:	f3af 8000 	nop.w
 8008052:	1c42      	adds	r2, r0, #1
 8008054:	4606      	mov	r6, r0
 8008056:	d1d6      	bne.n	8008006 <_svfiprintf_r+0x176>
 8008058:	89ab      	ldrh	r3, [r5, #12]
 800805a:	065b      	lsls	r3, r3, #25
 800805c:	f53f af2c 	bmi.w	8007eb8 <_svfiprintf_r+0x28>
 8008060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008062:	b01d      	add	sp, #116	; 0x74
 8008064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008068:	ab03      	add	r3, sp, #12
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	462a      	mov	r2, r5
 800806e:	4b06      	ldr	r3, [pc, #24]	; (8008088 <_svfiprintf_r+0x1f8>)
 8008070:	a904      	add	r1, sp, #16
 8008072:	4638      	mov	r0, r7
 8008074:	f000 f9d4 	bl	8008420 <_printf_i>
 8008078:	e7eb      	b.n	8008052 <_svfiprintf_r+0x1c2>
 800807a:	bf00      	nop
 800807c:	08008b74 	.word	0x08008b74
 8008080:	08008b7e 	.word	0x08008b7e
 8008084:	00000000 	.word	0x00000000
 8008088:	08007dd9 	.word	0x08007dd9
 800808c:	08008b7a 	.word	0x08008b7a

08008090 <__sfputc_r>:
 8008090:	6893      	ldr	r3, [r2, #8]
 8008092:	3b01      	subs	r3, #1
 8008094:	2b00      	cmp	r3, #0
 8008096:	b410      	push	{r4}
 8008098:	6093      	str	r3, [r2, #8]
 800809a:	da08      	bge.n	80080ae <__sfputc_r+0x1e>
 800809c:	6994      	ldr	r4, [r2, #24]
 800809e:	42a3      	cmp	r3, r4
 80080a0:	db01      	blt.n	80080a6 <__sfputc_r+0x16>
 80080a2:	290a      	cmp	r1, #10
 80080a4:	d103      	bne.n	80080ae <__sfputc_r+0x1e>
 80080a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080aa:	f7ff bad5 	b.w	8007658 <__swbuf_r>
 80080ae:	6813      	ldr	r3, [r2, #0]
 80080b0:	1c58      	adds	r0, r3, #1
 80080b2:	6010      	str	r0, [r2, #0]
 80080b4:	7019      	strb	r1, [r3, #0]
 80080b6:	4608      	mov	r0, r1
 80080b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080bc:	4770      	bx	lr

080080be <__sfputs_r>:
 80080be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c0:	4606      	mov	r6, r0
 80080c2:	460f      	mov	r7, r1
 80080c4:	4614      	mov	r4, r2
 80080c6:	18d5      	adds	r5, r2, r3
 80080c8:	42ac      	cmp	r4, r5
 80080ca:	d101      	bne.n	80080d0 <__sfputs_r+0x12>
 80080cc:	2000      	movs	r0, #0
 80080ce:	e007      	b.n	80080e0 <__sfputs_r+0x22>
 80080d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080d4:	463a      	mov	r2, r7
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ffda 	bl	8008090 <__sfputc_r>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d1f3      	bne.n	80080c8 <__sfputs_r+0xa>
 80080e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080080e4 <_vfiprintf_r>:
 80080e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	460d      	mov	r5, r1
 80080ea:	b09d      	sub	sp, #116	; 0x74
 80080ec:	4614      	mov	r4, r2
 80080ee:	4698      	mov	r8, r3
 80080f0:	4606      	mov	r6, r0
 80080f2:	b118      	cbz	r0, 80080fc <_vfiprintf_r+0x18>
 80080f4:	6983      	ldr	r3, [r0, #24]
 80080f6:	b90b      	cbnz	r3, 80080fc <_vfiprintf_r+0x18>
 80080f8:	f7ff fc88 	bl	8007a0c <__sinit>
 80080fc:	4b89      	ldr	r3, [pc, #548]	; (8008324 <_vfiprintf_r+0x240>)
 80080fe:	429d      	cmp	r5, r3
 8008100:	d11b      	bne.n	800813a <_vfiprintf_r+0x56>
 8008102:	6875      	ldr	r5, [r6, #4]
 8008104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008106:	07d9      	lsls	r1, r3, #31
 8008108:	d405      	bmi.n	8008116 <_vfiprintf_r+0x32>
 800810a:	89ab      	ldrh	r3, [r5, #12]
 800810c:	059a      	lsls	r2, r3, #22
 800810e:	d402      	bmi.n	8008116 <_vfiprintf_r+0x32>
 8008110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008112:	f7ff fd19 	bl	8007b48 <__retarget_lock_acquire_recursive>
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	071b      	lsls	r3, r3, #28
 800811a:	d501      	bpl.n	8008120 <_vfiprintf_r+0x3c>
 800811c:	692b      	ldr	r3, [r5, #16]
 800811e:	b9eb      	cbnz	r3, 800815c <_vfiprintf_r+0x78>
 8008120:	4629      	mov	r1, r5
 8008122:	4630      	mov	r0, r6
 8008124:	f7ff faea 	bl	80076fc <__swsetup_r>
 8008128:	b1c0      	cbz	r0, 800815c <_vfiprintf_r+0x78>
 800812a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800812c:	07dc      	lsls	r4, r3, #31
 800812e:	d50e      	bpl.n	800814e <_vfiprintf_r+0x6a>
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	b01d      	add	sp, #116	; 0x74
 8008136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813a:	4b7b      	ldr	r3, [pc, #492]	; (8008328 <_vfiprintf_r+0x244>)
 800813c:	429d      	cmp	r5, r3
 800813e:	d101      	bne.n	8008144 <_vfiprintf_r+0x60>
 8008140:	68b5      	ldr	r5, [r6, #8]
 8008142:	e7df      	b.n	8008104 <_vfiprintf_r+0x20>
 8008144:	4b79      	ldr	r3, [pc, #484]	; (800832c <_vfiprintf_r+0x248>)
 8008146:	429d      	cmp	r5, r3
 8008148:	bf08      	it	eq
 800814a:	68f5      	ldreq	r5, [r6, #12]
 800814c:	e7da      	b.n	8008104 <_vfiprintf_r+0x20>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	0598      	lsls	r0, r3, #22
 8008152:	d4ed      	bmi.n	8008130 <_vfiprintf_r+0x4c>
 8008154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008156:	f7ff fcf8 	bl	8007b4a <__retarget_lock_release_recursive>
 800815a:	e7e9      	b.n	8008130 <_vfiprintf_r+0x4c>
 800815c:	2300      	movs	r3, #0
 800815e:	9309      	str	r3, [sp, #36]	; 0x24
 8008160:	2320      	movs	r3, #32
 8008162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008166:	f8cd 800c 	str.w	r8, [sp, #12]
 800816a:	2330      	movs	r3, #48	; 0x30
 800816c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008330 <_vfiprintf_r+0x24c>
 8008170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008174:	f04f 0901 	mov.w	r9, #1
 8008178:	4623      	mov	r3, r4
 800817a:	469a      	mov	sl, r3
 800817c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008180:	b10a      	cbz	r2, 8008186 <_vfiprintf_r+0xa2>
 8008182:	2a25      	cmp	r2, #37	; 0x25
 8008184:	d1f9      	bne.n	800817a <_vfiprintf_r+0x96>
 8008186:	ebba 0b04 	subs.w	fp, sl, r4
 800818a:	d00b      	beq.n	80081a4 <_vfiprintf_r+0xc0>
 800818c:	465b      	mov	r3, fp
 800818e:	4622      	mov	r2, r4
 8008190:	4629      	mov	r1, r5
 8008192:	4630      	mov	r0, r6
 8008194:	f7ff ff93 	bl	80080be <__sfputs_r>
 8008198:	3001      	adds	r0, #1
 800819a:	f000 80aa 	beq.w	80082f2 <_vfiprintf_r+0x20e>
 800819e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081a0:	445a      	add	r2, fp
 80081a2:	9209      	str	r2, [sp, #36]	; 0x24
 80081a4:	f89a 3000 	ldrb.w	r3, [sl]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	f000 80a2 	beq.w	80082f2 <_vfiprintf_r+0x20e>
 80081ae:	2300      	movs	r3, #0
 80081b0:	f04f 32ff 	mov.w	r2, #4294967295
 80081b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081b8:	f10a 0a01 	add.w	sl, sl, #1
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	9307      	str	r3, [sp, #28]
 80081c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80081c4:	931a      	str	r3, [sp, #104]	; 0x68
 80081c6:	4654      	mov	r4, sl
 80081c8:	2205      	movs	r2, #5
 80081ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ce:	4858      	ldr	r0, [pc, #352]	; (8008330 <_vfiprintf_r+0x24c>)
 80081d0:	f7f8 f806 	bl	80001e0 <memchr>
 80081d4:	9a04      	ldr	r2, [sp, #16]
 80081d6:	b9d8      	cbnz	r0, 8008210 <_vfiprintf_r+0x12c>
 80081d8:	06d1      	lsls	r1, r2, #27
 80081da:	bf44      	itt	mi
 80081dc:	2320      	movmi	r3, #32
 80081de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081e2:	0713      	lsls	r3, r2, #28
 80081e4:	bf44      	itt	mi
 80081e6:	232b      	movmi	r3, #43	; 0x2b
 80081e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ec:	f89a 3000 	ldrb.w	r3, [sl]
 80081f0:	2b2a      	cmp	r3, #42	; 0x2a
 80081f2:	d015      	beq.n	8008220 <_vfiprintf_r+0x13c>
 80081f4:	9a07      	ldr	r2, [sp, #28]
 80081f6:	4654      	mov	r4, sl
 80081f8:	2000      	movs	r0, #0
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4621      	mov	r1, r4
 8008200:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008204:	3b30      	subs	r3, #48	; 0x30
 8008206:	2b09      	cmp	r3, #9
 8008208:	d94e      	bls.n	80082a8 <_vfiprintf_r+0x1c4>
 800820a:	b1b0      	cbz	r0, 800823a <_vfiprintf_r+0x156>
 800820c:	9207      	str	r2, [sp, #28]
 800820e:	e014      	b.n	800823a <_vfiprintf_r+0x156>
 8008210:	eba0 0308 	sub.w	r3, r0, r8
 8008214:	fa09 f303 	lsl.w	r3, r9, r3
 8008218:	4313      	orrs	r3, r2
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	46a2      	mov	sl, r4
 800821e:	e7d2      	b.n	80081c6 <_vfiprintf_r+0xe2>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	1d19      	adds	r1, r3, #4
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	9103      	str	r1, [sp, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	bfbb      	ittet	lt
 800822c:	425b      	neglt	r3, r3
 800822e:	f042 0202 	orrlt.w	r2, r2, #2
 8008232:	9307      	strge	r3, [sp, #28]
 8008234:	9307      	strlt	r3, [sp, #28]
 8008236:	bfb8      	it	lt
 8008238:	9204      	strlt	r2, [sp, #16]
 800823a:	7823      	ldrb	r3, [r4, #0]
 800823c:	2b2e      	cmp	r3, #46	; 0x2e
 800823e:	d10c      	bne.n	800825a <_vfiprintf_r+0x176>
 8008240:	7863      	ldrb	r3, [r4, #1]
 8008242:	2b2a      	cmp	r3, #42	; 0x2a
 8008244:	d135      	bne.n	80082b2 <_vfiprintf_r+0x1ce>
 8008246:	9b03      	ldr	r3, [sp, #12]
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	9203      	str	r2, [sp, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	bfb8      	it	lt
 8008252:	f04f 33ff 	movlt.w	r3, #4294967295
 8008256:	3402      	adds	r4, #2
 8008258:	9305      	str	r3, [sp, #20]
 800825a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008340 <_vfiprintf_r+0x25c>
 800825e:	7821      	ldrb	r1, [r4, #0]
 8008260:	2203      	movs	r2, #3
 8008262:	4650      	mov	r0, sl
 8008264:	f7f7 ffbc 	bl	80001e0 <memchr>
 8008268:	b140      	cbz	r0, 800827c <_vfiprintf_r+0x198>
 800826a:	2340      	movs	r3, #64	; 0x40
 800826c:	eba0 000a 	sub.w	r0, r0, sl
 8008270:	fa03 f000 	lsl.w	r0, r3, r0
 8008274:	9b04      	ldr	r3, [sp, #16]
 8008276:	4303      	orrs	r3, r0
 8008278:	3401      	adds	r4, #1
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	482c      	ldr	r0, [pc, #176]	; (8008334 <_vfiprintf_r+0x250>)
 8008282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008286:	2206      	movs	r2, #6
 8008288:	f7f7 ffaa 	bl	80001e0 <memchr>
 800828c:	2800      	cmp	r0, #0
 800828e:	d03f      	beq.n	8008310 <_vfiprintf_r+0x22c>
 8008290:	4b29      	ldr	r3, [pc, #164]	; (8008338 <_vfiprintf_r+0x254>)
 8008292:	bb1b      	cbnz	r3, 80082dc <_vfiprintf_r+0x1f8>
 8008294:	9b03      	ldr	r3, [sp, #12]
 8008296:	3307      	adds	r3, #7
 8008298:	f023 0307 	bic.w	r3, r3, #7
 800829c:	3308      	adds	r3, #8
 800829e:	9303      	str	r3, [sp, #12]
 80082a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a2:	443b      	add	r3, r7
 80082a4:	9309      	str	r3, [sp, #36]	; 0x24
 80082a6:	e767      	b.n	8008178 <_vfiprintf_r+0x94>
 80082a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80082ac:	460c      	mov	r4, r1
 80082ae:	2001      	movs	r0, #1
 80082b0:	e7a5      	b.n	80081fe <_vfiprintf_r+0x11a>
 80082b2:	2300      	movs	r3, #0
 80082b4:	3401      	adds	r4, #1
 80082b6:	9305      	str	r3, [sp, #20]
 80082b8:	4619      	mov	r1, r3
 80082ba:	f04f 0c0a 	mov.w	ip, #10
 80082be:	4620      	mov	r0, r4
 80082c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082c4:	3a30      	subs	r2, #48	; 0x30
 80082c6:	2a09      	cmp	r2, #9
 80082c8:	d903      	bls.n	80082d2 <_vfiprintf_r+0x1ee>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d0c5      	beq.n	800825a <_vfiprintf_r+0x176>
 80082ce:	9105      	str	r1, [sp, #20]
 80082d0:	e7c3      	b.n	800825a <_vfiprintf_r+0x176>
 80082d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80082d6:	4604      	mov	r4, r0
 80082d8:	2301      	movs	r3, #1
 80082da:	e7f0      	b.n	80082be <_vfiprintf_r+0x1da>
 80082dc:	ab03      	add	r3, sp, #12
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	462a      	mov	r2, r5
 80082e2:	4b16      	ldr	r3, [pc, #88]	; (800833c <_vfiprintf_r+0x258>)
 80082e4:	a904      	add	r1, sp, #16
 80082e6:	4630      	mov	r0, r6
 80082e8:	f3af 8000 	nop.w
 80082ec:	4607      	mov	r7, r0
 80082ee:	1c78      	adds	r0, r7, #1
 80082f0:	d1d6      	bne.n	80082a0 <_vfiprintf_r+0x1bc>
 80082f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082f4:	07d9      	lsls	r1, r3, #31
 80082f6:	d405      	bmi.n	8008304 <_vfiprintf_r+0x220>
 80082f8:	89ab      	ldrh	r3, [r5, #12]
 80082fa:	059a      	lsls	r2, r3, #22
 80082fc:	d402      	bmi.n	8008304 <_vfiprintf_r+0x220>
 80082fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008300:	f7ff fc23 	bl	8007b4a <__retarget_lock_release_recursive>
 8008304:	89ab      	ldrh	r3, [r5, #12]
 8008306:	065b      	lsls	r3, r3, #25
 8008308:	f53f af12 	bmi.w	8008130 <_vfiprintf_r+0x4c>
 800830c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800830e:	e711      	b.n	8008134 <_vfiprintf_r+0x50>
 8008310:	ab03      	add	r3, sp, #12
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	462a      	mov	r2, r5
 8008316:	4b09      	ldr	r3, [pc, #36]	; (800833c <_vfiprintf_r+0x258>)
 8008318:	a904      	add	r1, sp, #16
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f880 	bl	8008420 <_printf_i>
 8008320:	e7e4      	b.n	80082ec <_vfiprintf_r+0x208>
 8008322:	bf00      	nop
 8008324:	08008b34 	.word	0x08008b34
 8008328:	08008b54 	.word	0x08008b54
 800832c:	08008b14 	.word	0x08008b14
 8008330:	08008b74 	.word	0x08008b74
 8008334:	08008b7e 	.word	0x08008b7e
 8008338:	00000000 	.word	0x00000000
 800833c:	080080bf 	.word	0x080080bf
 8008340:	08008b7a 	.word	0x08008b7a

08008344 <_printf_common>:
 8008344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	4616      	mov	r6, r2
 800834a:	4699      	mov	r9, r3
 800834c:	688a      	ldr	r2, [r1, #8]
 800834e:	690b      	ldr	r3, [r1, #16]
 8008350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008354:	4293      	cmp	r3, r2
 8008356:	bfb8      	it	lt
 8008358:	4613      	movlt	r3, r2
 800835a:	6033      	str	r3, [r6, #0]
 800835c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008360:	4607      	mov	r7, r0
 8008362:	460c      	mov	r4, r1
 8008364:	b10a      	cbz	r2, 800836a <_printf_common+0x26>
 8008366:	3301      	adds	r3, #1
 8008368:	6033      	str	r3, [r6, #0]
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	0699      	lsls	r1, r3, #26
 800836e:	bf42      	ittt	mi
 8008370:	6833      	ldrmi	r3, [r6, #0]
 8008372:	3302      	addmi	r3, #2
 8008374:	6033      	strmi	r3, [r6, #0]
 8008376:	6825      	ldr	r5, [r4, #0]
 8008378:	f015 0506 	ands.w	r5, r5, #6
 800837c:	d106      	bne.n	800838c <_printf_common+0x48>
 800837e:	f104 0a19 	add.w	sl, r4, #25
 8008382:	68e3      	ldr	r3, [r4, #12]
 8008384:	6832      	ldr	r2, [r6, #0]
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	42ab      	cmp	r3, r5
 800838a:	dc26      	bgt.n	80083da <_printf_common+0x96>
 800838c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008390:	1e13      	subs	r3, r2, #0
 8008392:	6822      	ldr	r2, [r4, #0]
 8008394:	bf18      	it	ne
 8008396:	2301      	movne	r3, #1
 8008398:	0692      	lsls	r2, r2, #26
 800839a:	d42b      	bmi.n	80083f4 <_printf_common+0xb0>
 800839c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083a0:	4649      	mov	r1, r9
 80083a2:	4638      	mov	r0, r7
 80083a4:	47c0      	blx	r8
 80083a6:	3001      	adds	r0, #1
 80083a8:	d01e      	beq.n	80083e8 <_printf_common+0xa4>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	68e5      	ldr	r5, [r4, #12]
 80083ae:	6832      	ldr	r2, [r6, #0]
 80083b0:	f003 0306 	and.w	r3, r3, #6
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	bf08      	it	eq
 80083b8:	1aad      	subeq	r5, r5, r2
 80083ba:	68a3      	ldr	r3, [r4, #8]
 80083bc:	6922      	ldr	r2, [r4, #16]
 80083be:	bf0c      	ite	eq
 80083c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083c4:	2500      	movne	r5, #0
 80083c6:	4293      	cmp	r3, r2
 80083c8:	bfc4      	itt	gt
 80083ca:	1a9b      	subgt	r3, r3, r2
 80083cc:	18ed      	addgt	r5, r5, r3
 80083ce:	2600      	movs	r6, #0
 80083d0:	341a      	adds	r4, #26
 80083d2:	42b5      	cmp	r5, r6
 80083d4:	d11a      	bne.n	800840c <_printf_common+0xc8>
 80083d6:	2000      	movs	r0, #0
 80083d8:	e008      	b.n	80083ec <_printf_common+0xa8>
 80083da:	2301      	movs	r3, #1
 80083dc:	4652      	mov	r2, sl
 80083de:	4649      	mov	r1, r9
 80083e0:	4638      	mov	r0, r7
 80083e2:	47c0      	blx	r8
 80083e4:	3001      	adds	r0, #1
 80083e6:	d103      	bne.n	80083f0 <_printf_common+0xac>
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295
 80083ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083f0:	3501      	adds	r5, #1
 80083f2:	e7c6      	b.n	8008382 <_printf_common+0x3e>
 80083f4:	18e1      	adds	r1, r4, r3
 80083f6:	1c5a      	adds	r2, r3, #1
 80083f8:	2030      	movs	r0, #48	; 0x30
 80083fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083fe:	4422      	add	r2, r4
 8008400:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008404:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008408:	3302      	adds	r3, #2
 800840a:	e7c7      	b.n	800839c <_printf_common+0x58>
 800840c:	2301      	movs	r3, #1
 800840e:	4622      	mov	r2, r4
 8008410:	4649      	mov	r1, r9
 8008412:	4638      	mov	r0, r7
 8008414:	47c0      	blx	r8
 8008416:	3001      	adds	r0, #1
 8008418:	d0e6      	beq.n	80083e8 <_printf_common+0xa4>
 800841a:	3601      	adds	r6, #1
 800841c:	e7d9      	b.n	80083d2 <_printf_common+0x8e>
	...

08008420 <_printf_i>:
 8008420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008424:	7e0f      	ldrb	r7, [r1, #24]
 8008426:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008428:	2f78      	cmp	r7, #120	; 0x78
 800842a:	4691      	mov	r9, r2
 800842c:	4680      	mov	r8, r0
 800842e:	460c      	mov	r4, r1
 8008430:	469a      	mov	sl, r3
 8008432:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008436:	d807      	bhi.n	8008448 <_printf_i+0x28>
 8008438:	2f62      	cmp	r7, #98	; 0x62
 800843a:	d80a      	bhi.n	8008452 <_printf_i+0x32>
 800843c:	2f00      	cmp	r7, #0
 800843e:	f000 80d8 	beq.w	80085f2 <_printf_i+0x1d2>
 8008442:	2f58      	cmp	r7, #88	; 0x58
 8008444:	f000 80a3 	beq.w	800858e <_printf_i+0x16e>
 8008448:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800844c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008450:	e03a      	b.n	80084c8 <_printf_i+0xa8>
 8008452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008456:	2b15      	cmp	r3, #21
 8008458:	d8f6      	bhi.n	8008448 <_printf_i+0x28>
 800845a:	a101      	add	r1, pc, #4	; (adr r1, 8008460 <_printf_i+0x40>)
 800845c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008460:	080084b9 	.word	0x080084b9
 8008464:	080084cd 	.word	0x080084cd
 8008468:	08008449 	.word	0x08008449
 800846c:	08008449 	.word	0x08008449
 8008470:	08008449 	.word	0x08008449
 8008474:	08008449 	.word	0x08008449
 8008478:	080084cd 	.word	0x080084cd
 800847c:	08008449 	.word	0x08008449
 8008480:	08008449 	.word	0x08008449
 8008484:	08008449 	.word	0x08008449
 8008488:	08008449 	.word	0x08008449
 800848c:	080085d9 	.word	0x080085d9
 8008490:	080084fd 	.word	0x080084fd
 8008494:	080085bb 	.word	0x080085bb
 8008498:	08008449 	.word	0x08008449
 800849c:	08008449 	.word	0x08008449
 80084a0:	080085fb 	.word	0x080085fb
 80084a4:	08008449 	.word	0x08008449
 80084a8:	080084fd 	.word	0x080084fd
 80084ac:	08008449 	.word	0x08008449
 80084b0:	08008449 	.word	0x08008449
 80084b4:	080085c3 	.word	0x080085c3
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	1d1a      	adds	r2, r3, #4
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	602a      	str	r2, [r5, #0]
 80084c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0a3      	b.n	8008614 <_printf_i+0x1f4>
 80084cc:	6820      	ldr	r0, [r4, #0]
 80084ce:	6829      	ldr	r1, [r5, #0]
 80084d0:	0606      	lsls	r6, r0, #24
 80084d2:	f101 0304 	add.w	r3, r1, #4
 80084d6:	d50a      	bpl.n	80084ee <_printf_i+0xce>
 80084d8:	680e      	ldr	r6, [r1, #0]
 80084da:	602b      	str	r3, [r5, #0]
 80084dc:	2e00      	cmp	r6, #0
 80084de:	da03      	bge.n	80084e8 <_printf_i+0xc8>
 80084e0:	232d      	movs	r3, #45	; 0x2d
 80084e2:	4276      	negs	r6, r6
 80084e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084e8:	485e      	ldr	r0, [pc, #376]	; (8008664 <_printf_i+0x244>)
 80084ea:	230a      	movs	r3, #10
 80084ec:	e019      	b.n	8008522 <_printf_i+0x102>
 80084ee:	680e      	ldr	r6, [r1, #0]
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80084f6:	bf18      	it	ne
 80084f8:	b236      	sxthne	r6, r6
 80084fa:	e7ef      	b.n	80084dc <_printf_i+0xbc>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	6820      	ldr	r0, [r4, #0]
 8008500:	1d19      	adds	r1, r3, #4
 8008502:	6029      	str	r1, [r5, #0]
 8008504:	0601      	lsls	r1, r0, #24
 8008506:	d501      	bpl.n	800850c <_printf_i+0xec>
 8008508:	681e      	ldr	r6, [r3, #0]
 800850a:	e002      	b.n	8008512 <_printf_i+0xf2>
 800850c:	0646      	lsls	r6, r0, #25
 800850e:	d5fb      	bpl.n	8008508 <_printf_i+0xe8>
 8008510:	881e      	ldrh	r6, [r3, #0]
 8008512:	4854      	ldr	r0, [pc, #336]	; (8008664 <_printf_i+0x244>)
 8008514:	2f6f      	cmp	r7, #111	; 0x6f
 8008516:	bf0c      	ite	eq
 8008518:	2308      	moveq	r3, #8
 800851a:	230a      	movne	r3, #10
 800851c:	2100      	movs	r1, #0
 800851e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008522:	6865      	ldr	r5, [r4, #4]
 8008524:	60a5      	str	r5, [r4, #8]
 8008526:	2d00      	cmp	r5, #0
 8008528:	bfa2      	ittt	ge
 800852a:	6821      	ldrge	r1, [r4, #0]
 800852c:	f021 0104 	bicge.w	r1, r1, #4
 8008530:	6021      	strge	r1, [r4, #0]
 8008532:	b90e      	cbnz	r6, 8008538 <_printf_i+0x118>
 8008534:	2d00      	cmp	r5, #0
 8008536:	d04d      	beq.n	80085d4 <_printf_i+0x1b4>
 8008538:	4615      	mov	r5, r2
 800853a:	fbb6 f1f3 	udiv	r1, r6, r3
 800853e:	fb03 6711 	mls	r7, r3, r1, r6
 8008542:	5dc7      	ldrb	r7, [r0, r7]
 8008544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008548:	4637      	mov	r7, r6
 800854a:	42bb      	cmp	r3, r7
 800854c:	460e      	mov	r6, r1
 800854e:	d9f4      	bls.n	800853a <_printf_i+0x11a>
 8008550:	2b08      	cmp	r3, #8
 8008552:	d10b      	bne.n	800856c <_printf_i+0x14c>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	07de      	lsls	r6, r3, #31
 8008558:	d508      	bpl.n	800856c <_printf_i+0x14c>
 800855a:	6923      	ldr	r3, [r4, #16]
 800855c:	6861      	ldr	r1, [r4, #4]
 800855e:	4299      	cmp	r1, r3
 8008560:	bfde      	ittt	le
 8008562:	2330      	movle	r3, #48	; 0x30
 8008564:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800856c:	1b52      	subs	r2, r2, r5
 800856e:	6122      	str	r2, [r4, #16]
 8008570:	f8cd a000 	str.w	sl, [sp]
 8008574:	464b      	mov	r3, r9
 8008576:	aa03      	add	r2, sp, #12
 8008578:	4621      	mov	r1, r4
 800857a:	4640      	mov	r0, r8
 800857c:	f7ff fee2 	bl	8008344 <_printf_common>
 8008580:	3001      	adds	r0, #1
 8008582:	d14c      	bne.n	800861e <_printf_i+0x1fe>
 8008584:	f04f 30ff 	mov.w	r0, #4294967295
 8008588:	b004      	add	sp, #16
 800858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858e:	4835      	ldr	r0, [pc, #212]	; (8008664 <_printf_i+0x244>)
 8008590:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008594:	6829      	ldr	r1, [r5, #0]
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	f851 6b04 	ldr.w	r6, [r1], #4
 800859c:	6029      	str	r1, [r5, #0]
 800859e:	061d      	lsls	r5, r3, #24
 80085a0:	d514      	bpl.n	80085cc <_printf_i+0x1ac>
 80085a2:	07df      	lsls	r7, r3, #31
 80085a4:	bf44      	itt	mi
 80085a6:	f043 0320 	orrmi.w	r3, r3, #32
 80085aa:	6023      	strmi	r3, [r4, #0]
 80085ac:	b91e      	cbnz	r6, 80085b6 <_printf_i+0x196>
 80085ae:	6823      	ldr	r3, [r4, #0]
 80085b0:	f023 0320 	bic.w	r3, r3, #32
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	2310      	movs	r3, #16
 80085b8:	e7b0      	b.n	800851c <_printf_i+0xfc>
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	f043 0320 	orr.w	r3, r3, #32
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	2378      	movs	r3, #120	; 0x78
 80085c4:	4828      	ldr	r0, [pc, #160]	; (8008668 <_printf_i+0x248>)
 80085c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085ca:	e7e3      	b.n	8008594 <_printf_i+0x174>
 80085cc:	0659      	lsls	r1, r3, #25
 80085ce:	bf48      	it	mi
 80085d0:	b2b6      	uxthmi	r6, r6
 80085d2:	e7e6      	b.n	80085a2 <_printf_i+0x182>
 80085d4:	4615      	mov	r5, r2
 80085d6:	e7bb      	b.n	8008550 <_printf_i+0x130>
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	6826      	ldr	r6, [r4, #0]
 80085dc:	6961      	ldr	r1, [r4, #20]
 80085de:	1d18      	adds	r0, r3, #4
 80085e0:	6028      	str	r0, [r5, #0]
 80085e2:	0635      	lsls	r5, r6, #24
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	d501      	bpl.n	80085ec <_printf_i+0x1cc>
 80085e8:	6019      	str	r1, [r3, #0]
 80085ea:	e002      	b.n	80085f2 <_printf_i+0x1d2>
 80085ec:	0670      	lsls	r0, r6, #25
 80085ee:	d5fb      	bpl.n	80085e8 <_printf_i+0x1c8>
 80085f0:	8019      	strh	r1, [r3, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	6123      	str	r3, [r4, #16]
 80085f6:	4615      	mov	r5, r2
 80085f8:	e7ba      	b.n	8008570 <_printf_i+0x150>
 80085fa:	682b      	ldr	r3, [r5, #0]
 80085fc:	1d1a      	adds	r2, r3, #4
 80085fe:	602a      	str	r2, [r5, #0]
 8008600:	681d      	ldr	r5, [r3, #0]
 8008602:	6862      	ldr	r2, [r4, #4]
 8008604:	2100      	movs	r1, #0
 8008606:	4628      	mov	r0, r5
 8008608:	f7f7 fdea 	bl	80001e0 <memchr>
 800860c:	b108      	cbz	r0, 8008612 <_printf_i+0x1f2>
 800860e:	1b40      	subs	r0, r0, r5
 8008610:	6060      	str	r0, [r4, #4]
 8008612:	6863      	ldr	r3, [r4, #4]
 8008614:	6123      	str	r3, [r4, #16]
 8008616:	2300      	movs	r3, #0
 8008618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800861c:	e7a8      	b.n	8008570 <_printf_i+0x150>
 800861e:	6923      	ldr	r3, [r4, #16]
 8008620:	462a      	mov	r2, r5
 8008622:	4649      	mov	r1, r9
 8008624:	4640      	mov	r0, r8
 8008626:	47d0      	blx	sl
 8008628:	3001      	adds	r0, #1
 800862a:	d0ab      	beq.n	8008584 <_printf_i+0x164>
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	079b      	lsls	r3, r3, #30
 8008630:	d413      	bmi.n	800865a <_printf_i+0x23a>
 8008632:	68e0      	ldr	r0, [r4, #12]
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	4298      	cmp	r0, r3
 8008638:	bfb8      	it	lt
 800863a:	4618      	movlt	r0, r3
 800863c:	e7a4      	b.n	8008588 <_printf_i+0x168>
 800863e:	2301      	movs	r3, #1
 8008640:	4632      	mov	r2, r6
 8008642:	4649      	mov	r1, r9
 8008644:	4640      	mov	r0, r8
 8008646:	47d0      	blx	sl
 8008648:	3001      	adds	r0, #1
 800864a:	d09b      	beq.n	8008584 <_printf_i+0x164>
 800864c:	3501      	adds	r5, #1
 800864e:	68e3      	ldr	r3, [r4, #12]
 8008650:	9903      	ldr	r1, [sp, #12]
 8008652:	1a5b      	subs	r3, r3, r1
 8008654:	42ab      	cmp	r3, r5
 8008656:	dcf2      	bgt.n	800863e <_printf_i+0x21e>
 8008658:	e7eb      	b.n	8008632 <_printf_i+0x212>
 800865a:	2500      	movs	r5, #0
 800865c:	f104 0619 	add.w	r6, r4, #25
 8008660:	e7f5      	b.n	800864e <_printf_i+0x22e>
 8008662:	bf00      	nop
 8008664:	08008b85 	.word	0x08008b85
 8008668:	08008b96 	.word	0x08008b96

0800866c <_sbrk_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d06      	ldr	r5, [pc, #24]	; (8008688 <_sbrk_r+0x1c>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7f9 ff8c 	bl	8002594 <_sbrk>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_sbrk_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_sbrk_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	20000930 	.word	0x20000930

0800868c <__sread>:
 800868c:	b510      	push	{r4, lr}
 800868e:	460c      	mov	r4, r1
 8008690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008694:	f000 f8f8 	bl	8008888 <_read_r>
 8008698:	2800      	cmp	r0, #0
 800869a:	bfab      	itete	ge
 800869c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800869e:	89a3      	ldrhlt	r3, [r4, #12]
 80086a0:	181b      	addge	r3, r3, r0
 80086a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086a6:	bfac      	ite	ge
 80086a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80086aa:	81a3      	strhlt	r3, [r4, #12]
 80086ac:	bd10      	pop	{r4, pc}

080086ae <__swrite>:
 80086ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b2:	461f      	mov	r7, r3
 80086b4:	898b      	ldrh	r3, [r1, #12]
 80086b6:	05db      	lsls	r3, r3, #23
 80086b8:	4605      	mov	r5, r0
 80086ba:	460c      	mov	r4, r1
 80086bc:	4616      	mov	r6, r2
 80086be:	d505      	bpl.n	80086cc <__swrite+0x1e>
 80086c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c4:	2302      	movs	r3, #2
 80086c6:	2200      	movs	r2, #0
 80086c8:	f000 f868 	bl	800879c <_lseek_r>
 80086cc:	89a3      	ldrh	r3, [r4, #12]
 80086ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086d6:	81a3      	strh	r3, [r4, #12]
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	4628      	mov	r0, r5
 80086de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086e2:	f000 b817 	b.w	8008714 <_write_r>

080086e6 <__sseek>:
 80086e6:	b510      	push	{r4, lr}
 80086e8:	460c      	mov	r4, r1
 80086ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ee:	f000 f855 	bl	800879c <_lseek_r>
 80086f2:	1c43      	adds	r3, r0, #1
 80086f4:	89a3      	ldrh	r3, [r4, #12]
 80086f6:	bf15      	itete	ne
 80086f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80086fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008702:	81a3      	strheq	r3, [r4, #12]
 8008704:	bf18      	it	ne
 8008706:	81a3      	strhne	r3, [r4, #12]
 8008708:	bd10      	pop	{r4, pc}

0800870a <__sclose>:
 800870a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870e:	f000 b813 	b.w	8008738 <_close_r>
	...

08008714 <_write_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d07      	ldr	r5, [pc, #28]	; (8008734 <_write_r+0x20>)
 8008718:	4604      	mov	r4, r0
 800871a:	4608      	mov	r0, r1
 800871c:	4611      	mov	r1, r2
 800871e:	2200      	movs	r2, #0
 8008720:	602a      	str	r2, [r5, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	f7f9 fee5 	bl	80024f2 <_write>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_write_r+0x1e>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_write_r+0x1e>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	20000930 	.word	0x20000930

08008738 <_close_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d06      	ldr	r5, [pc, #24]	; (8008754 <_close_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	f7f9 fef1 	bl	800252a <_close>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_close_r+0x1a>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_close_r+0x1a>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000930 	.word	0x20000930

08008758 <_fstat_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d07      	ldr	r5, [pc, #28]	; (8008778 <_fstat_r+0x20>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	4611      	mov	r1, r2
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	f7f9 feec 	bl	8002542 <_fstat>
 800876a:	1c43      	adds	r3, r0, #1
 800876c:	d102      	bne.n	8008774 <_fstat_r+0x1c>
 800876e:	682b      	ldr	r3, [r5, #0]
 8008770:	b103      	cbz	r3, 8008774 <_fstat_r+0x1c>
 8008772:	6023      	str	r3, [r4, #0]
 8008774:	bd38      	pop	{r3, r4, r5, pc}
 8008776:	bf00      	nop
 8008778:	20000930 	.word	0x20000930

0800877c <_isatty_r>:
 800877c:	b538      	push	{r3, r4, r5, lr}
 800877e:	4d06      	ldr	r5, [pc, #24]	; (8008798 <_isatty_r+0x1c>)
 8008780:	2300      	movs	r3, #0
 8008782:	4604      	mov	r4, r0
 8008784:	4608      	mov	r0, r1
 8008786:	602b      	str	r3, [r5, #0]
 8008788:	f7f9 feeb 	bl	8002562 <_isatty>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_isatty_r+0x1a>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_isatty_r+0x1a>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000930 	.word	0x20000930

0800879c <_lseek_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	; (80087bc <_lseek_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7f9 fee4 	bl	8002578 <_lseek>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_lseek_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_lseek_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000930 	.word	0x20000930

080087c0 <memcpy>:
 80087c0:	440a      	add	r2, r1
 80087c2:	4291      	cmp	r1, r2
 80087c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c8:	d100      	bne.n	80087cc <memcpy+0xc>
 80087ca:	4770      	bx	lr
 80087cc:	b510      	push	{r4, lr}
 80087ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087d6:	4291      	cmp	r1, r2
 80087d8:	d1f9      	bne.n	80087ce <memcpy+0xe>
 80087da:	bd10      	pop	{r4, pc}

080087dc <memmove>:
 80087dc:	4288      	cmp	r0, r1
 80087de:	b510      	push	{r4, lr}
 80087e0:	eb01 0402 	add.w	r4, r1, r2
 80087e4:	d902      	bls.n	80087ec <memmove+0x10>
 80087e6:	4284      	cmp	r4, r0
 80087e8:	4623      	mov	r3, r4
 80087ea:	d807      	bhi.n	80087fc <memmove+0x20>
 80087ec:	1e43      	subs	r3, r0, #1
 80087ee:	42a1      	cmp	r1, r4
 80087f0:	d008      	beq.n	8008804 <memmove+0x28>
 80087f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087fa:	e7f8      	b.n	80087ee <memmove+0x12>
 80087fc:	4402      	add	r2, r0
 80087fe:	4601      	mov	r1, r0
 8008800:	428a      	cmp	r2, r1
 8008802:	d100      	bne.n	8008806 <memmove+0x2a>
 8008804:	bd10      	pop	{r4, pc}
 8008806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800880a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800880e:	e7f7      	b.n	8008800 <memmove+0x24>

08008810 <__malloc_lock>:
 8008810:	4801      	ldr	r0, [pc, #4]	; (8008818 <__malloc_lock+0x8>)
 8008812:	f7ff b999 	b.w	8007b48 <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	20000924 	.word	0x20000924

0800881c <__malloc_unlock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_unlock+0x8>)
 800881e:	f7ff b994 	b.w	8007b4a <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	20000924 	.word	0x20000924

08008828 <_realloc_r>:
 8008828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800882c:	4680      	mov	r8, r0
 800882e:	4614      	mov	r4, r2
 8008830:	460e      	mov	r6, r1
 8008832:	b921      	cbnz	r1, 800883e <_realloc_r+0x16>
 8008834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	4611      	mov	r1, r2
 800883a:	f7ff ba59 	b.w	8007cf0 <_malloc_r>
 800883e:	b92a      	cbnz	r2, 800884c <_realloc_r+0x24>
 8008840:	f7ff f9ea 	bl	8007c18 <_free_r>
 8008844:	4625      	mov	r5, r4
 8008846:	4628      	mov	r0, r5
 8008848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800884c:	f000 f82e 	bl	80088ac <_malloc_usable_size_r>
 8008850:	4284      	cmp	r4, r0
 8008852:	4607      	mov	r7, r0
 8008854:	d802      	bhi.n	800885c <_realloc_r+0x34>
 8008856:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800885a:	d812      	bhi.n	8008882 <_realloc_r+0x5a>
 800885c:	4621      	mov	r1, r4
 800885e:	4640      	mov	r0, r8
 8008860:	f7ff fa46 	bl	8007cf0 <_malloc_r>
 8008864:	4605      	mov	r5, r0
 8008866:	2800      	cmp	r0, #0
 8008868:	d0ed      	beq.n	8008846 <_realloc_r+0x1e>
 800886a:	42bc      	cmp	r4, r7
 800886c:	4622      	mov	r2, r4
 800886e:	4631      	mov	r1, r6
 8008870:	bf28      	it	cs
 8008872:	463a      	movcs	r2, r7
 8008874:	f7ff ffa4 	bl	80087c0 <memcpy>
 8008878:	4631      	mov	r1, r6
 800887a:	4640      	mov	r0, r8
 800887c:	f7ff f9cc 	bl	8007c18 <_free_r>
 8008880:	e7e1      	b.n	8008846 <_realloc_r+0x1e>
 8008882:	4635      	mov	r5, r6
 8008884:	e7df      	b.n	8008846 <_realloc_r+0x1e>
	...

08008888 <_read_r>:
 8008888:	b538      	push	{r3, r4, r5, lr}
 800888a:	4d07      	ldr	r5, [pc, #28]	; (80088a8 <_read_r+0x20>)
 800888c:	4604      	mov	r4, r0
 800888e:	4608      	mov	r0, r1
 8008890:	4611      	mov	r1, r2
 8008892:	2200      	movs	r2, #0
 8008894:	602a      	str	r2, [r5, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	f7f9 fe0e 	bl	80024b8 <_read>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d102      	bne.n	80088a6 <_read_r+0x1e>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	b103      	cbz	r3, 80088a6 <_read_r+0x1e>
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	20000930 	.word	0x20000930

080088ac <_malloc_usable_size_r>:
 80088ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088b0:	1f18      	subs	r0, r3, #4
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfbc      	itt	lt
 80088b6:	580b      	ldrlt	r3, [r1, r0]
 80088b8:	18c0      	addlt	r0, r0, r3
 80088ba:	4770      	bx	lr

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
