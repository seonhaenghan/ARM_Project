
07.ELEVATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ae0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006c78  08006c78  00016c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d04  08006d04  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006d04  08006d04  00016d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d0c  08006d0c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d10  08006d10  00016d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006d14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  20000080  08006d94  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000900  08006d94  00020900  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015285  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003087  00000000  00000000  00035335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  000383c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  000396b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003925  00000000  00000000  0003a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017342  00000000  00000000  0003e195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098588  00000000  00000000  000554d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eda5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005514  00000000  00000000  000edab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006c60 	.word	0x08006c60

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006c60 	.word	0x08006c60

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d148      	bne.n	800057e <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 80004ec:	f000 f8a6 	bl	800063c <is_full>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d13e      	bne.n	8000574 <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 80004f6:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	2b0a      	cmp	r3, #10
 8000500:	d002      	beq.n	8000508 <HAL_UART_RxCpltCallback+0x2c>
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b0d      	cmp	r3, #13
 8000506:	d123      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 8000508:	4b47      	ldr	r3, [pc, #284]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	4847      	ldr	r0, [pc, #284]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 8000512:	4613      	mov	r3, r2
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4403      	add	r3, r0
 800051c:	440b      	add	r3, r1
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000522:	4b42      	ldr	r3, [pc, #264]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000530:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000532:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 8000538:	fb83 1302 	smull	r1, r3, r3, r2
 800053c:	1119      	asrs	r1, r3, #4
 800053e:	17d3      	asrs	r3, r2, #31
 8000540:	1acb      	subs	r3, r1, r3
 8000542:	2132      	movs	r1, #50	; 0x32
 8000544:	fb01 f303 	mul.w	r3, r1, r3
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	4a37      	ldr	r2, [pc, #220]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e011      	b.n	8000574 <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	4835      	ldr	r0, [pc, #212]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 800055a:	4613      	mov	r3, r2
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4403      	add	r3, r0
 8000564:	440b      	add	r3, r1
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	701a      	strb	r2, [r3, #0]
				rx_index++;
 800056a:	4b30      	ldr	r3, [pc, #192]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	4a2e      	ldr	r2, [pc, #184]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000572:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	492b      	ldr	r1, [pc, #172]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000578:	4829      	ldr	r0, [pc, #164]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 800057a:	f004 fea8 	bl	80052ce <HAL_UART_Receive_IT>
	}
///////////////////////////////////////////////////////////////////////////
	if (huart == &huart1)   // BT
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d148      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x13c>
	{
		if(is_full())
 8000586:	f000 f859 	bl	800063c <is_full>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d13e      	bne.n	800060e <HAL_UART_RxCpltCallback+0x132>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	73bb      	strb	r3, [r7, #14]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	2b0a      	cmp	r3, #10
 800059a:	d002      	beq.n	80005a2 <HAL_UART_RxCpltCallback+0xc6>
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	2b0d      	cmp	r3, #13
 80005a0:	d123      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x10e>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4403      	add	r3, r0
 80005b6:	440b      	add	r3, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ca:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 80005d2:	fb83 1302 	smull	r1, r3, r3, r2
 80005d6:	1119      	asrs	r1, r3, #4
 80005d8:	17d3      	asrs	r3, r2, #31
 80005da:	1acb      	subs	r3, r1, r3
 80005dc:	2132      	movs	r1, #50	; 0x32
 80005de:	fb01 f303 	mul.w	r3, r1, r3
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e011      	b.n	800060e <HAL_UART_RxCpltCallback+0x132>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4403      	add	r3, r0
 80005fe:	440b      	add	r3, r1
 8000600:	7bba      	ldrb	r2, [r7, #14]
 8000602:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800060c:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000614:	f004 fe5b 	bl	80052ce <HAL_UART_Receive_IT>
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000864 	.word	0x20000864
 8000624:	20000680 	.word	0x20000680
 8000628:	2000009c 	.word	0x2000009c
 800062c:	20000684 	.word	0x20000684
 8000630:	200000a4 	.word	0x200000a4
 8000634:	51eb851f 	.word	0x51eb851f
 8000638:	20000820 	.word	0x20000820

0800063c <is_full>:
	else
		return 0;
}

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <is_full+0x40>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <is_full+0x44>)
 800064a:	fb82 1203 	smull	r1, r2, r2, r3
 800064e:	1111      	asrs	r1, r2, #4
 8000650:	17da      	asrs	r2, r3, #31
 8000652:	1a8a      	subs	r2, r1, r2
 8000654:	2132      	movs	r1, #50	; 0x32
 8000656:	fb01 f202 	mul.w	r2, r1, r2
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <is_full+0x48>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	d101      	bne.n	800066c <is_full+0x30>
		return 1;
 8000668:	2301      	movs	r3, #1
 800066a:	e000      	b.n	800066e <is_full+0x32>
	else
		return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	2000009c 	.word	0x2000009c
 8000680:	51eb851f 	.word	0x51eb851f
 8000684:	200000a0 	.word	0x200000a0

08000688 <get_button>:
uint8_t prev_button5_state=BUTTON_RELEASE;
uint8_t prev_button6_state=BUTTON_RELEASE;

// 1. GPIO 2. GPIO PIN 3. 이전의 버튼
int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *prev_button_state)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	460b      	mov	r3, r1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	817b      	strh	r3, [r7, #10]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000696:	897b      	ldrh	r3, [r7, #10]
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f001 ffce 	bl	800263c <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	75fb      	strb	r3, [r7, #23]

	if ((current_state == BUTTON_PRESS) && (*prev_button_state == BUTTON_RELEASE))  // 처음 누른상태
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10b      	bne.n	80006c2 <get_button+0x3a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d107      	bne.n	80006c2 <get_button+0x3a>
	{
		*prev_button_state = current_state;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7dfa      	ldrb	r2, [r7, #23]
 80006b6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(30);   // noise가 지나가기를 기다린다.
 80006b8:	201e      	movs	r0, #30
 80006ba:	f001 fc73 	bl	8001fa4 <HAL_Delay>
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 80006be:	2301      	movs	r3, #1
 80006c0:	e00c      	b.n	80006dc <get_button+0x54>
	}
	else if ((current_state == BUTTON_RELEASE) && (*prev_button_state == BUTTON_PRESS))
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <get_button+0x52>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <get_button+0x52>
	{
		*prev_button_state = current_state;   // 릴리즈 상태
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7dfa      	ldrb	r2, [r7, #23]
 80006d4:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <get_button+0x54>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <led_lr_shift>:
void led_all_off()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
}
void led_lr_shift()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(GPIOB, 0x80 >> led_shift, GPIO_PIN_SET);
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <led_lr_shift+0x50>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	fa42 f303 	asr.w	r3, r2, r3
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <led_lr_shift+0x54>)
 80006fa:	f001 ffb7 	bl	800266c <HAL_GPIO_WritePin>
		if(led_timer == 500)
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <led_lr_shift+0x58>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000706:	d113      	bne.n	8000730 <led_lr_shift+0x4c>
		{
			led_timer = 0;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <led_lr_shift+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
			led_shift++;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <led_lr_shift+0x50>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <led_lr_shift+0x50>)
 8000716:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOB, 0xff , GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <led_lr_shift+0x54>)
 800071e:	f001 ffa5 	bl	800266c <HAL_GPIO_WritePin>
			if(led_shift > 8)
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <led_lr_shift+0x50>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b08      	cmp	r3, #8
 8000728:	dd02      	ble.n	8000730 <led_lr_shift+0x4c>
			{
				led_shift = 0;
 800072a:	4b02      	ldr	r3, [pc, #8]	; (8000734 <led_lr_shift+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]

			}
		}
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000688 	.word	0x20000688
 8000738:	40020400 	.word	0x40020400
 800073c:	200008b0 	.word	0x200008b0

08000740 <led_rl_shift>:

void led_rl_shift()
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(GPIOB, 0x01 << led_shift, GPIO_PIN_SET);
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <led_rl_shift+0x50>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2201      	movs	r2, #1
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	b29b      	uxth	r3, r3
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <led_rl_shift+0x54>)
 8000756:	f001 ff89 	bl	800266c <HAL_GPIO_WritePin>
		if(led_timer == 500)
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <led_rl_shift+0x58>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000762:	d113      	bne.n	800078c <led_rl_shift+0x4c>
		{
			led_timer = 0;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <led_rl_shift+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
			led_shift++;
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <led_rl_shift+0x50>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <led_rl_shift+0x50>)
 8000772:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOB, 0xff , GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	21ff      	movs	r1, #255	; 0xff
 8000778:	4806      	ldr	r0, [pc, #24]	; (8000794 <led_rl_shift+0x54>)
 800077a:	f001 ff77 	bl	800266c <HAL_GPIO_WritePin>
			if(led_shift > 8)
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <led_rl_shift+0x50>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2b08      	cmp	r3, #8
 8000784:	dd02      	ble.n	800078c <led_rl_shift+0x4c>
			{
				led_shift = 0;
 8000786:	4b02      	ldr	r3, [pc, #8]	; (8000790 <led_rl_shift+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]

			}
		}
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000688 	.word	0x20000688
 8000794:	40020400 	.word	0x40020400
 8000798:	200008b0 	.word	0x200008b0

0800079c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80007a4:	1d39      	adds	r1, r7, #4
 80007a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007aa:	2201      	movs	r2, #1
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <__io_putchar+0x20>)
 80007ae:	f004 fcfc 	bl	80051aa <HAL_UART_Transmit>

  return ch;
 80007b2:	687b      	ldr	r3, [r7, #4]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000864 	.word	0x20000864

080007c0 <HAL_SYSTICK_Callback>:
volatile int led_timer = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	t1ms_count++;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <HAL_SYSTICK_Callback+0x2c>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_SYSTICK_Callback+0x2c>)
 80007cc:	6013      	str	r3, [r2, #0]
	t2ms_count ++;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_SYSTICK_Callback+0x30>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_SYSTICK_Callback+0x30>)
 80007d6:	6013      	str	r3, [r2, #0]
	led_timer++;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_SYSTICK_Callback+0x34>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	3301      	adds	r3, #1
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <HAL_SYSTICK_Callback+0x34>)
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	200008a8 	.word	0x200008a8
 80007f0:	200008ac 	.word	0x200008ac
 80007f4:	200008b0 	.word	0x200008b0

080007f8 <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM11_10ms_counter=0;
volatile int TIM11_10ms_ultrasonic_counter = 0;
volatile int TIM11_10ms_servomotor_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d10e      	bne.n	8000828 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM11_10ms_counter++;
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000812:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	3301      	adds	r3, #1
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800081c:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	3301      	adds	r3, #1
 8000824:	4a06      	ldr	r2, [pc, #24]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000826:	6013      	str	r3, [r2, #0]
	}
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40014800 	.word	0x40014800
 8000838:	200008b4 	.word	0x200008b4
 800083c:	200008b8 	.word	0x200008b8
 8000840:	200008bc 	.word	0x200008bc

08000844 <HAL_GPIO_EXTI_Callback>:
// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every GPIO_EXTI_Callback function : enter here every 10ms
volatile int exint_signal = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 800084e:	88fb      	ldrh	r3, [r7, #6]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d002      	beq.n	800085a <HAL_GPIO_EXTI_Callback+0x16>
 8000854:	2b02      	cmp	r3, #2
 8000856:	d00f      	beq.n	8000878 <HAL_GPIO_EXTI_Callback+0x34>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

  		exint_signal = 1;
  	  break;
  }
}
 8000858:	e01d      	b.n	8000896 <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_0, GPIO_PIN_RESET);
 800085a:	2200      	movs	r2, #0
 800085c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000860:	480f      	ldr	r0, [pc, #60]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000862:	f001 ff03 	bl	800266c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2101      	movs	r1, #1
 800086a:	480d      	ldr	r0, [pc, #52]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800086c:	f001 fefe 	bl	800266c <HAL_GPIO_WritePin>
  		exint_signal = 0;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
  	  break;
 8000876:	e00e      	b.n	8000896 <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_1, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000880:	f001 fef4 	bl	800266c <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2102      	movs	r1, #2
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800088a:	f001 feef 	bl	800266c <HAL_GPIO_WritePin>
  		exint_signal = 1;
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_GPIO_EXTI_Callback+0x60>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]
  	  break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020400 	.word	0x40020400
 80008a4:	20000008 	.word	0x20000008

080008a8 <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <delay_us+0x2c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 80008b8:	bf00      	nop
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <delay_us+0x2c>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	429a      	cmp	r2, r3
 80008c4:	d8f9      	bhi.n	80008ba <delay_us+0x12>
	;
}
 80008c6:	bf00      	nop
 80008c8:	bf00      	nop
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	20000700 	.word	0x20000700

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f001 faf0 	bl	8001ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f846 	bl	8000970 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 fb00 	bl	8000ee8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e8:	f000 fad4 	bl	8000e94 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80008ec:	f000 fa84 	bl	8000df8 <MX_TIM11_Init>
  MX_TIM1_Init();
 80008f0:	f000 f93e 	bl	8000b70 <MX_TIM1_Init>
  MX_RTC_Init();
 80008f4:	f000 f8e2 	bl	8000abc <MX_RTC_Init>
  MX_I2C1_Init();
 80008f8:	f000 f8b2 	bl	8000a60 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008fc:	f000 f9ac 	bl	8000c58 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000900:	f000 fa20 	bl	8000d44 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000904:	f000 fa9c 	bl	8000e40 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000908:	f000 f89e 	bl	8000a48 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 800090c:	4810      	ldr	r0, [pc, #64]	; (8000950 <main+0x78>)
 800090e:	f003 f82f 	bl	8003970 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 8000912:	2100      	movs	r1, #0
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <main+0x7c>)
 8000916:	f003 fae5 	bl	8003ee4 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 800091a:	2201      	movs	r2, #1
 800091c:	490e      	ldr	r1, [pc, #56]	; (8000958 <main+0x80>)
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <main+0x84>)
 8000920:	f004 fcd5 	bl	80052ce <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);	// BT UART Enable rx_interrupt
 8000924:	2201      	movs	r2, #1
 8000926:	490c      	ldr	r1, [pc, #48]	; (8000958 <main+0x80>)
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <main+0x88>)
 800092a:	f004 fcd0 	bl	80052ce <HAL_UART_Receive_IT>
  // PC, BT
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PWM Control for Servo motor
 800092e:	2108      	movs	r1, #8
 8000930:	480c      	ldr	r0, [pc, #48]	; (8000964 <main+0x8c>)
 8000932:	f003 f97f 	bl	8003c34 <HAL_TIM_PWM_Start_IT>
  // TIM3 CH1 : PIEZO BUZZER
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000936:	2100      	movs	r1, #0
 8000938:	480b      	ldr	r0, [pc, #44]	; (8000968 <main+0x90>)
 800093a:	f003 f8cb 	bl	8003ad4 <HAL_TIM_PWM_Start>
  //  i2c_lcd_init();
  printf("Hello STM32!!!\n");
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <main+0x94>)
 8000940:	f005 fcfe 	bl	8006340 <puts>

    /* USER CODE BEGIN 3 */
	 // pc_command_processing();
	 // ultrasonic_processing();
	 // get_rtc_time();
	  flow_button_move();
 8000944:	f000 fcfa 	bl	800133c <flow_button_move>
	 // exint_motor_control();
	  //servo_motor_control_main();
	  auto_door_sequence();
 8000948:	f000 fb76 	bl	8001038 <auto_door_sequence>
  {
 800094c:	e7fa      	b.n	8000944 <main+0x6c>
 800094e:	bf00      	nop
 8000950:	200007d8 	.word	0x200007d8
 8000954:	20000700 	.word	0x20000700
 8000958:	20000680 	.word	0x20000680
 800095c:	20000864 	.word	0x20000864
 8000960:	20000820 	.word	0x20000820
 8000964:	20000748 	.word	0x20000748
 8000968:	20000790 	.word	0x20000790
 800096c:	08006c78 	.word	0x08006c78

08000970 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b094      	sub	sp, #80	; 0x50
 8000974:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000976:	f107 0320 	add.w	r3, r7, #32
 800097a:	2230      	movs	r2, #48	; 0x30
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f005 fc68 	bl	8006254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <SystemClock_Config+0xd0>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099c:	4a28      	ldr	r2, [pc, #160]	; (8000a40 <SystemClock_Config+0xd0>)
 800099e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a2:	6413      	str	r3, [r2, #64]	; 0x40
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <SystemClock_Config+0xd0>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b0:	2300      	movs	r3, #0
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <SystemClock_Config+0xd4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a22      	ldr	r2, [pc, #136]	; (8000a44 <SystemClock_Config+0xd4>)
 80009ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b20      	ldr	r3, [pc, #128]	; (8000a44 <SystemClock_Config+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009cc:	230a      	movs	r3, #10
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d0:	2301      	movs	r3, #1
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d4:	2310      	movs	r3, #16
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009d8:	2301      	movs	r3, #1
 80009da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009dc:	2302      	movs	r3, #2
 80009de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009e4:	2310      	movs	r3, #16
 80009e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ee:	2304      	movs	r3, #4
 80009f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f2:	2304      	movs	r3, #4
 80009f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	4618      	mov	r0, r3
 80009fc:	f001 ffac 	bl	8002958 <HAL_RCC_OscConfig>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a06:	f000 fb11 	bl	800102c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	2102      	movs	r1, #2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f002 fa0e 	bl	8002e48 <HAL_RCC_ClockConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a32:	f000 fafb 	bl	800102c <Error_Handler>
  }
}
 8000a36:	bf00      	nop
 8000a38:	3750      	adds	r7, #80	; 0x50
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40007000 	.word	0x40007000

08000a48 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	201a      	movs	r0, #26
 8000a52:	f001 fba6 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000a56:	201a      	movs	r0, #26
 8000a58:	f001 fbbf 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a66:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <MX_I2C1_Init+0x54>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a6c:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_I2C1_Init+0x58>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a82:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_I2C1_Init+0x50>)
 8000a9e:	f001 fe17 	bl	80026d0 <HAL_I2C_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000aa8:	f000 fac0 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000068c 	.word	0x2000068c
 8000ab4:	40005400 	.word	0x40005400
 8000ab8:	000186a0 	.word	0x000186a0

08000abc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ad4:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <MX_RTC_Init+0xac>)
 8000ad6:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <MX_RTC_Init+0xb0>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000ada:	4b23      	ldr	r3, [pc, #140]	; (8000b68 <MX_RTC_Init+0xac>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <MX_RTC_Init+0xac>)
 8000ae2:	227f      	movs	r2, #127	; 0x7f
 8000ae4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ae6:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <MX_RTC_Init+0xac>)
 8000ae8:	22ff      	movs	r2, #255	; 0xff
 8000aea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_RTC_Init+0xac>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000af2:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_RTC_Init+0xac>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_RTC_Init+0xac>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000afe:	481a      	ldr	r0, [pc, #104]	; (8000b68 <MX_RTC_Init+0xac>)
 8000b00:	f002 fcb2 	bl	8003468 <HAL_RTC_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 fa8f 	bl	800102c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8000b0e:	2311      	movs	r3, #17
 8000b10:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000b12:	2310      	movs	r3, #16
 8000b14:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	480f      	ldr	r0, [pc, #60]	; (8000b68 <MX_RTC_Init+0xac>)
 8000b2a:	f002 fd13 	bl	8003554 <HAL_RTC_SetTime>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000b34:	f000 fa7a 	bl	800102c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000b3c:	2308      	movs	r3, #8
 8000b3e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8000b40:	2330      	movs	r3, #48	; 0x30
 8000b42:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000b44:	2322      	movs	r3, #34	; 0x22
 8000b46:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_RTC_Init+0xac>)
 8000b50:	f002 fd9a 	bl	8003688 <HAL_RTC_SetDate>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000b5a:	f000 fa67 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200006e0 	.word	0x200006e0
 8000b6c:	40002800 	.word	0x40002800

08000b70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0318 	add.w	r3, r7, #24
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9a:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000b9c:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <MX_TIM1_Init+0xe4>)
 8000b9e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000ba2:	2253      	movs	r2, #83	; 0x53
 8000ba4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba6:	4b2a      	ldr	r3, [pc, #168]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc0:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bc6:	4822      	ldr	r0, [pc, #136]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000bc8:	f002 fe83 	bl	80038d2 <HAL_TIM_Base_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000bd2:	f000 fa2b 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bda:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bdc:	f107 0318 	add.w	r3, r7, #24
 8000be0:	4619      	mov	r1, r3
 8000be2:	481b      	ldr	r0, [pc, #108]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000be4:	f003 fcfe 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000bee:	f000 fa1d 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000bf2:	4817      	ldr	r0, [pc, #92]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000bf4:	f003 f91c 	bl	8003e30 <HAL_TIM_IC_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000bfe:	f000 fa15 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480f      	ldr	r0, [pc, #60]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000c12:	f004 f9fb 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000c1c:	f000 fa06 	bl	800102c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c20:	230a      	movs	r3, #10
 8000c22:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_TIM1_Init+0xe0>)
 8000c38:	f003 fb76 	bl	8004328 <HAL_TIM_IC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000c42:	f000 f9f3 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000700 	.word	0x20000700
 8000c54:	40010000 	.word	0x40010000

08000c58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c88:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000c8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000c90:	4b2b      	ldr	r3, [pc, #172]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000c92:	f240 628f 	movw	r2, #1679	; 0x68f
 8000c96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c98:	4b29      	ldr	r3, [pc, #164]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000ca0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca6:	4b26      	ldr	r3, [pc, #152]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	4b24      	ldr	r3, [pc, #144]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb2:	4823      	ldr	r0, [pc, #140]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000cb4:	f002 fe0d 	bl	80038d2 <HAL_TIM_Base_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cbe:	f000 f9b5 	bl	800102c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000cd0:	f003 fc88 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cda:	f000 f9a7 	bl	800102c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cde:	4818      	ldr	r0, [pc, #96]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000ce0:	f002 fea8 	bl	8003a34 <HAL_TIM_PWM_Init>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cea:	f000 f99f 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000cfe:	f004 f985 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000d08:	f000 f990 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d0c:	2360      	movs	r3, #96	; 0x60
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2208      	movs	r2, #8
 8000d20:	4619      	mov	r1, r3
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000d24:	f003 fb9c 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d2e:	f000 f97d 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d32:	4803      	ldr	r0, [pc, #12]	; (8000d40 <MX_TIM2_Init+0xe8>)
 8000d34:	f000 fe36 	bl	80019a4 <HAL_TIM_MspPostInit>

}
 8000d38:	bf00      	nop
 8000d3a:	3738      	adds	r7, #56	; 0x38
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000748 	.word	0x20000748

08000d44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	605a      	str	r2, [r3, #4]
 8000d5c:	609a      	str	r2, [r3, #8]
 8000d5e:	60da      	str	r2, [r3, #12]
 8000d60:	611a      	str	r2, [r3, #16]
 8000d62:	615a      	str	r2, [r3, #20]
 8000d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <MX_TIM3_Init+0xb0>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d6e:	2233      	movs	r2, #51	; 0x33
 8000d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d7a:	f240 128f 	movw	r2, #399	; 0x18f
 8000d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d80:	4b1b      	ldr	r3, [pc, #108]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d8c:	4818      	ldr	r0, [pc, #96]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000d8e:	f002 fe51 	bl	8003a34 <HAL_TIM_PWM_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f948 	bl	800102c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4619      	mov	r1, r3
 8000daa:	4811      	ldr	r0, [pc, #68]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000dac:	f004 f92e 	bl	800500c <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000db6:	f000 f939 	bl	800102c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dba:	2360      	movs	r3, #96	; 0x60
 8000dbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000dbe:	23c7      	movs	r3, #199	; 0xc7
 8000dc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000dd2:	f003 fb45 	bl	8004460 <HAL_TIM_PWM_ConfigChannel>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ddc:	f000 f926 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <MX_TIM3_Init+0xac>)
 8000de2:	f000 fddf 	bl	80019a4 <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3728      	adds	r7, #40	; 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000790 	.word	0x20000790
 8000df4:	40000400 	.word	0x40000400

08000df8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000dfe:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <MX_TIM11_Init+0x44>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000e04:	2253      	movs	r2, #83	; 0x53
 8000e06:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000e10:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e14:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e16:	4b08      	ldr	r3, [pc, #32]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1c:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_TIM11_Init+0x40>)
 8000e24:	f002 fd55 	bl	80038d2 <HAL_TIM_Base_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000e2e:	f000 f8fd 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200007d8 	.word	0x200007d8
 8000e3c:	40014800 	.word	0x40014800

08000e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <MX_USART1_UART_Init+0x50>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART1_UART_Init+0x4c>)
 8000e78:	f004 f94a 	bl	8005110 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e82:	f000 f8d3 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000820 	.word	0x20000820
 8000e90:	40011000 	.word	0x40011000

08000e94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <MX_USART2_UART_Init+0x50>)
 8000e9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ea4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000eba:	220c      	movs	r2, #12
 8000ebc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USART2_UART_Init+0x4c>)
 8000ecc:	f004 f920 	bl	8005110 <HAL_UART_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ed6:	f000 f8a9 	bl	800102c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000864 	.word	0x20000864
 8000ee4:	40004400 	.word	0x40004400

08000ee8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	; 0x28
 8000eec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
 8000efa:	60da      	str	r2, [r3, #12]
 8000efc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	613b      	str	r3, [r7, #16]
 8000f02:	4b46      	ldr	r3, [pc, #280]	; (800101c <MX_GPIO_Init+0x134>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a45      	ldr	r2, [pc, #276]	; (800101c <MX_GPIO_Init+0x134>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b43      	ldr	r3, [pc, #268]	; (800101c <MX_GPIO_Init+0x134>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	4b3f      	ldr	r3, [pc, #252]	; (800101c <MX_GPIO_Init+0x134>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a3e      	ldr	r2, [pc, #248]	; (800101c <MX_GPIO_Init+0x134>)
 8000f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b3c      	ldr	r3, [pc, #240]	; (800101c <MX_GPIO_Init+0x134>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	4b38      	ldr	r3, [pc, #224]	; (800101c <MX_GPIO_Init+0x134>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a37      	ldr	r2, [pc, #220]	; (800101c <MX_GPIO_Init+0x134>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b35      	ldr	r3, [pc, #212]	; (800101c <MX_GPIO_Init+0x134>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_GPIO_Init+0x134>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	4a30      	ldr	r2, [pc, #192]	; (800101c <MX_GPIO_Init+0x134>)
 8000f5c:	f043 0302 	orr.w	r3, r3, #2
 8000f60:	6313      	str	r3, [r2, #48]	; 0x30
 8000f62:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_GPIO_Init+0x134>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	f003 0302 	and.w	r3, r3, #2
 8000f6a:	607b      	str	r3, [r7, #4]
 8000f6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000f74:	482a      	ldr	r0, [pc, #168]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f76:	f001 fb79 	bl	800266c <HAL_GPIO_WritePin>
                          |INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	21ff      	movs	r1, #255	; 0xff
 8000f7e:	4829      	ldr	r0, [pc, #164]	; (8001024 <MX_GPIO_Init+0x13c>)
 8000f80:	f001 fb74 	bl	800266c <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin
                           BUTTON5_Pin BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin
 8000f84:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000f88:	617b      	str	r3, [r7, #20]
                          |BUTTON5_Pin|BUTTON6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f92:	f107 0314 	add.w	r3, r7, #20
 8000f96:	4619      	mov	r1, r3
 8000f98:	4821      	ldr	r0, [pc, #132]	; (8001020 <MX_GPIO_Init+0x138>)
 8000f9a:	f001 f9cb 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	481d      	ldr	r0, [pc, #116]	; (8001028 <MX_GPIO_Init+0x140>)
 8000fb4:	f001 f9be 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIG_Pin INT1_STEP_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 8000fb8:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000fbc:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4813      	ldr	r0, [pc, #76]	; (8001020 <MX_GPIO_Init+0x138>)
 8000fd2:	f001 f9af 	bl	8002334 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000fd6:	23ff      	movs	r3, #255	; 0xff
 8000fd8:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	4619      	mov	r1, r3
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <MX_GPIO_Init+0x13c>)
 8000fee:	f001 f9a1 	bl	8002334 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2006      	movs	r0, #6
 8000ff8:	f001 f8d3 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ffc:	2006      	movs	r0, #6
 8000ffe:	f001 f8ec 	bl	80021da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2007      	movs	r0, #7
 8001008:	f001 f8cb 	bl	80021a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800100c:	2007      	movs	r0, #7
 800100e:	f001 f8e4 	bl	80021da <HAL_NVIC_EnableIRQ>

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	40020800 	.word	0x40020800
 8001024:	40020400 	.word	0x40020400
 8001028:	40020000 	.word	0x40020000

0800102c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001034:	e7fe      	b.n	8001034 <Error_Handler+0x8>
	...

08001038 <auto_door_sequence>:

int door_mode = 0;
int arm_rotate_indicator = 0;

void auto_door_sequence()
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

	if(door_mode == 0)
 800103c:	4b15      	ldr	r3, [pc, #84]	; (8001094 <auto_door_sequence+0x5c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d109      	bne.n	8001058 <auto_door_sequence+0x20>
	{
		if(distance_chk <= 2)
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <auto_door_sequence+0x60>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b02      	cmp	r3, #2
 800104a:	dc05      	bgt.n	8001058 <auto_door_sequence+0x20>
		{
			TIM11_10ms_servomotor_counter = 0;
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <auto_door_sequence+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
			door_mode = 1;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <auto_door_sequence+0x5c>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
		}
	}

	// 180' turn
	if(door_mode == 1)
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <auto_door_sequence+0x5c>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d114      	bne.n	800108a <auto_door_sequence+0x52>
	{
		if(TIM11_10ms_servomotor_counter == 0)
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <auto_door_sequence+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d104      	bne.n	8001072 <auto_door_sequence+0x3a>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 110); // door open
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <auto_door_sequence+0x68>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	226e      	movs	r2, #110	; 0x6e
 800106e:	63da      	str	r2, [r3, #60]	; 0x3c

			door_mode = 0;
		}

	}
}
 8001070:	e00b      	b.n	800108a <auto_door_sequence+0x52>
		else if(TIM11_10ms_servomotor_counter == 500)
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <auto_door_sequence+0x64>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800107a:	d106      	bne.n	800108a <auto_door_sequence+0x52>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);	// close
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <auto_door_sequence+0x68>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	220a      	movs	r2, #10
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
			door_mode = 0;
 8001084:	4b03      	ldr	r3, [pc, #12]	; (8001094 <auto_door_sequence+0x5c>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	200008c0 	.word	0x200008c0
 8001098:	200008e0 	.word	0x200008e0
 800109c:	200008bc 	.word	0x200008bc
 80010a0:	20000748 	.word	0x20000748

080010a4 <set_rpm>:

extern volatile int exint_signal;


void set_rpm(int rpm)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	delay_us(60000000/ STEPS_PER_REV/rpm);
 80010ac:	f643 1238 	movw	r2, #14648	; 0x3938
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fbf6 	bl	80008a8 <delay_us>
	// 최대 speed 기준 (13) ==> _delay_us(1126)
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <stepmotor_driver2>:


void stepmotor_driver2(int direction, int step_limit)	// direction ==> Forward or Backward
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]



			switch(temp)
 80010ce:	4b97      	ldr	r3, [pc, #604]	; (800132c <stepmotor_driver2+0x268>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b07      	cmp	r3, #7
 80010d4:	f200 80cc 	bhi.w	8001270 <stepmotor_driver2+0x1ac>
 80010d8:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <stepmotor_driver2+0x1c>)
 80010da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010de:	bf00      	nop
 80010e0:	08001101 	.word	0x08001101
 80010e4:	0800112f 	.word	0x0800112f
 80010e8:	0800115d 	.word	0x0800115d
 80010ec:	0800118b 	.word	0x0800118b
 80010f0:	080011b9 	.word	0x080011b9
 80010f4:	080011e7 	.word	0x080011e7
 80010f8:	08001215 	.word	0x08001215
 80010fc:	08001243 	.word	0x08001243
			{
				case 0:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	488a      	ldr	r0, [pc, #552]	; (8001330 <stepmotor_driver2+0x26c>)
 8001106:	f001 fab1 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	4888      	ldr	r0, [pc, #544]	; (8001330 <stepmotor_driver2+0x26c>)
 8001110:	f001 faac 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	4885      	ldr	r0, [pc, #532]	; (8001330 <stepmotor_driver2+0x26c>)
 800111c:	f001 faa6 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	4882      	ldr	r0, [pc, #520]	; (8001330 <stepmotor_driver2+0x26c>)
 8001128:	f001 faa0 	bl	800266c <HAL_GPIO_WritePin>
				break;
 800112c:	e0a0      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 1:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	487f      	ldr	r0, [pc, #508]	; (8001330 <stepmotor_driver2+0x26c>)
 8001134:	f001 fa9a 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	487c      	ldr	r0, [pc, #496]	; (8001330 <stepmotor_driver2+0x26c>)
 800113e:	f001 fa95 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	4879      	ldr	r0, [pc, #484]	; (8001330 <stepmotor_driver2+0x26c>)
 800114a:	f001 fa8f 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	4876      	ldr	r0, [pc, #472]	; (8001330 <stepmotor_driver2+0x26c>)
 8001156:	f001 fa89 	bl	800266c <HAL_GPIO_WritePin>
				break;
 800115a:	e089      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 2:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	4873      	ldr	r0, [pc, #460]	; (8001330 <stepmotor_driver2+0x26c>)
 8001162:	f001 fa83 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001166:	2201      	movs	r2, #1
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4871      	ldr	r0, [pc, #452]	; (8001330 <stepmotor_driver2+0x26c>)
 800116c:	f001 fa7e 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001176:	486e      	ldr	r0, [pc, #440]	; (8001330 <stepmotor_driver2+0x26c>)
 8001178:	f001 fa78 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	486b      	ldr	r0, [pc, #428]	; (8001330 <stepmotor_driver2+0x26c>)
 8001184:	f001 fa72 	bl	800266c <HAL_GPIO_WritePin>
				break;
 8001188:	e072      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 3:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2140      	movs	r1, #64	; 0x40
 800118e:	4868      	ldr	r0, [pc, #416]	; (8001330 <stepmotor_driver2+0x26c>)
 8001190:	f001 fa6c 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4865      	ldr	r0, [pc, #404]	; (8001330 <stepmotor_driver2+0x26c>)
 800119a:	f001 fa67 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a4:	4862      	ldr	r0, [pc, #392]	; (8001330 <stepmotor_driver2+0x26c>)
 80011a6:	f001 fa61 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b0:	485f      	ldr	r0, [pc, #380]	; (8001330 <stepmotor_driver2+0x26c>)
 80011b2:	f001 fa5b 	bl	800266c <HAL_GPIO_WritePin>
				break;
 80011b6:	e05b      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 4:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	485c      	ldr	r0, [pc, #368]	; (8001330 <stepmotor_driver2+0x26c>)
 80011be:	f001 fa55 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	485a      	ldr	r0, [pc, #360]	; (8001330 <stepmotor_driver2+0x26c>)
 80011c8:	f001 fa50 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011d2:	4857      	ldr	r0, [pc, #348]	; (8001330 <stepmotor_driver2+0x26c>)
 80011d4:	f001 fa4a 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011de:	4854      	ldr	r0, [pc, #336]	; (8001330 <stepmotor_driver2+0x26c>)
 80011e0:	f001 fa44 	bl	800266c <HAL_GPIO_WritePin>
				break;
 80011e4:	e044      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 5:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2140      	movs	r1, #64	; 0x40
 80011ea:	4851      	ldr	r0, [pc, #324]	; (8001330 <stepmotor_driver2+0x26c>)
 80011ec:	f001 fa3e 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	484e      	ldr	r0, [pc, #312]	; (8001330 <stepmotor_driver2+0x26c>)
 80011f6:	f001 fa39 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001200:	484b      	ldr	r0, [pc, #300]	; (8001330 <stepmotor_driver2+0x26c>)
 8001202:	f001 fa33 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 7100 	mov.w	r1, #512	; 0x200
 800120c:	4848      	ldr	r0, [pc, #288]	; (8001330 <stepmotor_driver2+0x26c>)
 800120e:	f001 fa2d 	bl	800266c <HAL_GPIO_WritePin>
				break;
 8001212:	e02d      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 6:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	2140      	movs	r1, #64	; 0x40
 8001218:	4845      	ldr	r0, [pc, #276]	; (8001330 <stepmotor_driver2+0x26c>)
 800121a:	f001 fa27 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	4843      	ldr	r0, [pc, #268]	; (8001330 <stepmotor_driver2+0x26c>)
 8001224:	f001 fa22 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800122e:	4840      	ldr	r0, [pc, #256]	; (8001330 <stepmotor_driver2+0x26c>)
 8001230:	f001 fa1c 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001234:	2201      	movs	r2, #1
 8001236:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123a:	483d      	ldr	r0, [pc, #244]	; (8001330 <stepmotor_driver2+0x26c>)
 800123c:	f001 fa16 	bl	800266c <HAL_GPIO_WritePin>
				break;
 8001240:	e016      	b.n	8001270 <stepmotor_driver2+0x1ac>

				case 7:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	483a      	ldr	r0, [pc, #232]	; (8001330 <stepmotor_driver2+0x26c>)
 8001248:	f001 fa10 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	2180      	movs	r1, #128	; 0x80
 8001250:	4837      	ldr	r0, [pc, #220]	; (8001330 <stepmotor_driver2+0x26c>)
 8001252:	f001 fa0b 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800125c:	4834      	ldr	r0, [pc, #208]	; (8001330 <stepmotor_driver2+0x26c>)
 800125e:	f001 fa05 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001268:	4831      	ldr	r0, [pc, #196]	; (8001330 <stepmotor_driver2+0x26c>)
 800126a:	f001 f9ff 	bl	800266c <HAL_GPIO_WritePin>
				break;
 800126e:	bf00      	nop
			}
			if(direction == FORWARD)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d123      	bne.n	80012be <stepmotor_driver2+0x1fa>
			{
				if(temp_count <= step_limit)
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <stepmotor_driver2+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	429a      	cmp	r2, r3
 800127e:	db15      	blt.n	80012ac <stepmotor_driver2+0x1e8>
				{
					temp++;
 8001280:	4b2a      	ldr	r3, [pc, #168]	; (800132c <stepmotor_driver2+0x268>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	4a29      	ldr	r2, [pc, #164]	; (800132c <stepmotor_driver2+0x268>)
 8001288:	6013      	str	r3, [r2, #0]
					temp_count++;
 800128a:	4b2a      	ldr	r3, [pc, #168]	; (8001334 <stepmotor_driver2+0x270>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	3301      	adds	r3, #1
 8001290:	4a28      	ldr	r2, [pc, #160]	; (8001334 <stepmotor_driver2+0x270>)
 8001292:	6013      	str	r3, [r2, #0]
					temp %= 8;
 8001294:	4b25      	ldr	r3, [pc, #148]	; (800132c <stepmotor_driver2+0x268>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	425a      	negs	r2, r3
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	f002 0207 	and.w	r2, r2, #7
 80012a2:	bf58      	it	pl
 80012a4:	4253      	negpl	r3, r2
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <stepmotor_driver2+0x268>)
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e008      	b.n	80012be <stepmotor_driver2+0x1fa>
				}
				else
				{
					temp = 0;
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <stepmotor_driver2+0x268>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
					temp_count = 0;
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <stepmotor_driver2+0x270>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
					elevator_mode_state = 0;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <stepmotor_driver2+0x274>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
				}
			}

			if(direction == BACKWARD)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d12e      	bne.n	8001322 <stepmotor_driver2+0x25e>
			{

				if(temp_count <= step_limit)
 80012c4:	4b1b      	ldr	r3, [pc, #108]	; (8001334 <stepmotor_driver2+0x270>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	db20      	blt.n	8001310 <stepmotor_driver2+0x24c>
				{
					temp_count++;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <stepmotor_driver2+0x270>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	3301      	adds	r3, #1
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <stepmotor_driver2+0x270>)
 80012d6:	6013      	str	r3, [r2, #0]

					if(temp >= 0)
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <stepmotor_driver2+0x268>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0f      	blt.n	8001300 <stepmotor_driver2+0x23c>
					{
						temp--;
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <stepmotor_driver2+0x268>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	4a11      	ldr	r2, [pc, #68]	; (800132c <stepmotor_driver2+0x268>)
 80012e8:	6013      	str	r3, [r2, #0]
						temp %= 8;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <stepmotor_driver2+0x268>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	425a      	negs	r2, r3
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	f002 0207 	and.w	r2, r2, #7
 80012f8:	bf58      	it	pl
 80012fa:	4253      	negpl	r3, r2
 80012fc:	4a0b      	ldr	r2, [pc, #44]	; (800132c <stepmotor_driver2+0x268>)
 80012fe:	6013      	str	r3, [r2, #0]
					}

					if(temp < 0)
 8001300:	4b0a      	ldr	r3, [pc, #40]	; (800132c <stepmotor_driver2+0x268>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	da0c      	bge.n	8001322 <stepmotor_driver2+0x25e>
					{
						temp = 7;
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <stepmotor_driver2+0x268>)
 800130a:	2207      	movs	r2, #7
 800130c:	601a      	str	r2, [r3, #0]
				}


			}

}
 800130e:	e008      	b.n	8001322 <stepmotor_driver2+0x25e>
					temp = 0;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <stepmotor_driver2+0x268>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
					temp_count = 0;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <stepmotor_driver2+0x270>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
					elevator_mode_state = 0;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <stepmotor_driver2+0x274>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200008d0 	.word	0x200008d0
 8001330:	40020800 	.word	0x40020800
 8001334:	200008d4 	.word	0x200008d4
 8001338:	200008c8 	.word	0x200008c8

0800133c <flow_button_move>:

	}
}

void flow_button_move()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0

	switch(elevator_mode_state)
 8001340:	4b85      	ldr	r3, [pc, #532]	; (8001558 <flow_button_move+0x21c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b02      	cmp	r3, #2
 8001346:	f000 81ab 	beq.w	80016a0 <flow_button_move+0x364>
 800134a:	2b02      	cmp	r3, #2
 800134c:	f300 81c2 	bgt.w	80016d4 <flow_button_move+0x398>
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <flow_button_move+0x20>
 8001354:	2b01      	cmp	r3, #1
 8001356:	f000 818a 	beq.w	800166e <flow_button_move+0x332>
//						led_re_shift();
//
//					}
//			break;
		}
}
 800135a:	e1bb      	b.n	80016d4 <flow_button_move+0x398>
				if(pre_elevator_state == 1)
 800135c:	4b7f      	ldr	r3, [pc, #508]	; (800155c <flow_button_move+0x220>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10a      	bne.n	800137a <flow_button_move+0x3e>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	21ff      	movs	r1, #255	; 0xff
 8001368:	487d      	ldr	r0, [pc, #500]	; (8001560 <flow_button_move+0x224>)
 800136a:	f001 f97f 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x01, GPIO_PIN_SET);
 800136e:	2201      	movs	r2, #1
 8001370:	2101      	movs	r1, #1
 8001372:	487b      	ldr	r0, [pc, #492]	; (8001560 <flow_button_move+0x224>)
 8001374:	f001 f97a 	bl	800266c <HAL_GPIO_WritePin>
 8001378:	e049      	b.n	800140e <flow_button_move+0xd2>
				else if(pre_elevator_state == 2)
 800137a:	4b78      	ldr	r3, [pc, #480]	; (800155c <flow_button_move+0x220>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b02      	cmp	r3, #2
 8001380:	d10a      	bne.n	8001398 <flow_button_move+0x5c>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	21ff      	movs	r1, #255	; 0xff
 8001386:	4876      	ldr	r0, [pc, #472]	; (8001560 <flow_button_move+0x224>)
 8001388:	f001 f970 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x03, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2103      	movs	r1, #3
 8001390:	4873      	ldr	r0, [pc, #460]	; (8001560 <flow_button_move+0x224>)
 8001392:	f001 f96b 	bl	800266c <HAL_GPIO_WritePin>
 8001396:	e03a      	b.n	800140e <flow_button_move+0xd2>
				else if(pre_elevator_state == 3)
 8001398:	4b70      	ldr	r3, [pc, #448]	; (800155c <flow_button_move+0x220>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d10a      	bne.n	80013b6 <flow_button_move+0x7a>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	486e      	ldr	r0, [pc, #440]	; (8001560 <flow_button_move+0x224>)
 80013a6:	f001 f961 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_SET);
 80013aa:	2201      	movs	r2, #1
 80013ac:	2107      	movs	r1, #7
 80013ae:	486c      	ldr	r0, [pc, #432]	; (8001560 <flow_button_move+0x224>)
 80013b0:	f001 f95c 	bl	800266c <HAL_GPIO_WritePin>
 80013b4:	e02b      	b.n	800140e <flow_button_move+0xd2>
				else if(pre_elevator_state == 4)
 80013b6:	4b69      	ldr	r3, [pc, #420]	; (800155c <flow_button_move+0x220>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d10a      	bne.n	80013d4 <flow_button_move+0x98>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	21ff      	movs	r1, #255	; 0xff
 80013c2:	4867      	ldr	r0, [pc, #412]	; (8001560 <flow_button_move+0x224>)
 80013c4:	f001 f952 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x0f, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	210f      	movs	r1, #15
 80013cc:	4864      	ldr	r0, [pc, #400]	; (8001560 <flow_button_move+0x224>)
 80013ce:	f001 f94d 	bl	800266c <HAL_GPIO_WritePin>
 80013d2:	e01c      	b.n	800140e <flow_button_move+0xd2>
				else if(pre_elevator_state == 5)
 80013d4:	4b61      	ldr	r3, [pc, #388]	; (800155c <flow_button_move+0x220>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b05      	cmp	r3, #5
 80013da:	d10a      	bne.n	80013f2 <flow_button_move+0xb6>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	21ff      	movs	r1, #255	; 0xff
 80013e0:	485f      	ldr	r0, [pc, #380]	; (8001560 <flow_button_move+0x224>)
 80013e2:	f001 f943 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x1f, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	211f      	movs	r1, #31
 80013ea:	485d      	ldr	r0, [pc, #372]	; (8001560 <flow_button_move+0x224>)
 80013ec:	f001 f93e 	bl	800266c <HAL_GPIO_WritePin>
 80013f0:	e00d      	b.n	800140e <flow_button_move+0xd2>
				else if(pre_elevator_state == 6)
 80013f2:	4b5a      	ldr	r3, [pc, #360]	; (800155c <flow_button_move+0x220>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d109      	bne.n	800140e <flow_button_move+0xd2>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	21ff      	movs	r1, #255	; 0xff
 80013fe:	4858      	ldr	r0, [pc, #352]	; (8001560 <flow_button_move+0x224>)
 8001400:	f001 f934 	bl	800266c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x3f, GPIO_PIN_SET);
 8001404:	2201      	movs	r2, #1
 8001406:	213f      	movs	r1, #63	; 0x3f
 8001408:	4855      	ldr	r0, [pc, #340]	; (8001560 <flow_button_move+0x224>)
 800140a:	f001 f92f 	bl	800266c <HAL_GPIO_WritePin>
				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 800140e:	4a55      	ldr	r2, [pc, #340]	; (8001564 <flow_button_move+0x228>)
 8001410:	2101      	movs	r1, #1
 8001412:	4855      	ldr	r0, [pc, #340]	; (8001568 <flow_button_move+0x22c>)
 8001414:	f7ff f938 	bl	8000688 <get_button>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d120      	bne.n	8001460 <flow_button_move+0x124>
					if(pre_elevator_state > 1)
 800141e:	4b4f      	ldr	r3, [pc, #316]	; (800155c <flow_button_move+0x220>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b01      	cmp	r3, #1
 8001424:	dd0f      	ble.n	8001446 <flow_button_move+0x10a>
						floor_gap = pre_elevator_state - 1;
 8001426:	4b4d      	ldr	r3, [pc, #308]	; (800155c <flow_button_move+0x220>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3b01      	subs	r3, #1
 800142c:	4a4f      	ldr	r2, [pc, #316]	; (800156c <flow_button_move+0x230>)
 800142e:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <flow_button_move+0x230>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <flow_button_move+0x234>)
 8001436:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 1;
 8001438:	4b48      	ldr	r3, [pc, #288]	; (800155c <flow_button_move+0x220>)
 800143a:	2201      	movs	r2, #1
 800143c:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2; // BACKWARD
 800143e:	4b46      	ldr	r3, [pc, #280]	; (8001558 <flow_button_move+0x21c>)
 8001440:	2202      	movs	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e00c      	b.n	8001460 <flow_button_move+0x124>
					else if(pre_elevator_state < 1)
 8001446:	4b45      	ldr	r3, [pc, #276]	; (800155c <flow_button_move+0x220>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	dc08      	bgt.n	8001460 <flow_button_move+0x124>
						elevator_state = 1;
 800144e:	4b48      	ldr	r3, [pc, #288]	; (8001570 <flow_button_move+0x234>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
						pre_elevator_state = 1;
 8001454:	4b41      	ldr	r3, [pc, #260]	; (800155c <flow_button_move+0x220>)
 8001456:	2201      	movs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1;
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <flow_button_move+0x21c>)
 800145c:	2201      	movs	r2, #1
 800145e:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <flow_button_move+0x238>)
 8001462:	2102      	movs	r1, #2
 8001464:	4840      	ldr	r0, [pc, #256]	; (8001568 <flow_button_move+0x22c>)
 8001466:	f7ff f90f 	bl	8000688 <get_button>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d127      	bne.n	80014c0 <flow_button_move+0x184>
					if(pre_elevator_state > 2)
 8001470:	4b3a      	ldr	r3, [pc, #232]	; (800155c <flow_button_move+0x220>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	dd0f      	ble.n	8001498 <flow_button_move+0x15c>
						floor_gap = pre_elevator_state - 2;
 8001478:	4b38      	ldr	r3, [pc, #224]	; (800155c <flow_button_move+0x220>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	3b02      	subs	r3, #2
 800147e:	4a3b      	ldr	r2, [pc, #236]	; (800156c <flow_button_move+0x230>)
 8001480:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001482:	4b3a      	ldr	r3, [pc, #232]	; (800156c <flow_button_move+0x230>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <flow_button_move+0x234>)
 8001488:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 2;
 800148a:	4b34      	ldr	r3, [pc, #208]	; (800155c <flow_button_move+0x220>)
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 8001490:	4b31      	ldr	r3, [pc, #196]	; (8001558 <flow_button_move+0x21c>)
 8001492:	2202      	movs	r2, #2
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e013      	b.n	80014c0 <flow_button_move+0x184>
					else if(pre_elevator_state < 2)
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <flow_button_move+0x220>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b01      	cmp	r3, #1
 800149e:	dc0f      	bgt.n	80014c0 <flow_button_move+0x184>
						floor_gap = 2 - pre_elevator_state;
 80014a0:	4b2e      	ldr	r3, [pc, #184]	; (800155c <flow_button_move+0x220>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f1c3 0302 	rsb	r3, r3, #2
 80014a8:	4a30      	ldr	r2, [pc, #192]	; (800156c <flow_button_move+0x230>)
 80014aa:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <flow_button_move+0x230>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <flow_button_move+0x234>)
 80014b2:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 2;
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <flow_button_move+0x220>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <flow_button_move+0x21c>)
 80014bc:	2201      	movs	r2, #1
 80014be:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON3_Pin, &prev_button3_state) == BUTTON_PRESS)
 80014c0:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <flow_button_move+0x23c>)
 80014c2:	2104      	movs	r1, #4
 80014c4:	4828      	ldr	r0, [pc, #160]	; (8001568 <flow_button_move+0x22c>)
 80014c6:	f7ff f8df 	bl	8000688 <get_button>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d127      	bne.n	8001520 <flow_button_move+0x1e4>
					if(pre_elevator_state > 3)
 80014d0:	4b22      	ldr	r3, [pc, #136]	; (800155c <flow_button_move+0x220>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b03      	cmp	r3, #3
 80014d6:	dd0f      	ble.n	80014f8 <flow_button_move+0x1bc>
						floor_gap = pre_elevator_state - 3;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <flow_button_move+0x220>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	3b03      	subs	r3, #3
 80014de:	4a23      	ldr	r2, [pc, #140]	; (800156c <flow_button_move+0x230>)
 80014e0:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <flow_button_move+0x230>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <flow_button_move+0x234>)
 80014e8:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 3;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	; (800155c <flow_button_move+0x220>)
 80014ec:	2203      	movs	r2, #3
 80014ee:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <flow_button_move+0x21c>)
 80014f2:	2202      	movs	r2, #2
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e013      	b.n	8001520 <flow_button_move+0x1e4>
					else if(pre_elevator_state < 3)
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <flow_button_move+0x220>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	dc0f      	bgt.n	8001520 <flow_button_move+0x1e4>
						floor_gap = 3 - pre_elevator_state;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <flow_button_move+0x220>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f1c3 0303 	rsb	r3, r3, #3
 8001508:	4a18      	ldr	r2, [pc, #96]	; (800156c <flow_button_move+0x230>)
 800150a:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <flow_button_move+0x230>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a17      	ldr	r2, [pc, #92]	; (8001570 <flow_button_move+0x234>)
 8001512:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 3;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <flow_button_move+0x220>)
 8001516:	2203      	movs	r2, #3
 8001518:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <flow_button_move+0x21c>)
 800151c:	2201      	movs	r2, #1
 800151e:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON4_Pin, &prev_button4_state) == BUTTON_PRESS)
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <flow_button_move+0x240>)
 8001522:	2108      	movs	r1, #8
 8001524:	4810      	ldr	r0, [pc, #64]	; (8001568 <flow_button_move+0x22c>)
 8001526:	f7ff f8af 	bl	8000688 <get_button>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d13b      	bne.n	80015a8 <flow_button_move+0x26c>
					if(pre_elevator_state > 4)
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <flow_button_move+0x220>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b04      	cmp	r3, #4
 8001536:	dd23      	ble.n	8001580 <flow_button_move+0x244>
						floor_gap = pre_elevator_state - 4;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <flow_button_move+0x220>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3b04      	subs	r3, #4
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <flow_button_move+0x230>)
 8001540:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001542:	4b0a      	ldr	r3, [pc, #40]	; (800156c <flow_button_move+0x230>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <flow_button_move+0x234>)
 8001548:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 4;
 800154a:	4b04      	ldr	r3, [pc, #16]	; (800155c <flow_button_move+0x220>)
 800154c:	2204      	movs	r2, #4
 800154e:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 8001550:	4b01      	ldr	r3, [pc, #4]	; (8001558 <flow_button_move+0x21c>)
 8001552:	2202      	movs	r2, #2
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e027      	b.n	80015a8 <flow_button_move+0x26c>
 8001558:	200008c8 	.word	0x200008c8
 800155c:	2000000c 	.word	0x2000000c
 8001560:	40020400 	.word	0x40020400
 8001564:	20000000 	.word	0x20000000
 8001568:	40020800 	.word	0x40020800
 800156c:	200008cc 	.word	0x200008cc
 8001570:	200008c4 	.word	0x200008c4
 8001574:	20000001 	.word	0x20000001
 8001578:	20000002 	.word	0x20000002
 800157c:	20000003 	.word	0x20000003
					else if(pre_elevator_state < 4)
 8001580:	4b55      	ldr	r3, [pc, #340]	; (80016d8 <flow_button_move+0x39c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	dc0f      	bgt.n	80015a8 <flow_button_move+0x26c>
						floor_gap = 4 - pre_elevator_state;
 8001588:	4b53      	ldr	r3, [pc, #332]	; (80016d8 <flow_button_move+0x39c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f1c3 0304 	rsb	r3, r3, #4
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <flow_button_move+0x3a0>)
 8001592:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <flow_button_move+0x3a0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a51      	ldr	r2, [pc, #324]	; (80016e0 <flow_button_move+0x3a4>)
 800159a:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 4;
 800159c:	4b4e      	ldr	r3, [pc, #312]	; (80016d8 <flow_button_move+0x39c>)
 800159e:	2204      	movs	r2, #4
 80015a0:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <flow_button_move+0x3a8>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON5_Pin, &prev_button5_state) == BUTTON_PRESS)
 80015a8:	4a4f      	ldr	r2, [pc, #316]	; (80016e8 <flow_button_move+0x3ac>)
 80015aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ae:	484f      	ldr	r0, [pc, #316]	; (80016ec <flow_button_move+0x3b0>)
 80015b0:	f7ff f86a 	bl	8000688 <get_button>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d127      	bne.n	800160a <flow_button_move+0x2ce>
					if(pre_elevator_state > 5)
 80015ba:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <flow_button_move+0x39c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b05      	cmp	r3, #5
 80015c0:	dd0f      	ble.n	80015e2 <flow_button_move+0x2a6>
						floor_gap = pre_elevator_state - 5;
 80015c2:	4b45      	ldr	r3, [pc, #276]	; (80016d8 <flow_button_move+0x39c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	3b05      	subs	r3, #5
 80015c8:	4a44      	ldr	r2, [pc, #272]	; (80016dc <flow_button_move+0x3a0>)
 80015ca:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 80015cc:	4b43      	ldr	r3, [pc, #268]	; (80016dc <flow_button_move+0x3a0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a43      	ldr	r2, [pc, #268]	; (80016e0 <flow_button_move+0x3a4>)
 80015d2:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 5;
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <flow_button_move+0x39c>)
 80015d6:	2205      	movs	r2, #5
 80015d8:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 80015da:	4b42      	ldr	r3, [pc, #264]	; (80016e4 <flow_button_move+0x3a8>)
 80015dc:	2202      	movs	r2, #2
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e013      	b.n	800160a <flow_button_move+0x2ce>
					else if(pre_elevator_state < 5)
 80015e2:	4b3d      	ldr	r3, [pc, #244]	; (80016d8 <flow_button_move+0x39c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b04      	cmp	r3, #4
 80015e8:	dc0f      	bgt.n	800160a <flow_button_move+0x2ce>
						floor_gap = 5 - pre_elevator_state;
 80015ea:	4b3b      	ldr	r3, [pc, #236]	; (80016d8 <flow_button_move+0x39c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f1c3 0305 	rsb	r3, r3, #5
 80015f2:	4a3a      	ldr	r2, [pc, #232]	; (80016dc <flow_button_move+0x3a0>)
 80015f4:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <flow_button_move+0x3a0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a39      	ldr	r2, [pc, #228]	; (80016e0 <flow_button_move+0x3a4>)
 80015fc:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 5;
 80015fe:	4b36      	ldr	r3, [pc, #216]	; (80016d8 <flow_button_move+0x39c>)
 8001600:	2205      	movs	r2, #5
 8001602:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 8001604:	4b37      	ldr	r3, [pc, #220]	; (80016e4 <flow_button_move+0x3a8>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON6_Pin, &prev_button6_state) == BUTTON_PRESS)
 800160a:	4a39      	ldr	r2, [pc, #228]	; (80016f0 <flow_button_move+0x3b4>)
 800160c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001610:	4836      	ldr	r0, [pc, #216]	; (80016ec <flow_button_move+0x3b0>)
 8001612:	f7ff f839 	bl	8000688 <get_button>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d15a      	bne.n	80016d2 <flow_button_move+0x396>
					if(pre_elevator_state > 6)
 800161c:	4b2e      	ldr	r3, [pc, #184]	; (80016d8 <flow_button_move+0x39c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b06      	cmp	r3, #6
 8001622:	dd0f      	ble.n	8001644 <flow_button_move+0x308>
						floor_gap = pre_elevator_state - 6;
 8001624:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <flow_button_move+0x39c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3b06      	subs	r3, #6
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <flow_button_move+0x3a0>)
 800162c:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <flow_button_move+0x3a0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a2b      	ldr	r2, [pc, #172]	; (80016e0 <flow_button_move+0x3a4>)
 8001634:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 6;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <flow_button_move+0x39c>)
 8001638:	2206      	movs	r2, #6
 800163a:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <flow_button_move+0x3a8>)
 800163e:	2202      	movs	r2, #2
 8001640:	601a      	str	r2, [r3, #0]
			break;
 8001642:	e046      	b.n	80016d2 <flow_button_move+0x396>
					else if(pre_elevator_state < 6)
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <flow_button_move+0x39c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b05      	cmp	r3, #5
 800164a:	dc42      	bgt.n	80016d2 <flow_button_move+0x396>
						floor_gap = 6 - pre_elevator_state;
 800164c:	4b22      	ldr	r3, [pc, #136]	; (80016d8 <flow_button_move+0x39c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1c3 0306 	rsb	r3, r3, #6
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <flow_button_move+0x3a0>)
 8001656:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 8001658:	4b20      	ldr	r3, [pc, #128]	; (80016dc <flow_button_move+0x3a0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <flow_button_move+0x3a4>)
 800165e:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 6;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <flow_button_move+0x39c>)
 8001662:	2206      	movs	r2, #6
 8001664:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <flow_button_move+0x3a8>)
 8001668:	2201      	movs	r2, #1
 800166a:	601a      	str	r2, [r3, #0]
			break;
 800166c:	e031      	b.n	80016d2 <flow_button_move+0x396>
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 800166e:	4a21      	ldr	r2, [pc, #132]	; (80016f4 <flow_button_move+0x3b8>)
 8001670:	2101      	movs	r1, #1
 8001672:	481e      	ldr	r0, [pc, #120]	; (80016ec <flow_button_move+0x3b0>)
 8001674:	f7ff f808 	bl	8000688 <get_button>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <flow_button_move+0x34a>
				elevator_mode_state = 0;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <flow_button_move+0x3a8>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
			break;
 8001684:	e026      	b.n	80016d4 <flow_button_move+0x398>
				led_lr_shift();
 8001686:	f7ff f82d 	bl	80006e4 <led_lr_shift>
				stepmotor_driver2(FORWARD, elevator_state * 4096);
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <flow_button_move+0x3a4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	031b      	lsls	r3, r3, #12
 8001690:	4619      	mov	r1, r3
 8001692:	2001      	movs	r0, #1
 8001694:	f7ff fd16 	bl	80010c4 <stepmotor_driver2>
				set_rpm(13);
 8001698:	200d      	movs	r0, #13
 800169a:	f7ff fd03 	bl	80010a4 <set_rpm>
			break;
 800169e:	e019      	b.n	80016d4 <flow_button_move+0x398>
				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <flow_button_move+0x3b8>)
 80016a2:	2101      	movs	r1, #1
 80016a4:	4811      	ldr	r0, [pc, #68]	; (80016ec <flow_button_move+0x3b0>)
 80016a6:	f7fe ffef 	bl	8000688 <get_button>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d103      	bne.n	80016b8 <flow_button_move+0x37c>
					elevator_mode_state = 0;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <flow_button_move+0x3a8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
			break;
 80016b6:	e00d      	b.n	80016d4 <flow_button_move+0x398>
					led_rl_shift();
 80016b8:	f7ff f842 	bl	8000740 <led_rl_shift>
					stepmotor_driver2(BACKWARD, elevator_state * 4096);
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <flow_button_move+0x3a4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	031b      	lsls	r3, r3, #12
 80016c2:	4619      	mov	r1, r3
 80016c4:	2002      	movs	r0, #2
 80016c6:	f7ff fcfd 	bl	80010c4 <stepmotor_driver2>
					set_rpm(13);
 80016ca:	200d      	movs	r0, #13
 80016cc:	f7ff fcea 	bl	80010a4 <set_rpm>
			break;
 80016d0:	e000      	b.n	80016d4 <flow_button_move+0x398>
			break;
 80016d2:	bf00      	nop
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	2000000c 	.word	0x2000000c
 80016dc:	200008cc 	.word	0x200008cc
 80016e0:	200008c4 	.word	0x200008c4
 80016e4:	200008c8 	.word	0x200008c8
 80016e8:	20000004 	.word	0x20000004
 80016ec:	40020800 	.word	0x40020800
 80016f0:	20000005 	.word	0x20000005
 80016f4:	20000000 	.word	0x20000000

080016f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <HAL_MspInit+0x4c>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a0f      	ldr	r2, [pc, #60]	; (8001744 <HAL_MspInit+0x4c>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b0d      	ldr	r3, [pc, #52]	; (8001744 <HAL_MspInit+0x4c>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_MspInit+0x4c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a08      	ldr	r2, [pc, #32]	; (8001744 <HAL_MspInit+0x4c>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_MspInit+0x4c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001736:	2007      	movs	r0, #7
 8001738:	f000 fd28 	bl	800218c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_I2C_MspInit+0x84>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12c      	bne.n	80017c4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001786:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178c:	2312      	movs	r3, #18
 800178e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001798:	2304      	movs	r3, #4
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <HAL_I2C_MspInit+0x8c>)
 80017a4:	f000 fdc6 	bl	8002334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a07      	ldr	r2, [pc, #28]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <HAL_I2C_MspInit+0x88>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40005400 	.word	0x40005400
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020400 	.word	0x40020400

080017d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 0308 	add.w	r3, r7, #8
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
 80017f0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a0c      	ldr	r2, [pc, #48]	; (8001828 <HAL_RTC_MspInit+0x50>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d111      	bne.n	8001820 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017fc:	2302      	movs	r3, #2
 80017fe:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001804:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001806:	f107 0308 	add.w	r3, r7, #8
 800180a:	4618      	mov	r0, r3
 800180c:	f001 fd3c 	bl	8003288 <HAL_RCCEx_PeriphCLKConfig>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001816:	f7ff fc09 	bl	800102c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <HAL_RTC_MspInit+0x54>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001820:	bf00      	nop
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40002800 	.word	0x40002800
 800182c:	42470e3c 	.word	0x42470e3c

08001830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	; 0x30
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 031c 	add.w	r3, r7, #28
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_TIM_Base_MspInit+0x114>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d145      	bne.n	80018de <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	4b3c      	ldr	r3, [pc, #240]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a3b      	ldr	r2, [pc, #236]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	4b35      	ldr	r3, [pc, #212]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	4a34      	ldr	r2, [pc, #208]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	6313      	str	r3, [r2, #48]	; 0x30
 800187e:	4b32      	ldr	r3, [pc, #200]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800188a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800189c:	2301      	movs	r3, #1
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	4829      	ldr	r0, [pc, #164]	; (800194c <HAL_TIM_Base_MspInit+0x11c>)
 80018a8:	f000 fd44 	bl	8002334 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	2018      	movs	r0, #24
 80018b2:	f000 fc76 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80018b6:	2018      	movs	r0, #24
 80018b8:	f000 fc8f 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2019      	movs	r0, #25
 80018c2:	f000 fc6e 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018c6:	2019      	movs	r0, #25
 80018c8:	f000 fc87 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2100      	movs	r1, #0
 80018d0:	201b      	movs	r0, #27
 80018d2:	f000 fc66 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018d6:	201b      	movs	r0, #27
 80018d8:	f000 fc7f 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80018dc:	e02e      	b.n	800193c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e6:	d116      	bne.n	8001916 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6413      	str	r3, [r2, #64]	; 0x40
 80018f8:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	613b      	str	r3, [r7, #16]
 8001902:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001904:	2200      	movs	r2, #0
 8001906:	2100      	movs	r1, #0
 8001908:	201c      	movs	r0, #28
 800190a:	f000 fc4a 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800190e:	201c      	movs	r0, #28
 8001910:	f000 fc63 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8001914:	e012      	b.n	800193c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a0d      	ldr	r2, [pc, #52]	; (8001950 <HAL_TIM_Base_MspInit+0x120>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d10d      	bne.n	800193c <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 800192a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800192e:	6453      	str	r3, [r2, #68]	; 0x44
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <HAL_TIM_Base_MspInit+0x118>)
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	bf00      	nop
 800193e:	3730      	adds	r7, #48	; 0x30
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40010000 	.word	0x40010000
 8001948:	40023800 	.word	0x40023800
 800194c:	40020000 	.word	0x40020000
 8001950:	40014800 	.word	0x40014800

08001954 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0e      	ldr	r2, [pc, #56]	; (800199c <HAL_TIM_PWM_MspInit+0x48>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d115      	bne.n	8001992 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_TIM_PWM_MspInit+0x4c>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b0a      	ldr	r3, [pc, #40]	; (80019a0 <HAL_TIM_PWM_MspInit+0x4c>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	201d      	movs	r0, #29
 8001988:	f000 fc0b 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800198c:	201d      	movs	r0, #29
 800198e:	f000 fc24 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40000400 	.word	0x40000400
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c4:	d11f      	bne.n	8001a06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_TIM_MspPostInit+0xb0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <HAL_TIM_MspPostInit+0xb0>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <HAL_TIM_MspPostInit+0xb0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019f4:	2301      	movs	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	4816      	ldr	r0, [pc, #88]	; (8001a58 <HAL_TIM_MspPostInit+0xb4>)
 8001a00:	f000 fc98 	bl	8002334 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a04:	e022      	b.n	8001a4c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <HAL_TIM_MspPostInit+0xb8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d11d      	bne.n	8001a4c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a10:	2300      	movs	r3, #0
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_TIM_MspPostInit+0xb0>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_TIM_MspPostInit+0xb0>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <HAL_TIM_MspPostInit+0xb0>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a2c:	2340      	movs	r3, #64	; 0x40
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_TIM_MspPostInit+0xbc>)
 8001a48:	f000 fc74 	bl	8002334 <HAL_GPIO_Init>
}
 8001a4c:	bf00      	nop
 8001a4e:	3728      	adds	r7, #40	; 0x28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	40020000 	.word	0x40020000

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a3a      	ldr	r2, [pc, #232]	; (8001b6c <HAL_UART_MspInit+0x108>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d135      	bne.n	8001af2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	4b39      	ldr	r3, [pc, #228]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a31      	ldr	r2, [pc, #196]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b2f      	ldr	r3, [pc, #188]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001abe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001acc:	2303      	movs	r3, #3
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ad0:	2307      	movs	r3, #7
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4826      	ldr	r0, [pc, #152]	; (8001b74 <HAL_UART_MspInit+0x110>)
 8001adc:	f000 fc2a 	bl	8002334 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2025      	movs	r0, #37	; 0x25
 8001ae6:	f000 fb5c 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aea:	2025      	movs	r0, #37	; 0x25
 8001aec:	f000 fb75 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af0:	e038      	b.n	8001b64 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_UART_MspInit+0x114>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d133      	bne.n	8001b64 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	4a1a      	ldr	r2, [pc, #104]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001b06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b20:	4a13      	ldr	r2, [pc, #76]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6313      	str	r3, [r2, #48]	; 0x30
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_UART_MspInit+0x10c>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b34:	230c      	movs	r3, #12
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b44:	2307      	movs	r3, #7
 8001b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4809      	ldr	r0, [pc, #36]	; (8001b74 <HAL_UART_MspInit+0x110>)
 8001b50:	f000 fbf0 	bl	8002334 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	2026      	movs	r0, #38	; 0x26
 8001b5a:	f000 fb22 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b5e:	2026      	movs	r0, #38	; 0x26
 8001b60:	f000 fb3b 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8001b64:	bf00      	nop
 8001b66:	3730      	adds	r7, #48	; 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40004400 	.word	0x40004400

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f9cc 	bl	8001f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 8001bcc:	f7fe fdf8 	bl	80007c0 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f000 fd61 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001be6:	2002      	movs	r0, #2
 8001be8:	f000 fd5a 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bf4:	4802      	ldr	r0, [pc, #8]	; (8001c00 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bf6:	f002 fa8f 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000700 	.word	0x20000700

08001c04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c08:	4802      	ldr	r0, [pc, #8]	; (8001c14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c0a:	f002 fa85 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000700 	.word	0x20000700

08001c18 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001c1e:	f002 fa7b 	bl	8004118 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001c22:	4803      	ldr	r0, [pc, #12]	; (8001c30 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001c24:	f002 fa78 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000700 	.word	0x20000700
 8001c30:	200007d8 	.word	0x200007d8

08001c34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <TIM1_CC_IRQHandler+0x10>)
 8001c3a:	f002 fa6d 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000700 	.word	0x20000700

08001c48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <TIM2_IRQHandler+0x10>)
 8001c4e:	f002 fa63 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20000748 	.word	0x20000748

08001c5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <TIM3_IRQHandler+0x10>)
 8001c62:	f002 fa59 	bl	8004118 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000790 	.word	0x20000790

08001c70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c74:	4802      	ldr	r0, [pc, #8]	; (8001c80 <USART1_IRQHandler+0x10>)
 8001c76:	f003 fb5b 	bl	8005330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20000820 	.word	0x20000820

08001c84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c88:	4802      	ldr	r0, [pc, #8]	; (8001c94 <USART2_IRQHandler+0x10>)
 8001c8a:	f003 fb51 	bl	8005330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000864 	.word	0x20000864

08001c98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e00a      	b.n	8001cc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001caa:	f3af 8000 	nop.w
 8001cae:	4601      	mov	r1, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	b2ca      	uxtb	r2, r1
 8001cb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbf0      	blt.n	8001caa <_read+0x12>
	}

return len;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e009      	b.n	8001cf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fd55 	bl	800079c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf1      	blt.n	8001ce4 <_write+0x12>
	}
	return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_close>:

int _close(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d32:	605a      	str	r2, [r3, #4]
	return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_isatty>:

int _isatty(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
	return 1;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
	return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f004 fa2c 	bl	8006200 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20020000 	.word	0x20020000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	200008d8 	.word	0x200008d8
 8001ddc:	20000900 	.word	0x20000900

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <HAL_TIM_IC_CaptureCallback>:
int distance, distance_chk; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11d      	bne.n	8001e52 <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d107      	bne.n	8001e2e <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 8001e26:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 8001e2c:	e011      	b.n	8001e52 <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d10d      	bne.n	8001e52 <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 8001e36:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f002 fc98 	bl	8004774 <HAL_TIM_ReadCapturedValue>
 8001e44:	4603      	mov	r3, r0
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001e4a:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	200008e8 	.word	0x200008e8
 8001e64:	200008dc 	.word	0x200008dc
 8001e68:	200008e4 	.word	0x200008e4

08001e6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480d      	ldr	r0, [pc, #52]	; (8001ea8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e72:	490e      	ldr	r1, [pc, #56]	; (8001eac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e74:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e88:	4c0b      	ldr	r4, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e96:	f7ff ffa3 	bl	8001de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9a:	f004 f9b7 	bl	800620c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9e:	f7fe fd1b 	bl	80008d8 <main>
  bx  lr    
 8001ea2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001eb0:	08006d14 	.word	0x08006d14
  ldr r2, =_sbss
 8001eb4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001eb8:	20000900 	.word	0x20000900

08001ebc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC_IRQHandler>
	...

08001ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_Init+0x40>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <HAL_Init+0x40>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <HAL_Init+0x40>)
 8001ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_Init+0x40>)
 8001ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee8:	2003      	movs	r0, #3
 8001eea:	f000 f94f 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f000 f808 	bl	8001f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef4:	f7ff fc00 	bl	80016f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023c00 	.word	0x40023c00

08001f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f0c:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_InitTick+0x54>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x58>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f967 	bl	80021f6 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00e      	b.n	8001f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b0f      	cmp	r3, #15
 8001f36:	d80a      	bhi.n	8001f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f40:	f000 f92f 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <HAL_InitTick+0x5c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e000      	b.n	8001f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000010 	.word	0x20000010
 8001f5c:	20000018 	.word	0x20000018
 8001f60:	20000014 	.word	0x20000014

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000018 	.word	0x20000018
 8001f88:	200008ec 	.word	0x200008ec

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	200008ec 	.word	0x200008ec

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_Delay+0x44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000018 	.word	0x20000018

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff feb6 	bl	8001f8c <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d008      	beq.n	8002240 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e052      	b.n	80022e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0216 	bic.w	r2, r2, #22
 800224e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800225e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <HAL_DMA_Abort+0x62>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0208 	bic.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002290:	e013      	b.n	80022ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002292:	f7ff fe7b 	bl	8001f8c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b05      	cmp	r3, #5
 800229e:	d90c      	bls.n	80022ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e015      	b.n	80022e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e4      	bne.n	8002292 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	223f      	movs	r2, #63	; 0x3f
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00c      	b.n	8002326 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2205      	movs	r2, #5
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
	...

08002334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b089      	sub	sp, #36	; 0x24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
 800234e:	e159      	b.n	8002604 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002350:	2201      	movs	r2, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4013      	ands	r3, r2
 8002362:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	429a      	cmp	r2, r3
 800236a:	f040 8148 	bne.w	80025fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b01      	cmp	r3, #1
 8002378:	d005      	beq.n	8002386 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	2b02      	cmp	r3, #2
 8002384:	d130      	bne.n	80023e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	2203      	movs	r2, #3
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4013      	ands	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023bc:	2201      	movs	r2, #1
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 0201 	and.w	r2, r3, #1
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d017      	beq.n	8002424 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 0303 	and.w	r3, r3, #3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d123      	bne.n	8002478 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	08da      	lsrs	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3208      	adds	r2, #8
 8002438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	691a      	ldr	r2, [r3, #16]
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	08da      	lsrs	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3208      	adds	r2, #8
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4013      	ands	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 0203 	and.w	r2, r3, #3
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a2 	beq.w	80025fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b57      	ldr	r3, [pc, #348]	; (800261c <HAL_GPIO_Init+0x2e8>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a56      	ldr	r2, [pc, #344]	; (800261c <HAL_GPIO_Init+0x2e8>)
 80024c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b54      	ldr	r3, [pc, #336]	; (800261c <HAL_GPIO_Init+0x2e8>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d6:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_GPIO_Init+0x2ec>)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	089b      	lsrs	r3, r3, #2
 80024dc:	3302      	adds	r3, #2
 80024de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	220f      	movs	r2, #15
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a49      	ldr	r2, [pc, #292]	; (8002624 <HAL_GPIO_Init+0x2f0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d019      	beq.n	8002536 <HAL_GPIO_Init+0x202>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a48      	ldr	r2, [pc, #288]	; (8002628 <HAL_GPIO_Init+0x2f4>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_GPIO_Init+0x1fe>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a47      	ldr	r2, [pc, #284]	; (800262c <HAL_GPIO_Init+0x2f8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d00d      	beq.n	800252e <HAL_GPIO_Init+0x1fa>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a46      	ldr	r2, [pc, #280]	; (8002630 <HAL_GPIO_Init+0x2fc>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <HAL_GPIO_Init+0x1f6>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a45      	ldr	r2, [pc, #276]	; (8002634 <HAL_GPIO_Init+0x300>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d101      	bne.n	8002526 <HAL_GPIO_Init+0x1f2>
 8002522:	2304      	movs	r3, #4
 8002524:	e008      	b.n	8002538 <HAL_GPIO_Init+0x204>
 8002526:	2307      	movs	r3, #7
 8002528:	e006      	b.n	8002538 <HAL_GPIO_Init+0x204>
 800252a:	2303      	movs	r3, #3
 800252c:	e004      	b.n	8002538 <HAL_GPIO_Init+0x204>
 800252e:	2302      	movs	r3, #2
 8002530:	e002      	b.n	8002538 <HAL_GPIO_Init+0x204>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_GPIO_Init+0x204>
 8002536:	2300      	movs	r3, #0
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f002 0203 	and.w	r2, r2, #3
 800253e:	0092      	lsls	r2, r2, #2
 8002540:	4093      	lsls	r3, r2
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002548:	4935      	ldr	r1, [pc, #212]	; (8002620 <HAL_GPIO_Init+0x2ec>)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	089b      	lsrs	r3, r3, #2
 800254e:	3302      	adds	r3, #2
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002556:	4b38      	ldr	r3, [pc, #224]	; (8002638 <HAL_GPIO_Init+0x304>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	43db      	mvns	r3, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4013      	ands	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4313      	orrs	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800257a:	4a2f      	ldr	r2, [pc, #188]	; (8002638 <HAL_GPIO_Init+0x304>)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002580:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_GPIO_Init+0x304>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d003      	beq.n	80025a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025aa:	4b23      	ldr	r3, [pc, #140]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ce:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025d4:	4b18      	ldr	r3, [pc, #96]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f8:	4a0f      	ldr	r2, [pc, #60]	; (8002638 <HAL_GPIO_Init+0x304>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	f67f aea2 	bls.w	8002350 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	3724      	adds	r7, #36	; 0x24
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40013800 	.word	0x40013800
 8002624:	40020000 	.word	0x40020000
 8002628:	40020400 	.word	0x40020400
 800262c:	40020800 	.word	0x40020800
 8002630:	40020c00 	.word	0x40020c00
 8002634:	40021000 	.word	0x40021000
 8002638:	40013c00 	.word	0x40013c00

0800263c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	691a      	ldr	r2, [r3, #16]
 800264c:	887b      	ldrh	r3, [r7, #2]
 800264e:	4013      	ands	r3, r2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002654:	2301      	movs	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	e001      	b.n	800265e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800265e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3714      	adds	r7, #20
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	807b      	strh	r3, [r7, #2]
 8002678:	4613      	mov	r3, r2
 800267a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800267c:	787b      	ldrb	r3, [r7, #1]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002682:	887a      	ldrh	r2, [r7, #2]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002688:	e003      	b.n	8002692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	041a      	lsls	r2, r3, #16
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	619a      	str	r2, [r3, #24]
}
 8002692:	bf00      	nop
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026aa:	4b08      	ldr	r3, [pc, #32]	; (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	4013      	ands	r3, r2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe f8c0 	bl	8000844 <HAL_GPIO_EXTI_Callback>
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40013c00 	.word	0x40013c00

080026d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e12b      	b.n	800293a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff f826 	bl	8001748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002722:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002732:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002734:	f000 fd80 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8002738:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4a81      	ldr	r2, [pc, #516]	; (8002944 <HAL_I2C_Init+0x274>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d807      	bhi.n	8002754 <HAL_I2C_Init+0x84>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a80      	ldr	r2, [pc, #512]	; (8002948 <HAL_I2C_Init+0x278>)
 8002748:	4293      	cmp	r3, r2
 800274a:	bf94      	ite	ls
 800274c:	2301      	movls	r3, #1
 800274e:	2300      	movhi	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e006      	b.n	8002762 <HAL_I2C_Init+0x92>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4a7d      	ldr	r2, [pc, #500]	; (800294c <HAL_I2C_Init+0x27c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	bf94      	ite	ls
 800275c:	2301      	movls	r3, #1
 800275e:	2300      	movhi	r3, #0
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e0e7      	b.n	800293a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4a78      	ldr	r2, [pc, #480]	; (8002950 <HAL_I2C_Init+0x280>)
 800276e:	fba2 2303 	umull	r2, r3, r2, r3
 8002772:	0c9b      	lsrs	r3, r3, #18
 8002774:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a6a      	ldr	r2, [pc, #424]	; (8002944 <HAL_I2C_Init+0x274>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d802      	bhi.n	80027a4 <HAL_I2C_Init+0xd4>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3301      	adds	r3, #1
 80027a2:	e009      	b.n	80027b8 <HAL_I2C_Init+0xe8>
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	4a69      	ldr	r2, [pc, #420]	; (8002954 <HAL_I2C_Init+0x284>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	3301      	adds	r3, #1
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	430b      	orrs	r3, r1
 80027be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	495c      	ldr	r1, [pc, #368]	; (8002944 <HAL_I2C_Init+0x274>)
 80027d4:	428b      	cmp	r3, r1
 80027d6:	d819      	bhi.n	800280c <HAL_I2C_Init+0x13c>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e59      	subs	r1, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e6:	1c59      	adds	r1, r3, #1
 80027e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027ec:	400b      	ands	r3, r1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <HAL_I2C_Init+0x138>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e59      	subs	r1, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	e051      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 8002808:	2304      	movs	r3, #4
 800280a:	e04f      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d111      	bne.n	8002838 <HAL_I2C_Init+0x168>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	1e58      	subs	r0, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6859      	ldr	r1, [r3, #4]
 800281c:	460b      	mov	r3, r1
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	2b00      	cmp	r3, #0
 800282e:	bf0c      	ite	eq
 8002830:	2301      	moveq	r3, #1
 8002832:	2300      	movne	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e012      	b.n	800285e <HAL_I2C_Init+0x18e>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	1e58      	subs	r0, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	0099      	lsls	r1, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Init+0x196>
 8002862:	2301      	movs	r3, #1
 8002864:	e022      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10e      	bne.n	800288c <HAL_I2C_Init+0x1bc>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e58      	subs	r0, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6859      	ldr	r1, [r3, #4]
 8002876:	460b      	mov	r3, r1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	440b      	add	r3, r1
 800287c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002880:	3301      	adds	r3, #1
 8002882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288a:	e00f      	b.n	80028ac <HAL_I2C_Init+0x1dc>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	0099      	lsls	r1, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	6809      	ldr	r1, [r1, #0]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6911      	ldr	r1, [r2, #16]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6812      	ldr	r2, [r2, #0]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695a      	ldr	r2, [r3, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2220      	movs	r2, #32
 8002926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	000186a0 	.word	0x000186a0
 8002948:	001e847f 	.word	0x001e847f
 800294c:	003d08ff 	.word	0x003d08ff
 8002950:	431bde83 	.word	0x431bde83
 8002954:	10624dd3 	.word	0x10624dd3

08002958 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e267      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d075      	beq.n	8002a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d00c      	beq.n	800299c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	2b08      	cmp	r3, #8
 800298c:	d112      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800298e:	4b82      	ldr	r3, [pc, #520]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800299a:	d10b      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	4b7e      	ldr	r3, [pc, #504]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d05b      	beq.n	8002a60 <HAL_RCC_OscConfig+0x108>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d157      	bne.n	8002a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e242      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029bc:	d106      	bne.n	80029cc <HAL_RCC_OscConfig+0x74>
 80029be:	4b76      	ldr	r3, [pc, #472]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a75      	ldr	r2, [pc, #468]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e01d      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029d4:	d10c      	bne.n	80029f0 <HAL_RCC_OscConfig+0x98>
 80029d6:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a6f      	ldr	r2, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b6d      	ldr	r3, [pc, #436]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ec:	6013      	str	r3, [r2, #0]
 80029ee:	e00b      	b.n	8002a08 <HAL_RCC_OscConfig+0xb0>
 80029f0:	4b69      	ldr	r3, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a68      	ldr	r2, [pc, #416]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029fa:	6013      	str	r3, [r2, #0]
 80029fc:	4b66      	ldr	r3, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a65      	ldr	r2, [pc, #404]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d013      	beq.n	8002a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fabc 	bl	8001f8c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fab8 	bl	8001f8c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e207      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0xc0>
 8002a36:	e014      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff faa8 	bl	8001f8c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7ff faa4 	bl	8001f8c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b64      	cmp	r3, #100	; 0x64
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e1f3      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	4b51      	ldr	r3, [pc, #324]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0xe8>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d063      	beq.n	8002b36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	4b4a      	ldr	r3, [pc, #296]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 030c 	and.w	r3, r3, #12
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00b      	beq.n	8002a92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11c      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a86:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d005      	beq.n	8002aaa <HAL_RCC_OscConfig+0x152>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d001      	beq.n	8002aaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e1c7      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4937      	ldr	r1, [pc, #220]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002abe:	e03a      	b.n	8002b36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d020      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ac8:	4b34      	ldr	r3, [pc, #208]	; (8002b9c <HAL_RCC_OscConfig+0x244>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ace:	f7ff fa5d 	bl	8001f8c <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ad6:	f7ff fa59 	bl	8001f8c <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e1a8      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af4:	4b28      	ldr	r3, [pc, #160]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4925      	ldr	r1, [pc, #148]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	600b      	str	r3, [r1, #0]
 8002b08:	e015      	b.n	8002b36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <HAL_RCC_OscConfig+0x244>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7ff fa3c 	bl	8001f8c <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b18:	f7ff fa38 	bl	8001f8c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e187      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d036      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d016      	beq.n	8002b78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_RCC_OscConfig+0x248>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7ff fa1c 	bl	8001f8c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b58:	f7ff fa18 	bl	8001f8c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e167      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x200>
 8002b76:	e01b      	b.n	8002bb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b78:	4b09      	ldr	r3, [pc, #36]	; (8002ba0 <HAL_RCC_OscConfig+0x248>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7e:	f7ff fa05 	bl	8001f8c <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b84:	e00e      	b.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b86:	f7ff fa01 	bl	8001f8c <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d907      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e150      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	42470000 	.word	0x42470000
 8002ba0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b88      	ldr	r3, [pc, #544]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ea      	bne.n	8002b86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8097 	beq.w	8002cec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bc2:	4b81      	ldr	r3, [pc, #516]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10f      	bne.n	8002bee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a7c      	ldr	r2, [pc, #496]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bea:	2301      	movs	r3, #1
 8002bec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bee:	4b77      	ldr	r3, [pc, #476]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d118      	bne.n	8002c2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bfa:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a73      	ldr	r2, [pc, #460]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c06:	f7ff f9c1 	bl	8001f8c <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0e:	f7ff f9bd 	bl	8001f8c <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e10c      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	4b6a      	ldr	r3, [pc, #424]	; (8002dcc <HAL_RCC_OscConfig+0x474>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d0f0      	beq.n	8002c0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x2ea>
 8002c34:	4b64      	ldr	r3, [pc, #400]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a63      	ldr	r2, [pc, #396]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x324>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x30c>
 8002c4a:	4b5f      	ldr	r3, [pc, #380]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a5e      	ldr	r2, [pc, #376]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b5c      	ldr	r3, [pc, #368]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a5b      	ldr	r2, [pc, #364]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0x324>
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a57      	ldr	r2, [pc, #348]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a54      	ldr	r2, [pc, #336]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002c76:	f023 0304 	bic.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7ff f982 	bl	8001f8c <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7ff f97e 	bl	8001f8c <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0cb      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca2:	4b49      	ldr	r3, [pc, #292]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCC_OscConfig+0x334>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb0:	f7ff f96c 	bl	8001f8c <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7ff f968 	bl	8001f8c <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e0b5      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cce:	4b3e      	ldr	r3, [pc, #248]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cda:	7dfb      	ldrb	r3, [r7, #23]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d105      	bne.n	8002cec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce0:	4b39      	ldr	r3, [pc, #228]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	4a38      	ldr	r2, [pc, #224]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002ce6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	f000 80a1 	beq.w	8002e38 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cf6:	4b34      	ldr	r3, [pc, #208]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d05c      	beq.n	8002dbc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d141      	bne.n	8002d8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x478>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7ff f93c 	bl	8001f8c <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d18:	f7ff f938 	bl	8001f8c <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e087      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	4b27      	ldr	r3, [pc, #156]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	69da      	ldr	r2, [r3, #28]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	085b      	lsrs	r3, r3, #1
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	041b      	lsls	r3, r3, #16
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	061b      	lsls	r3, r3, #24
 8002d5a:	491b      	ldr	r1, [pc, #108]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_RCC_OscConfig+0x478>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff f911 	bl	8001f8c <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7ff f90d 	bl	8001f8c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e05c      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x416>
 8002d8c:	e054      	b.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d8e:	4b10      	ldr	r3, [pc, #64]	; (8002dd0 <HAL_RCC_OscConfig+0x478>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d94:	f7ff f8fa 	bl	8001f8c <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7ff f8f6 	bl	8001f8c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e045      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCC_OscConfig+0x470>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1f0      	bne.n	8002d9c <HAL_RCC_OscConfig+0x444>
 8002dba:	e03d      	b.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e038      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_OscConfig+0x4ec>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d028      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d121      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d11a      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e04:	4013      	ands	r3, r2
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d111      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d107      	bne.n	8002e34 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800

08002e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b68      	ldr	r3, [pc, #416]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d90c      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b63      	ldr	r3, [pc, #396]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0b8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb4:	4b53      	ldr	r3, [pc, #332]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b50      	ldr	r3, [pc, #320]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494d      	ldr	r1, [pc, #308]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d044      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e067      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b37      	ldr	r3, [pc, #220]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4934      	ldr	r1, [pc, #208]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7ff f828 	bl	8001f8c <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7ff f824 	bl	8001f8c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b25      	ldr	r3, [pc, #148]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d20c      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	; (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e032      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4916      	ldr	r1, [pc, #88]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fba:	4b12      	ldr	r3, [pc, #72]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	490e      	ldr	r1, [pc, #56]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fce:	f000 f821 	bl	8003014 <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	490a      	ldr	r1, [pc, #40]	; (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	; (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fea:	4b09      	ldr	r3, [pc, #36]	; (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe ff88 	bl	8001f04 <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	08006c88 	.word	0x08006c88
 800300c:	20000010 	.word	0x20000010
 8003010:	20000014 	.word	0x20000014

08003014 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003018:	b094      	sub	sp, #80	; 0x50
 800301a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800301c:	2300      	movs	r3, #0
 800301e:	647b      	str	r3, [r7, #68]	; 0x44
 8003020:	2300      	movs	r3, #0
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	2300      	movs	r3, #0
 8003026:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302c:	4b79      	ldr	r3, [pc, #484]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d00d      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x40>
 8003038:	2b08      	cmp	r3, #8
 800303a:	f200 80e1 	bhi.w	8003200 <HAL_RCC_GetSysClockFreq+0x1ec>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0x34>
 8003042:	2b04      	cmp	r3, #4
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0x3a>
 8003046:	e0db      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b73      	ldr	r3, [pc, #460]	; (8003218 <HAL_RCC_GetSysClockFreq+0x204>)
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800304c:	e0db      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800304e:	4b73      	ldr	r3, [pc, #460]	; (800321c <HAL_RCC_GetSysClockFreq+0x208>)
 8003050:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003052:	e0d8      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800305c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800305e:	4b6d      	ldr	r3, [pc, #436]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d063      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306a:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	099b      	lsrs	r3, r3, #6
 8003070:	2200      	movs	r2, #0
 8003072:	63bb      	str	r3, [r7, #56]	; 0x38
 8003074:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307c:	633b      	str	r3, [r7, #48]	; 0x30
 800307e:	2300      	movs	r3, #0
 8003080:	637b      	str	r3, [r7, #52]	; 0x34
 8003082:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003086:	4622      	mov	r2, r4
 8003088:	462b      	mov	r3, r5
 800308a:	f04f 0000 	mov.w	r0, #0
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	0159      	lsls	r1, r3, #5
 8003094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003098:	0150      	lsls	r0, r2, #5
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4621      	mov	r1, r4
 80030a0:	1a51      	subs	r1, r2, r1
 80030a2:	6139      	str	r1, [r7, #16]
 80030a4:	4629      	mov	r1, r5
 80030a6:	eb63 0301 	sbc.w	r3, r3, r1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030b8:	4659      	mov	r1, fp
 80030ba:	018b      	lsls	r3, r1, #6
 80030bc:	4651      	mov	r1, sl
 80030be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030c2:	4651      	mov	r1, sl
 80030c4:	018a      	lsls	r2, r1, #6
 80030c6:	4651      	mov	r1, sl
 80030c8:	ebb2 0801 	subs.w	r8, r2, r1
 80030cc:	4659      	mov	r1, fp
 80030ce:	eb63 0901 	sbc.w	r9, r3, r1
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030e6:	4690      	mov	r8, r2
 80030e8:	4699      	mov	r9, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	eb18 0303 	adds.w	r3, r8, r3
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	462b      	mov	r3, r5
 80030f4:	eb49 0303 	adc.w	r3, r9, r3
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003106:	4629      	mov	r1, r5
 8003108:	024b      	lsls	r3, r1, #9
 800310a:	4621      	mov	r1, r4
 800310c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003110:	4621      	mov	r1, r4
 8003112:	024a      	lsls	r2, r1, #9
 8003114:	4610      	mov	r0, r2
 8003116:	4619      	mov	r1, r3
 8003118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800311a:	2200      	movs	r2, #0
 800311c:	62bb      	str	r3, [r7, #40]	; 0x28
 800311e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003124:	f7fd f858 	bl	80001d8 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4613      	mov	r3, r2
 800312e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003130:	e058      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003132:	4b38      	ldr	r3, [pc, #224]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	2200      	movs	r2, #0
 800313a:	4618      	mov	r0, r3
 800313c:	4611      	mov	r1, r2
 800313e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003142:	623b      	str	r3, [r7, #32]
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
 8003148:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800314c:	4642      	mov	r2, r8
 800314e:	464b      	mov	r3, r9
 8003150:	f04f 0000 	mov.w	r0, #0
 8003154:	f04f 0100 	mov.w	r1, #0
 8003158:	0159      	lsls	r1, r3, #5
 800315a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800315e:	0150      	lsls	r0, r2, #5
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4641      	mov	r1, r8
 8003166:	ebb2 0a01 	subs.w	sl, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800317c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003180:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003184:	ebb2 040a 	subs.w	r4, r2, sl
 8003188:	eb63 050b 	sbc.w	r5, r3, fp
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	00eb      	lsls	r3, r5, #3
 8003196:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800319a:	00e2      	lsls	r2, r4, #3
 800319c:	4614      	mov	r4, r2
 800319e:	461d      	mov	r5, r3
 80031a0:	4643      	mov	r3, r8
 80031a2:	18e3      	adds	r3, r4, r3
 80031a4:	603b      	str	r3, [r7, #0]
 80031a6:	464b      	mov	r3, r9
 80031a8:	eb45 0303 	adc.w	r3, r5, r3
 80031ac:	607b      	str	r3, [r7, #4]
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ba:	4629      	mov	r1, r5
 80031bc:	028b      	lsls	r3, r1, #10
 80031be:	4621      	mov	r1, r4
 80031c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031c4:	4621      	mov	r1, r4
 80031c6:	028a      	lsls	r2, r1, #10
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ce:	2200      	movs	r2, #0
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	61fa      	str	r2, [r7, #28]
 80031d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d8:	f7fc fffe 	bl	80001d8 <__aeabi_uldivmod>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4613      	mov	r3, r2
 80031e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031e4:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	0c1b      	lsrs	r3, r3, #16
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	3301      	adds	r3, #1
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031fe:	e002      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <HAL_RCC_GetSysClockFreq+0x204>)
 8003202:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003208:	4618      	mov	r0, r3
 800320a:	3750      	adds	r7, #80	; 0x50
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	00f42400 	.word	0x00f42400
 800321c:	007a1200 	.word	0x007a1200

08003220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_RCC_GetHCLKFreq+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000010 	.word	0x20000010

08003238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800323c:	f7ff fff0 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	; (8003258 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0a9b      	lsrs	r3, r3, #10
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	; (800325c <HAL_RCC_GetPCLK1Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	08006c98 	.word	0x08006c98

08003260 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003264:	f7ff ffdc 	bl	8003220 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK2Freq+0x20>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0b5b      	lsrs	r3, r3, #13
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	08006c98 	.word	0x08006c98

08003288 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d038      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032b0:	4b68      	ldr	r3, [pc, #416]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032b6:	f7fe fe69 	bl	8001f8c <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032be:	f7fe fe65 	bl	8001f8c <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0bd      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032d0:	4b61      	ldr	r3, [pc, #388]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f0      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	495a      	ldr	r1, [pc, #360]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032f6:	4b57      	ldr	r3, [pc, #348]	; (8003454 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032f8:	2201      	movs	r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032fc:	f7fe fe46 	bl	8001f8c <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003302:	e008      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003304:	f7fe fe42 	bl	8001f8c <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e09a      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003316:	4b50      	ldr	r3, [pc, #320]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8083 	beq.w	8003436 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	4b48      	ldr	r3, [pc, #288]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003338:	4a47      	ldr	r2, [pc, #284]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	6413      	str	r3, [r2, #64]	; 0x40
 8003340:	4b45      	ldr	r3, [pc, #276]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	60fb      	str	r3, [r7, #12]
 800334a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800334c:	4b43      	ldr	r3, [pc, #268]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a42      	ldr	r2, [pc, #264]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003356:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003358:	f7fe fe18 	bl	8001f8c <HAL_GetTick>
 800335c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003360:	f7fe fe14 	bl	8001f8c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e06c      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003372:	4b3a      	ldr	r3, [pc, #232]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800337e:	4b36      	ldr	r3, [pc, #216]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003386:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d02f      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x166>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d028      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800339c:	4b2e      	ldr	r3, [pc, #184]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033a4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033a6:	4b2e      	ldr	r3, [pc, #184]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ac:	4b2c      	ldr	r3, [pc, #176]	; (8003460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033b2:	4a29      	ldr	r2, [pc, #164]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033b8:	4b27      	ldr	r3, [pc, #156]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d114      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033c4:	f7fe fde2 	bl	8001f8c <HAL_GetTick>
 80033c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe fdde 	bl	8001f8c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e034      	b.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033fa:	d10d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80033fc:	4b16      	ldr	r3, [pc, #88]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800340c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003410:	4911      	ldr	r1, [pc, #68]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
 8003416:	e005      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003418:	4b0f      	ldr	r3, [pc, #60]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	4a0e      	ldr	r2, [pc, #56]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800341e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003422:	6093      	str	r3, [r2, #8]
 8003424:	4b0c      	ldr	r3, [pc, #48]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003426:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	4909      	ldr	r1, [pc, #36]	; (8003458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003432:	4313      	orrs	r3, r2
 8003434:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	7d1a      	ldrb	r2, [r3, #20]
 8003446:	4b07      	ldr	r3, [pc, #28]	; (8003464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003448:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	42470068 	.word	0x42470068
 8003458:	40023800 	.word	0x40023800
 800345c:	40007000 	.word	0x40007000
 8003460:	42470e40 	.word	0x42470e40
 8003464:	424711e0 	.word	0x424711e0

08003468 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e066      	b.n	800354c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7f5b      	ldrb	r3, [r3, #29]
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d105      	bne.n	8003494 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fe f9a2 	bl	80017d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	22ca      	movs	r2, #202	; 0xca
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2253      	movs	r2, #83	; 0x53
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f998 	bl	80037e0 <RTC_EnterInitMode>
 80034b0:	4603      	mov	r3, r0
 80034b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d12c      	bne.n	8003514 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034cc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6899      	ldr	r1, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	68d2      	ldr	r2, [r2, #12]
 80034f4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6919      	ldr	r1, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f99f 	bl	800384e <RTC_ExitInitMode>
 8003510:	4603      	mov	r3, r0
 8003512:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003514:	7bfb      	ldrb	r3, [r7, #15]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d113      	bne.n	8003542 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699a      	ldr	r2, [r3, #24]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	22ff      	movs	r2, #255	; 0xff
 8003548:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800354a:	7bfb      	ldrb	r3, [r7, #15]
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b087      	sub	sp, #28
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	7f1b      	ldrb	r3, [r3, #28]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_RTC_SetTime+0x1c>
 800356c:	2302      	movs	r3, #2
 800356e:	e087      	b.n	8003680 <HAL_RTC_SetTime+0x12c>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d126      	bne.n	80035d0 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d102      	bne.n	8003596 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f000 f97c 	bl	8003898 <RTC_ByteToBcd2>
 80035a0:	4603      	mov	r3, r0
 80035a2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f975 	bl	8003898 <RTC_ByteToBcd2>
 80035ae:	4603      	mov	r3, r0
 80035b0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035b2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	789b      	ldrb	r3, [r3, #2]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f96d 	bl	8003898 <RTC_ByteToBcd2>
 80035be:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80035c0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	78db      	ldrb	r3, [r3, #3]
 80035c8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80035ca:	4313      	orrs	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
 80035ce:	e018      	b.n	8003602 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d102      	bne.n	80035e4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	785b      	ldrb	r3, [r3, #1]
 80035ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035f0:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035f6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	78db      	ldrb	r3, [r3, #3]
 80035fc:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	22ca      	movs	r2, #202	; 0xca
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2253      	movs	r2, #83	; 0x53
 8003610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f8e4 	bl	80037e0 <RTC_EnterInitMode>
 8003618:	4603      	mov	r3, r0
 800361a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800361c:	7cfb      	ldrb	r3, [r7, #19]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d120      	bne.n	8003664 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800362c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003630:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003640:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8f7 	bl	800384e <RTC_ExitInitMode>
 8003660:	4603      	mov	r3, r0
 8003662:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	22ff      	movs	r2, #255	; 0xff
 8003676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	771a      	strb	r2, [r3, #28]

  return status;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003680:	4618      	mov	r0, r3
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}

08003688 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	7f1b      	ldrb	r3, [r3, #28]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_RTC_SetDate+0x1c>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e071      	b.n	8003788 <HAL_RTC_SetDate+0x100>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2202      	movs	r2, #2
 80036ae:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_RTC_SetDate+0x4c>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	785b      	ldrb	r3, [r3, #1]
 80036ba:	f003 0310 	and.w	r3, r3, #16
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d008      	beq.n	80036d4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	785b      	ldrb	r3, [r3, #1]
 80036c6:	f023 0310 	bic.w	r3, r3, #16
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	330a      	adds	r3, #10
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11c      	bne.n	8003714 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	78db      	ldrb	r3, [r3, #3]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 f8da 	bl	8003898 <RTC_ByteToBcd2>
 80036e4:	4603      	mov	r3, r0
 80036e6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	785b      	ldrb	r3, [r3, #1]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f000 f8d3 	bl	8003898 <RTC_ByteToBcd2>
 80036f2:	4603      	mov	r3, r0
 80036f4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036f6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	789b      	ldrb	r3, [r3, #2]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 f8cb 	bl	8003898 <RTC_ByteToBcd2>
 8003702:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003704:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e00e      	b.n	8003732 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	78db      	ldrb	r3, [r3, #3]
 8003718:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	785b      	ldrb	r3, [r3, #1]
 800371e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003720:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003726:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800372e:	4313      	orrs	r3, r2
 8003730:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	22ca      	movs	r2, #202	; 0xca
 8003738:	625a      	str	r2, [r3, #36]	; 0x24
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2253      	movs	r2, #83	; 0x53
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f84c 	bl	80037e0 <RTC_EnterInitMode>
 8003748:	4603      	mov	r3, r0
 800374a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800374c:	7cfb      	ldrb	r3, [r7, #19]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800375c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003760:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f873 	bl	800384e <RTC_ExitInitMode>
 8003768:	4603      	mov	r3, r0
 800376a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800376c:	7cfb      	ldrb	r3, [r7, #19]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	22ff      	movs	r2, #255	; 0xff
 800377e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	771a      	strb	r2, [r3, #28]

  return status;
 8003786:	7cfb      	ldrb	r3, [r7, #19]
}
 8003788:	4618      	mov	r0, r3
 800378a:	371c      	adds	r7, #28
 800378c:	46bd      	mov	sp, r7
 800378e:	bd90      	pop	{r4, r7, pc}

08003790 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037aa:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037ac:	f7fe fbee 	bl	8001f8c <HAL_GetTick>
 80037b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037b2:	e009      	b.n	80037c8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80037b4:	f7fe fbea 	bl	8001f8c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037c2:	d901      	bls.n	80037c8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e007      	b.n	80037d8 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ee      	beq.n	80037b4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d122      	bne.n	8003844 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800380c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800380e:	f7fe fbbd 	bl	8001f8c <HAL_GetTick>
 8003812:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003814:	e00c      	b.n	8003830 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003816:	f7fe fbb9 	bl	8001f8c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003824:	d904      	bls.n	8003830 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2204      	movs	r2, #4
 800382a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d102      	bne.n	8003844 <RTC_EnterInitMode+0x64>
 800383e:	7bfb      	ldrb	r3, [r7, #15]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d1e8      	bne.n	8003816 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003868:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 0320 	and.w	r3, r3, #32
 8003874:	2b00      	cmp	r3, #0
 8003876:	d10a      	bne.n	800388e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff89 	bl	8003790 <HAL_RTC_WaitForSynchro>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2204      	movs	r2, #4
 8003888:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80038a6:	e005      	b.n	80038b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	3301      	adds	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	3b0a      	subs	r3, #10
 80038b2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80038b4:	79fb      	ldrb	r3, [r7, #7]
 80038b6:	2b09      	cmp	r3, #9
 80038b8:	d8f6      	bhi.n	80038a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80038ba:	7bfb      	ldrb	r3, [r7, #15]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b2db      	uxtb	r3, r3
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b082      	sub	sp, #8
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e041      	b.n	8003968 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7fd ff99 	bl	8001830 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2202      	movs	r2, #2
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	4619      	mov	r1, r3
 8003910:	4610      	mov	r0, r2
 8003912:	f000 ff91 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3708      	adds	r7, #8
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d001      	beq.n	8003988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e044      	b.n	8003a12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <HAL_TIM_Base_Start_IT+0xb0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d018      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x6c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d013      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x6c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a1a      	ldr	r2, [pc, #104]	; (8003a24 <HAL_TIM_Base_Start_IT+0xb4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00e      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x6c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a19      	ldr	r2, [pc, #100]	; (8003a28 <HAL_TIM_Base_Start_IT+0xb8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d009      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x6c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_TIM_Base_Start_IT+0xbc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIM_Base_Start_IT+0x6c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <HAL_TIM_Base_Start_IT+0xc0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d111      	bne.n	8003a00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f003 0307 	and.w	r3, r3, #7
 80039e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d010      	beq.n	8003a10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f042 0201 	orr.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fe:	e007      	b.n	8003a10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f042 0201 	orr.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3714      	adds	r7, #20
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40010000 	.word	0x40010000
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	40014000 	.word	0x40014000

08003a34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e041      	b.n	8003aca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd ff7a 	bl	8001954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f000 fee0 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
	...

08003ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d109      	bne.n	8003af8 <HAL_TIM_PWM_Start+0x24>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	e022      	b.n	8003b3e <HAL_TIM_PWM_Start+0x6a>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d109      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x3e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	e015      	b.n	8003b3e <HAL_TIM_PWM_Start+0x6a>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d109      	bne.n	8003b2c <HAL_TIM_PWM_Start+0x58>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	bf14      	ite	ne
 8003b24:	2301      	movne	r3, #1
 8003b26:	2300      	moveq	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	e008      	b.n	8003b3e <HAL_TIM_PWM_Start+0x6a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	bf14      	ite	ne
 8003b38:	2301      	movne	r3, #1
 8003b3a:	2300      	moveq	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e068      	b.n	8003c18 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <HAL_TIM_PWM_Start+0x82>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2202      	movs	r2, #2
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b54:	e013      	b.n	8003b7e <HAL_TIM_PWM_Start+0xaa>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d104      	bne.n	8003b66 <HAL_TIM_PWM_Start+0x92>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b64:	e00b      	b.n	8003b7e <HAL_TIM_PWM_Start+0xaa>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d104      	bne.n	8003b76 <HAL_TIM_PWM_Start+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b74:	e003      	b.n	8003b7e <HAL_TIM_PWM_Start+0xaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	6839      	ldr	r1, [r7, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fa1a 	bl	8004fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a23      	ldr	r2, [pc, #140]	; (8003c20 <HAL_TIM_PWM_Start+0x14c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d107      	bne.n	8003ba6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ba4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_TIM_PWM_Start+0x14c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d018      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x10e>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb8:	d013      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x10e>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a19      	ldr	r2, [pc, #100]	; (8003c24 <HAL_TIM_PWM_Start+0x150>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x10e>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a17      	ldr	r2, [pc, #92]	; (8003c28 <HAL_TIM_PWM_Start+0x154>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x10e>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIM_PWM_Start+0x158>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_PWM_Start+0x10e>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a14      	ldr	r2, [pc, #80]	; (8003c30 <HAL_TIM_PWM_Start+0x15c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d111      	bne.n	8003c06 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d010      	beq.n	8003c16 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	e007      	b.n	8003c16 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40010000 	.word	0x40010000
 8003c24:	40000400 	.word	0x40000400
 8003c28:	40000800 	.word	0x40000800
 8003c2c:	40000c00 	.word	0x40000c00
 8003c30:	40014000 	.word	0x40014000

08003c34 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d109      	bne.n	8003c5c <HAL_TIM_PWM_Start_IT+0x28>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	e022      	b.n	8003ca2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	2b04      	cmp	r3, #4
 8003c60:	d109      	bne.n	8003c76 <HAL_TIM_PWM_Start_IT+0x42>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	bf14      	ite	ne
 8003c6e:	2301      	movne	r3, #1
 8003c70:	2300      	moveq	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	e015      	b.n	8003ca2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_PWM_Start_IT+0x5c>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e008      	b.n	8003ca2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0b3      	b.n	8003e12 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_PWM_Start_IT+0x86>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cb8:	e013      	b.n	8003ce2 <HAL_TIM_PWM_Start_IT+0xae>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b04      	cmp	r3, #4
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_PWM_Start_IT+0x96>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cc8:	e00b      	b.n	8003ce2 <HAL_TIM_PWM_Start_IT+0xae>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_PWM_Start_IT+0xa6>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	e003      	b.n	8003ce2 <HAL_TIM_PWM_Start_IT+0xae>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2202      	movs	r2, #2
 8003cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b0c      	cmp	r3, #12
 8003ce6:	d841      	bhi.n	8003d6c <HAL_TIM_PWM_Start_IT+0x138>
 8003ce8:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cee:	bf00      	nop
 8003cf0:	08003d25 	.word	0x08003d25
 8003cf4:	08003d6d 	.word	0x08003d6d
 8003cf8:	08003d6d 	.word	0x08003d6d
 8003cfc:	08003d6d 	.word	0x08003d6d
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d6d 	.word	0x08003d6d
 8003d08:	08003d6d 	.word	0x08003d6d
 8003d0c:	08003d6d 	.word	0x08003d6d
 8003d10:	08003d49 	.word	0x08003d49
 8003d14:	08003d6d 	.word	0x08003d6d
 8003d18:	08003d6d 	.word	0x08003d6d
 8003d1c:	08003d6d 	.word	0x08003d6d
 8003d20:	08003d5b 	.word	0x08003d5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0202 	orr.w	r2, r2, #2
 8003d32:	60da      	str	r2, [r3, #12]
      break;
 8003d34:	e01d      	b.n	8003d72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0204 	orr.w	r2, r2, #4
 8003d44:	60da      	str	r2, [r3, #12]
      break;
 8003d46:	e014      	b.n	8003d72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0208 	orr.w	r2, r2, #8
 8003d56:	60da      	str	r2, [r3, #12]
      break;
 8003d58:	e00b      	b.n	8003d72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0210 	orr.w	r2, r2, #16
 8003d68:	60da      	str	r2, [r3, #12]
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d70:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d14b      	bne.n	8003e10 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f001 f91d 	bl	8004fc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a24      	ldr	r2, [pc, #144]	; (8003e1c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d107      	bne.n	8003da0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d9e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d018      	beq.n	8003ddc <HAL_TIM_PWM_Start_IT+0x1a8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d013      	beq.n	8003ddc <HAL_TIM_PWM_Start_IT+0x1a8>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d00e      	beq.n	8003ddc <HAL_TIM_PWM_Start_IT+0x1a8>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d009      	beq.n	8003ddc <HAL_TIM_PWM_Start_IT+0x1a8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a16      	ldr	r2, [pc, #88]	; (8003e28 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_TIM_PWM_Start_IT+0x1a8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d111      	bne.n	8003e00 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	d010      	beq.n	8003e10 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0201 	orr.w	r2, r2, #1
 8003dfc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dfe:	e007      	b.n	8003e10 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	40000400 	.word	0x40000400
 8003e24:	40000800 	.word	0x40000800
 8003e28:	40000c00 	.word	0x40000c00
 8003e2c:	40014000 	.word	0x40014000

08003e30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e041      	b.n	8003ec6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f839 	bl	8003ece <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2202      	movs	r2, #2
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f000 fce2 	bl	8004838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
	...

08003ee4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <HAL_TIM_IC_Start_IT+0x1e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e013      	b.n	8003f2a <HAL_TIM_IC_Start_IT+0x46>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_IC_Start_IT+0x2e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	e00b      	b.n	8003f2a <HAL_TIM_IC_Start_IT+0x46>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_IC_Start_IT+0x3e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e003      	b.n	8003f2a <HAL_TIM_IC_Start_IT+0x46>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d104      	bne.n	8003f3c <HAL_TIM_IC_Start_IT+0x58>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e013      	b.n	8003f64 <HAL_TIM_IC_Start_IT+0x80>
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d104      	bne.n	8003f4c <HAL_TIM_IC_Start_IT+0x68>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e00b      	b.n	8003f64 <HAL_TIM_IC_Start_IT+0x80>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d104      	bne.n	8003f5c <HAL_TIM_IC_Start_IT+0x78>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	e003      	b.n	8003f64 <HAL_TIM_IC_Start_IT+0x80>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f66:	7bbb      	ldrb	r3, [r7, #14]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d102      	bne.n	8003f72 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f6c:	7b7b      	ldrb	r3, [r7, #13]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d001      	beq.n	8003f76 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0c2      	b.n	80040fc <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_IC_Start_IT+0xa2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	e013      	b.n	8003fae <HAL_TIM_IC_Start_IT+0xca>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_IC_Start_IT+0xb2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f94:	e00b      	b.n	8003fae <HAL_TIM_IC_Start_IT+0xca>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_IC_Start_IT+0xc2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa4:	e003      	b.n	8003fae <HAL_TIM_IC_Start_IT+0xca>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d104      	bne.n	8003fbe <HAL_TIM_IC_Start_IT+0xda>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fbc:	e013      	b.n	8003fe6 <HAL_TIM_IC_Start_IT+0x102>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_IC_Start_IT+0xea>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fcc:	e00b      	b.n	8003fe6 <HAL_TIM_IC_Start_IT+0x102>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b08      	cmp	r3, #8
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_IC_Start_IT+0xfa>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fdc:	e003      	b.n	8003fe6 <HAL_TIM_IC_Start_IT+0x102>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d841      	bhi.n	8004070 <HAL_TIM_IC_Start_IT+0x18c>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <HAL_TIM_IC_Start_IT+0x110>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004029 	.word	0x08004029
 8003ff8:	08004071 	.word	0x08004071
 8003ffc:	08004071 	.word	0x08004071
 8004000:	08004071 	.word	0x08004071
 8004004:	0800403b 	.word	0x0800403b
 8004008:	08004071 	.word	0x08004071
 800400c:	08004071 	.word	0x08004071
 8004010:	08004071 	.word	0x08004071
 8004014:	0800404d 	.word	0x0800404d
 8004018:	08004071 	.word	0x08004071
 800401c:	08004071 	.word	0x08004071
 8004020:	08004071 	.word	0x08004071
 8004024:	0800405f 	.word	0x0800405f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0202 	orr.w	r2, r2, #2
 8004036:	60da      	str	r2, [r3, #12]
      break;
 8004038:	e01d      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68da      	ldr	r2, [r3, #12]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 0204 	orr.w	r2, r2, #4
 8004048:	60da      	str	r2, [r3, #12]
      break;
 800404a:	e014      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68da      	ldr	r2, [r3, #12]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	60da      	str	r2, [r3, #12]
      break;
 800405c:	e00b      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68da      	ldr	r2, [r3, #12]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f042 0210 	orr.w	r2, r2, #16
 800406c:	60da      	str	r2, [r3, #12]
      break;
 800406e:	e002      	b.n	8004076 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	73fb      	strb	r3, [r7, #15]
      break;
 8004074:	bf00      	nop
  }

  if (status == HAL_OK)
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d13e      	bne.n	80040fa <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2201      	movs	r2, #1
 8004082:	6839      	ldr	r1, [r7, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f000 ff9b 	bl	8004fc0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1d      	ldr	r2, [pc, #116]	; (8004104 <HAL_TIM_IC_Start_IT+0x220>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d018      	beq.n	80040c6 <HAL_TIM_IC_Start_IT+0x1e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d013      	beq.n	80040c6 <HAL_TIM_IC_Start_IT+0x1e2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a19      	ldr	r2, [pc, #100]	; (8004108 <HAL_TIM_IC_Start_IT+0x224>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a17      	ldr	r2, [pc, #92]	; (800410c <HAL_TIM_IC_Start_IT+0x228>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d009      	beq.n	80040c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a16      	ldr	r2, [pc, #88]	; (8004110 <HAL_TIM_IC_Start_IT+0x22c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d004      	beq.n	80040c6 <HAL_TIM_IC_Start_IT+0x1e2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a14      	ldr	r2, [pc, #80]	; (8004114 <HAL_TIM_IC_Start_IT+0x230>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d111      	bne.n	80040ea <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d010      	beq.n	80040fa <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e8:	e007      	b.n	80040fa <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f042 0201 	orr.w	r2, r2, #1
 80040f8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40010000 	.word	0x40010000
 8004108:	40000400 	.word	0x40000400
 800410c:	40000800 	.word	0x40000800
 8004110:	40000c00 	.word	0x40000c00
 8004114:	40014000 	.word	0x40014000

08004118 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d122      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b02      	cmp	r3, #2
 800413a:	d11b      	bne.n	8004174 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f06f 0202 	mvn.w	r2, #2
 8004144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699b      	ldr	r3, [r3, #24]
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fe52 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8004160:	e005      	b.n	800416e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 fb4a 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 fb51 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b04      	cmp	r3, #4
 8004180:	d122      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b04      	cmp	r3, #4
 800418e:	d11b      	bne.n	80041c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0204 	mvn.w	r2, #4
 8004198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fd fe28 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 80041b4:	e005      	b.n	80041c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 fb20 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 fb27 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b08      	cmp	r3, #8
 80041d4:	d122      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d11b      	bne.n	800421c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0208 	mvn.w	r2, #8
 80041ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2204      	movs	r2, #4
 80041f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fd fdfe 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 8004208:	e005      	b.n	8004216 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 faf6 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fafd 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d122      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b10      	cmp	r3, #16
 8004236:	d11b      	bne.n	8004270 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0210 	mvn.w	r2, #16
 8004240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2208      	movs	r2, #8
 8004246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fd fdd4 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
 800425c:	e005      	b.n	800426a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 facc 	bl	80047fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 fad3 	bl	8004810 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b01      	cmp	r3, #1
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0201 	mvn.w	r2, #1
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc faae 	bl	80007f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a6:	2b80      	cmp	r3, #128	; 0x80
 80042a8:	d10e      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d107      	bne.n	80042c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 ff1a 	bl	80050fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d10e      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d107      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fa98 	bl	8004824 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d10e      	bne.n	8004320 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b20      	cmp	r3, #32
 800430e:	d107      	bne.n	8004320 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0220 	mvn.w	r2, #32
 8004318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fee4 	bl	80050e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004320:	bf00      	nop
 8004322:	3708      	adds	r7, #8
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004334:	2300      	movs	r3, #0
 8004336:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004342:	2302      	movs	r3, #2
 8004344:	e088      	b.n	8004458 <HAL_TIM_IC_ConfigChannel+0x130>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f000 fc74 	bl	8004c50 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 020c 	bic.w	r2, r2, #12
 8004376:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	619a      	str	r2, [r3, #24]
 800438a:	e060      	b.n	800444e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b04      	cmp	r3, #4
 8004390:	d11c      	bne.n	80043cc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f000 fcec 	bl	8004d7e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	699a      	ldr	r2, [r3, #24]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043b4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6999      	ldr	r1, [r3, #24]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	021a      	lsls	r2, r3, #8
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	619a      	str	r2, [r3, #24]
 80043ca:	e040      	b.n	800444e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d11b      	bne.n	800440a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6819      	ldr	r1, [r3, #0]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	685a      	ldr	r2, [r3, #4]
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f000 fd39 	bl	8004e58 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	69da      	ldr	r2, [r3, #28]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 020c 	bic.w	r2, r2, #12
 80043f4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	69d9      	ldr	r1, [r3, #28]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	61da      	str	r2, [r3, #28]
 8004408:	e021      	b.n	800444e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d11c      	bne.n	800444a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6819      	ldr	r1, [r3, #0]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f000 fd56 	bl	8004ed0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	69da      	ldr	r2, [r3, #28]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004432:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	69d9      	ldr	r1, [r3, #28]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	61da      	str	r2, [r3, #28]
 8004448:	e001      	b.n	800444e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004456:	7dfb      	ldrb	r3, [r7, #23]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800446c:	2300      	movs	r3, #0
 800446e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800447a:	2302      	movs	r3, #2
 800447c:	e0ae      	b.n	80045dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b0c      	cmp	r3, #12
 800448a:	f200 809f 	bhi.w	80045cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800448e:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004494:	080044c9 	.word	0x080044c9
 8004498:	080045cd 	.word	0x080045cd
 800449c:	080045cd 	.word	0x080045cd
 80044a0:	080045cd 	.word	0x080045cd
 80044a4:	08004509 	.word	0x08004509
 80044a8:	080045cd 	.word	0x080045cd
 80044ac:	080045cd 	.word	0x080045cd
 80044b0:	080045cd 	.word	0x080045cd
 80044b4:	0800454b 	.word	0x0800454b
 80044b8:	080045cd 	.word	0x080045cd
 80044bc:	080045cd 	.word	0x080045cd
 80044c0:	080045cd 	.word	0x080045cd
 80044c4:	0800458b 	.word	0x0800458b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68b9      	ldr	r1, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fa32 	bl	8004938 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0208 	orr.w	r2, r2, #8
 80044e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f022 0204 	bic.w	r2, r2, #4
 80044f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6999      	ldr	r1, [r3, #24]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	619a      	str	r2, [r3, #24]
      break;
 8004506:	e064      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fa78 	bl	8004a04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]
      break;
 8004548:	e043      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fac3 	bl	8004adc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0208 	orr.w	r2, r2, #8
 8004564:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69da      	ldr	r2, [r3, #28]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f022 0204 	bic.w	r2, r2, #4
 8004574:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69d9      	ldr	r1, [r3, #28]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	61da      	str	r2, [r3, #28]
      break;
 8004588:	e023      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fb0d 	bl	8004bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	021a      	lsls	r2, r3, #8
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	61da      	str	r2, [r3, #28]
      break;
 80045ca:	e002      	b.n	80045d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	75fb      	strb	r3, [r7, #23]
      break;
 80045d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045da:	7dfb      	ldrb	r3, [r7, #23]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_ConfigClockSource+0x1c>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0b4      	b.n	800476a <HAL_TIM_ConfigClockSource+0x186>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800461e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d03e      	beq.n	80046b8 <HAL_TIM_ConfigClockSource+0xd4>
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463e:	f200 8087 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	f000 8086 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x172>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	d87f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d01a      	beq.n	800468a <HAL_TIM_ConfigClockSource+0xa6>
 8004654:	2b70      	cmp	r3, #112	; 0x70
 8004656:	d87b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d050      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x11a>
 800465c:	2b60      	cmp	r3, #96	; 0x60
 800465e:	d877      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d03c      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xfa>
 8004664:	2b50      	cmp	r3, #80	; 0x50
 8004666:	d873      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d058      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x13a>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d86f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d064      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d86b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d060      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d867      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004684:	2b10      	cmp	r3, #16
 8004686:	d05a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	e062      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	f000 fc71 	bl	8004f80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	609a      	str	r2, [r3, #8]
      break;
 80046b6:	e04f      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	f000 fc5a 	bl	8004f80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046da:	609a      	str	r2, [r3, #8]
      break;
 80046dc:	e03c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 fb18 	bl	8004d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2150      	movs	r1, #80	; 0x50
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fc27 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 80046fc:	e02c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 fb74 	bl	8004df8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2160      	movs	r1, #96	; 0x60
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fc17 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800471c:	e01c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 faf8 	bl	8004d20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	4618      	mov	r0, r3
 8004738:	f000 fc07 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800473c:	e00c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 fbfe 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800474e:	e003      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e000      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
	...

08004774 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d831      	bhi.n	80047ec <HAL_TIM_ReadCapturedValue+0x78>
 8004788:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <HAL_TIM_ReadCapturedValue+0x1c>)
 800478a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478e:	bf00      	nop
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080047ed 	.word	0x080047ed
 8004798:	080047ed 	.word	0x080047ed
 800479c:	080047ed 	.word	0x080047ed
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047ed 	.word	0x080047ed
 80047a8:	080047ed 	.word	0x080047ed
 80047ac:	080047ed 	.word	0x080047ed
 80047b0:	080047d9 	.word	0x080047d9
 80047b4:	080047ed 	.word	0x080047ed
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	080047ed 	.word	0x080047ed
 80047c0:	080047e3 	.word	0x080047e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ca:	60fb      	str	r3, [r7, #12]

      break;
 80047cc:	e00f      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	60fb      	str	r3, [r7, #12]

      break;
 80047d6:	e00a      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	60fb      	str	r3, [r7, #12]

      break;
 80047e0:	e005      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	60fb      	str	r3, [r7, #12]

      break;
 80047ea:	e000      	b.n	80047ee <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80047ec:	bf00      	nop
  }

  return tmpreg;
 80047ee:	68fb      	ldr	r3, [r7, #12]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a34      	ldr	r2, [pc, #208]	; (800491c <TIM_Base_SetConfig+0xe4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d00f      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004856:	d00b      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a31      	ldr	r2, [pc, #196]	; (8004920 <TIM_Base_SetConfig+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d007      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a30      	ldr	r2, [pc, #192]	; (8004924 <TIM_Base_SetConfig+0xec>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d003      	beq.n	8004870 <TIM_Base_SetConfig+0x38>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <TIM_Base_SetConfig+0xf0>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d108      	bne.n	8004882 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a25      	ldr	r2, [pc, #148]	; (800491c <TIM_Base_SetConfig+0xe4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d017      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a22      	ldr	r2, [pc, #136]	; (8004920 <TIM_Base_SetConfig+0xe8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a21      	ldr	r2, [pc, #132]	; (8004924 <TIM_Base_SetConfig+0xec>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00f      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a20      	ldr	r2, [pc, #128]	; (8004928 <TIM_Base_SetConfig+0xf0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <TIM_Base_SetConfig+0xf4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a1e      	ldr	r2, [pc, #120]	; (8004930 <TIM_Base_SetConfig+0xf8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0x8a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <TIM_Base_SetConfig+0xfc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <TIM_Base_SetConfig+0xe4>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d103      	bne.n	8004908 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	691a      	ldr	r2, [r3, #16]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	615a      	str	r2, [r3, #20]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40014000 	.word	0x40014000
 8004930:	40014400 	.word	0x40014400
 8004934:	40014800 	.word	0x40014800

08004938 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0201 	bic.w	r2, r3, #1
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0303 	bic.w	r3, r3, #3
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f023 0302 	bic.w	r3, r3, #2
 8004980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <TIM_OC1_SetConfig+0xc8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10c      	bne.n	80049ae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0308 	bic.w	r3, r3, #8
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a13      	ldr	r2, [pc, #76]	; (8004a00 <TIM_OC1_SetConfig+0xc8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d111      	bne.n	80049da <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	621a      	str	r2, [r3, #32]
}
 80049f4:	bf00      	nop
 80049f6:	371c      	adds	r7, #28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40010000 	.word	0x40010000

08004a04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	f023 0210 	bic.w	r2, r3, #16
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	4313      	orrs	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	f023 0320 	bic.w	r3, r3, #32
 8004a4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <TIM_OC2_SetConfig+0xd4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d10d      	bne.n	8004a80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a15      	ldr	r2, [pc, #84]	; (8004ad8 <TIM_OC2_SetConfig+0xd4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d113      	bne.n	8004ab0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	bf00      	nop
 8004acc:	371c      	adds	r7, #28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000

08004adc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1d      	ldr	r2, [pc, #116]	; (8004bac <TIM_OC3_SetConfig+0xd0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10d      	bne.n	8004b56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a14      	ldr	r2, [pc, #80]	; (8004bac <TIM_OC3_SetConfig+0xd0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40010000 	.word	0x40010000

08004bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	021b      	lsls	r3, r3, #8
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	031b      	lsls	r3, r3, #12
 8004c02:	693a      	ldr	r2, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a10      	ldr	r2, [pc, #64]	; (8004c4c <TIM_OC4_SetConfig+0x9c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	019b      	lsls	r3, r3, #6
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000

08004c50 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <TIM_TI1_SetConfig+0xbc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d013      	beq.n	8004ca6 <TIM_TI1_SetConfig+0x56>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c84:	d00f      	beq.n	8004ca6 <TIM_TI1_SetConfig+0x56>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a21      	ldr	r2, [pc, #132]	; (8004d10 <TIM_TI1_SetConfig+0xc0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00b      	beq.n	8004ca6 <TIM_TI1_SetConfig+0x56>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4a20      	ldr	r2, [pc, #128]	; (8004d14 <TIM_TI1_SetConfig+0xc4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d007      	beq.n	8004ca6 <TIM_TI1_SetConfig+0x56>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a1f      	ldr	r2, [pc, #124]	; (8004d18 <TIM_TI1_SetConfig+0xc8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d003      	beq.n	8004ca6 <TIM_TI1_SetConfig+0x56>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4a1e      	ldr	r2, [pc, #120]	; (8004d1c <TIM_TI1_SetConfig+0xcc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <TIM_TI1_SetConfig+0x5a>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <TIM_TI1_SetConfig+0x5c>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	e003      	b.n	8004cca <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	f023 030a 	bic.w	r3, r3, #10
 8004ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f003 030a 	and.w	r3, r3, #10
 8004cec:	693a      	ldr	r2, [r7, #16]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	621a      	str	r2, [r3, #32]
}
 8004cfe:	bf00      	nop
 8004d00:	371c      	adds	r7, #28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40010000 	.word	0x40010000
 8004d10:	40000400 	.word	0x40000400
 8004d14:	40000800 	.word	0x40000800
 8004d18:	40000c00 	.word	0x40000c00
 8004d1c:	40014000 	.word	0x40014000

08004d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	f023 0201 	bic.w	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 030a 	bic.w	r3, r3, #10
 8004d5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	621a      	str	r2, [r3, #32]
}
 8004d72:	bf00      	nop
 8004d74:	371c      	adds	r7, #28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d7e:	b480      	push	{r7}
 8004d80:	b087      	sub	sp, #28
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	60b9      	str	r1, [r7, #8]
 8004d88:	607a      	str	r2, [r7, #4]
 8004d8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f023 0210 	bic.w	r2, r3, #16
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004daa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	031b      	lsls	r3, r3, #12
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	621a      	str	r2, [r3, #32]
}
 8004dec:	bf00      	nop
 8004dee:	371c      	adds	r7, #28
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	f023 0210 	bic.w	r2, r3, #16
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	031b      	lsls	r3, r3, #12
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	621a      	str	r2, [r3, #32]
}
 8004e4c:	bf00      	nop
 8004e4e:	371c      	adds	r7, #28
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b087      	sub	sp, #28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	607a      	str	r2, [r7, #4]
 8004e64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 0303 	bic.w	r3, r3, #3
 8004e84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e94:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	621a      	str	r2, [r3, #32]
}
 8004ec4:	bf00      	nop
 8004ec6:	371c      	adds	r7, #28
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	69db      	ldr	r3, [r3, #28]
 8004eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004efc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	021b      	lsls	r3, r3, #8
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f0e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	031b      	lsls	r3, r3, #12
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004f22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	031b      	lsls	r3, r3, #12
 8004f28:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f043 0307 	orr.w	r3, r3, #7
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005020:	2302      	movs	r3, #2
 8005022:	e050      	b.n	80050c6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d018      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d013      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00e      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a16      	ldr	r2, [pc, #88]	; (80050dc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d009      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d004      	beq.n	800509a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a13      	ldr	r2, [pc, #76]	; (80050e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d10c      	bne.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	68ba      	ldr	r2, [r7, #8]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40010000 	.word	0x40010000
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800
 80050e0:	40000c00 	.word	0x40000c00
 80050e4:	40014000 	.word	0x40014000

080050e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e03f      	b.n	80051a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fc fc94 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2224      	movs	r2, #36	; 0x24
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 fddf 	bl	8005d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695a      	ldr	r2, [r3, #20]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68da      	ldr	r2, [r3, #12]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b08a      	sub	sp, #40	; 0x28
 80051ae:	af02      	add	r7, sp, #8
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	60b9      	str	r1, [r7, #8]
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d17c      	bne.n	80052c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <HAL_UART_Transmit+0x2c>
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e075      	b.n	80052c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Transmit+0x3e>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e06e      	b.n	80052c6 <HAL_UART_Transmit+0x11c>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2221      	movs	r2, #33	; 0x21
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051fe:	f7fc fec5 	bl	8001f8c <HAL_GetTick>
 8005202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	88fa      	ldrh	r2, [r7, #6]
 800520e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005218:	d108      	bne.n	800522c <HAL_UART_Transmit+0x82>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	e003      	b.n	8005234 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005230:	2300      	movs	r3, #0
 8005232:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800523c:	e02a      	b.n	8005294 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fb1f 	bl	800588c <UART_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e036      	b.n	80052c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10b      	bne.n	8005276 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	461a      	mov	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800526c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	3302      	adds	r3, #2
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	e007      	b.n	8005286 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	781a      	ldrb	r2, [r3, #0]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	3301      	adds	r3, #1
 8005284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1cf      	bne.n	800523e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2200      	movs	r2, #0
 80052a6:	2140      	movs	r1, #64	; 0x40
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 faef 	bl	800588c <UART_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e006      	b.n	80052c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	e000      	b.n	80052c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80052c4:	2302      	movs	r3, #2
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3720      	adds	r7, #32
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	4613      	mov	r3, r2
 80052da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b20      	cmp	r3, #32
 80052e6:	d11d      	bne.n	8005324 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_UART_Receive_IT+0x26>
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e016      	b.n	8005326 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_UART_Receive_IT+0x38>
 8005302:	2302      	movs	r3, #2
 8005304:	e00f      	b.n	8005326 <HAL_UART_Receive_IT+0x58>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	461a      	mov	r2, r3
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 fb24 	bl	8005968 <UART_Start_Receive_IT>
 8005320:	4603      	mov	r3, r0
 8005322:	e000      	b.n	8005326 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005324:	2302      	movs	r3, #2
  }
}
 8005326:	4618      	mov	r0, r3
 8005328:	3710      	adds	r7, #16
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
	...

08005330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b0ba      	sub	sp, #232	; 0xe8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800535c:	2300      	movs	r3, #0
 800535e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 030f 	and.w	r3, r3, #15
 800536a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800536e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10f      	bne.n	8005396 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d009      	beq.n	8005396 <HAL_UART_IRQHandler+0x66>
 8005382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fc07 	bl	8005ba2 <UART_Receive_IT>
      return;
 8005394:	e256      	b.n	8005844 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005396:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80de 	beq.w	800555c <HAL_UART_IRQHandler+0x22c>
 80053a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053a4:	f003 0301 	and.w	r3, r3, #1
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d106      	bne.n	80053ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 80d1 	beq.w	800555c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00b      	beq.n	80053de <HAL_UART_IRQHandler+0xae>
 80053c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d005      	beq.n	80053de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	f043 0201 	orr.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0304 	and.w	r3, r3, #4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_UART_IRQHandler+0xd2>
 80053ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d005      	beq.n	8005402 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	f043 0202 	orr.w	r2, r3, #2
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <HAL_UART_IRQHandler+0xf6>
 800540e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d005      	beq.n	8005426 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	f043 0204 	orr.w	r2, r3, #4
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d011      	beq.n	8005456 <HAL_UART_IRQHandler+0x126>
 8005432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005436:	f003 0320 	and.w	r3, r3, #32
 800543a:	2b00      	cmp	r3, #0
 800543c:	d105      	bne.n	800544a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800543e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d005      	beq.n	8005456 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	f043 0208 	orr.w	r2, r3, #8
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 81ed 	beq.w	800583a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005464:	f003 0320 	and.w	r3, r3, #32
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_UART_IRQHandler+0x14e>
 800546c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fb92 	bl	8005ba2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	bf0c      	ite	eq
 800548c:	2301      	moveq	r3, #1
 800548e:	2300      	movne	r3, #0
 8005490:	b2db      	uxtb	r3, r3
 8005492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d103      	bne.n	80054aa <HAL_UART_IRQHandler+0x17a>
 80054a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d04f      	beq.n	800554a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 fa9a 	bl	80059e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ba:	2b40      	cmp	r3, #64	; 0x40
 80054bc:	d141      	bne.n	8005542 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3314      	adds	r3, #20
 80054c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3314      	adds	r3, #20
 80054e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1d9      	bne.n	80054be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	2b00      	cmp	r3, #0
 8005510:	d013      	beq.n	800553a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	4a7d      	ldr	r2, [pc, #500]	; (800570c <HAL_UART_IRQHandler+0x3dc>)
 8005518:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	4618      	mov	r0, r3
 8005520:	f7fc fee5 	bl	80022ee <HAL_DMA_Abort_IT>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d016      	beq.n	8005558 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e00e      	b.n	8005558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f990 	bl	8005860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	e00a      	b.n	8005558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f98c 	bl	8005860 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	e006      	b.n	8005558 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f988 	bl	8005860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005556:	e170      	b.n	800583a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	bf00      	nop
    return;
 800555a:	e16e      	b.n	800583a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	f040 814a 	bne.w	80057fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0310 	and.w	r3, r3, #16
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8143 	beq.w	80057fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 813c 	beq.w	80057fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005582:	2300      	movs	r3, #0
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	60bb      	str	r3, [r7, #8]
 8005596:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	f040 80b4 	bne.w	8005710 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 8140 	beq.w	800583e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c6:	429a      	cmp	r2, r3
 80055c8:	f080 8139 	bcs.w	800583e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055de:	f000 8088 	beq.w	80056f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	330c      	adds	r3, #12
 800560a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800560e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005612:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800561a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1d9      	bne.n	80055e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3314      	adds	r3, #20
 8005634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800563e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3314      	adds	r3, #20
 800564e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800565a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e1      	bne.n	800562e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3314      	adds	r3, #20
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800567a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3314      	adds	r3, #20
 800568a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800568e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800569c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e3      	bne.n	800566a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c2:	f023 0310 	bic.w	r3, r3, #16
 80056c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	330c      	adds	r3, #12
 80056d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80056d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e3      	bne.n	80056b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fc fd8e 	bl	800220e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8b6 	bl	8005874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005708:	e099      	b.n	800583e <HAL_UART_IRQHandler+0x50e>
 800570a:	bf00      	nop
 800570c:	08005aab 	.word	0x08005aab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005718:	b29b      	uxth	r3, r3
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 808b 	beq.w	8005842 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800572c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8086 	beq.w	8005842 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	330c      	adds	r3, #12
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	330c      	adds	r3, #12
 8005756:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800575a:	647a      	str	r2, [r7, #68]	; 0x44
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e3      	bne.n	8005736 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f023 0301 	bic.w	r3, r3, #1
 8005784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005792:	633a      	str	r2, [r7, #48]	; 0x30
 8005794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e3      	bne.n	800576e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	330c      	adds	r3, #12
 80057d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057d8:	61fa      	str	r2, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e3      	bne.n	80057b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f83e 	bl	8005874 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057f8:	e023      	b.n	8005842 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_UART_IRQHandler+0x4ea>
 8005806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f95d 	bl	8005ad2 <UART_Transmit_IT>
    return;
 8005818:	e014      	b.n	8005844 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800581a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800581e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00e      	beq.n	8005844 <HAL_UART_IRQHandler+0x514>
 8005826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d008      	beq.n	8005844 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f99d 	bl	8005b72 <UART_EndTransmit_IT>
    return;
 8005838:	e004      	b.n	8005844 <HAL_UART_IRQHandler+0x514>
    return;
 800583a:	bf00      	nop
 800583c:	e002      	b.n	8005844 <HAL_UART_IRQHandler+0x514>
      return;
 800583e:	bf00      	nop
 8005840:	e000      	b.n	8005844 <HAL_UART_IRQHandler+0x514>
      return;
 8005842:	bf00      	nop
  }
}
 8005844:	37e8      	adds	r7, #232	; 0xe8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop

0800584c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b090      	sub	sp, #64	; 0x40
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589c:	e050      	b.n	8005940 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a4:	d04c      	beq.n	8005940 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d007      	beq.n	80058bc <UART_WaitOnFlagUntilTimeout+0x30>
 80058ac:	f7fc fb6e 	bl	8001f8c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d241      	bcs.n	8005940 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	330c      	adds	r3, #12
 80058c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	330c      	adds	r3, #12
 80058da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058dc:	637a      	str	r2, [r7, #52]	; 0x34
 80058de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3314      	adds	r3, #20
 80058f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	e853 3f00 	ldrex	r3, [r3]
 80058fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	63bb      	str	r3, [r7, #56]	; 0x38
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	3314      	adds	r3, #20
 800590e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005910:	623a      	str	r2, [r7, #32]
 8005912:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005914:	69f9      	ldr	r1, [r7, #28]
 8005916:	6a3a      	ldr	r2, [r7, #32]
 8005918:	e841 2300 	strex	r3, r2, [r1]
 800591c:	61bb      	str	r3, [r7, #24]
   return(result);
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1e5      	bne.n	80058f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e00f      	b.n	8005960 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4013      	ands	r3, r2
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	429a      	cmp	r2, r3
 800594e:	bf0c      	ite	eq
 8005950:	2301      	moveq	r3, #1
 8005952:	2300      	movne	r3, #0
 8005954:	b2db      	uxtb	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	79fb      	ldrb	r3, [r7, #7]
 800595a:	429a      	cmp	r2, r3
 800595c:	d09f      	beq.n	800589e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3740      	adds	r7, #64	; 0x40
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}

08005968 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	4613      	mov	r3, r2
 8005974:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	88fa      	ldrh	r2, [r7, #6]
 8005986:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2222      	movs	r2, #34	; 0x22
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f042 0201 	orr.w	r2, r2, #1
 80059c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f042 0220 	orr.w	r2, r2, #32
 80059d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b095      	sub	sp, #84	; 0x54
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a0c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3314      	adds	r3, #20
 8005a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	6a3b      	ldr	r3, [r7, #32]
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e5      	bne.n	8005a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d119      	bne.n	8005a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f023 0310 	bic.w	r3, r3, #16
 8005a72:	647b      	str	r3, [r7, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7c:	61ba      	str	r2, [r7, #24]
 8005a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6979      	ldr	r1, [r7, #20]
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	613b      	str	r3, [r7, #16]
   return(result);
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a9e:	bf00      	nop
 8005aa0:	3754      	adds	r7, #84	; 0x54
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b084      	sub	sp, #16
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff fecb 	bl	8005860 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005aca:	bf00      	nop
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b21      	cmp	r3, #33	; 0x21
 8005ae4:	d13e      	bne.n	8005b64 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aee:	d114      	bne.n	8005b1a <UART_Transmit_IT+0x48>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d110      	bne.n	8005b1a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b0c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	1c9a      	adds	r2, r3, #2
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	621a      	str	r2, [r3, #32]
 8005b18:	e008      	b.n	8005b2c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	1c59      	adds	r1, r3, #1
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6211      	str	r1, [r2, #32]
 8005b24:	781a      	ldrb	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4619      	mov	r1, r3
 8005b3a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10f      	bne.n	8005b60 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b4e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b5e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	e000      	b.n	8005b66 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b64:	2302      	movs	r3, #2
  }
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3714      	adds	r7, #20
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b082      	sub	sp, #8
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f7ff fe5a 	bl	800584c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b08c      	sub	sp, #48	; 0x30
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b22      	cmp	r3, #34	; 0x22
 8005bb4:	f040 80ab 	bne.w	8005d0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc0:	d117      	bne.n	8005bf2 <UART_Receive_IT+0x50>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d113      	bne.n	8005bf2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	629a      	str	r2, [r3, #40]	; 0x28
 8005bf0:	e026      	b.n	8005c40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c04:	d007      	beq.n	8005c16 <UART_Receive_IT+0x74>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <UART_Receive_IT+0x82>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d106      	bne.n	8005c24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e008      	b.n	8005c36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d15a      	bne.n	8005d0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0220 	bic.w	r2, r2, #32
 8005c62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	695a      	ldr	r2, [r3, #20]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2220      	movs	r2, #32
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d135      	bne.n	8005d00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	330c      	adds	r3, #12
 8005ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	e853 3f00 	ldrex	r3, [r3]
 8005ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f023 0310 	bic.w	r3, r3, #16
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	330c      	adds	r3, #12
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	623a      	str	r2, [r7, #32]
 8005cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	69f9      	ldr	r1, [r7, #28]
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e5      	bne.n	8005c9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0310 	and.w	r3, r3, #16
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d10a      	bne.n	8005cf2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	60fb      	str	r3, [r7, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f7ff fdbb 	bl	8005874 <HAL_UARTEx_RxEventCallback>
 8005cfe:	e002      	b.n	8005d06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f7fa fbeb 	bl	80004dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d06:	2300      	movs	r3, #0
 8005d08:	e002      	b.n	8005d10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3730      	adds	r7, #48	; 0x30
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d1c:	b0c0      	sub	sp, #256	; 0x100
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	68d9      	ldr	r1, [r3, #12]
 8005d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	ea40 0301 	orr.w	r3, r0, r1
 8005d40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	431a      	orrs	r2, r3
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d70:	f021 010c 	bic.w	r1, r1, #12
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	6999      	ldr	r1, [r3, #24]
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	ea40 0301 	orr.w	r3, r0, r1
 8005d9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	4b8f      	ldr	r3, [pc, #572]	; (8005fe4 <UART_SetConfig+0x2cc>)
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d005      	beq.n	8005db8 <UART_SetConfig+0xa0>
 8005dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b8d      	ldr	r3, [pc, #564]	; (8005fe8 <UART_SetConfig+0x2d0>)
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d104      	bne.n	8005dc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005db8:	f7fd fa52 	bl	8003260 <HAL_RCC_GetPCLK2Freq>
 8005dbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005dc0:	e003      	b.n	8005dca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dc2:	f7fd fa39 	bl	8003238 <HAL_RCC_GetPCLK1Freq>
 8005dc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dce:	69db      	ldr	r3, [r3, #28]
 8005dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd4:	f040 810c 	bne.w	8005ff0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005de2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005de6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005dea:	4622      	mov	r2, r4
 8005dec:	462b      	mov	r3, r5
 8005dee:	1891      	adds	r1, r2, r2
 8005df0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005df2:	415b      	adcs	r3, r3
 8005df4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005df6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dfa:	4621      	mov	r1, r4
 8005dfc:	eb12 0801 	adds.w	r8, r2, r1
 8005e00:	4629      	mov	r1, r5
 8005e02:	eb43 0901 	adc.w	r9, r3, r1
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1a:	4690      	mov	r8, r2
 8005e1c:	4699      	mov	r9, r3
 8005e1e:	4623      	mov	r3, r4
 8005e20:	eb18 0303 	adds.w	r3, r8, r3
 8005e24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e28:	462b      	mov	r3, r5
 8005e2a:	eb49 0303 	adc.w	r3, r9, r3
 8005e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e46:	460b      	mov	r3, r1
 8005e48:	18db      	adds	r3, r3, r3
 8005e4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	eb42 0303 	adc.w	r3, r2, r3
 8005e52:	657b      	str	r3, [r7, #84]	; 0x54
 8005e54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e5c:	f7fa f9bc 	bl	80001d8 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4b61      	ldr	r3, [pc, #388]	; (8005fec <UART_SetConfig+0x2d4>)
 8005e66:	fba3 2302 	umull	r2, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	011c      	lsls	r4, r3, #4
 8005e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e80:	4642      	mov	r2, r8
 8005e82:	464b      	mov	r3, r9
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e90:	4641      	mov	r1, r8
 8005e92:	eb12 0a01 	adds.w	sl, r2, r1
 8005e96:	4649      	mov	r1, r9
 8005e98:	eb43 0b01 	adc.w	fp, r3, r1
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ea8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005eac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005eb0:	4692      	mov	sl, r2
 8005eb2:	469b      	mov	fp, r3
 8005eb4:	4643      	mov	r3, r8
 8005eb6:	eb1a 0303 	adds.w	r3, sl, r3
 8005eba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ec4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ed4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ed8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005edc:	460b      	mov	r3, r1
 8005ede:	18db      	adds	r3, r3, r3
 8005ee0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	eb42 0303 	adc.w	r3, r2, r3
 8005ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ef2:	f7fa f971 	bl	80001d8 <__aeabi_uldivmod>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4611      	mov	r1, r2
 8005efc:	4b3b      	ldr	r3, [pc, #236]	; (8005fec <UART_SetConfig+0x2d4>)
 8005efe:	fba3 2301 	umull	r2, r3, r3, r1
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	2264      	movs	r2, #100	; 0x64
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	1acb      	subs	r3, r1, r3
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f12:	4b36      	ldr	r3, [pc, #216]	; (8005fec <UART_SetConfig+0x2d4>)
 8005f14:	fba3 2302 	umull	r2, r3, r3, r2
 8005f18:	095b      	lsrs	r3, r3, #5
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f20:	441c      	add	r4, r3
 8005f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005f30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	1891      	adds	r1, r2, r2
 8005f3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f3c:	415b      	adcs	r3, r3
 8005f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f44:	4641      	mov	r1, r8
 8005f46:	1851      	adds	r1, r2, r1
 8005f48:	6339      	str	r1, [r7, #48]	; 0x30
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	414b      	adcs	r3, r1
 8005f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	00cb      	lsls	r3, r1, #3
 8005f60:	4651      	mov	r1, sl
 8005f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f66:	4651      	mov	r1, sl
 8005f68:	00ca      	lsls	r2, r1, #3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4642      	mov	r2, r8
 8005f72:	189b      	adds	r3, r3, r2
 8005f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f78:	464b      	mov	r3, r9
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f98:	460b      	mov	r3, r1
 8005f9a:	18db      	adds	r3, r3, r3
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005faa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005fae:	f7fa f913 	bl	80001d8 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4b0d      	ldr	r3, [pc, #52]	; (8005fec <UART_SetConfig+0x2d4>)
 8005fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fbc:	095b      	lsrs	r3, r3, #5
 8005fbe:	2164      	movs	r1, #100	; 0x64
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	3332      	adds	r3, #50	; 0x32
 8005fca:	4a08      	ldr	r2, [pc, #32]	; (8005fec <UART_SetConfig+0x2d4>)
 8005fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd0:	095b      	lsrs	r3, r3, #5
 8005fd2:	f003 0207 	and.w	r2, r3, #7
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4422      	add	r2, r4
 8005fde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fe0:	e105      	b.n	80061ee <UART_SetConfig+0x4d6>
 8005fe2:	bf00      	nop
 8005fe4:	40011000 	.word	0x40011000
 8005fe8:	40011400 	.word	0x40011400
 8005fec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ffa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ffe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006002:	4642      	mov	r2, r8
 8006004:	464b      	mov	r3, r9
 8006006:	1891      	adds	r1, r2, r2
 8006008:	6239      	str	r1, [r7, #32]
 800600a:	415b      	adcs	r3, r3
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
 800600e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006012:	4641      	mov	r1, r8
 8006014:	1854      	adds	r4, r2, r1
 8006016:	4649      	mov	r1, r9
 8006018:	eb43 0501 	adc.w	r5, r3, r1
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	00eb      	lsls	r3, r5, #3
 8006026:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800602a:	00e2      	lsls	r2, r4, #3
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	4643      	mov	r3, r8
 8006032:	18e3      	adds	r3, r4, r3
 8006034:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006038:	464b      	mov	r3, r9
 800603a:	eb45 0303 	adc.w	r3, r5, r3
 800603e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800604e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006052:	f04f 0200 	mov.w	r2, #0
 8006056:	f04f 0300 	mov.w	r3, #0
 800605a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800605e:	4629      	mov	r1, r5
 8006060:	008b      	lsls	r3, r1, #2
 8006062:	4621      	mov	r1, r4
 8006064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006068:	4621      	mov	r1, r4
 800606a:	008a      	lsls	r2, r1, #2
 800606c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006070:	f7fa f8b2 	bl	80001d8 <__aeabi_uldivmod>
 8006074:	4602      	mov	r2, r0
 8006076:	460b      	mov	r3, r1
 8006078:	4b60      	ldr	r3, [pc, #384]	; (80061fc <UART_SetConfig+0x4e4>)
 800607a:	fba3 2302 	umull	r2, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	011c      	lsls	r4, r3, #4
 8006082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006086:	2200      	movs	r2, #0
 8006088:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800608c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006090:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006094:	4642      	mov	r2, r8
 8006096:	464b      	mov	r3, r9
 8006098:	1891      	adds	r1, r2, r2
 800609a:	61b9      	str	r1, [r7, #24]
 800609c:	415b      	adcs	r3, r3
 800609e:	61fb      	str	r3, [r7, #28]
 80060a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060a4:	4641      	mov	r1, r8
 80060a6:	1851      	adds	r1, r2, r1
 80060a8:	6139      	str	r1, [r7, #16]
 80060aa:	4649      	mov	r1, r9
 80060ac:	414b      	adcs	r3, r1
 80060ae:	617b      	str	r3, [r7, #20]
 80060b0:	f04f 0200 	mov.w	r2, #0
 80060b4:	f04f 0300 	mov.w	r3, #0
 80060b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060bc:	4659      	mov	r1, fp
 80060be:	00cb      	lsls	r3, r1, #3
 80060c0:	4651      	mov	r1, sl
 80060c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060c6:	4651      	mov	r1, sl
 80060c8:	00ca      	lsls	r2, r1, #3
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	4603      	mov	r3, r0
 80060d0:	4642      	mov	r2, r8
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060d8:	464b      	mov	r3, r9
 80060da:	460a      	mov	r2, r1
 80060dc:	eb42 0303 	adc.w	r3, r2, r3
 80060e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80060ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060fc:	4649      	mov	r1, r9
 80060fe:	008b      	lsls	r3, r1, #2
 8006100:	4641      	mov	r1, r8
 8006102:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006106:	4641      	mov	r1, r8
 8006108:	008a      	lsls	r2, r1, #2
 800610a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800610e:	f7fa f863 	bl	80001d8 <__aeabi_uldivmod>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4b39      	ldr	r3, [pc, #228]	; (80061fc <UART_SetConfig+0x4e4>)
 8006118:	fba3 1302 	umull	r1, r3, r3, r2
 800611c:	095b      	lsrs	r3, r3, #5
 800611e:	2164      	movs	r1, #100	; 0x64
 8006120:	fb01 f303 	mul.w	r3, r1, r3
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	3332      	adds	r3, #50	; 0x32
 800612a:	4a34      	ldr	r2, [pc, #208]	; (80061fc <UART_SetConfig+0x4e4>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006136:	441c      	add	r4, r3
 8006138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800613c:	2200      	movs	r2, #0
 800613e:	673b      	str	r3, [r7, #112]	; 0x70
 8006140:	677a      	str	r2, [r7, #116]	; 0x74
 8006142:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006146:	4642      	mov	r2, r8
 8006148:	464b      	mov	r3, r9
 800614a:	1891      	adds	r1, r2, r2
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	415b      	adcs	r3, r3
 8006150:	60fb      	str	r3, [r7, #12]
 8006152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006156:	4641      	mov	r1, r8
 8006158:	1851      	adds	r1, r2, r1
 800615a:	6039      	str	r1, [r7, #0]
 800615c:	4649      	mov	r1, r9
 800615e:	414b      	adcs	r3, r1
 8006160:	607b      	str	r3, [r7, #4]
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800616e:	4659      	mov	r1, fp
 8006170:	00cb      	lsls	r3, r1, #3
 8006172:	4651      	mov	r1, sl
 8006174:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006178:	4651      	mov	r1, sl
 800617a:	00ca      	lsls	r2, r1, #3
 800617c:	4610      	mov	r0, r2
 800617e:	4619      	mov	r1, r3
 8006180:	4603      	mov	r3, r0
 8006182:	4642      	mov	r2, r8
 8006184:	189b      	adds	r3, r3, r2
 8006186:	66bb      	str	r3, [r7, #104]	; 0x68
 8006188:	464b      	mov	r3, r9
 800618a:	460a      	mov	r2, r1
 800618c:	eb42 0303 	adc.w	r3, r2, r3
 8006190:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	663b      	str	r3, [r7, #96]	; 0x60
 800619c:	667a      	str	r2, [r7, #100]	; 0x64
 800619e:	f04f 0200 	mov.w	r2, #0
 80061a2:	f04f 0300 	mov.w	r3, #0
 80061a6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80061aa:	4649      	mov	r1, r9
 80061ac:	008b      	lsls	r3, r1, #2
 80061ae:	4641      	mov	r1, r8
 80061b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061b4:	4641      	mov	r1, r8
 80061b6:	008a      	lsls	r2, r1, #2
 80061b8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80061bc:	f7fa f80c 	bl	80001d8 <__aeabi_uldivmod>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <UART_SetConfig+0x4e4>)
 80061c6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	2164      	movs	r1, #100	; 0x64
 80061ce:	fb01 f303 	mul.w	r3, r1, r3
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	3332      	adds	r3, #50	; 0x32
 80061d8:	4a08      	ldr	r2, [pc, #32]	; (80061fc <UART_SetConfig+0x4e4>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	f003 020f 	and.w	r2, r3, #15
 80061e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4422      	add	r2, r4
 80061ec:	609a      	str	r2, [r3, #8]
}
 80061ee:	bf00      	nop
 80061f0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061f4:	46bd      	mov	sp, r7
 80061f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061fa:	bf00      	nop
 80061fc:	51eb851f 	.word	0x51eb851f

08006200 <__errno>:
 8006200:	4b01      	ldr	r3, [pc, #4]	; (8006208 <__errno+0x8>)
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	2000001c 	.word	0x2000001c

0800620c <__libc_init_array>:
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4d0d      	ldr	r5, [pc, #52]	; (8006244 <__libc_init_array+0x38>)
 8006210:	4c0d      	ldr	r4, [pc, #52]	; (8006248 <__libc_init_array+0x3c>)
 8006212:	1b64      	subs	r4, r4, r5
 8006214:	10a4      	asrs	r4, r4, #2
 8006216:	2600      	movs	r6, #0
 8006218:	42a6      	cmp	r6, r4
 800621a:	d109      	bne.n	8006230 <__libc_init_array+0x24>
 800621c:	4d0b      	ldr	r5, [pc, #44]	; (800624c <__libc_init_array+0x40>)
 800621e:	4c0c      	ldr	r4, [pc, #48]	; (8006250 <__libc_init_array+0x44>)
 8006220:	f000 fd1e 	bl	8006c60 <_init>
 8006224:	1b64      	subs	r4, r4, r5
 8006226:	10a4      	asrs	r4, r4, #2
 8006228:	2600      	movs	r6, #0
 800622a:	42a6      	cmp	r6, r4
 800622c:	d105      	bne.n	800623a <__libc_init_array+0x2e>
 800622e:	bd70      	pop	{r4, r5, r6, pc}
 8006230:	f855 3b04 	ldr.w	r3, [r5], #4
 8006234:	4798      	blx	r3
 8006236:	3601      	adds	r6, #1
 8006238:	e7ee      	b.n	8006218 <__libc_init_array+0xc>
 800623a:	f855 3b04 	ldr.w	r3, [r5], #4
 800623e:	4798      	blx	r3
 8006240:	3601      	adds	r6, #1
 8006242:	e7f2      	b.n	800622a <__libc_init_array+0x1e>
 8006244:	08006d0c 	.word	0x08006d0c
 8006248:	08006d0c 	.word	0x08006d0c
 800624c:	08006d0c 	.word	0x08006d0c
 8006250:	08006d10 	.word	0x08006d10

08006254 <memset>:
 8006254:	4402      	add	r2, r0
 8006256:	4603      	mov	r3, r0
 8006258:	4293      	cmp	r3, r2
 800625a:	d100      	bne.n	800625e <memset+0xa>
 800625c:	4770      	bx	lr
 800625e:	f803 1b01 	strb.w	r1, [r3], #1
 8006262:	e7f9      	b.n	8006258 <memset+0x4>

08006264 <_puts_r>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	460e      	mov	r6, r1
 8006268:	4605      	mov	r5, r0
 800626a:	b118      	cbz	r0, 8006274 <_puts_r+0x10>
 800626c:	6983      	ldr	r3, [r0, #24]
 800626e:	b90b      	cbnz	r3, 8006274 <_puts_r+0x10>
 8006270:	f000 fa48 	bl	8006704 <__sinit>
 8006274:	69ab      	ldr	r3, [r5, #24]
 8006276:	68ac      	ldr	r4, [r5, #8]
 8006278:	b913      	cbnz	r3, 8006280 <_puts_r+0x1c>
 800627a:	4628      	mov	r0, r5
 800627c:	f000 fa42 	bl	8006704 <__sinit>
 8006280:	4b2c      	ldr	r3, [pc, #176]	; (8006334 <_puts_r+0xd0>)
 8006282:	429c      	cmp	r4, r3
 8006284:	d120      	bne.n	80062c8 <_puts_r+0x64>
 8006286:	686c      	ldr	r4, [r5, #4]
 8006288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800628a:	07db      	lsls	r3, r3, #31
 800628c:	d405      	bmi.n	800629a <_puts_r+0x36>
 800628e:	89a3      	ldrh	r3, [r4, #12]
 8006290:	0598      	lsls	r0, r3, #22
 8006292:	d402      	bmi.n	800629a <_puts_r+0x36>
 8006294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006296:	f000 fad3 	bl	8006840 <__retarget_lock_acquire_recursive>
 800629a:	89a3      	ldrh	r3, [r4, #12]
 800629c:	0719      	lsls	r1, r3, #28
 800629e:	d51d      	bpl.n	80062dc <_puts_r+0x78>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	b1db      	cbz	r3, 80062dc <_puts_r+0x78>
 80062a4:	3e01      	subs	r6, #1
 80062a6:	68a3      	ldr	r3, [r4, #8]
 80062a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80062ac:	3b01      	subs	r3, #1
 80062ae:	60a3      	str	r3, [r4, #8]
 80062b0:	bb39      	cbnz	r1, 8006302 <_puts_r+0x9e>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da38      	bge.n	8006328 <_puts_r+0xc4>
 80062b6:	4622      	mov	r2, r4
 80062b8:	210a      	movs	r1, #10
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f848 	bl	8006350 <__swbuf_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d011      	beq.n	80062e8 <_puts_r+0x84>
 80062c4:	250a      	movs	r5, #10
 80062c6:	e011      	b.n	80062ec <_puts_r+0x88>
 80062c8:	4b1b      	ldr	r3, [pc, #108]	; (8006338 <_puts_r+0xd4>)
 80062ca:	429c      	cmp	r4, r3
 80062cc:	d101      	bne.n	80062d2 <_puts_r+0x6e>
 80062ce:	68ac      	ldr	r4, [r5, #8]
 80062d0:	e7da      	b.n	8006288 <_puts_r+0x24>
 80062d2:	4b1a      	ldr	r3, [pc, #104]	; (800633c <_puts_r+0xd8>)
 80062d4:	429c      	cmp	r4, r3
 80062d6:	bf08      	it	eq
 80062d8:	68ec      	ldreq	r4, [r5, #12]
 80062da:	e7d5      	b.n	8006288 <_puts_r+0x24>
 80062dc:	4621      	mov	r1, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f888 	bl	80063f4 <__swsetup_r>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d0dd      	beq.n	80062a4 <_puts_r+0x40>
 80062e8:	f04f 35ff 	mov.w	r5, #4294967295
 80062ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062ee:	07da      	lsls	r2, r3, #31
 80062f0:	d405      	bmi.n	80062fe <_puts_r+0x9a>
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	059b      	lsls	r3, r3, #22
 80062f6:	d402      	bmi.n	80062fe <_puts_r+0x9a>
 80062f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062fa:	f000 faa2 	bl	8006842 <__retarget_lock_release_recursive>
 80062fe:	4628      	mov	r0, r5
 8006300:	bd70      	pop	{r4, r5, r6, pc}
 8006302:	2b00      	cmp	r3, #0
 8006304:	da04      	bge.n	8006310 <_puts_r+0xac>
 8006306:	69a2      	ldr	r2, [r4, #24]
 8006308:	429a      	cmp	r2, r3
 800630a:	dc06      	bgt.n	800631a <_puts_r+0xb6>
 800630c:	290a      	cmp	r1, #10
 800630e:	d004      	beq.n	800631a <_puts_r+0xb6>
 8006310:	6823      	ldr	r3, [r4, #0]
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	6022      	str	r2, [r4, #0]
 8006316:	7019      	strb	r1, [r3, #0]
 8006318:	e7c5      	b.n	80062a6 <_puts_r+0x42>
 800631a:	4622      	mov	r2, r4
 800631c:	4628      	mov	r0, r5
 800631e:	f000 f817 	bl	8006350 <__swbuf_r>
 8006322:	3001      	adds	r0, #1
 8006324:	d1bf      	bne.n	80062a6 <_puts_r+0x42>
 8006326:	e7df      	b.n	80062e8 <_puts_r+0x84>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	250a      	movs	r5, #10
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	701d      	strb	r5, [r3, #0]
 8006332:	e7db      	b.n	80062ec <_puts_r+0x88>
 8006334:	08006cc4 	.word	0x08006cc4
 8006338:	08006ce4 	.word	0x08006ce4
 800633c:	08006ca4 	.word	0x08006ca4

08006340 <puts>:
 8006340:	4b02      	ldr	r3, [pc, #8]	; (800634c <puts+0xc>)
 8006342:	4601      	mov	r1, r0
 8006344:	6818      	ldr	r0, [r3, #0]
 8006346:	f7ff bf8d 	b.w	8006264 <_puts_r>
 800634a:	bf00      	nop
 800634c:	2000001c 	.word	0x2000001c

08006350 <__swbuf_r>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	460e      	mov	r6, r1
 8006354:	4614      	mov	r4, r2
 8006356:	4605      	mov	r5, r0
 8006358:	b118      	cbz	r0, 8006362 <__swbuf_r+0x12>
 800635a:	6983      	ldr	r3, [r0, #24]
 800635c:	b90b      	cbnz	r3, 8006362 <__swbuf_r+0x12>
 800635e:	f000 f9d1 	bl	8006704 <__sinit>
 8006362:	4b21      	ldr	r3, [pc, #132]	; (80063e8 <__swbuf_r+0x98>)
 8006364:	429c      	cmp	r4, r3
 8006366:	d12b      	bne.n	80063c0 <__swbuf_r+0x70>
 8006368:	686c      	ldr	r4, [r5, #4]
 800636a:	69a3      	ldr	r3, [r4, #24]
 800636c:	60a3      	str	r3, [r4, #8]
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	071a      	lsls	r2, r3, #28
 8006372:	d52f      	bpl.n	80063d4 <__swbuf_r+0x84>
 8006374:	6923      	ldr	r3, [r4, #16]
 8006376:	b36b      	cbz	r3, 80063d4 <__swbuf_r+0x84>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	6820      	ldr	r0, [r4, #0]
 800637c:	1ac0      	subs	r0, r0, r3
 800637e:	6963      	ldr	r3, [r4, #20]
 8006380:	b2f6      	uxtb	r6, r6
 8006382:	4283      	cmp	r3, r0
 8006384:	4637      	mov	r7, r6
 8006386:	dc04      	bgt.n	8006392 <__swbuf_r+0x42>
 8006388:	4621      	mov	r1, r4
 800638a:	4628      	mov	r0, r5
 800638c:	f000 f926 	bl	80065dc <_fflush_r>
 8006390:	bb30      	cbnz	r0, 80063e0 <__swbuf_r+0x90>
 8006392:	68a3      	ldr	r3, [r4, #8]
 8006394:	3b01      	subs	r3, #1
 8006396:	60a3      	str	r3, [r4, #8]
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	701e      	strb	r6, [r3, #0]
 80063a0:	6963      	ldr	r3, [r4, #20]
 80063a2:	3001      	adds	r0, #1
 80063a4:	4283      	cmp	r3, r0
 80063a6:	d004      	beq.n	80063b2 <__swbuf_r+0x62>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	07db      	lsls	r3, r3, #31
 80063ac:	d506      	bpl.n	80063bc <__swbuf_r+0x6c>
 80063ae:	2e0a      	cmp	r6, #10
 80063b0:	d104      	bne.n	80063bc <__swbuf_r+0x6c>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	f000 f911 	bl	80065dc <_fflush_r>
 80063ba:	b988      	cbnz	r0, 80063e0 <__swbuf_r+0x90>
 80063bc:	4638      	mov	r0, r7
 80063be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c0:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <__swbuf_r+0x9c>)
 80063c2:	429c      	cmp	r4, r3
 80063c4:	d101      	bne.n	80063ca <__swbuf_r+0x7a>
 80063c6:	68ac      	ldr	r4, [r5, #8]
 80063c8:	e7cf      	b.n	800636a <__swbuf_r+0x1a>
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <__swbuf_r+0xa0>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	bf08      	it	eq
 80063d0:	68ec      	ldreq	r4, [r5, #12]
 80063d2:	e7ca      	b.n	800636a <__swbuf_r+0x1a>
 80063d4:	4621      	mov	r1, r4
 80063d6:	4628      	mov	r0, r5
 80063d8:	f000 f80c 	bl	80063f4 <__swsetup_r>
 80063dc:	2800      	cmp	r0, #0
 80063de:	d0cb      	beq.n	8006378 <__swbuf_r+0x28>
 80063e0:	f04f 37ff 	mov.w	r7, #4294967295
 80063e4:	e7ea      	b.n	80063bc <__swbuf_r+0x6c>
 80063e6:	bf00      	nop
 80063e8:	08006cc4 	.word	0x08006cc4
 80063ec:	08006ce4 	.word	0x08006ce4
 80063f0:	08006ca4 	.word	0x08006ca4

080063f4 <__swsetup_r>:
 80063f4:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <__swsetup_r+0xcc>)
 80063f6:	b570      	push	{r4, r5, r6, lr}
 80063f8:	681d      	ldr	r5, [r3, #0]
 80063fa:	4606      	mov	r6, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	b125      	cbz	r5, 800640a <__swsetup_r+0x16>
 8006400:	69ab      	ldr	r3, [r5, #24]
 8006402:	b913      	cbnz	r3, 800640a <__swsetup_r+0x16>
 8006404:	4628      	mov	r0, r5
 8006406:	f000 f97d 	bl	8006704 <__sinit>
 800640a:	4b2e      	ldr	r3, [pc, #184]	; (80064c4 <__swsetup_r+0xd0>)
 800640c:	429c      	cmp	r4, r3
 800640e:	d10f      	bne.n	8006430 <__swsetup_r+0x3c>
 8006410:	686c      	ldr	r4, [r5, #4]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006418:	0719      	lsls	r1, r3, #28
 800641a:	d42c      	bmi.n	8006476 <__swsetup_r+0x82>
 800641c:	06dd      	lsls	r5, r3, #27
 800641e:	d411      	bmi.n	8006444 <__swsetup_r+0x50>
 8006420:	2309      	movs	r3, #9
 8006422:	6033      	str	r3, [r6, #0]
 8006424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006428:	81a3      	strh	r3, [r4, #12]
 800642a:	f04f 30ff 	mov.w	r0, #4294967295
 800642e:	e03e      	b.n	80064ae <__swsetup_r+0xba>
 8006430:	4b25      	ldr	r3, [pc, #148]	; (80064c8 <__swsetup_r+0xd4>)
 8006432:	429c      	cmp	r4, r3
 8006434:	d101      	bne.n	800643a <__swsetup_r+0x46>
 8006436:	68ac      	ldr	r4, [r5, #8]
 8006438:	e7eb      	b.n	8006412 <__swsetup_r+0x1e>
 800643a:	4b24      	ldr	r3, [pc, #144]	; (80064cc <__swsetup_r+0xd8>)
 800643c:	429c      	cmp	r4, r3
 800643e:	bf08      	it	eq
 8006440:	68ec      	ldreq	r4, [r5, #12]
 8006442:	e7e6      	b.n	8006412 <__swsetup_r+0x1e>
 8006444:	0758      	lsls	r0, r3, #29
 8006446:	d512      	bpl.n	800646e <__swsetup_r+0x7a>
 8006448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800644a:	b141      	cbz	r1, 800645e <__swsetup_r+0x6a>
 800644c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006450:	4299      	cmp	r1, r3
 8006452:	d002      	beq.n	800645a <__swsetup_r+0x66>
 8006454:	4630      	mov	r0, r6
 8006456:	f000 fa5b 	bl	8006910 <_free_r>
 800645a:	2300      	movs	r3, #0
 800645c:	6363      	str	r3, [r4, #52]	; 0x34
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006464:	81a3      	strh	r3, [r4, #12]
 8006466:	2300      	movs	r3, #0
 8006468:	6063      	str	r3, [r4, #4]
 800646a:	6923      	ldr	r3, [r4, #16]
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	f043 0308 	orr.w	r3, r3, #8
 8006474:	81a3      	strh	r3, [r4, #12]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	b94b      	cbnz	r3, 800648e <__swsetup_r+0x9a>
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006484:	d003      	beq.n	800648e <__swsetup_r+0x9a>
 8006486:	4621      	mov	r1, r4
 8006488:	4630      	mov	r0, r6
 800648a:	f000 fa01 	bl	8006890 <__smakebuf_r>
 800648e:	89a0      	ldrh	r0, [r4, #12]
 8006490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006494:	f010 0301 	ands.w	r3, r0, #1
 8006498:	d00a      	beq.n	80064b0 <__swsetup_r+0xbc>
 800649a:	2300      	movs	r3, #0
 800649c:	60a3      	str	r3, [r4, #8]
 800649e:	6963      	ldr	r3, [r4, #20]
 80064a0:	425b      	negs	r3, r3
 80064a2:	61a3      	str	r3, [r4, #24]
 80064a4:	6923      	ldr	r3, [r4, #16]
 80064a6:	b943      	cbnz	r3, 80064ba <__swsetup_r+0xc6>
 80064a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064ac:	d1ba      	bne.n	8006424 <__swsetup_r+0x30>
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	0781      	lsls	r1, r0, #30
 80064b2:	bf58      	it	pl
 80064b4:	6963      	ldrpl	r3, [r4, #20]
 80064b6:	60a3      	str	r3, [r4, #8]
 80064b8:	e7f4      	b.n	80064a4 <__swsetup_r+0xb0>
 80064ba:	2000      	movs	r0, #0
 80064bc:	e7f7      	b.n	80064ae <__swsetup_r+0xba>
 80064be:	bf00      	nop
 80064c0:	2000001c 	.word	0x2000001c
 80064c4:	08006cc4 	.word	0x08006cc4
 80064c8:	08006ce4 	.word	0x08006ce4
 80064cc:	08006ca4 	.word	0x08006ca4

080064d0 <__sflush_r>:
 80064d0:	898a      	ldrh	r2, [r1, #12]
 80064d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	4605      	mov	r5, r0
 80064d8:	0710      	lsls	r0, r2, #28
 80064da:	460c      	mov	r4, r1
 80064dc:	d458      	bmi.n	8006590 <__sflush_r+0xc0>
 80064de:	684b      	ldr	r3, [r1, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dc05      	bgt.n	80064f0 <__sflush_r+0x20>
 80064e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dc02      	bgt.n	80064f0 <__sflush_r+0x20>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80064f2:	2e00      	cmp	r6, #0
 80064f4:	d0f9      	beq.n	80064ea <__sflush_r+0x1a>
 80064f6:	2300      	movs	r3, #0
 80064f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064fc:	682f      	ldr	r7, [r5, #0]
 80064fe:	602b      	str	r3, [r5, #0]
 8006500:	d032      	beq.n	8006568 <__sflush_r+0x98>
 8006502:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	075a      	lsls	r2, r3, #29
 8006508:	d505      	bpl.n	8006516 <__sflush_r+0x46>
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	1ac0      	subs	r0, r0, r3
 800650e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006510:	b10b      	cbz	r3, 8006516 <__sflush_r+0x46>
 8006512:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006514:	1ac0      	subs	r0, r0, r3
 8006516:	2300      	movs	r3, #0
 8006518:	4602      	mov	r2, r0
 800651a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651c:	6a21      	ldr	r1, [r4, #32]
 800651e:	4628      	mov	r0, r5
 8006520:	47b0      	blx	r6
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	d106      	bne.n	8006536 <__sflush_r+0x66>
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	291d      	cmp	r1, #29
 800652c:	d82c      	bhi.n	8006588 <__sflush_r+0xb8>
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <__sflush_r+0x108>)
 8006530:	40ca      	lsrs	r2, r1
 8006532:	07d6      	lsls	r6, r2, #31
 8006534:	d528      	bpl.n	8006588 <__sflush_r+0xb8>
 8006536:	2200      	movs	r2, #0
 8006538:	6062      	str	r2, [r4, #4]
 800653a:	04d9      	lsls	r1, r3, #19
 800653c:	6922      	ldr	r2, [r4, #16]
 800653e:	6022      	str	r2, [r4, #0]
 8006540:	d504      	bpl.n	800654c <__sflush_r+0x7c>
 8006542:	1c42      	adds	r2, r0, #1
 8006544:	d101      	bne.n	800654a <__sflush_r+0x7a>
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	b903      	cbnz	r3, 800654c <__sflush_r+0x7c>
 800654a:	6560      	str	r0, [r4, #84]	; 0x54
 800654c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800654e:	602f      	str	r7, [r5, #0]
 8006550:	2900      	cmp	r1, #0
 8006552:	d0ca      	beq.n	80064ea <__sflush_r+0x1a>
 8006554:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006558:	4299      	cmp	r1, r3
 800655a:	d002      	beq.n	8006562 <__sflush_r+0x92>
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f9d7 	bl	8006910 <_free_r>
 8006562:	2000      	movs	r0, #0
 8006564:	6360      	str	r0, [r4, #52]	; 0x34
 8006566:	e7c1      	b.n	80064ec <__sflush_r+0x1c>
 8006568:	6a21      	ldr	r1, [r4, #32]
 800656a:	2301      	movs	r3, #1
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	1c41      	adds	r1, r0, #1
 8006572:	d1c7      	bne.n	8006504 <__sflush_r+0x34>
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d0c4      	beq.n	8006504 <__sflush_r+0x34>
 800657a:	2b1d      	cmp	r3, #29
 800657c:	d001      	beq.n	8006582 <__sflush_r+0xb2>
 800657e:	2b16      	cmp	r3, #22
 8006580:	d101      	bne.n	8006586 <__sflush_r+0xb6>
 8006582:	602f      	str	r7, [r5, #0]
 8006584:	e7b1      	b.n	80064ea <__sflush_r+0x1a>
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	e7ad      	b.n	80064ec <__sflush_r+0x1c>
 8006590:	690f      	ldr	r7, [r1, #16]
 8006592:	2f00      	cmp	r7, #0
 8006594:	d0a9      	beq.n	80064ea <__sflush_r+0x1a>
 8006596:	0793      	lsls	r3, r2, #30
 8006598:	680e      	ldr	r6, [r1, #0]
 800659a:	bf08      	it	eq
 800659c:	694b      	ldreq	r3, [r1, #20]
 800659e:	600f      	str	r7, [r1, #0]
 80065a0:	bf18      	it	ne
 80065a2:	2300      	movne	r3, #0
 80065a4:	eba6 0807 	sub.w	r8, r6, r7
 80065a8:	608b      	str	r3, [r1, #8]
 80065aa:	f1b8 0f00 	cmp.w	r8, #0
 80065ae:	dd9c      	ble.n	80064ea <__sflush_r+0x1a>
 80065b0:	6a21      	ldr	r1, [r4, #32]
 80065b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065b4:	4643      	mov	r3, r8
 80065b6:	463a      	mov	r2, r7
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b0      	blx	r6
 80065bc:	2800      	cmp	r0, #0
 80065be:	dc06      	bgt.n	80065ce <__sflush_r+0xfe>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	f04f 30ff 	mov.w	r0, #4294967295
 80065cc:	e78e      	b.n	80064ec <__sflush_r+0x1c>
 80065ce:	4407      	add	r7, r0
 80065d0:	eba8 0800 	sub.w	r8, r8, r0
 80065d4:	e7e9      	b.n	80065aa <__sflush_r+0xda>
 80065d6:	bf00      	nop
 80065d8:	20400001 	.word	0x20400001

080065dc <_fflush_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	690b      	ldr	r3, [r1, #16]
 80065e0:	4605      	mov	r5, r0
 80065e2:	460c      	mov	r4, r1
 80065e4:	b913      	cbnz	r3, 80065ec <_fflush_r+0x10>
 80065e6:	2500      	movs	r5, #0
 80065e8:	4628      	mov	r0, r5
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	b118      	cbz	r0, 80065f6 <_fflush_r+0x1a>
 80065ee:	6983      	ldr	r3, [r0, #24]
 80065f0:	b90b      	cbnz	r3, 80065f6 <_fflush_r+0x1a>
 80065f2:	f000 f887 	bl	8006704 <__sinit>
 80065f6:	4b14      	ldr	r3, [pc, #80]	; (8006648 <_fflush_r+0x6c>)
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d11b      	bne.n	8006634 <_fflush_r+0x58>
 80065fc:	686c      	ldr	r4, [r5, #4]
 80065fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0ef      	beq.n	80065e6 <_fflush_r+0xa>
 8006606:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006608:	07d0      	lsls	r0, r2, #31
 800660a:	d404      	bmi.n	8006616 <_fflush_r+0x3a>
 800660c:	0599      	lsls	r1, r3, #22
 800660e:	d402      	bmi.n	8006616 <_fflush_r+0x3a>
 8006610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006612:	f000 f915 	bl	8006840 <__retarget_lock_acquire_recursive>
 8006616:	4628      	mov	r0, r5
 8006618:	4621      	mov	r1, r4
 800661a:	f7ff ff59 	bl	80064d0 <__sflush_r>
 800661e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006620:	07da      	lsls	r2, r3, #31
 8006622:	4605      	mov	r5, r0
 8006624:	d4e0      	bmi.n	80065e8 <_fflush_r+0xc>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	059b      	lsls	r3, r3, #22
 800662a:	d4dd      	bmi.n	80065e8 <_fflush_r+0xc>
 800662c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800662e:	f000 f908 	bl	8006842 <__retarget_lock_release_recursive>
 8006632:	e7d9      	b.n	80065e8 <_fflush_r+0xc>
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <_fflush_r+0x70>)
 8006636:	429c      	cmp	r4, r3
 8006638:	d101      	bne.n	800663e <_fflush_r+0x62>
 800663a:	68ac      	ldr	r4, [r5, #8]
 800663c:	e7df      	b.n	80065fe <_fflush_r+0x22>
 800663e:	4b04      	ldr	r3, [pc, #16]	; (8006650 <_fflush_r+0x74>)
 8006640:	429c      	cmp	r4, r3
 8006642:	bf08      	it	eq
 8006644:	68ec      	ldreq	r4, [r5, #12]
 8006646:	e7da      	b.n	80065fe <_fflush_r+0x22>
 8006648:	08006cc4 	.word	0x08006cc4
 800664c:	08006ce4 	.word	0x08006ce4
 8006650:	08006ca4 	.word	0x08006ca4

08006654 <std>:
 8006654:	2300      	movs	r3, #0
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	e9c0 3300 	strd	r3, r3, [r0]
 800665e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006662:	6083      	str	r3, [r0, #8]
 8006664:	8181      	strh	r1, [r0, #12]
 8006666:	6643      	str	r3, [r0, #100]	; 0x64
 8006668:	81c2      	strh	r2, [r0, #14]
 800666a:	6183      	str	r3, [r0, #24]
 800666c:	4619      	mov	r1, r3
 800666e:	2208      	movs	r2, #8
 8006670:	305c      	adds	r0, #92	; 0x5c
 8006672:	f7ff fdef 	bl	8006254 <memset>
 8006676:	4b05      	ldr	r3, [pc, #20]	; (800668c <std+0x38>)
 8006678:	6263      	str	r3, [r4, #36]	; 0x24
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <std+0x3c>)
 800667c:	62a3      	str	r3, [r4, #40]	; 0x28
 800667e:	4b05      	ldr	r3, [pc, #20]	; (8006694 <std+0x40>)
 8006680:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006682:	4b05      	ldr	r3, [pc, #20]	; (8006698 <std+0x44>)
 8006684:	6224      	str	r4, [r4, #32]
 8006686:	6323      	str	r3, [r4, #48]	; 0x30
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	08006af1 	.word	0x08006af1
 8006690:	08006b13 	.word	0x08006b13
 8006694:	08006b4b 	.word	0x08006b4b
 8006698:	08006b6f 	.word	0x08006b6f

0800669c <_cleanup_r>:
 800669c:	4901      	ldr	r1, [pc, #4]	; (80066a4 <_cleanup_r+0x8>)
 800669e:	f000 b8af 	b.w	8006800 <_fwalk_reent>
 80066a2:	bf00      	nop
 80066a4:	080065dd 	.word	0x080065dd

080066a8 <__sfmoreglue>:
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	2268      	movs	r2, #104	; 0x68
 80066ac:	1e4d      	subs	r5, r1, #1
 80066ae:	4355      	muls	r5, r2
 80066b0:	460e      	mov	r6, r1
 80066b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066b6:	f000 f997 	bl	80069e8 <_malloc_r>
 80066ba:	4604      	mov	r4, r0
 80066bc:	b140      	cbz	r0, 80066d0 <__sfmoreglue+0x28>
 80066be:	2100      	movs	r1, #0
 80066c0:	e9c0 1600 	strd	r1, r6, [r0]
 80066c4:	300c      	adds	r0, #12
 80066c6:	60a0      	str	r0, [r4, #8]
 80066c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066cc:	f7ff fdc2 	bl	8006254 <memset>
 80066d0:	4620      	mov	r0, r4
 80066d2:	bd70      	pop	{r4, r5, r6, pc}

080066d4 <__sfp_lock_acquire>:
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__sfp_lock_acquire+0x8>)
 80066d6:	f000 b8b3 	b.w	8006840 <__retarget_lock_acquire_recursive>
 80066da:	bf00      	nop
 80066dc:	200008f1 	.word	0x200008f1

080066e0 <__sfp_lock_release>:
 80066e0:	4801      	ldr	r0, [pc, #4]	; (80066e8 <__sfp_lock_release+0x8>)
 80066e2:	f000 b8ae 	b.w	8006842 <__retarget_lock_release_recursive>
 80066e6:	bf00      	nop
 80066e8:	200008f1 	.word	0x200008f1

080066ec <__sinit_lock_acquire>:
 80066ec:	4801      	ldr	r0, [pc, #4]	; (80066f4 <__sinit_lock_acquire+0x8>)
 80066ee:	f000 b8a7 	b.w	8006840 <__retarget_lock_acquire_recursive>
 80066f2:	bf00      	nop
 80066f4:	200008f2 	.word	0x200008f2

080066f8 <__sinit_lock_release>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__sinit_lock_release+0x8>)
 80066fa:	f000 b8a2 	b.w	8006842 <__retarget_lock_release_recursive>
 80066fe:	bf00      	nop
 8006700:	200008f2 	.word	0x200008f2

08006704 <__sinit>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4604      	mov	r4, r0
 8006708:	f7ff fff0 	bl	80066ec <__sinit_lock_acquire>
 800670c:	69a3      	ldr	r3, [r4, #24]
 800670e:	b11b      	cbz	r3, 8006718 <__sinit+0x14>
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f7ff bff0 	b.w	80066f8 <__sinit_lock_release>
 8006718:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800671c:	6523      	str	r3, [r4, #80]	; 0x50
 800671e:	4b13      	ldr	r3, [pc, #76]	; (800676c <__sinit+0x68>)
 8006720:	4a13      	ldr	r2, [pc, #76]	; (8006770 <__sinit+0x6c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	62a2      	str	r2, [r4, #40]	; 0x28
 8006726:	42a3      	cmp	r3, r4
 8006728:	bf04      	itt	eq
 800672a:	2301      	moveq	r3, #1
 800672c:	61a3      	streq	r3, [r4, #24]
 800672e:	4620      	mov	r0, r4
 8006730:	f000 f820 	bl	8006774 <__sfp>
 8006734:	6060      	str	r0, [r4, #4]
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f81c 	bl	8006774 <__sfp>
 800673c:	60a0      	str	r0, [r4, #8]
 800673e:	4620      	mov	r0, r4
 8006740:	f000 f818 	bl	8006774 <__sfp>
 8006744:	2200      	movs	r2, #0
 8006746:	60e0      	str	r0, [r4, #12]
 8006748:	2104      	movs	r1, #4
 800674a:	6860      	ldr	r0, [r4, #4]
 800674c:	f7ff ff82 	bl	8006654 <std>
 8006750:	68a0      	ldr	r0, [r4, #8]
 8006752:	2201      	movs	r2, #1
 8006754:	2109      	movs	r1, #9
 8006756:	f7ff ff7d 	bl	8006654 <std>
 800675a:	68e0      	ldr	r0, [r4, #12]
 800675c:	2202      	movs	r2, #2
 800675e:	2112      	movs	r1, #18
 8006760:	f7ff ff78 	bl	8006654 <std>
 8006764:	2301      	movs	r3, #1
 8006766:	61a3      	str	r3, [r4, #24]
 8006768:	e7d2      	b.n	8006710 <__sinit+0xc>
 800676a:	bf00      	nop
 800676c:	08006ca0 	.word	0x08006ca0
 8006770:	0800669d 	.word	0x0800669d

08006774 <__sfp>:
 8006774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006776:	4607      	mov	r7, r0
 8006778:	f7ff ffac 	bl	80066d4 <__sfp_lock_acquire>
 800677c:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <__sfp+0x84>)
 800677e:	681e      	ldr	r6, [r3, #0]
 8006780:	69b3      	ldr	r3, [r6, #24]
 8006782:	b913      	cbnz	r3, 800678a <__sfp+0x16>
 8006784:	4630      	mov	r0, r6
 8006786:	f7ff ffbd 	bl	8006704 <__sinit>
 800678a:	3648      	adds	r6, #72	; 0x48
 800678c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006790:	3b01      	subs	r3, #1
 8006792:	d503      	bpl.n	800679c <__sfp+0x28>
 8006794:	6833      	ldr	r3, [r6, #0]
 8006796:	b30b      	cbz	r3, 80067dc <__sfp+0x68>
 8006798:	6836      	ldr	r6, [r6, #0]
 800679a:	e7f7      	b.n	800678c <__sfp+0x18>
 800679c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067a0:	b9d5      	cbnz	r5, 80067d8 <__sfp+0x64>
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <__sfp+0x88>)
 80067a4:	60e3      	str	r3, [r4, #12]
 80067a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067aa:	6665      	str	r5, [r4, #100]	; 0x64
 80067ac:	f000 f847 	bl	800683e <__retarget_lock_init_recursive>
 80067b0:	f7ff ff96 	bl	80066e0 <__sfp_lock_release>
 80067b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067bc:	6025      	str	r5, [r4, #0]
 80067be:	61a5      	str	r5, [r4, #24]
 80067c0:	2208      	movs	r2, #8
 80067c2:	4629      	mov	r1, r5
 80067c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067c8:	f7ff fd44 	bl	8006254 <memset>
 80067cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067d4:	4620      	mov	r0, r4
 80067d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d8:	3468      	adds	r4, #104	; 0x68
 80067da:	e7d9      	b.n	8006790 <__sfp+0x1c>
 80067dc:	2104      	movs	r1, #4
 80067de:	4638      	mov	r0, r7
 80067e0:	f7ff ff62 	bl	80066a8 <__sfmoreglue>
 80067e4:	4604      	mov	r4, r0
 80067e6:	6030      	str	r0, [r6, #0]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d1d5      	bne.n	8006798 <__sfp+0x24>
 80067ec:	f7ff ff78 	bl	80066e0 <__sfp_lock_release>
 80067f0:	230c      	movs	r3, #12
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	e7ee      	b.n	80067d4 <__sfp+0x60>
 80067f6:	bf00      	nop
 80067f8:	08006ca0 	.word	0x08006ca0
 80067fc:	ffff0001 	.word	0xffff0001

08006800 <_fwalk_reent>:
 8006800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006804:	4606      	mov	r6, r0
 8006806:	4688      	mov	r8, r1
 8006808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800680c:	2700      	movs	r7, #0
 800680e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006812:	f1b9 0901 	subs.w	r9, r9, #1
 8006816:	d505      	bpl.n	8006824 <_fwalk_reent+0x24>
 8006818:	6824      	ldr	r4, [r4, #0]
 800681a:	2c00      	cmp	r4, #0
 800681c:	d1f7      	bne.n	800680e <_fwalk_reent+0xe>
 800681e:	4638      	mov	r0, r7
 8006820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006824:	89ab      	ldrh	r3, [r5, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d907      	bls.n	800683a <_fwalk_reent+0x3a>
 800682a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800682e:	3301      	adds	r3, #1
 8006830:	d003      	beq.n	800683a <_fwalk_reent+0x3a>
 8006832:	4629      	mov	r1, r5
 8006834:	4630      	mov	r0, r6
 8006836:	47c0      	blx	r8
 8006838:	4307      	orrs	r7, r0
 800683a:	3568      	adds	r5, #104	; 0x68
 800683c:	e7e9      	b.n	8006812 <_fwalk_reent+0x12>

0800683e <__retarget_lock_init_recursive>:
 800683e:	4770      	bx	lr

08006840 <__retarget_lock_acquire_recursive>:
 8006840:	4770      	bx	lr

08006842 <__retarget_lock_release_recursive>:
 8006842:	4770      	bx	lr

08006844 <__swhatbuf_r>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460e      	mov	r6, r1
 8006848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800684c:	2900      	cmp	r1, #0
 800684e:	b096      	sub	sp, #88	; 0x58
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	da08      	bge.n	8006868 <__swhatbuf_r+0x24>
 8006856:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	602a      	str	r2, [r5, #0]
 800685e:	061a      	lsls	r2, r3, #24
 8006860:	d410      	bmi.n	8006884 <__swhatbuf_r+0x40>
 8006862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006866:	e00e      	b.n	8006886 <__swhatbuf_r+0x42>
 8006868:	466a      	mov	r2, sp
 800686a:	f000 f9a7 	bl	8006bbc <_fstat_r>
 800686e:	2800      	cmp	r0, #0
 8006870:	dbf1      	blt.n	8006856 <__swhatbuf_r+0x12>
 8006872:	9a01      	ldr	r2, [sp, #4]
 8006874:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006878:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800687c:	425a      	negs	r2, r3
 800687e:	415a      	adcs	r2, r3
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	e7ee      	b.n	8006862 <__swhatbuf_r+0x1e>
 8006884:	2340      	movs	r3, #64	; 0x40
 8006886:	2000      	movs	r0, #0
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	b016      	add	sp, #88	; 0x58
 800688c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006890 <__smakebuf_r>:
 8006890:	898b      	ldrh	r3, [r1, #12]
 8006892:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006894:	079d      	lsls	r5, r3, #30
 8006896:	4606      	mov	r6, r0
 8006898:	460c      	mov	r4, r1
 800689a:	d507      	bpl.n	80068ac <__smakebuf_r+0x1c>
 800689c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068a0:	6023      	str	r3, [r4, #0]
 80068a2:	6123      	str	r3, [r4, #16]
 80068a4:	2301      	movs	r3, #1
 80068a6:	6163      	str	r3, [r4, #20]
 80068a8:	b002      	add	sp, #8
 80068aa:	bd70      	pop	{r4, r5, r6, pc}
 80068ac:	ab01      	add	r3, sp, #4
 80068ae:	466a      	mov	r2, sp
 80068b0:	f7ff ffc8 	bl	8006844 <__swhatbuf_r>
 80068b4:	9900      	ldr	r1, [sp, #0]
 80068b6:	4605      	mov	r5, r0
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f895 	bl	80069e8 <_malloc_r>
 80068be:	b948      	cbnz	r0, 80068d4 <__smakebuf_r+0x44>
 80068c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068c4:	059a      	lsls	r2, r3, #22
 80068c6:	d4ef      	bmi.n	80068a8 <__smakebuf_r+0x18>
 80068c8:	f023 0303 	bic.w	r3, r3, #3
 80068cc:	f043 0302 	orr.w	r3, r3, #2
 80068d0:	81a3      	strh	r3, [r4, #12]
 80068d2:	e7e3      	b.n	800689c <__smakebuf_r+0xc>
 80068d4:	4b0d      	ldr	r3, [pc, #52]	; (800690c <__smakebuf_r+0x7c>)
 80068d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	6020      	str	r0, [r4, #0]
 80068dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	9b00      	ldr	r3, [sp, #0]
 80068e4:	6163      	str	r3, [r4, #20]
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	6120      	str	r0, [r4, #16]
 80068ea:	b15b      	cbz	r3, 8006904 <__smakebuf_r+0x74>
 80068ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f0:	4630      	mov	r0, r6
 80068f2:	f000 f975 	bl	8006be0 <_isatty_r>
 80068f6:	b128      	cbz	r0, 8006904 <__smakebuf_r+0x74>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f023 0303 	bic.w	r3, r3, #3
 80068fe:	f043 0301 	orr.w	r3, r3, #1
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	89a0      	ldrh	r0, [r4, #12]
 8006906:	4305      	orrs	r5, r0
 8006908:	81a5      	strh	r5, [r4, #12]
 800690a:	e7cd      	b.n	80068a8 <__smakebuf_r+0x18>
 800690c:	0800669d 	.word	0x0800669d

08006910 <_free_r>:
 8006910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006912:	2900      	cmp	r1, #0
 8006914:	d044      	beq.n	80069a0 <_free_r+0x90>
 8006916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800691a:	9001      	str	r0, [sp, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f1a1 0404 	sub.w	r4, r1, #4
 8006922:	bfb8      	it	lt
 8006924:	18e4      	addlt	r4, r4, r3
 8006926:	f000 f97d 	bl	8006c24 <__malloc_lock>
 800692a:	4a1e      	ldr	r2, [pc, #120]	; (80069a4 <_free_r+0x94>)
 800692c:	9801      	ldr	r0, [sp, #4]
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	b933      	cbnz	r3, 8006940 <_free_r+0x30>
 8006932:	6063      	str	r3, [r4, #4]
 8006934:	6014      	str	r4, [r2, #0]
 8006936:	b003      	add	sp, #12
 8006938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800693c:	f000 b978 	b.w	8006c30 <__malloc_unlock>
 8006940:	42a3      	cmp	r3, r4
 8006942:	d908      	bls.n	8006956 <_free_r+0x46>
 8006944:	6825      	ldr	r5, [r4, #0]
 8006946:	1961      	adds	r1, r4, r5
 8006948:	428b      	cmp	r3, r1
 800694a:	bf01      	itttt	eq
 800694c:	6819      	ldreq	r1, [r3, #0]
 800694e:	685b      	ldreq	r3, [r3, #4]
 8006950:	1949      	addeq	r1, r1, r5
 8006952:	6021      	streq	r1, [r4, #0]
 8006954:	e7ed      	b.n	8006932 <_free_r+0x22>
 8006956:	461a      	mov	r2, r3
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	b10b      	cbz	r3, 8006960 <_free_r+0x50>
 800695c:	42a3      	cmp	r3, r4
 800695e:	d9fa      	bls.n	8006956 <_free_r+0x46>
 8006960:	6811      	ldr	r1, [r2, #0]
 8006962:	1855      	adds	r5, r2, r1
 8006964:	42a5      	cmp	r5, r4
 8006966:	d10b      	bne.n	8006980 <_free_r+0x70>
 8006968:	6824      	ldr	r4, [r4, #0]
 800696a:	4421      	add	r1, r4
 800696c:	1854      	adds	r4, r2, r1
 800696e:	42a3      	cmp	r3, r4
 8006970:	6011      	str	r1, [r2, #0]
 8006972:	d1e0      	bne.n	8006936 <_free_r+0x26>
 8006974:	681c      	ldr	r4, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	6053      	str	r3, [r2, #4]
 800697a:	4421      	add	r1, r4
 800697c:	6011      	str	r1, [r2, #0]
 800697e:	e7da      	b.n	8006936 <_free_r+0x26>
 8006980:	d902      	bls.n	8006988 <_free_r+0x78>
 8006982:	230c      	movs	r3, #12
 8006984:	6003      	str	r3, [r0, #0]
 8006986:	e7d6      	b.n	8006936 <_free_r+0x26>
 8006988:	6825      	ldr	r5, [r4, #0]
 800698a:	1961      	adds	r1, r4, r5
 800698c:	428b      	cmp	r3, r1
 800698e:	bf04      	itt	eq
 8006990:	6819      	ldreq	r1, [r3, #0]
 8006992:	685b      	ldreq	r3, [r3, #4]
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	bf04      	itt	eq
 8006998:	1949      	addeq	r1, r1, r5
 800699a:	6021      	streq	r1, [r4, #0]
 800699c:	6054      	str	r4, [r2, #4]
 800699e:	e7ca      	b.n	8006936 <_free_r+0x26>
 80069a0:	b003      	add	sp, #12
 80069a2:	bd30      	pop	{r4, r5, pc}
 80069a4:	200008f4 	.word	0x200008f4

080069a8 <sbrk_aligned>:
 80069a8:	b570      	push	{r4, r5, r6, lr}
 80069aa:	4e0e      	ldr	r6, [pc, #56]	; (80069e4 <sbrk_aligned+0x3c>)
 80069ac:	460c      	mov	r4, r1
 80069ae:	6831      	ldr	r1, [r6, #0]
 80069b0:	4605      	mov	r5, r0
 80069b2:	b911      	cbnz	r1, 80069ba <sbrk_aligned+0x12>
 80069b4:	f000 f88c 	bl	8006ad0 <_sbrk_r>
 80069b8:	6030      	str	r0, [r6, #0]
 80069ba:	4621      	mov	r1, r4
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 f887 	bl	8006ad0 <_sbrk_r>
 80069c2:	1c43      	adds	r3, r0, #1
 80069c4:	d00a      	beq.n	80069dc <sbrk_aligned+0x34>
 80069c6:	1cc4      	adds	r4, r0, #3
 80069c8:	f024 0403 	bic.w	r4, r4, #3
 80069cc:	42a0      	cmp	r0, r4
 80069ce:	d007      	beq.n	80069e0 <sbrk_aligned+0x38>
 80069d0:	1a21      	subs	r1, r4, r0
 80069d2:	4628      	mov	r0, r5
 80069d4:	f000 f87c 	bl	8006ad0 <_sbrk_r>
 80069d8:	3001      	adds	r0, #1
 80069da:	d101      	bne.n	80069e0 <sbrk_aligned+0x38>
 80069dc:	f04f 34ff 	mov.w	r4, #4294967295
 80069e0:	4620      	mov	r0, r4
 80069e2:	bd70      	pop	{r4, r5, r6, pc}
 80069e4:	200008f8 	.word	0x200008f8

080069e8 <_malloc_r>:
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	1ccd      	adds	r5, r1, #3
 80069ee:	f025 0503 	bic.w	r5, r5, #3
 80069f2:	3508      	adds	r5, #8
 80069f4:	2d0c      	cmp	r5, #12
 80069f6:	bf38      	it	cc
 80069f8:	250c      	movcc	r5, #12
 80069fa:	2d00      	cmp	r5, #0
 80069fc:	4607      	mov	r7, r0
 80069fe:	db01      	blt.n	8006a04 <_malloc_r+0x1c>
 8006a00:	42a9      	cmp	r1, r5
 8006a02:	d905      	bls.n	8006a10 <_malloc_r+0x28>
 8006a04:	230c      	movs	r3, #12
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	2600      	movs	r6, #0
 8006a0a:	4630      	mov	r0, r6
 8006a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a10:	4e2e      	ldr	r6, [pc, #184]	; (8006acc <_malloc_r+0xe4>)
 8006a12:	f000 f907 	bl	8006c24 <__malloc_lock>
 8006a16:	6833      	ldr	r3, [r6, #0]
 8006a18:	461c      	mov	r4, r3
 8006a1a:	bb34      	cbnz	r4, 8006a6a <_malloc_r+0x82>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f7ff ffc2 	bl	80069a8 <sbrk_aligned>
 8006a24:	1c43      	adds	r3, r0, #1
 8006a26:	4604      	mov	r4, r0
 8006a28:	d14d      	bne.n	8006ac6 <_malloc_r+0xde>
 8006a2a:	6834      	ldr	r4, [r6, #0]
 8006a2c:	4626      	mov	r6, r4
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d140      	bne.n	8006ab4 <_malloc_r+0xcc>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	4631      	mov	r1, r6
 8006a36:	4638      	mov	r0, r7
 8006a38:	eb04 0803 	add.w	r8, r4, r3
 8006a3c:	f000 f848 	bl	8006ad0 <_sbrk_r>
 8006a40:	4580      	cmp	r8, r0
 8006a42:	d13a      	bne.n	8006aba <_malloc_r+0xd2>
 8006a44:	6821      	ldr	r1, [r4, #0]
 8006a46:	3503      	adds	r5, #3
 8006a48:	1a6d      	subs	r5, r5, r1
 8006a4a:	f025 0503 	bic.w	r5, r5, #3
 8006a4e:	3508      	adds	r5, #8
 8006a50:	2d0c      	cmp	r5, #12
 8006a52:	bf38      	it	cc
 8006a54:	250c      	movcc	r5, #12
 8006a56:	4629      	mov	r1, r5
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f7ff ffa5 	bl	80069a8 <sbrk_aligned>
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d02b      	beq.n	8006aba <_malloc_r+0xd2>
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	442b      	add	r3, r5
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	e00e      	b.n	8006a88 <_malloc_r+0xa0>
 8006a6a:	6822      	ldr	r2, [r4, #0]
 8006a6c:	1b52      	subs	r2, r2, r5
 8006a6e:	d41e      	bmi.n	8006aae <_malloc_r+0xc6>
 8006a70:	2a0b      	cmp	r2, #11
 8006a72:	d916      	bls.n	8006aa2 <_malloc_r+0xba>
 8006a74:	1961      	adds	r1, r4, r5
 8006a76:	42a3      	cmp	r3, r4
 8006a78:	6025      	str	r5, [r4, #0]
 8006a7a:	bf18      	it	ne
 8006a7c:	6059      	strne	r1, [r3, #4]
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	bf08      	it	eq
 8006a82:	6031      	streq	r1, [r6, #0]
 8006a84:	5162      	str	r2, [r4, r5]
 8006a86:	604b      	str	r3, [r1, #4]
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f104 060b 	add.w	r6, r4, #11
 8006a8e:	f000 f8cf 	bl	8006c30 <__malloc_unlock>
 8006a92:	f026 0607 	bic.w	r6, r6, #7
 8006a96:	1d23      	adds	r3, r4, #4
 8006a98:	1af2      	subs	r2, r6, r3
 8006a9a:	d0b6      	beq.n	8006a0a <_malloc_r+0x22>
 8006a9c:	1b9b      	subs	r3, r3, r6
 8006a9e:	50a3      	str	r3, [r4, r2]
 8006aa0:	e7b3      	b.n	8006a0a <_malloc_r+0x22>
 8006aa2:	6862      	ldr	r2, [r4, #4]
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	bf0c      	ite	eq
 8006aa8:	6032      	streq	r2, [r6, #0]
 8006aaa:	605a      	strne	r2, [r3, #4]
 8006aac:	e7ec      	b.n	8006a88 <_malloc_r+0xa0>
 8006aae:	4623      	mov	r3, r4
 8006ab0:	6864      	ldr	r4, [r4, #4]
 8006ab2:	e7b2      	b.n	8006a1a <_malloc_r+0x32>
 8006ab4:	4634      	mov	r4, r6
 8006ab6:	6876      	ldr	r6, [r6, #4]
 8006ab8:	e7b9      	b.n	8006a2e <_malloc_r+0x46>
 8006aba:	230c      	movs	r3, #12
 8006abc:	603b      	str	r3, [r7, #0]
 8006abe:	4638      	mov	r0, r7
 8006ac0:	f000 f8b6 	bl	8006c30 <__malloc_unlock>
 8006ac4:	e7a1      	b.n	8006a0a <_malloc_r+0x22>
 8006ac6:	6025      	str	r5, [r4, #0]
 8006ac8:	e7de      	b.n	8006a88 <_malloc_r+0xa0>
 8006aca:	bf00      	nop
 8006acc:	200008f4 	.word	0x200008f4

08006ad0 <_sbrk_r>:
 8006ad0:	b538      	push	{r3, r4, r5, lr}
 8006ad2:	4d06      	ldr	r5, [pc, #24]	; (8006aec <_sbrk_r+0x1c>)
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	4608      	mov	r0, r1
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	f7fb f94a 	bl	8001d74 <_sbrk>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <_sbrk_r+0x1a>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	b103      	cbz	r3, 8006aea <_sbrk_r+0x1a>
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	bd38      	pop	{r3, r4, r5, pc}
 8006aec:	200008fc 	.word	0x200008fc

08006af0 <__sread>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	460c      	mov	r4, r1
 8006af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af8:	f000 f8a0 	bl	8006c3c <_read_r>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	bfab      	itete	ge
 8006b00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006b02:	89a3      	ldrhlt	r3, [r4, #12]
 8006b04:	181b      	addge	r3, r3, r0
 8006b06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b0a:	bfac      	ite	ge
 8006b0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b0e:	81a3      	strhlt	r3, [r4, #12]
 8006b10:	bd10      	pop	{r4, pc}

08006b12 <__swrite>:
 8006b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b16:	461f      	mov	r7, r3
 8006b18:	898b      	ldrh	r3, [r1, #12]
 8006b1a:	05db      	lsls	r3, r3, #23
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	4616      	mov	r6, r2
 8006b22:	d505      	bpl.n	8006b30 <__swrite+0x1e>
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	2302      	movs	r3, #2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f000 f868 	bl	8006c00 <_lseek_r>
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b3a:	81a3      	strh	r3, [r4, #12]
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	463b      	mov	r3, r7
 8006b40:	4628      	mov	r0, r5
 8006b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	f000 b817 	b.w	8006b78 <_write_r>

08006b4a <__sseek>:
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b52:	f000 f855 	bl	8006c00 <_lseek_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	bf15      	itete	ne
 8006b5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b66:	81a3      	strheq	r3, [r4, #12]
 8006b68:	bf18      	it	ne
 8006b6a:	81a3      	strhne	r3, [r4, #12]
 8006b6c:	bd10      	pop	{r4, pc}

08006b6e <__sclose>:
 8006b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b72:	f000 b813 	b.w	8006b9c <_close_r>
	...

08006b78 <_write_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4d07      	ldr	r5, [pc, #28]	; (8006b98 <_write_r+0x20>)
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	602a      	str	r2, [r5, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f7fb f8a3 	bl	8001cd2 <_write>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_write_r+0x1e>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_write_r+0x1e>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	200008fc 	.word	0x200008fc

08006b9c <_close_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d06      	ldr	r5, [pc, #24]	; (8006bb8 <_close_r+0x1c>)
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	4604      	mov	r4, r0
 8006ba4:	4608      	mov	r0, r1
 8006ba6:	602b      	str	r3, [r5, #0]
 8006ba8:	f7fb f8af 	bl	8001d0a <_close>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_close_r+0x1a>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_close_r+0x1a>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	200008fc 	.word	0x200008fc

08006bbc <_fstat_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	; (8006bdc <_fstat_r+0x20>)
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	4604      	mov	r4, r0
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	4611      	mov	r1, r2
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	f7fb f8aa 	bl	8001d22 <_fstat>
 8006bce:	1c43      	adds	r3, r0, #1
 8006bd0:	d102      	bne.n	8006bd8 <_fstat_r+0x1c>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	b103      	cbz	r3, 8006bd8 <_fstat_r+0x1c>
 8006bd6:	6023      	str	r3, [r4, #0]
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
 8006bda:	bf00      	nop
 8006bdc:	200008fc 	.word	0x200008fc

08006be0 <_isatty_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d06      	ldr	r5, [pc, #24]	; (8006bfc <_isatty_r+0x1c>)
 8006be4:	2300      	movs	r3, #0
 8006be6:	4604      	mov	r4, r0
 8006be8:	4608      	mov	r0, r1
 8006bea:	602b      	str	r3, [r5, #0]
 8006bec:	f7fb f8a9 	bl	8001d42 <_isatty>
 8006bf0:	1c43      	adds	r3, r0, #1
 8006bf2:	d102      	bne.n	8006bfa <_isatty_r+0x1a>
 8006bf4:	682b      	ldr	r3, [r5, #0]
 8006bf6:	b103      	cbz	r3, 8006bfa <_isatty_r+0x1a>
 8006bf8:	6023      	str	r3, [r4, #0]
 8006bfa:	bd38      	pop	{r3, r4, r5, pc}
 8006bfc:	200008fc 	.word	0x200008fc

08006c00 <_lseek_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d07      	ldr	r5, [pc, #28]	; (8006c20 <_lseek_r+0x20>)
 8006c04:	4604      	mov	r4, r0
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	602a      	str	r2, [r5, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f7fb f8a2 	bl	8001d58 <_lseek>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_lseek_r+0x1e>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_lseek_r+0x1e>
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	200008fc 	.word	0x200008fc

08006c24 <__malloc_lock>:
 8006c24:	4801      	ldr	r0, [pc, #4]	; (8006c2c <__malloc_lock+0x8>)
 8006c26:	f7ff be0b 	b.w	8006840 <__retarget_lock_acquire_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	200008f0 	.word	0x200008f0

08006c30 <__malloc_unlock>:
 8006c30:	4801      	ldr	r0, [pc, #4]	; (8006c38 <__malloc_unlock+0x8>)
 8006c32:	f7ff be06 	b.w	8006842 <__retarget_lock_release_recursive>
 8006c36:	bf00      	nop
 8006c38:	200008f0 	.word	0x200008f0

08006c3c <_read_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	; (8006c5c <_read_r+0x20>)
 8006c40:	4604      	mov	r4, r0
 8006c42:	4608      	mov	r0, r1
 8006c44:	4611      	mov	r1, r2
 8006c46:	2200      	movs	r2, #0
 8006c48:	602a      	str	r2, [r5, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f7fb f824 	bl	8001c98 <_read>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d102      	bne.n	8006c5a <_read_r+0x1e>
 8006c54:	682b      	ldr	r3, [r5, #0]
 8006c56:	b103      	cbz	r3, 8006c5a <_read_r+0x1e>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	bd38      	pop	{r3, r4, r5, pc}
 8006c5c:	200008fc 	.word	0x200008fc

08006c60 <_init>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	bf00      	nop
 8006c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c66:	bc08      	pop	{r3}
 8006c68:	469e      	mov	lr, r3
 8006c6a:	4770      	bx	lr

08006c6c <_fini>:
 8006c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6e:	bf00      	nop
 8006c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c72:	bc08      	pop	{r3}
 8006c74:	469e      	mov	lr, r3
 8006c76:	4770      	bx	lr
