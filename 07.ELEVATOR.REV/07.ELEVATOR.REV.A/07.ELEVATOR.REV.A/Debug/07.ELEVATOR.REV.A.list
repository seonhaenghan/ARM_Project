
07.ELEVATOR.REV.A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a20  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006bb8  08006bb8  00016bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c44  08006c44  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08006c44  08006c44  00016c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c4c  08006c4c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c4c  08006c4c  00016c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c50  08006c50  00016c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08006c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  2000007c  08006cd0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008fc  08006cd0  000208fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014efc  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002eec  00000000  00000000  00034fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00037e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00039120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000371b  00000000  00000000  0003a288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a58  00000000  00000000  0003d9a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098547  00000000  00000000  000543fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053cc  00000000  00000000  000ec994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006ba0 	.word	0x08006ba0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08006ba0 	.word	0x08006ba0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d148      	bne.n	800057e <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 80004ec:	f000 f8a6 	bl	800063c <is_full>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d13e      	bne.n	8000574 <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 80004f6:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	2b0a      	cmp	r3, #10
 8000500:	d002      	beq.n	8000508 <HAL_UART_RxCpltCallback+0x2c>
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b0d      	cmp	r3, #13
 8000506:	d123      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 8000508:	4b47      	ldr	r3, [pc, #284]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	4847      	ldr	r0, [pc, #284]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 8000512:	4613      	mov	r3, r2
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4403      	add	r3, r0
 800051c:	440b      	add	r3, r1
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000522:	4b42      	ldr	r3, [pc, #264]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000530:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000532:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 8000538:	fb83 1302 	smull	r1, r3, r3, r2
 800053c:	1119      	asrs	r1, r3, #4
 800053e:	17d3      	asrs	r3, r2, #31
 8000540:	1acb      	subs	r3, r1, r3
 8000542:	2132      	movs	r1, #50	; 0x32
 8000544:	fb01 f303 	mul.w	r3, r1, r3
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	4a37      	ldr	r2, [pc, #220]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e011      	b.n	8000574 <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	4835      	ldr	r0, [pc, #212]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 800055a:	4613      	mov	r3, r2
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4403      	add	r3, r0
 8000564:	440b      	add	r3, r1
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	701a      	strb	r2, [r3, #0]
				rx_index++;
 800056a:	4b30      	ldr	r3, [pc, #192]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	4a2e      	ldr	r2, [pc, #184]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000572:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	492b      	ldr	r1, [pc, #172]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000578:	4829      	ldr	r0, [pc, #164]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 800057a:	f004 fe48 	bl	800520e <HAL_UART_Receive_IT>
	}
///////////////////////////////////////////////////////////////////////////
	if (huart == &huart1)   // BT
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d148      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x13c>
	{
		if(is_full())
 8000586:	f000 f859 	bl	800063c <is_full>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d13e      	bne.n	800060e <HAL_UART_RxCpltCallback+0x132>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	73bb      	strb	r3, [r7, #14]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	2b0a      	cmp	r3, #10
 800059a:	d002      	beq.n	80005a2 <HAL_UART_RxCpltCallback+0xc6>
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	2b0d      	cmp	r3, #13
 80005a0:	d123      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x10e>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4403      	add	r3, r0
 80005b6:	440b      	add	r3, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ca:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 80005d2:	fb83 1302 	smull	r1, r3, r3, r2
 80005d6:	1119      	asrs	r1, r3, #4
 80005d8:	17d3      	asrs	r3, r2, #31
 80005da:	1acb      	subs	r3, r1, r3
 80005dc:	2132      	movs	r1, #50	; 0x32
 80005de:	fb01 f303 	mul.w	r3, r1, r3
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e011      	b.n	800060e <HAL_UART_RxCpltCallback+0x132>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4403      	add	r3, r0
 80005fe:	440b      	add	r3, r1
 8000600:	7bba      	ldrb	r2, [r7, #14]
 8000602:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800060c:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000614:	f004 fdfb 	bl	800520e <HAL_UART_Receive_IT>
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000085c 	.word	0x2000085c
 8000624:	2000067c 	.word	0x2000067c
 8000628:	20000098 	.word	0x20000098
 800062c:	20000680 	.word	0x20000680
 8000630:	200000a0 	.word	0x200000a0
 8000634:	51eb851f 	.word	0x51eb851f
 8000638:	20000818 	.word	0x20000818

0800063c <is_full>:
	else
		return 0;
}

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <is_full+0x40>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <is_full+0x44>)
 800064a:	fb82 1203 	smull	r1, r2, r2, r3
 800064e:	1111      	asrs	r1, r2, #4
 8000650:	17da      	asrs	r2, r3, #31
 8000652:	1a8a      	subs	r2, r1, r2
 8000654:	2132      	movs	r1, #50	; 0x32
 8000656:	fb01 f202 	mul.w	r2, r1, r2
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <is_full+0x48>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	d101      	bne.n	800066c <is_full+0x30>
		return 1;
 8000668:	2301      	movs	r3, #1
 800066a:	e000      	b.n	800066e <is_full+0x32>
	else
		return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000098 	.word	0x20000098
 8000680:	51eb851f 	.word	0x51eb851f
 8000684:	2000009c 	.word	0x2000009c

08000688 <get_button>:
uint8_t prev_button5_state=BUTTON_RELEASE;
uint8_t prev_button6_state=BUTTON_RELEASE;

// 1. GPIO 2. GPIO PIN 3. 이전의 버튼
int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *prev_button_state)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	460b      	mov	r3, r1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	817b      	strh	r3, [r7, #10]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000696:	897b      	ldrh	r3, [r7, #10]
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f001 ff6e 	bl	800257c <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	75fb      	strb	r3, [r7, #23]

	if ((current_state == BUTTON_PRESS) && (*prev_button_state == BUTTON_RELEASE))  // 처음 누른상태
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10b      	bne.n	80006c2 <get_button+0x3a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d107      	bne.n	80006c2 <get_button+0x3a>
	{
		*prev_button_state = current_state;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7dfa      	ldrb	r2, [r7, #23]
 80006b6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(30);   // noise가 지나가기를 기다린다.
 80006b8:	201e      	movs	r0, #30
 80006ba:	f001 fc13 	bl	8001ee4 <HAL_Delay>
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 80006be:	2301      	movs	r3, #1
 80006c0:	e00c      	b.n	80006dc <get_button+0x54>
	}
	else if ((current_state == BUTTON_RELEASE) && (*prev_button_state == BUTTON_PRESS))
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <get_button+0x52>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <get_button+0x52>
	{
		*prev_button_state = current_state;   // 릴리즈 상태
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7dfa      	ldrb	r2, [r7, #23]
 80006d4:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <get_button+0x54>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80006ec:	1d39      	adds	r1, r7, #4
 80006ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006f2:	2201      	movs	r2, #1
 80006f4:	4803      	ldr	r0, [pc, #12]	; (8000704 <__io_putchar+0x20>)
 80006f6:	f004 fcf8 	bl	80050ea <HAL_UART_Transmit>

  return ch;
 80006fa:	687b      	ldr	r3, [r7, #4]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3708      	adds	r7, #8
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	2000085c 	.word	0x2000085c

08000708 <HAL_SYSTICK_Callback>:
volatile int led_timer = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
	t1ms_count++;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <HAL_SYSTICK_Callback+0x2c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	3301      	adds	r3, #1
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <HAL_SYSTICK_Callback+0x2c>)
 8000714:	6013      	str	r3, [r2, #0]
	t2ms_count ++;
 8000716:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_SYSTICK_Callback+0x30>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	3301      	adds	r3, #1
 800071c:	4a06      	ldr	r2, [pc, #24]	; (8000738 <HAL_SYSTICK_Callback+0x30>)
 800071e:	6013      	str	r3, [r2, #0]
	led_timer++;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_SYSTICK_Callback+0x34>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	3301      	adds	r3, #1
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <HAL_SYSTICK_Callback+0x34>)
 8000728:	6013      	str	r3, [r2, #0]
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	200008a0 	.word	0x200008a0
 8000738:	200008a4 	.word	0x200008a4
 800073c:	200008a8 	.word	0x200008a8

08000740 <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM11_10ms_counter=0;
volatile int TIM11_10ms_ultrasonic_counter = 0;
volatile int TIM11_10ms_servomotor_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0b      	ldr	r2, [pc, #44]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d10e      	bne.n	8000770 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM11_10ms_counter++;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800075a:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000764:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a06      	ldr	r2, [pc, #24]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800076e:	6013      	str	r3, [r2, #0]
	}
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40014800 	.word	0x40014800
 8000780:	200008ac 	.word	0x200008ac
 8000784:	200008b0 	.word	0x200008b0
 8000788:	200008b4 	.word	0x200008b4

0800078c <HAL_GPIO_EXTI_Callback>:
// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every GPIO_EXTI_Callback function : enter here every 10ms
volatile int exint_signal = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 8000796:	88fb      	ldrh	r3, [r7, #6]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d002      	beq.n	80007a2 <HAL_GPIO_EXTI_Callback+0x16>
 800079c:	2b02      	cmp	r3, #2
 800079e:	d00f      	beq.n	80007c0 <HAL_GPIO_EXTI_Callback+0x34>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

  		exint_signal = 1;
  	  break;
  }
}
 80007a0:	e01d      	b.n	80007de <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_0, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007aa:	f001 feff 	bl	80025ac <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	2101      	movs	r1, #1
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007b4:	f001 fefa 	bl	80025ac <HAL_GPIO_WritePin>
  		exint_signal = 0;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <HAL_GPIO_EXTI_Callback+0x60>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
  	  break;
 80007be:	e00e      	b.n	80007de <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_1, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007c8:	f001 fef0 	bl	80025ac <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80007cc:	2201      	movs	r2, #1
 80007ce:	2102      	movs	r1, #2
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80007d2:	f001 feeb 	bl	80025ac <HAL_GPIO_WritePin>
  		exint_signal = 1;
 80007d6:	4b05      	ldr	r3, [pc, #20]	; (80007ec <HAL_GPIO_EXTI_Callback+0x60>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
  	  break;
 80007dc:	bf00      	nop
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40020400 	.word	0x40020400
 80007ec:	20000008 	.word	0x20000008

080007f0 <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 80007f8:	4b08      	ldr	r3, [pc, #32]	; (800081c <delay_us+0x2c>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2200      	movs	r2, #0
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 8000800:	bf00      	nop
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <delay_us+0x2c>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d8f9      	bhi.n	8000802 <delay_us+0x12>
	;
}
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	200006f8 	.word	0x200006f8

08000820 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000824:	f001 faec 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000828:	f000 f846 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800082c:	f000 fb00 	bl	8000e30 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000830:	f000 fad4 	bl	8000ddc <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000834:	f000 fa84 	bl	8000d40 <MX_TIM11_Init>
  MX_TIM1_Init();
 8000838:	f000 f93e 	bl	8000ab8 <MX_TIM1_Init>
  MX_RTC_Init();
 800083c:	f000 f8e2 	bl	8000a04 <MX_RTC_Init>
  MX_I2C1_Init();
 8000840:	f000 f8b2 	bl	80009a8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000844:	f000 f9ac 	bl	8000ba0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000848:	f000 fa20 	bl	8000c8c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800084c:	f000 fa9c 	bl	8000d88 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000850:	f000 f89e 	bl	8000990 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 8000854:	4810      	ldr	r0, [pc, #64]	; (8000898 <main+0x78>)
 8000856:	f003 f82b 	bl	80038b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 800085a:	2100      	movs	r1, #0
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <main+0x7c>)
 800085e:	f003 fae1 	bl	8003e24 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 8000862:	2201      	movs	r2, #1
 8000864:	490e      	ldr	r1, [pc, #56]	; (80008a0 <main+0x80>)
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <main+0x84>)
 8000868:	f004 fcd1 	bl	800520e <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);	// BT UART Enable rx_interrupt
 800086c:	2201      	movs	r2, #1
 800086e:	490c      	ldr	r1, [pc, #48]	; (80008a0 <main+0x80>)
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <main+0x88>)
 8000872:	f004 fccc 	bl	800520e <HAL_UART_Receive_IT>
  // PC, BT
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PWM Control for Servo motor
 8000876:	2108      	movs	r1, #8
 8000878:	480c      	ldr	r0, [pc, #48]	; (80008ac <main+0x8c>)
 800087a:	f003 f97b 	bl	8003b74 <HAL_TIM_PWM_Start_IT>
  // TIM3 CH1 : PIEZO BUZZER
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800087e:	2100      	movs	r1, #0
 8000880:	480b      	ldr	r0, [pc, #44]	; (80008b0 <main+0x90>)
 8000882:	f003 f8c7 	bl	8003a14 <HAL_TIM_PWM_Start>
  //  i2c_lcd_init();
  printf("Hello STM32!!!\n");
 8000886:	480b      	ldr	r0, [pc, #44]	; (80008b4 <main+0x94>)
 8000888:	f005 fcfa 	bl	8006280 <puts>

    /* USER CODE BEGIN 3 */
	 // pc_command_processing();
	 // ultrasonic_processing();
	 // get_rtc_time();
	  flow_button_move();
 800088c:	f000 fcfa 	bl	8001284 <flow_button_move>
	 // exint_motor_control();
	  //servo_motor_control_main();
	  auto_door_sequence();
 8000890:	f000 fb76 	bl	8000f80 <auto_door_sequence>
  {
 8000894:	e7fa      	b.n	800088c <main+0x6c>
 8000896:	bf00      	nop
 8000898:	200007d0 	.word	0x200007d0
 800089c:	200006f8 	.word	0x200006f8
 80008a0:	2000067c 	.word	0x2000067c
 80008a4:	2000085c 	.word	0x2000085c
 80008a8:	20000818 	.word	0x20000818
 80008ac:	20000740 	.word	0x20000740
 80008b0:	20000788 	.word	0x20000788
 80008b4:	08006bb8 	.word	0x08006bb8

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b094      	sub	sp, #80	; 0x50
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	2230      	movs	r2, #48	; 0x30
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f005 fc64 	bl	8006194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <SystemClock_Config+0xd0>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a28      	ldr	r2, [pc, #160]	; (8000988 <SystemClock_Config+0xd0>)
 80008e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <SystemClock_Config+0xd0>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <SystemClock_Config+0xd4>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <SystemClock_Config+0xd4>)
 8000902:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000906:	6013      	str	r3, [r2, #0]
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <SystemClock_Config+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000914:	230a      	movs	r3, #10
 8000916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800091c:	2310      	movs	r3, #16
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000920:	2301      	movs	r3, #1
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800092c:	2310      	movs	r3, #16
 800092e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000930:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000934:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000936:	2304      	movs	r3, #4
 8000938:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093a:	2304      	movs	r3, #4
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 0320 	add.w	r3, r7, #32
 8000942:	4618      	mov	r0, r3
 8000944:	f001 ffa8 	bl	8002898 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800094e:	f000 fb11 	bl	8000f74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000962:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2102      	movs	r1, #2
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fa0a 	bl	8002d88 <HAL_RCC_ClockConfig>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800097a:	f000 fafb 	bl	8000f74 <Error_Handler>
  }
}
 800097e:	bf00      	nop
 8000980:	3750      	adds	r7, #80	; 0x50
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000994:	2200      	movs	r2, #0
 8000996:	2100      	movs	r1, #0
 8000998:	201a      	movs	r0, #26
 800099a:	f001 fba2 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800099e:	201a      	movs	r0, #26
 80009a0:	f001 fbbb 	bl	800211a <HAL_NVIC_EnableIRQ>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009ae:	4a13      	ldr	r2, [pc, #76]	; (80009fc <MX_I2C1_Init+0x54>)
 80009b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <MX_I2C1_Init+0x58>)
 80009b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_I2C1_Init+0x50>)
 80009e6:	f001 fe13 	bl	8002610 <HAL_I2C_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009f0:	f000 fac0 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000684 	.word	0x20000684
 80009fc:	40005400 	.word	0x40005400
 8000a00:	000186a0 	.word	0x000186a0

08000a04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a1e:	4a25      	ldr	r2, [pc, #148]	; (8000ab4 <MX_RTC_Init+0xb0>)
 8000a20:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a2a:	227f      	movs	r2, #127	; 0x7f
 8000a2c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a30:	22ff      	movs	r2, #255	; 0xff
 8000a32:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a34:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a46:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a48:	f002 fcae 	bl	80033a8 <HAL_RTC_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a52:	f000 fa8f 	bl	8000f74 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8000a56:	2311      	movs	r3, #17
 8000a58:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000a5a:	2310      	movs	r3, #16
 8000a5c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a72:	f002 fd0f 	bl	8003494 <HAL_RTC_SetTime>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a7c:	f000 fa7a 	bl	8000f74 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000a80:	2302      	movs	r3, #2
 8000a82:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000a84:	2308      	movs	r3, #8
 8000a86:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8000a88:	2330      	movs	r3, #48	; 0x30
 8000a8a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000a8c:	2322      	movs	r3, #34	; 0x22
 8000a8e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_RTC_Init+0xac>)
 8000a98:	f002 fd96 	bl	80035c8 <HAL_RTC_SetDate>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000aa2:	f000 fa67 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3718      	adds	r7, #24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200006d8 	.word	0x200006d8
 8000ab4:	40002800 	.word	0x40002800

08000ab8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000abe:	f107 0318 	add.w	r3, r7, #24
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ae2:	4b2d      	ldr	r3, [pc, #180]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000ae4:	4a2d      	ldr	r2, [pc, #180]	; (8000b9c <MX_TIM1_Init+0xe4>)
 8000ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000ae8:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000aea:	2253      	movs	r2, #83	; 0x53
 8000aec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aee:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000af6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000afa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000afc:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b02:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b0e:	4822      	ldr	r0, [pc, #136]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b10:	f002 fe7f 	bl	8003812 <HAL_TIM_Base_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b1a:	f000 fa2b 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b24:	f107 0318 	add.w	r3, r7, #24
 8000b28:	4619      	mov	r1, r3
 8000b2a:	481b      	ldr	r0, [pc, #108]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b2c:	f003 fcfa 	bl	8004524 <HAL_TIM_ConfigClockSource>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b36:	f000 fa1d 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b3a:	4817      	ldr	r0, [pc, #92]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b3c:	f003 f918 	bl	8003d70 <HAL_TIM_IC_Init>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b46:	f000 fa15 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b52:	f107 0310 	add.w	r3, r7, #16
 8000b56:	4619      	mov	r1, r3
 8000b58:	480f      	ldr	r0, [pc, #60]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b5a:	f004 f9f7 	bl	8004f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000b64:	f000 fa06 	bl	8000f74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000b68:	230a      	movs	r3, #10
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_TIM1_Init+0xe0>)
 8000b80:	f003 fb72 	bl	8004268 <HAL_TIM_IC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b8a:	f000 f9f3 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200006f8 	.word	0x200006f8
 8000b9c:	40010000 	.word	0x40010000

08000ba0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08e      	sub	sp, #56	; 0x38
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb4:	f107 0320 	add.w	r3, r7, #32
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
 8000bcc:	615a      	str	r2, [r3, #20]
 8000bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000bda:	f240 628f 	movw	r2, #1679	; 0x68f
 8000bde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be0:	4b29      	ldr	r3, [pc, #164]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000be6:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bee:	4b26      	ldr	r3, [pc, #152]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf4:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfa:	4823      	ldr	r0, [pc, #140]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000bfc:	f002 fe09 	bl	8003812 <HAL_TIM_Base_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c06:	f000 f9b5 	bl	8000f74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c14:	4619      	mov	r1, r3
 8000c16:	481c      	ldr	r0, [pc, #112]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000c18:	f003 fc84 	bl	8004524 <HAL_TIM_ConfigClockSource>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c22:	f000 f9a7 	bl	8000f74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000c28:	f002 fea4 	bl	8003974 <HAL_TIM_PWM_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c32:	f000 f99f 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000c46:	f004 f981 	bl	8004f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c50:	f000 f990 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c54:	2360      	movs	r3, #96	; 0x60
 8000c56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2208      	movs	r2, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4807      	ldr	r0, [pc, #28]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000c6c:	f003 fb98 	bl	80043a0 <HAL_TIM_PWM_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c76:	f000 f97d 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c7a:	4803      	ldr	r0, [pc, #12]	; (8000c88 <MX_TIM2_Init+0xe8>)
 8000c7c:	f000 fe32 	bl	80018e4 <HAL_TIM_MspPostInit>

}
 8000c80:	bf00      	nop
 8000c82:	3738      	adds	r7, #56	; 0x38
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000740 	.word	0x20000740

08000c8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	; 0x28
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c92:	f107 0320 	add.w	r3, r7, #32
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
 8000caa:	615a      	str	r2, [r3, #20]
 8000cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cb0:	4a22      	ldr	r2, [pc, #136]	; (8000d3c <MX_TIM3_Init+0xb0>)
 8000cb2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cb6:	2233      	movs	r2, #51	; 0x33
 8000cb8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cc2:	f240 128f 	movw	r2, #399	; 0x18f
 8000cc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cd4:	4818      	ldr	r0, [pc, #96]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cd6:	f002 fe4d 	bl	8003974 <HAL_TIM_PWM_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000ce0:	f000 f948 	bl	8000f74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cec:	f107 0320 	add.w	r3, r7, #32
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000cf4:	f004 f92a 	bl	8004f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000cfe:	f000 f939 	bl	8000f74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d02:	2360      	movs	r3, #96	; 0x60
 8000d04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000d06:	23c7      	movs	r3, #199	; 0xc7
 8000d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000d1a:	f003 fb41 	bl	80043a0 <HAL_TIM_PWM_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d24:	f000 f926 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d28:	4803      	ldr	r0, [pc, #12]	; (8000d38 <MX_TIM3_Init+0xac>)
 8000d2a:	f000 fddb 	bl	80018e4 <HAL_TIM_MspPostInit>

}
 8000d2e:	bf00      	nop
 8000d30:	3728      	adds	r7, #40	; 0x28
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000788 	.word	0x20000788
 8000d3c:	40000400 	.word	0x40000400

08000d40 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d44:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d46:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <MX_TIM11_Init+0x44>)
 8000d48:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d4c:	2253      	movs	r2, #83	; 0x53
 8000d4e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d50:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d58:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d5c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_TIM11_Init+0x40>)
 8000d6c:	f002 fd51 	bl	8003812 <HAL_TIM_Base_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000d76:	f000 f8fd 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200007d0 	.word	0x200007d0
 8000d84:	40014800 	.word	0x40014800

08000d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <MX_USART1_UART_Init+0x50>)
 8000d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d94:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dae:	220c      	movs	r2, #12
 8000db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_USART1_UART_Init+0x4c>)
 8000dc0:	f004 f946 	bl	8005050 <HAL_UART_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dca:	f000 f8d3 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000818 	.word	0x20000818
 8000dd8:	40011000 	.word	0x40011000

08000ddc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <MX_USART2_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000de8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000dec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_USART2_UART_Init+0x4c>)
 8000e14:	f004 f91c 	bl	8005050 <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f8a9 	bl	8000f74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000085c 	.word	0x2000085c
 8000e2c:	40004400 	.word	0x40004400

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b46      	ldr	r3, [pc, #280]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a45      	ldr	r2, [pc, #276]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b43      	ldr	r3, [pc, #268]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b3f      	ldr	r3, [pc, #252]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a3e      	ldr	r2, [pc, #248]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b3c      	ldr	r3, [pc, #240]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	4b38      	ldr	r3, [pc, #224]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a37      	ldr	r2, [pc, #220]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b35      	ldr	r3, [pc, #212]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
 8000e9e:	4b31      	ldr	r3, [pc, #196]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a30      	ldr	r2, [pc, #192]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <MX_GPIO_Init+0x134>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000ebc:	482a      	ldr	r0, [pc, #168]	; (8000f68 <MX_GPIO_Init+0x138>)
 8000ebe:	f001 fb75 	bl	80025ac <HAL_GPIO_WritePin>
                          |INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	21ff      	movs	r1, #255	; 0xff
 8000ec6:	4829      	ldr	r0, [pc, #164]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000ec8:	f001 fb70 	bl	80025ac <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin
                           BUTTON5_Pin BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin
 8000ecc:	f640 430f 	movw	r3, #3087	; 0xc0f
 8000ed0:	617b      	str	r3, [r7, #20]
                          |BUTTON5_Pin|BUTTON6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4821      	ldr	r0, [pc, #132]	; (8000f68 <MX_GPIO_Init+0x138>)
 8000ee2:	f001 f9c7 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <MX_GPIO_Init+0x140>)
 8000efc:	f001 f9ba 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIG_Pin INT1_STEP_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 8000f00:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f04:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <MX_GPIO_Init+0x138>)
 8000f1a:	f001 f9ab 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000f1e:	23ff      	movs	r3, #255	; 0xff
 8000f20:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <MX_GPIO_Init+0x13c>)
 8000f36:	f001 f99d 	bl	8002274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	2006      	movs	r0, #6
 8000f40:	f001 f8cf 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f44:	2006      	movs	r0, #6
 8000f46:	f001 f8e8 	bl	800211a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2007      	movs	r0, #7
 8000f50:	f001 f8c7 	bl	80020e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f54:	2007      	movs	r0, #7
 8000f56:	f001 f8e0 	bl	800211a <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020000 	.word	0x40020000

08000f74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f78:	b672      	cpsid	i
}
 8000f7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <Error_Handler+0x8>
	...

08000f80 <auto_door_sequence>:

int door_mode = 0;
int arm_rotate_indicator = 0;

void auto_door_sequence()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0

	if(door_mode == 0)
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <auto_door_sequence+0x5c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <auto_door_sequence+0x20>
	{
		if(distance_chk <= 2)
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <auto_door_sequence+0x60>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	dc05      	bgt.n	8000fa0 <auto_door_sequence+0x20>
		{
			TIM11_10ms_servomotor_counter = 0;
 8000f94:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <auto_door_sequence+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
			door_mode = 1;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <auto_door_sequence+0x5c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
		}
	}

	// 180' turn
	if(door_mode == 1)
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <auto_door_sequence+0x5c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d114      	bne.n	8000fd2 <auto_door_sequence+0x52>
	{
		if(TIM11_10ms_servomotor_counter == 0)
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <auto_door_sequence+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d104      	bne.n	8000fba <auto_door_sequence+0x3a>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 110); // door open
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <auto_door_sequence+0x68>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	226e      	movs	r2, #110	; 0x6e
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c

			door_mode = 0;
		}

	}
}
 8000fb8:	e00b      	b.n	8000fd2 <auto_door_sequence+0x52>
		else if(TIM11_10ms_servomotor_counter == 500)
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <auto_door_sequence+0x64>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fc2:	d106      	bne.n	8000fd2 <auto_door_sequence+0x52>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);	// close
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <auto_door_sequence+0x68>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	220a      	movs	r2, #10
 8000fca:	63da      	str	r2, [r3, #60]	; 0x3c
			door_mode = 0;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <auto_door_sequence+0x5c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	200008b8 	.word	0x200008b8
 8000fe0:	200008dc 	.word	0x200008dc
 8000fe4:	200008b4 	.word	0x200008b4
 8000fe8:	20000740 	.word	0x20000740

08000fec <set_rpm>:

extern volatile int exint_signal;


void set_rpm(int rpm)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	delay_us(60000000/ STEPS_PER_REV/rpm);
 8000ff4:	f643 1238 	movw	r2, #14648	; 0x3938
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fbf6 	bl	80007f0 <delay_us>
	// 최대 speed 기준 (13) ==> _delay_us(1126)
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <stepmotor_driver_step>:


void stepmotor_driver_step(int direction, int step_limit)	// direction ==> Forward or Backward
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	switch(temp_step)
 8001016:	4b97      	ldr	r3, [pc, #604]	; (8001274 <stepmotor_driver_step+0x268>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2b07      	cmp	r3, #7
 800101c:	f200 80cc 	bhi.w	80011b8 <stepmotor_driver_step+0x1ac>
 8001020:	a201      	add	r2, pc, #4	; (adr r2, 8001028 <stepmotor_driver_step+0x1c>)
 8001022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001026:	bf00      	nop
 8001028:	08001049 	.word	0x08001049
 800102c:	08001077 	.word	0x08001077
 8001030:	080010a5 	.word	0x080010a5
 8001034:	080010d3 	.word	0x080010d3
 8001038:	08001101 	.word	0x08001101
 800103c:	0800112f 	.word	0x0800112f
 8001040:	0800115d 	.word	0x0800115d
 8001044:	0800118b 	.word	0x0800118b
	{
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2140      	movs	r1, #64	; 0x40
 800104c:	488a      	ldr	r0, [pc, #552]	; (8001278 <stepmotor_driver_step+0x26c>)
 800104e:	f001 faad 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2180      	movs	r1, #128	; 0x80
 8001056:	4888      	ldr	r0, [pc, #544]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001058:	f001 faa8 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001062:	4885      	ldr	r0, [pc, #532]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001064:	f001 faa2 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106e:	4882      	ldr	r0, [pc, #520]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001070:	f001 fa9c 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 8001074:	e0a0      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 1:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001076:	2201      	movs	r2, #1
 8001078:	2140      	movs	r1, #64	; 0x40
 800107a:	487f      	ldr	r0, [pc, #508]	; (8001278 <stepmotor_driver_step+0x26c>)
 800107c:	f001 fa96 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2180      	movs	r1, #128	; 0x80
 8001084:	487c      	ldr	r0, [pc, #496]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001086:	f001 fa91 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001090:	4879      	ldr	r0, [pc, #484]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001092:	f001 fa8b 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109c:	4876      	ldr	r0, [pc, #472]	; (8001278 <stepmotor_driver_step+0x26c>)
 800109e:	f001 fa85 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 80010a2:	e089      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 2:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	4873      	ldr	r0, [pc, #460]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010aa:	f001 fa7f 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010ae:	2201      	movs	r2, #1
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	4871      	ldr	r0, [pc, #452]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010b4:	f001 fa7a 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010be:	486e      	ldr	r0, [pc, #440]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010c0:	f001 fa74 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	486b      	ldr	r0, [pc, #428]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010cc:	f001 fa6e 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 80010d0:	e072      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 3:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	2140      	movs	r1, #64	; 0x40
 80010d6:	4868      	ldr	r0, [pc, #416]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010d8:	f001 fa68 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010dc:	2201      	movs	r2, #1
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	4865      	ldr	r0, [pc, #404]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010e2:	f001 fa63 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80010e6:	2201      	movs	r2, #1
 80010e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ec:	4862      	ldr	r0, [pc, #392]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010ee:	f001 fa5d 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f8:	485f      	ldr	r0, [pc, #380]	; (8001278 <stepmotor_driver_step+0x26c>)
 80010fa:	f001 fa57 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 80010fe:	e05b      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 4:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2140      	movs	r1, #64	; 0x40
 8001104:	485c      	ldr	r0, [pc, #368]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001106:	f001 fa51 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2180      	movs	r1, #128	; 0x80
 800110e:	485a      	ldr	r0, [pc, #360]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001110:	f001 fa4c 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	f44f 7180 	mov.w	r1, #256	; 0x100
 800111a:	4857      	ldr	r0, [pc, #348]	; (8001278 <stepmotor_driver_step+0x26c>)
 800111c:	f001 fa46 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001126:	4854      	ldr	r0, [pc, #336]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001128:	f001 fa40 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 800112c:	e044      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 5:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2140      	movs	r1, #64	; 0x40
 8001132:	4851      	ldr	r0, [pc, #324]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001134:	f001 fa3a 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001138:	2200      	movs	r2, #0
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	484e      	ldr	r0, [pc, #312]	; (8001278 <stepmotor_driver_step+0x26c>)
 800113e:	f001 fa35 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	484b      	ldr	r0, [pc, #300]	; (8001278 <stepmotor_driver_step+0x26c>)
 800114a:	f001 fa2f 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001154:	4848      	ldr	r0, [pc, #288]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001156:	f001 fa29 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 800115a:	e02d      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 6:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	4845      	ldr	r0, [pc, #276]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001162:	f001 fa23 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	4843      	ldr	r0, [pc, #268]	; (8001278 <stepmotor_driver_step+0x26c>)
 800116c:	f001 fa1e 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001176:	4840      	ldr	r0, [pc, #256]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001178:	f001 fa18 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001182:	483d      	ldr	r0, [pc, #244]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001184:	f001 fa12 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 8001188:	e016      	b.n	80011b8 <stepmotor_driver_step+0x1ac>

		case 7:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800118a:	2201      	movs	r2, #1
 800118c:	2140      	movs	r1, #64	; 0x40
 800118e:	483a      	ldr	r0, [pc, #232]	; (8001278 <stepmotor_driver_step+0x26c>)
 8001190:	f001 fa0c 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	4837      	ldr	r0, [pc, #220]	; (8001278 <stepmotor_driver_step+0x26c>)
 800119a:	f001 fa07 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a4:	4834      	ldr	r0, [pc, #208]	; (8001278 <stepmotor_driver_step+0x26c>)
 80011a6:	f001 fa01 	bl	80025ac <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b0:	4831      	ldr	r0, [pc, #196]	; (8001278 <stepmotor_driver_step+0x26c>)
 80011b2:	f001 f9fb 	bl	80025ac <HAL_GPIO_WritePin>
		break;
 80011b6:	bf00      	nop
	}
	if(direction == FORWARD)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d123      	bne.n	8001206 <stepmotor_driver_step+0x1fa>
	{
		if(temp_step_count <= step_limit)
 80011be:	4b2f      	ldr	r3, [pc, #188]	; (800127c <stepmotor_driver_step+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	db15      	blt.n	80011f4 <stepmotor_driver_step+0x1e8>
		{
			temp_step++;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <stepmotor_driver_step+0x268>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4a29      	ldr	r2, [pc, #164]	; (8001274 <stepmotor_driver_step+0x268>)
 80011d0:	6013      	str	r3, [r2, #0]
			temp_step_count++;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <stepmotor_driver_step+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <stepmotor_driver_step+0x270>)
 80011da:	6013      	str	r3, [r2, #0]
			temp_step %= 8;
 80011dc:	4b25      	ldr	r3, [pc, #148]	; (8001274 <stepmotor_driver_step+0x268>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	425a      	negs	r2, r3
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	f002 0207 	and.w	r2, r2, #7
 80011ea:	bf58      	it	pl
 80011ec:	4253      	negpl	r3, r2
 80011ee:	4a21      	ldr	r2, [pc, #132]	; (8001274 <stepmotor_driver_step+0x268>)
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e008      	b.n	8001206 <stepmotor_driver_step+0x1fa>
		}
		else
		{
			temp_step = 0;
 80011f4:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <stepmotor_driver_step+0x268>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
			temp_step_count = 0;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <stepmotor_driver_step+0x270>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
			elevator_mode_state = 0;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <stepmotor_driver_step+0x274>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
		}
	}

	if(direction == BACKWARD)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b02      	cmp	r3, #2
 800120a:	d12e      	bne.n	800126a <stepmotor_driver_step+0x25e>
	{

		if(temp_step_count <= step_limit)
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <stepmotor_driver_step+0x270>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	db20      	blt.n	8001258 <stepmotor_driver_step+0x24c>
		{
			temp_step_count++;
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <stepmotor_driver_step+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	3301      	adds	r3, #1
 800121c:	4a17      	ldr	r2, [pc, #92]	; (800127c <stepmotor_driver_step+0x270>)
 800121e:	6013      	str	r3, [r2, #0]

			if(temp_step >= 0)
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <stepmotor_driver_step+0x268>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	db0f      	blt.n	8001248 <stepmotor_driver_step+0x23c>
			{
				temp_step--;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <stepmotor_driver_step+0x268>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	3b01      	subs	r3, #1
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <stepmotor_driver_step+0x268>)
 8001230:	6013      	str	r3, [r2, #0]
				temp_step %= 8;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <stepmotor_driver_step+0x268>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	425a      	negs	r2, r3
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	f002 0207 	and.w	r2, r2, #7
 8001240:	bf58      	it	pl
 8001242:	4253      	negpl	r3, r2
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <stepmotor_driver_step+0x268>)
 8001246:	6013      	str	r3, [r2, #0]
			}

			if(temp_step < 0)
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <stepmotor_driver_step+0x268>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	da0c      	bge.n	800126a <stepmotor_driver_step+0x25e>
			{
				temp_step = 7;
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <stepmotor_driver_step+0x268>)
 8001252:	2207      	movs	r2, #7
 8001254:	601a      	str	r2, [r3, #0]
			temp_step = 0;
			temp_step_count = 0;
			elevator_mode_state = 0;
		}
	}
}
 8001256:	e008      	b.n	800126a <stepmotor_driver_step+0x25e>
			temp_step = 0;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <stepmotor_driver_step+0x268>)
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
			temp_step_count = 0;
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <stepmotor_driver_step+0x270>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
			elevator_mode_state = 0;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <stepmotor_driver_step+0x274>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200008cc 	.word	0x200008cc
 8001278:	40020800 	.word	0x40020800
 800127c:	200008d0 	.word	0x200008d0
 8001280:	200008c0 	.word	0x200008c0

08001284 <flow_button_move>:

	}
}

void flow_button_move()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

	switch(elevator_mode_state)
 8001288:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <flow_button_move+0x21c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b02      	cmp	r3, #2
 800128e:	f000 81a9 	beq.w	80015e4 <flow_button_move+0x360>
 8001292:	2b02      	cmp	r3, #2
 8001294:	f300 81be 	bgt.w	8001614 <flow_button_move+0x390>
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <flow_button_move+0x20>
 800129c:	2b01      	cmp	r3, #1
 800129e:	f000 818a 	beq.w	80015b6 <flow_button_move+0x332>
//						led_re_shift();
//
//					}
//			break;
		}
}
 80012a2:	e1b7      	b.n	8001614 <flow_button_move+0x390>
				if(pre_floor == 1)
 80012a4:	4b7f      	ldr	r3, [pc, #508]	; (80014a4 <flow_button_move+0x220>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d10a      	bne.n	80012c2 <flow_button_move+0x3e>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	21ff      	movs	r1, #255	; 0xff
 80012b0:	487d      	ldr	r0, [pc, #500]	; (80014a8 <flow_button_move+0x224>)
 80012b2:	f001 f97b 	bl	80025ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x01, GPIO_PIN_SET);
 80012b6:	2201      	movs	r2, #1
 80012b8:	2101      	movs	r1, #1
 80012ba:	487b      	ldr	r0, [pc, #492]	; (80014a8 <flow_button_move+0x224>)
 80012bc:	f001 f976 	bl	80025ac <HAL_GPIO_WritePin>
 80012c0:	e049      	b.n	8001356 <flow_button_move+0xd2>
				else if(pre_floor == 2)
 80012c2:	4b78      	ldr	r3, [pc, #480]	; (80014a4 <flow_button_move+0x220>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d10a      	bne.n	80012e0 <flow_button_move+0x5c>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	21ff      	movs	r1, #255	; 0xff
 80012ce:	4876      	ldr	r0, [pc, #472]	; (80014a8 <flow_button_move+0x224>)
 80012d0:	f001 f96c 	bl	80025ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x03, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2103      	movs	r1, #3
 80012d8:	4873      	ldr	r0, [pc, #460]	; (80014a8 <flow_button_move+0x224>)
 80012da:	f001 f967 	bl	80025ac <HAL_GPIO_WritePin>
 80012de:	e03a      	b.n	8001356 <flow_button_move+0xd2>
				else if(pre_floor == 3)
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <flow_button_move+0x220>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b03      	cmp	r3, #3
 80012e6:	d10a      	bne.n	80012fe <flow_button_move+0x7a>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80012e8:	2200      	movs	r2, #0
 80012ea:	21ff      	movs	r1, #255	; 0xff
 80012ec:	486e      	ldr	r0, [pc, #440]	; (80014a8 <flow_button_move+0x224>)
 80012ee:	f001 f95d 	bl	80025ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2107      	movs	r1, #7
 80012f6:	486c      	ldr	r0, [pc, #432]	; (80014a8 <flow_button_move+0x224>)
 80012f8:	f001 f958 	bl	80025ac <HAL_GPIO_WritePin>
 80012fc:	e02b      	b.n	8001356 <flow_button_move+0xd2>
				else if(pre_floor == 4)
 80012fe:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <flow_button_move+0x220>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b04      	cmp	r3, #4
 8001304:	d10a      	bne.n	800131c <flow_button_move+0x98>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	21ff      	movs	r1, #255	; 0xff
 800130a:	4867      	ldr	r0, [pc, #412]	; (80014a8 <flow_button_move+0x224>)
 800130c:	f001 f94e 	bl	80025ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x0f, GPIO_PIN_SET);
 8001310:	2201      	movs	r2, #1
 8001312:	210f      	movs	r1, #15
 8001314:	4864      	ldr	r0, [pc, #400]	; (80014a8 <flow_button_move+0x224>)
 8001316:	f001 f949 	bl	80025ac <HAL_GPIO_WritePin>
 800131a:	e01c      	b.n	8001356 <flow_button_move+0xd2>
				else if(pre_floor == 5)
 800131c:	4b61      	ldr	r3, [pc, #388]	; (80014a4 <flow_button_move+0x220>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d10a      	bne.n	800133a <flow_button_move+0xb6>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	21ff      	movs	r1, #255	; 0xff
 8001328:	485f      	ldr	r0, [pc, #380]	; (80014a8 <flow_button_move+0x224>)
 800132a:	f001 f93f 	bl	80025ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x1f, GPIO_PIN_SET);
 800132e:	2201      	movs	r2, #1
 8001330:	211f      	movs	r1, #31
 8001332:	485d      	ldr	r0, [pc, #372]	; (80014a8 <flow_button_move+0x224>)
 8001334:	f001 f93a 	bl	80025ac <HAL_GPIO_WritePin>
 8001338:	e00d      	b.n	8001356 <flow_button_move+0xd2>
				else if(pre_floor == 6)
 800133a:	4b5a      	ldr	r3, [pc, #360]	; (80014a4 <flow_button_move+0x220>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b06      	cmp	r3, #6
 8001340:	d109      	bne.n	8001356 <flow_button_move+0xd2>
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	21ff      	movs	r1, #255	; 0xff
 8001346:	4858      	ldr	r0, [pc, #352]	; (80014a8 <flow_button_move+0x224>)
 8001348:	f001 f930 	bl	80025ac <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x3f, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	213f      	movs	r1, #63	; 0x3f
 8001350:	4855      	ldr	r0, [pc, #340]	; (80014a8 <flow_button_move+0x224>)
 8001352:	f001 f92b 	bl	80025ac <HAL_GPIO_WritePin>
				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001356:	4a55      	ldr	r2, [pc, #340]	; (80014ac <flow_button_move+0x228>)
 8001358:	2101      	movs	r1, #1
 800135a:	4855      	ldr	r0, [pc, #340]	; (80014b0 <flow_button_move+0x22c>)
 800135c:	f7ff f994 	bl	8000688 <get_button>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d120      	bne.n	80013a8 <flow_button_move+0x124>
					if(pre_floor > 1)
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <flow_button_move+0x220>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	dd0f      	ble.n	800138e <flow_button_move+0x10a>
						floor_gap = pre_floor - 1;
 800136e:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <flow_button_move+0x220>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3b01      	subs	r3, #1
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <flow_button_move+0x230>)
 8001376:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001378:	4b4e      	ldr	r3, [pc, #312]	; (80014b4 <flow_button_move+0x230>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a4e      	ldr	r2, [pc, #312]	; (80014b8 <flow_button_move+0x234>)
 800137e:	6013      	str	r3, [r2, #0]
						pre_floor = 1;
 8001380:	4b48      	ldr	r3, [pc, #288]	; (80014a4 <flow_button_move+0x220>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE; // BACKWARD
 8001386:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <flow_button_move+0x21c>)
 8001388:	2202      	movs	r2, #2
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	e00c      	b.n	80013a8 <flow_button_move+0x124>
					else if(pre_floor < 1)
 800138e:	4b45      	ldr	r3, [pc, #276]	; (80014a4 <flow_button_move+0x220>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b00      	cmp	r3, #0
 8001394:	dc08      	bgt.n	80013a8 <flow_button_move+0x124>
						elevator_state = 1;
 8001396:	4b48      	ldr	r3, [pc, #288]	; (80014b8 <flow_button_move+0x234>)
 8001398:	2201      	movs	r2, #1
 800139a:	601a      	str	r2, [r3, #0]
						pre_floor = 1;
 800139c:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <flow_button_move+0x220>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE;
 80013a2:	4b3f      	ldr	r3, [pc, #252]	; (80014a0 <flow_button_move+0x21c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 80013a8:	4a44      	ldr	r2, [pc, #272]	; (80014bc <flow_button_move+0x238>)
 80013aa:	2102      	movs	r1, #2
 80013ac:	4840      	ldr	r0, [pc, #256]	; (80014b0 <flow_button_move+0x22c>)
 80013ae:	f7ff f96b 	bl	8000688 <get_button>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d127      	bne.n	8001408 <flow_button_move+0x184>
					if(pre_floor > 2)
 80013b8:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <flow_button_move+0x220>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b02      	cmp	r3, #2
 80013be:	dd0f      	ble.n	80013e0 <flow_button_move+0x15c>
						floor_gap = pre_floor - 2;
 80013c0:	4b38      	ldr	r3, [pc, #224]	; (80014a4 <flow_button_move+0x220>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3b02      	subs	r3, #2
 80013c6:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <flow_button_move+0x230>)
 80013c8:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 80013ca:	4b3a      	ldr	r3, [pc, #232]	; (80014b4 <flow_button_move+0x230>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <flow_button_move+0x234>)
 80013d0:	6013      	str	r3, [r2, #0]
						pre_floor = 2;
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <flow_button_move+0x220>)
 80013d4:	2202      	movs	r2, #2
 80013d6:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <flow_button_move+0x21c>)
 80013da:	2202      	movs	r2, #2
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	e013      	b.n	8001408 <flow_button_move+0x184>
					else if(pre_floor < 2)
 80013e0:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <flow_button_move+0x220>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	dc0f      	bgt.n	8001408 <flow_button_move+0x184>
						floor_gap = 2 - pre_floor;
 80013e8:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <flow_button_move+0x220>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f1c3 0302 	rsb	r3, r3, #2
 80013f0:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <flow_button_move+0x230>)
 80013f2:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80013f4:	4b2f      	ldr	r3, [pc, #188]	; (80014b4 <flow_button_move+0x230>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <flow_button_move+0x234>)
 80013fa:	6013      	str	r3, [r2, #0]
						pre_floor = 2;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <flow_button_move+0x220>)
 80013fe:	2202      	movs	r2, #2
 8001400:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <flow_button_move+0x21c>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON3_Pin, &prev_button3_state) == BUTTON_PRESS)
 8001408:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <flow_button_move+0x23c>)
 800140a:	2104      	movs	r1, #4
 800140c:	4828      	ldr	r0, [pc, #160]	; (80014b0 <flow_button_move+0x22c>)
 800140e:	f7ff f93b 	bl	8000688 <get_button>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d127      	bne.n	8001468 <flow_button_move+0x1e4>
					if(pre_floor > 3)
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <flow_button_move+0x220>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b03      	cmp	r3, #3
 800141e:	dd0f      	ble.n	8001440 <flow_button_move+0x1bc>
						floor_gap = pre_floor - 3;
 8001420:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <flow_button_move+0x220>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3b03      	subs	r3, #3
 8001426:	4a23      	ldr	r2, [pc, #140]	; (80014b4 <flow_button_move+0x230>)
 8001428:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 800142a:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <flow_button_move+0x230>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a22      	ldr	r2, [pc, #136]	; (80014b8 <flow_button_move+0x234>)
 8001430:	6013      	str	r3, [r2, #0]
						pre_floor = 3;
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <flow_button_move+0x220>)
 8001434:	2203      	movs	r2, #3
 8001436:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <flow_button_move+0x21c>)
 800143a:	2202      	movs	r2, #2
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e013      	b.n	8001468 <flow_button_move+0x1e4>
					else if(pre_floor < 3)
 8001440:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <flow_button_move+0x220>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2b02      	cmp	r3, #2
 8001446:	dc0f      	bgt.n	8001468 <flow_button_move+0x1e4>
						floor_gap = 3 - pre_floor;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <flow_button_move+0x220>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f1c3 0303 	rsb	r3, r3, #3
 8001450:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <flow_button_move+0x230>)
 8001452:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <flow_button_move+0x230>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <flow_button_move+0x234>)
 800145a:	6013      	str	r3, [r2, #0]
						pre_floor = 3;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <flow_button_move+0x220>)
 800145e:	2203      	movs	r2, #3
 8001460:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <flow_button_move+0x21c>)
 8001464:	2201      	movs	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON4_Pin, &prev_button4_state) == BUTTON_PRESS)
 8001468:	4a16      	ldr	r2, [pc, #88]	; (80014c4 <flow_button_move+0x240>)
 800146a:	2108      	movs	r1, #8
 800146c:	4810      	ldr	r0, [pc, #64]	; (80014b0 <flow_button_move+0x22c>)
 800146e:	f7ff f90b 	bl	8000688 <get_button>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d13b      	bne.n	80014f0 <flow_button_move+0x26c>
					if(pre_floor > 4)
 8001478:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <flow_button_move+0x220>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b04      	cmp	r3, #4
 800147e:	dd23      	ble.n	80014c8 <flow_button_move+0x244>
						floor_gap = pre_floor - 4;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <flow_button_move+0x220>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	3b04      	subs	r3, #4
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <flow_button_move+0x230>)
 8001488:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 800148a:	4b0a      	ldr	r3, [pc, #40]	; (80014b4 <flow_button_move+0x230>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <flow_button_move+0x234>)
 8001490:	6013      	str	r3, [r2, #0]
						pre_floor = 4;
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <flow_button_move+0x220>)
 8001494:	2204      	movs	r2, #4
 8001496:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001498:	4b01      	ldr	r3, [pc, #4]	; (80014a0 <flow_button_move+0x21c>)
 800149a:	2202      	movs	r2, #2
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e027      	b.n	80014f0 <flow_button_move+0x26c>
 80014a0:	200008c0 	.word	0x200008c0
 80014a4:	200008c4 	.word	0x200008c4
 80014a8:	40020400 	.word	0x40020400
 80014ac:	20000000 	.word	0x20000000
 80014b0:	40020800 	.word	0x40020800
 80014b4:	200008c8 	.word	0x200008c8
 80014b8:	200008bc 	.word	0x200008bc
 80014bc:	20000001 	.word	0x20000001
 80014c0:	20000002 	.word	0x20000002
 80014c4:	20000003 	.word	0x20000003
					else if(pre_floor < 4)
 80014c8:	4b53      	ldr	r3, [pc, #332]	; (8001618 <flow_button_move+0x394>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	dc0f      	bgt.n	80014f0 <flow_button_move+0x26c>
						floor_gap = 4 - pre_floor;
 80014d0:	4b51      	ldr	r3, [pc, #324]	; (8001618 <flow_button_move+0x394>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f1c3 0304 	rsb	r3, r3, #4
 80014d8:	4a50      	ldr	r2, [pc, #320]	; (800161c <flow_button_move+0x398>)
 80014da:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80014dc:	4b4f      	ldr	r3, [pc, #316]	; (800161c <flow_button_move+0x398>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a4f      	ldr	r2, [pc, #316]	; (8001620 <flow_button_move+0x39c>)
 80014e2:	6013      	str	r3, [r2, #0]
						pre_floor = 4;
 80014e4:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <flow_button_move+0x394>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 80014ea:	4b4e      	ldr	r3, [pc, #312]	; (8001624 <flow_button_move+0x3a0>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON5_Pin, &prev_button5_state) == BUTTON_PRESS)
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <flow_button_move+0x3a4>)
 80014f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f6:	484d      	ldr	r0, [pc, #308]	; (800162c <flow_button_move+0x3a8>)
 80014f8:	f7ff f8c6 	bl	8000688 <get_button>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d127      	bne.n	8001552 <flow_button_move+0x2ce>
					if(pre_floor > 5)
 8001502:	4b45      	ldr	r3, [pc, #276]	; (8001618 <flow_button_move+0x394>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b05      	cmp	r3, #5
 8001508:	dd0f      	ble.n	800152a <flow_button_move+0x2a6>
						floor_gap = pre_floor - 5;
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <flow_button_move+0x394>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3b05      	subs	r3, #5
 8001510:	4a42      	ldr	r2, [pc, #264]	; (800161c <flow_button_move+0x398>)
 8001512:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <flow_button_move+0x398>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a41      	ldr	r2, [pc, #260]	; (8001620 <flow_button_move+0x39c>)
 800151a:	6013      	str	r3, [r2, #0]
						pre_floor = 5;
 800151c:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <flow_button_move+0x394>)
 800151e:	2205      	movs	r2, #5
 8001520:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <flow_button_move+0x3a0>)
 8001524:	2202      	movs	r2, #2
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	e013      	b.n	8001552 <flow_button_move+0x2ce>
					else if(pre_floor < 5)
 800152a:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <flow_button_move+0x394>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2b04      	cmp	r3, #4
 8001530:	dc0f      	bgt.n	8001552 <flow_button_move+0x2ce>
						floor_gap = 5 - pre_floor;
 8001532:	4b39      	ldr	r3, [pc, #228]	; (8001618 <flow_button_move+0x394>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f1c3 0305 	rsb	r3, r3, #5
 800153a:	4a38      	ldr	r2, [pc, #224]	; (800161c <flow_button_move+0x398>)
 800153c:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 800153e:	4b37      	ldr	r3, [pc, #220]	; (800161c <flow_button_move+0x398>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a37      	ldr	r2, [pc, #220]	; (8001620 <flow_button_move+0x39c>)
 8001544:	6013      	str	r3, [r2, #0]
						pre_floor = 5;
 8001546:	4b34      	ldr	r3, [pc, #208]	; (8001618 <flow_button_move+0x394>)
 8001548:	2205      	movs	r2, #5
 800154a:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 800154c:	4b35      	ldr	r3, [pc, #212]	; (8001624 <flow_button_move+0x3a0>)
 800154e:	2201      	movs	r2, #1
 8001550:	601a      	str	r2, [r3, #0]
				if (get_button(BUTTON1_GPIO_Port, BUTTON6_Pin, &prev_button6_state) == BUTTON_PRESS)
 8001552:	4a37      	ldr	r2, [pc, #220]	; (8001630 <flow_button_move+0x3ac>)
 8001554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001558:	4834      	ldr	r0, [pc, #208]	; (800162c <flow_button_move+0x3a8>)
 800155a:	f7ff f895 	bl	8000688 <get_button>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d156      	bne.n	8001612 <flow_button_move+0x38e>
					if(pre_floor > 6)
 8001564:	4b2c      	ldr	r3, [pc, #176]	; (8001618 <flow_button_move+0x394>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b06      	cmp	r3, #6
 800156a:	dd0f      	ble.n	800158c <flow_button_move+0x308>
						floor_gap = pre_floor - 6;
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <flow_button_move+0x394>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b06      	subs	r3, #6
 8001572:	4a2a      	ldr	r2, [pc, #168]	; (800161c <flow_button_move+0x398>)
 8001574:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <flow_button_move+0x398>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a29      	ldr	r2, [pc, #164]	; (8001620 <flow_button_move+0x39c>)
 800157c:	6013      	str	r3, [r2, #0]
						pre_floor = 6;
 800157e:	4b26      	ldr	r3, [pc, #152]	; (8001618 <flow_button_move+0x394>)
 8001580:	2206      	movs	r2, #6
 8001582:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <flow_button_move+0x3a0>)
 8001586:	2202      	movs	r2, #2
 8001588:	601a      	str	r2, [r3, #0]
			break;
 800158a:	e042      	b.n	8001612 <flow_button_move+0x38e>
					else if(pre_floor < 6)
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <flow_button_move+0x394>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b05      	cmp	r3, #5
 8001592:	dc3e      	bgt.n	8001612 <flow_button_move+0x38e>
						floor_gap = 6 - pre_floor;
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <flow_button_move+0x394>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f1c3 0306 	rsb	r3, r3, #6
 800159c:	4a1f      	ldr	r2, [pc, #124]	; (800161c <flow_button_move+0x398>)
 800159e:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <flow_button_move+0x398>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <flow_button_move+0x39c>)
 80015a6:	6013      	str	r3, [r2, #0]
						pre_floor = 6;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <flow_button_move+0x394>)
 80015aa:	2206      	movs	r2, #6
 80015ac:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <flow_button_move+0x3a0>)
 80015b0:	2201      	movs	r2, #1
 80015b2:	601a      	str	r2, [r3, #0]
			break;
 80015b4:	e02d      	b.n	8001612 <flow_button_move+0x38e>
			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 80015b6:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <flow_button_move+0x3b0>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	481c      	ldr	r0, [pc, #112]	; (800162c <flow_button_move+0x3a8>)
 80015bc:	f7ff f864 	bl	8000688 <get_button>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <flow_button_move+0x34a>
				elevator_mode_state = STANDBY_MODE;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <flow_button_move+0x3a0>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
			break;
 80015cc:	e022      	b.n	8001614 <flow_button_move+0x390>
				stepmotor_driver_step(FORWARD, floor_gap * STEPS_PER_REV);
 80015ce:	4b13      	ldr	r3, [pc, #76]	; (800161c <flow_button_move+0x398>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	031b      	lsls	r3, r3, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fd18 	bl	800100c <stepmotor_driver_step>
				set_rpm(13);
 80015dc:	200d      	movs	r0, #13
 80015de:	f7ff fd05 	bl	8000fec <set_rpm>
			break;
 80015e2:	e017      	b.n	8001614 <flow_button_move+0x390>
				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <flow_button_move+0x3b0>)
 80015e6:	2101      	movs	r1, #1
 80015e8:	4810      	ldr	r0, [pc, #64]	; (800162c <flow_button_move+0x3a8>)
 80015ea:	f7ff f84d 	bl	8000688 <get_button>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d103      	bne.n	80015fc <flow_button_move+0x378>
					elevator_mode_state = STANDBY_MODE;
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <flow_button_move+0x3a0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
			break;
 80015fa:	e00b      	b.n	8001614 <flow_button_move+0x390>
					stepmotor_driver_step(BACKWARD, floor_gap * STEPS_PER_REV);
 80015fc:	4b07      	ldr	r3, [pc, #28]	; (800161c <flow_button_move+0x398>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	031b      	lsls	r3, r3, #12
 8001602:	4619      	mov	r1, r3
 8001604:	2002      	movs	r0, #2
 8001606:	f7ff fd01 	bl	800100c <stepmotor_driver_step>
					set_rpm(13);
 800160a:	200d      	movs	r0, #13
 800160c:	f7ff fcee 	bl	8000fec <set_rpm>
			break;
 8001610:	e000      	b.n	8001614 <flow_button_move+0x390>
			break;
 8001612:	bf00      	nop
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200008c4 	.word	0x200008c4
 800161c:	200008c8 	.word	0x200008c8
 8001620:	200008bc 	.word	0x200008bc
 8001624:	200008c0 	.word	0x200008c0
 8001628:	20000004 	.word	0x20000004
 800162c:	40020800 	.word	0x40020800
 8001630:	20000005 	.word	0x20000005
 8001634:	20000000 	.word	0x20000000

08001638 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <HAL_MspInit+0x4c>)
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_MspInit+0x4c>)
 8001648:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800164c:	6453      	str	r3, [r2, #68]	; 0x44
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <HAL_MspInit+0x4c>)
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	603b      	str	r3, [r7, #0]
 800165e:	4b09      	ldr	r3, [pc, #36]	; (8001684 <HAL_MspInit+0x4c>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	4a08      	ldr	r2, [pc, #32]	; (8001684 <HAL_MspInit+0x4c>)
 8001664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001668:	6413      	str	r3, [r2, #64]	; 0x40
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <HAL_MspInit+0x4c>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001672:	603b      	str	r3, [r7, #0]
 8001674:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001676:	2007      	movs	r0, #7
 8001678:	f000 fd28 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a19      	ldr	r2, [pc, #100]	; (800170c <HAL_I2C_MspInit+0x84>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d12c      	bne.n	8001704 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <HAL_I2C_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a17      	ldr	r2, [pc, #92]	; (8001710 <HAL_I2C_MspInit+0x88>)
 80016b4:	f043 0302 	orr.w	r3, r3, #2
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_I2C_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016cc:	2312      	movs	r3, #18
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d8:	2304      	movs	r3, #4
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4619      	mov	r1, r3
 80016e2:	480c      	ldr	r0, [pc, #48]	; (8001714 <HAL_I2C_MspInit+0x8c>)
 80016e4:	f000 fdc6 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e8:	2300      	movs	r3, #0
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_I2C_MspInit+0x88>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_I2C_MspInit+0x88>)
 80016f2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016f6:	6413      	str	r3, [r2, #64]	; 0x40
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_I2C_MspInit+0x88>)
 80016fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40005400 	.word	0x40005400
 8001710:	40023800 	.word	0x40023800
 8001714:	40020400 	.word	0x40020400

08001718 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <HAL_RTC_MspInit+0x50>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d111      	bne.n	8001760 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800173c:	2302      	movs	r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001744:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fd3c 	bl	80031c8 <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001756:	f7ff fc0d 	bl	8000f74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800175a:	4b04      	ldr	r3, [pc, #16]	; (800176c <HAL_RTC_MspInit+0x54>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40002800 	.word	0x40002800
 800176c:	42470e3c 	.word	0x42470e3c

08001770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08c      	sub	sp, #48	; 0x30
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a3d      	ldr	r2, [pc, #244]	; (8001884 <HAL_TIM_Base_MspInit+0x114>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d145      	bne.n	800181e <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	61bb      	str	r3, [r7, #24]
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a3b      	ldr	r2, [pc, #236]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
 80017ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a34      	ldr	r2, [pc, #208]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	617b      	str	r3, [r7, #20]
 80017c8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017dc:	2301      	movs	r3, #1
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4829      	ldr	r0, [pc, #164]	; (800188c <HAL_TIM_Base_MspInit+0x11c>)
 80017e8:	f000 fd44 	bl	8002274 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2100      	movs	r1, #0
 80017f0:	2018      	movs	r0, #24
 80017f2:	f000 fc76 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80017f6:	2018      	movs	r0, #24
 80017f8:	f000 fc8f 	bl	800211a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017fc:	2200      	movs	r2, #0
 80017fe:	2100      	movs	r1, #0
 8001800:	2019      	movs	r0, #25
 8001802:	f000 fc6e 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001806:	2019      	movs	r0, #25
 8001808:	f000 fc87 	bl	800211a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2100      	movs	r1, #0
 8001810:	201b      	movs	r0, #27
 8001812:	f000 fc66 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001816:	201b      	movs	r0, #27
 8001818:	f000 fc7f 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800181c:	e02e      	b.n	800187c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001826:	d116      	bne.n	8001856 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a15      	ldr	r2, [pc, #84]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b13      	ldr	r3, [pc, #76]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 0301 	and.w	r3, r3, #1
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001844:	2200      	movs	r2, #0
 8001846:	2100      	movs	r1, #0
 8001848:	201c      	movs	r0, #28
 800184a:	f000 fc4a 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800184e:	201c      	movs	r0, #28
 8001850:	f000 fc63 	bl	800211a <HAL_NVIC_EnableIRQ>
}
 8001854:	e012      	b.n	800187c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <HAL_TIM_Base_MspInit+0x120>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d10d      	bne.n	800187c <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 800186a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800186e:	6453      	str	r3, [r2, #68]	; 0x44
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_TIM_Base_MspInit+0x118>)
 8001872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	bf00      	nop
 800187e:	3730      	adds	r7, #48	; 0x30
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40010000 	.word	0x40010000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40014800 	.word	0x40014800

08001894 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_TIM_PWM_MspInit+0x48>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d115      	bne.n	80018d2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b0d      	ldr	r3, [pc, #52]	; (80018e0 <HAL_TIM_PWM_MspInit+0x4c>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a0c      	ldr	r2, [pc, #48]	; (80018e0 <HAL_TIM_PWM_MspInit+0x4c>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b0a      	ldr	r3, [pc, #40]	; (80018e0 <HAL_TIM_PWM_MspInit+0x4c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	201d      	movs	r0, #29
 80018c8:	f000 fc0b 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018cc:	201d      	movs	r0, #29
 80018ce:	f000 fc24 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40000400 	.word	0x40000400
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08a      	sub	sp, #40	; 0x28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001904:	d11f      	bne.n	8001946 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	4b22      	ldr	r3, [pc, #136]	; (8001994 <HAL_TIM_MspPostInit+0xb0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a21      	ldr	r2, [pc, #132]	; (8001994 <HAL_TIM_MspPostInit+0xb0>)
 8001910:	f043 0302 	orr.w	r3, r3, #2
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <HAL_TIM_MspPostInit+0xb0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001928:	2302      	movs	r3, #2
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001934:	2301      	movs	r3, #1
 8001936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4816      	ldr	r0, [pc, #88]	; (8001998 <HAL_TIM_MspPostInit+0xb4>)
 8001940:	f000 fc98 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001944:	e022      	b.n	800198c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a14      	ldr	r2, [pc, #80]	; (800199c <HAL_TIM_MspPostInit+0xb8>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d11d      	bne.n	800198c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	2300      	movs	r3, #0
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <HAL_TIM_MspPostInit+0xb0>)
 8001956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_TIM_MspPostInit+0xb0>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6313      	str	r3, [r2, #48]	; 0x30
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_TIM_MspPostInit+0xb0>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196c:	2340      	movs	r3, #64	; 0x40
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800197c:	2302      	movs	r3, #2
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4806      	ldr	r0, [pc, #24]	; (80019a0 <HAL_TIM_MspPostInit+0xbc>)
 8001988:	f000 fc74 	bl	8002274 <HAL_GPIO_Init>
}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	; 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400
 800199c:	40000400 	.word	0x40000400
 80019a0:	40020000 	.word	0x40020000

080019a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a3a      	ldr	r2, [pc, #232]	; (8001aac <HAL_UART_MspInit+0x108>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d135      	bne.n	8001a32 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4b39      	ldr	r3, [pc, #228]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a38      	ldr	r2, [pc, #224]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 80019d0:	f043 0310 	orr.w	r3, r3, #16
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a31      	ldr	r2, [pc, #196]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a04:	2302      	movs	r3, #2
 8001a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a10:	2307      	movs	r3, #7
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4826      	ldr	r0, [pc, #152]	; (8001ab4 <HAL_UART_MspInit+0x110>)
 8001a1c:	f000 fc2a 	bl	8002274 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	2025      	movs	r0, #37	; 0x25
 8001a26:	f000 fb5c 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a2a:	2025      	movs	r0, #37	; 0x25
 8001a2c:	f000 fb75 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a30:	e038      	b.n	8001aa4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a20      	ldr	r2, [pc, #128]	; (8001ab8 <HAL_UART_MspInit+0x114>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d133      	bne.n	8001aa4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	4a1a      	ldr	r2, [pc, #104]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4c:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	2300      	movs	r3, #0
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	4a13      	ldr	r2, [pc, #76]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6313      	str	r3, [r2, #48]	; 0x30
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_UART_MspInit+0x10c>)
 8001a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a74:	230c      	movs	r3, #12
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a84:	2307      	movs	r3, #7
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4809      	ldr	r0, [pc, #36]	; (8001ab4 <HAL_UART_MspInit+0x110>)
 8001a90:	f000 fbf0 	bl	8002274 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2026      	movs	r0, #38	; 0x26
 8001a9a:	f000 fb22 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a9e:	2026      	movs	r0, #38	; 0x26
 8001aa0:	f000 fb3b 	bl	800211a <HAL_NVIC_EnableIRQ>
}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	; 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40020000 	.word	0x40020000
 8001ab8:	40004400 	.word	0x40004400

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <NMI_Handler+0x4>

08001ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <HardFault_Handler+0x4>

08001ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <MemManage_Handler+0x4>

08001ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <BusFault_Handler+0x4>

08001ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <UsageFault_Handler+0x4>

08001ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b08:	f000 f9cc 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 8001b0c:	f7fe fdfc 	bl	8000708 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f000 fd61 	bl	80025e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b26:	2002      	movs	r0, #2
 8001b28:	f000 fd5a 	bl	80025e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b36:	f002 fa8f 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	200006f8 	.word	0x200006f8

08001b44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b4a:	f002 fa85 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200006f8 	.word	0x200006f8

08001b58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b5e:	f002 fa7b 	bl	8004058 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b62:	4803      	ldr	r0, [pc, #12]	; (8001b70 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b64:	f002 fa78 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200006f8 	.word	0x200006f8
 8001b70:	200007d0 	.word	0x200007d0

08001b74 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <TIM1_CC_IRQHandler+0x10>)
 8001b7a:	f002 fa6d 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200006f8 	.word	0x200006f8

08001b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM2_IRQHandler+0x10>)
 8001b8e:	f002 fa63 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000740 	.word	0x20000740

08001b9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <TIM3_IRQHandler+0x10>)
 8001ba2:	f002 fa59 	bl	8004058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000788 	.word	0x20000788

08001bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <USART1_IRQHandler+0x10>)
 8001bb6:	f003 fb5b 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000818 	.word	0x20000818

08001bc4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <USART2_IRQHandler+0x10>)
 8001bca:	f003 fb51 	bl	8005270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000085c 	.word	0x2000085c

08001bd8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e00a      	b.n	8001c00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bea:	f3af 8000 	nop.w
 8001bee:	4601      	mov	r1, r0
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60ba      	str	r2, [r7, #8]
 8001bf6:	b2ca      	uxtb	r2, r1
 8001bf8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697a      	ldr	r2, [r7, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	dbf0      	blt.n	8001bea <_read+0x12>
	}

return len;
 8001c08:	687b      	ldr	r3, [r7, #4]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b086      	sub	sp, #24
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	60f8      	str	r0, [r7, #12]
 8001c1a:	60b9      	str	r1, [r7, #8]
 8001c1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e009      	b.n	8001c38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	60ba      	str	r2, [r7, #8]
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fd59 	bl	80006e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbf1      	blt.n	8001c24 <_write+0x12>
	}
	return len;
 8001c40:	687b      	ldr	r3, [r7, #4]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_close>:

int _close(int file)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
	return -1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c72:	605a      	str	r2, [r3, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <_isatty>:

int _isatty(int file)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
	return 1;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3714      	adds	r7, #20
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
	...

08001cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cbc:	4a14      	ldr	r2, [pc, #80]	; (8001d10 <_sbrk+0x5c>)
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <_sbrk+0x60>)
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <_sbrk+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd0:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <_sbrk+0x64>)
 8001cd2:	4a12      	ldr	r2, [pc, #72]	; (8001d1c <_sbrk+0x68>)
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <_sbrk+0x64>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d207      	bcs.n	8001cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce4:	f004 fa2c 	bl	8006140 <__errno>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	220c      	movs	r2, #12
 8001cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf2:	e009      	b.n	8001d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf4:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfa:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <_sbrk+0x64>)
 8001d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d06:	68fb      	ldr	r3, [r7, #12]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20020000 	.word	0x20020000
 8001d14:	00000400 	.word	0x00000400
 8001d18:	200008d4 	.word	0x200008d4
 8001d1c:	20000900 	.word	0x20000900

08001d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <SystemInit+0x20>)
 8001d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2a:	4a05      	ldr	r2, [pc, #20]	; (8001d40 <SystemInit+0x20>)
 8001d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <HAL_TIM_IC_CaptureCallback>:
int distance, distance_chk; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d11d      	bne.n	8001d92 <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d107      	bne.n	8001d6e <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 8001d6c:	e011      	b.n	8001d92 <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d10d      	bne.n	8001d92 <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 8001d76:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f002 fc98 	bl	80046b4 <HAL_TIM_ReadCapturedValue>
 8001d84:	4603      	mov	r3, r0
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d8a:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40010000 	.word	0x40010000
 8001da0:	200008e4 	.word	0x200008e4
 8001da4:	200008d8 	.word	0x200008d8
 8001da8:	200008e0 	.word	0x200008e0

08001dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001db2:	490e      	ldr	r1, [pc, #56]	; (8001dec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001db4:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dc8:	4c0b      	ldr	r4, [pc, #44]	; (8001df8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dd6:	f7ff ffa3 	bl	8001d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dda:	f004 f9b7 	bl	800614c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dde:	f7fe fd1f 	bl	8000820 <main>
  bx  lr    
 8001de2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001df0:	08006c54 	.word	0x08006c54
  ldr r2, =_sbss
 8001df4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001df8:	200008fc 	.word	0x200008fc

08001dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 f94f 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fc00 	bl	8001638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f967 	bl	8002136 <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 f92f 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	2000000c 	.word	0x2000000c
 8001e9c:	20000014 	.word	0x20000014
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000014 	.word	0x20000014
 8001ec8:	200008e8 	.word	0x200008e8

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200008e8 	.word	0x200008e8

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000014 	.word	0x20000014

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff29 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff3e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff31 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff feb6 	bl	8001ecc <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d008      	beq.n	8002180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e052      	b.n	8002226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0216 	bic.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_DMA_Abort+0x62>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	e013      	b.n	80021fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7ff fe7b 	bl	8001ecc <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d90c      	bls.n	80021fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e015      	b.n	8002226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	; 0x80
 8002246:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00c      	b.n	8002266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e159      	b.n	8002544 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 8148 	bne.w	800253e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80a2 	beq.w	800253e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b57      	ldr	r3, [pc, #348]	; (800255c <HAL_GPIO_Init+0x2e8>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a56      	ldr	r2, [pc, #344]	; (800255c <HAL_GPIO_Init+0x2e8>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b54      	ldr	r3, [pc, #336]	; (800255c <HAL_GPIO_Init+0x2e8>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a52      	ldr	r2, [pc, #328]	; (8002560 <HAL_GPIO_Init+0x2ec>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a49      	ldr	r2, [pc, #292]	; (8002564 <HAL_GPIO_Init+0x2f0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d019      	beq.n	8002476 <HAL_GPIO_Init+0x202>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a48      	ldr	r2, [pc, #288]	; (8002568 <HAL_GPIO_Init+0x2f4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d013      	beq.n	8002472 <HAL_GPIO_Init+0x1fe>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a47      	ldr	r2, [pc, #284]	; (800256c <HAL_GPIO_Init+0x2f8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00d      	beq.n	800246e <HAL_GPIO_Init+0x1fa>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a46      	ldr	r2, [pc, #280]	; (8002570 <HAL_GPIO_Init+0x2fc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d007      	beq.n	800246a <HAL_GPIO_Init+0x1f6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a45      	ldr	r2, [pc, #276]	; (8002574 <HAL_GPIO_Init+0x300>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_GPIO_Init+0x1f2>
 8002462:	2304      	movs	r3, #4
 8002464:	e008      	b.n	8002478 <HAL_GPIO_Init+0x204>
 8002466:	2307      	movs	r3, #7
 8002468:	e006      	b.n	8002478 <HAL_GPIO_Init+0x204>
 800246a:	2303      	movs	r3, #3
 800246c:	e004      	b.n	8002478 <HAL_GPIO_Init+0x204>
 800246e:	2302      	movs	r3, #2
 8002470:	e002      	b.n	8002478 <HAL_GPIO_Init+0x204>
 8002472:	2301      	movs	r3, #1
 8002474:	e000      	b.n	8002478 <HAL_GPIO_Init+0x204>
 8002476:	2300      	movs	r3, #0
 8002478:	69fa      	ldr	r2, [r7, #28]
 800247a:	f002 0203 	and.w	r2, r2, #3
 800247e:	0092      	lsls	r2, r2, #2
 8002480:	4093      	lsls	r3, r2
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002488:	4935      	ldr	r1, [pc, #212]	; (8002560 <HAL_GPIO_Init+0x2ec>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002496:	4b38      	ldr	r3, [pc, #224]	; (8002578 <HAL_GPIO_Init+0x304>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	43db      	mvns	r3, r3
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	4013      	ands	r3, r2
 80024a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d003      	beq.n	80024ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ba:	4a2f      	ldr	r2, [pc, #188]	; (8002578 <HAL_GPIO_Init+0x304>)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <HAL_GPIO_Init+0x304>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024e4:	4a24      	ldr	r2, [pc, #144]	; (8002578 <HAL_GPIO_Init+0x304>)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024ea:	4b23      	ldr	r3, [pc, #140]	; (8002578 <HAL_GPIO_Init+0x304>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250e:	4a1a      	ldr	r2, [pc, #104]	; (8002578 <HAL_GPIO_Init+0x304>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002514:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_GPIO_Init+0x304>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002538:	4a0f      	ldr	r2, [pc, #60]	; (8002578 <HAL_GPIO_Init+0x304>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3301      	adds	r3, #1
 8002542:	61fb      	str	r3, [r7, #28]
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	2b0f      	cmp	r3, #15
 8002548:	f67f aea2 	bls.w	8002290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40023800 	.word	0x40023800
 8002560:	40013800 	.word	0x40013800
 8002564:	40020000 	.word	0x40020000
 8002568:	40020400 	.word	0x40020400
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00
 8002574:	40021000 	.word	0x40021000
 8002578:	40013c00 	.word	0x40013c00

0800257c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691a      	ldr	r2, [r3, #16]
 800258c:	887b      	ldrh	r3, [r7, #2]
 800258e:	4013      	ands	r3, r2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
 8002598:	e001      	b.n	800259e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800259e:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025ea:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	88fb      	ldrh	r3, [r7, #6]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d006      	beq.n	8002604 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025f6:	4a05      	ldr	r2, [pc, #20]	; (800260c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe f8c4 	bl	800078c <HAL_GPIO_EXTI_Callback>
  }
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40013c00 	.word	0x40013c00

08002610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e12b      	b.n	800287a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7ff f826 	bl	8001688 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2224      	movs	r2, #36	; 0x24
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002674:	f000 fd80 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8002678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	4a81      	ldr	r2, [pc, #516]	; (8002884 <HAL_I2C_Init+0x274>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d807      	bhi.n	8002694 <HAL_I2C_Init+0x84>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a80      	ldr	r2, [pc, #512]	; (8002888 <HAL_I2C_Init+0x278>)
 8002688:	4293      	cmp	r3, r2
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	e006      	b.n	80026a2 <HAL_I2C_Init+0x92>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a7d      	ldr	r2, [pc, #500]	; (800288c <HAL_I2C_Init+0x27c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	bf94      	ite	ls
 800269c:	2301      	movls	r3, #1
 800269e:	2300      	movhi	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0e7      	b.n	800287a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a78      	ldr	r2, [pc, #480]	; (8002890 <HAL_I2C_Init+0x280>)
 80026ae:	fba2 2303 	umull	r2, r3, r2, r3
 80026b2:	0c9b      	lsrs	r3, r3, #18
 80026b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68ba      	ldr	r2, [r7, #8]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	4a6a      	ldr	r2, [pc, #424]	; (8002884 <HAL_I2C_Init+0x274>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d802      	bhi.n	80026e4 <HAL_I2C_Init+0xd4>
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3301      	adds	r3, #1
 80026e2:	e009      	b.n	80026f8 <HAL_I2C_Init+0xe8>
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_I2C_Init+0x284>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	099b      	lsrs	r3, r3, #6
 80026f6:	3301      	adds	r3, #1
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	430b      	orrs	r3, r1
 80026fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800270a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	495c      	ldr	r1, [pc, #368]	; (8002884 <HAL_I2C_Init+0x274>)
 8002714:	428b      	cmp	r3, r1
 8002716:	d819      	bhi.n	800274c <HAL_I2C_Init+0x13c>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	1e59      	subs	r1, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fbb1 f3f3 	udiv	r3, r1, r3
 8002726:	1c59      	adds	r1, r3, #1
 8002728:	f640 73fc 	movw	r3, #4092	; 0xffc
 800272c:	400b      	ands	r3, r1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_I2C_Init+0x138>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1e59      	subs	r1, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002740:	3301      	adds	r3, #1
 8002742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002746:	e051      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 8002748:	2304      	movs	r3, #4
 800274a:	e04f      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d111      	bne.n	8002778 <HAL_I2C_Init+0x168>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	440b      	add	r3, r1
 8002762:	fbb0 f3f3 	udiv	r3, r0, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e012      	b.n	800279e <HAL_I2C_Init+0x18e>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1e58      	subs	r0, r3, #1
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	0099      	lsls	r1, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	fbb0 f3f3 	udiv	r3, r0, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_I2C_Init+0x196>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e022      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10e      	bne.n	80027cc <HAL_I2C_Init+0x1bc>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1e58      	subs	r0, r3, #1
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	440b      	add	r3, r1
 80027bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80027c0:	3301      	adds	r3, #1
 80027c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ca:	e00f      	b.n	80027ec <HAL_I2C_Init+0x1dc>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1e58      	subs	r0, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6859      	ldr	r1, [r3, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	0099      	lsls	r1, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e2:	3301      	adds	r3, #1
 80027e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	6809      	ldr	r1, [r1, #0]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800281a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6911      	ldr	r1, [r2, #16]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	68d2      	ldr	r2, [r2, #12]
 8002826:	4311      	orrs	r1, r2
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	430b      	orrs	r3, r1
 800282e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f042 0201 	orr.w	r2, r2, #1
 800285a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	000186a0 	.word	0x000186a0
 8002888:	001e847f 	.word	0x001e847f
 800288c:	003d08ff 	.word	0x003d08ff
 8002890:	431bde83 	.word	0x431bde83
 8002894:	10624dd3 	.word	0x10624dd3

08002898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e267      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d075      	beq.n	80029a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028b6:	4b88      	ldr	r3, [pc, #544]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d00c      	beq.n	80028dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b85      	ldr	r3, [pc, #532]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d112      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ce:	4b82      	ldr	r3, [pc, #520]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028da:	d10b      	bne.n	80028f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028dc:	4b7e      	ldr	r3, [pc, #504]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d05b      	beq.n	80029a0 <HAL_RCC_OscConfig+0x108>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d157      	bne.n	80029a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e242      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0x74>
 80028fe:	4b76      	ldr	r3, [pc, #472]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a75      	ldr	r2, [pc, #468]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	e01d      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x98>
 8002916:	4b70      	ldr	r3, [pc, #448]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a6f      	ldr	r2, [pc, #444]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800291c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	4b6d      	ldr	r3, [pc, #436]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a6c      	ldr	r2, [pc, #432]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0xb0>
 8002930:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a68      	ldr	r2, [pc, #416]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	4b66      	ldr	r3, [pc, #408]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a65      	ldr	r2, [pc, #404]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d013      	beq.n	8002978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7ff fabc 	bl	8001ecc <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fab8 	bl	8001ecc <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e207      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0f0      	beq.n	8002958 <HAL_RCC_OscConfig+0xc0>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002978:	f7ff faa8 	bl	8001ecc <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002980:	f7ff faa4 	bl	8001ecc <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1f3      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002992:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f0      	bne.n	8002980 <HAL_RCC_OscConfig+0xe8>
 800299e:	e000      	b.n	80029a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d063      	beq.n	8002a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ae:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b47      	ldr	r3, [pc, #284]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d11c      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c6:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d005      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d001      	beq.n	80029ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e1c7      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ea:	4b3b      	ldr	r3, [pc, #236]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4937      	ldr	r1, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fe:	e03a      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d020      	beq.n	8002a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a08:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0e:	f7ff fa5d 	bl	8001ecc <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a16:	f7ff fa59 	bl	8001ecc <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1a8      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a28:	4b2b      	ldr	r3, [pc, #172]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b28      	ldr	r3, [pc, #160]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4925      	ldr	r1, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
 8002a48:	e015      	b.n	8002a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a4a:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x244>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7ff fa3c 	bl	8001ecc <HAL_GetTick>
 8002a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a56:	e008      	b.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a58:	f7ff fa38 	bl	8001ecc <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e187      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f0      	bne.n	8002a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d036      	beq.n	8002af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d016      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff fa1c 	bl	8001ecc <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a98:	f7ff fa18 	bl	8001ecc <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e167      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCC_OscConfig+0x240>)
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f0      	beq.n	8002a98 <HAL_RCC_OscConfig+0x200>
 8002ab6:	e01b      	b.n	8002af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab8:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_RCC_OscConfig+0x248>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7ff fa05 	bl	8001ecc <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac4:	e00e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac6:	f7ff fa01 	bl	8001ecc <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d907      	bls.n	8002ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e150      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	42470000 	.word	0x42470000
 8002ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae4:	4b88      	ldr	r3, [pc, #544]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1ea      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f000 8097 	beq.w	8002c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afe:	2300      	movs	r3, #0
 8002b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b02:	4b81      	ldr	r3, [pc, #516]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10f      	bne.n	8002b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b7d      	ldr	r3, [pc, #500]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a7c      	ldr	r2, [pc, #496]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b7a      	ldr	r3, [pc, #488]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2e:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b3a:	4b74      	ldr	r3, [pc, #464]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a73      	ldr	r2, [pc, #460]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b46:	f7ff f9c1 	bl	8001ecc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4e:	f7ff f9bd 	bl	8001ecc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e10c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_OscConfig+0x474>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x2ea>
 8002b74:	4b64      	ldr	r3, [pc, #400]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a63      	ldr	r2, [pc, #396]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e01c      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x30c>
 8002b8a:	4b5f      	ldr	r3, [pc, #380]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	4a5e      	ldr	r2, [pc, #376]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b90:	f043 0304 	orr.w	r3, r3, #4
 8002b94:	6713      	str	r3, [r2, #112]	; 0x70
 8002b96:	4b5c      	ldr	r3, [pc, #368]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b9a:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0x324>
 8002ba4:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba8:	4a57      	ldr	r2, [pc, #348]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb0:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a54      	ldr	r2, [pc, #336]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002bb6:	f023 0304 	bic.w	r3, r3, #4
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d015      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff f982 	bl	8001ecc <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	e00a      	b.n	8002be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bcc:	f7ff f97e 	bl	8001ecc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e0cb      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	4b49      	ldr	r3, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0ee      	beq.n	8002bcc <HAL_RCC_OscConfig+0x334>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff f96c 	bl	8001ecc <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f968 	bl	8001ecc <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e0b5      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ee      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c20:	4b39      	ldr	r3, [pc, #228]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	4a38      	ldr	r2, [pc, #224]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 80a1 	beq.w	8002d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c36:	4b34      	ldr	r3, [pc, #208]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d05c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d141      	bne.n	8002cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c4a:	4b31      	ldr	r3, [pc, #196]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c50:	f7ff f93c 	bl	8001ecc <HAL_GetTick>
 8002c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7ff f938 	bl	8001ecc <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e087      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69da      	ldr	r2, [r3, #28]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	019b      	lsls	r3, r3, #6
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	431a      	orrs	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c98:	061b      	lsls	r3, r3, #24
 8002c9a:	491b      	ldr	r1, [pc, #108]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca0:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7ff f911 	bl	8001ecc <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7ff f90d 	bl	8001ecc <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e05c      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x416>
 8002ccc:	e054      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_RCC_OscConfig+0x478>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7ff f8fa 	bl	8001ecc <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7ff f8f6 	bl	8001ecc <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e045      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <HAL_RCC_OscConfig+0x470>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0x444>
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e038      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	40007000 	.word	0x40007000
 8002d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x4ec>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d028      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d121      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d11a      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d44:	4013      	ands	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d111      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5a:	085b      	lsrs	r3, r3, #1
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e0cc      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d90c      	bls.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002daa:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0b8      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0304 	and.w	r3, r3, #4
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ddc:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	4a58      	ldr	r2, [pc, #352]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df4:	4b53      	ldr	r3, [pc, #332]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	4a52      	ldr	r2, [pc, #328]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e00:	4b50      	ldr	r3, [pc, #320]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	494d      	ldr	r1, [pc, #308]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d044      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e26:	4b47      	ldr	r3, [pc, #284]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d119      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e07f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d003      	beq.n	8002e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e46:	4b3f      	ldr	r3, [pc, #252]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e06f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e56:	4b3b      	ldr	r3, [pc, #236]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e067      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e66:	4b37      	ldr	r3, [pc, #220]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f023 0203 	bic.w	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4934      	ldr	r1, [pc, #208]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e78:	f7ff f828 	bl	8001ecc <HAL_GetTick>
 8002e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7e:	e00a      	b.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e80:	f7ff f824 	bl	8001ecc <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e04f      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	4b2b      	ldr	r3, [pc, #172]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 020c 	and.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1eb      	bne.n	8002e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b25      	ldr	r3, [pc, #148]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d20c      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d001      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e032      	b.n	8002f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d008      	beq.n	8002eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002edc:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4916      	ldr	r1, [pc, #88]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d009      	beq.n	8002f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efa:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f0e:	f000 f821 	bl	8002f54 <HAL_RCC_GetSysClockFreq>
 8002f12:	4602      	mov	r2, r0
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	5ccb      	ldrb	r3, [r1, r3]
 8002f22:	fa22 f303 	lsr.w	r3, r2, r3
 8002f26:	4a09      	ldr	r2, [pc, #36]	; (8002f4c <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe ff88 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00
 8002f44:	40023800 	.word	0x40023800
 8002f48:	08006bc8 	.word	0x08006bc8
 8002f4c:	2000000c 	.word	0x2000000c
 8002f50:	20000010 	.word	0x20000010

08002f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f58:	b094      	sub	sp, #80	; 0x50
 8002f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002f60:	2300      	movs	r3, #0
 8002f62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f6c:	4b79      	ldr	r3, [pc, #484]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 030c 	and.w	r3, r3, #12
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	d00d      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x40>
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	f200 80e1 	bhi.w	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x34>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002f86:	e0db      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f88:	4b73      	ldr	r3, [pc, #460]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f8c:	e0db      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8e:	4b73      	ldr	r3, [pc, #460]	; (800315c <HAL_RCC_GetSysClockFreq+0x208>)
 8002f90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f92:	e0d8      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f94:	4b6f      	ldr	r3, [pc, #444]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9e:	4b6d      	ldr	r3, [pc, #436]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002faa:	4b6a      	ldr	r3, [pc, #424]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	099b      	lsrs	r3, r3, #6
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	462b      	mov	r3, r5
 8002fca:	f04f 0000 	mov.w	r0, #0
 8002fce:	f04f 0100 	mov.w	r1, #0
 8002fd2:	0159      	lsls	r1, r3, #5
 8002fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd8:	0150      	lsls	r0, r2, #5
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4621      	mov	r1, r4
 8002fe0:	1a51      	subs	r1, r2, r1
 8002fe2:	6139      	str	r1, [r7, #16]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff8:	4659      	mov	r1, fp
 8002ffa:	018b      	lsls	r3, r1, #6
 8002ffc:	4651      	mov	r1, sl
 8002ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003002:	4651      	mov	r1, sl
 8003004:	018a      	lsls	r2, r1, #6
 8003006:	4651      	mov	r1, sl
 8003008:	ebb2 0801 	subs.w	r8, r2, r1
 800300c:	4659      	mov	r1, fp
 800300e:	eb63 0901 	sbc.w	r9, r3, r1
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003026:	4690      	mov	r8, r2
 8003028:	4699      	mov	r9, r3
 800302a:	4623      	mov	r3, r4
 800302c:	eb18 0303 	adds.w	r3, r8, r3
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	462b      	mov	r3, r5
 8003034:	eb49 0303 	adc.w	r3, r9, r3
 8003038:	60fb      	str	r3, [r7, #12]
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003046:	4629      	mov	r1, r5
 8003048:	024b      	lsls	r3, r1, #9
 800304a:	4621      	mov	r1, r4
 800304c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003050:	4621      	mov	r1, r4
 8003052:	024a      	lsls	r2, r1, #9
 8003054:	4610      	mov	r0, r2
 8003056:	4619      	mov	r1, r3
 8003058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305a:	2200      	movs	r2, #0
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 800305e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003064:	f7fd f8b8 	bl	80001d8 <__aeabi_uldivmod>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4613      	mov	r3, r2
 800306e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003070:	e058      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003072:	4b38      	ldr	r3, [pc, #224]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	099b      	lsrs	r3, r3, #6
 8003078:	2200      	movs	r2, #0
 800307a:	4618      	mov	r0, r3
 800307c:	4611      	mov	r1, r2
 800307e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003082:	623b      	str	r3, [r7, #32]
 8003084:	2300      	movs	r3, #0
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
 8003088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800308c:	4642      	mov	r2, r8
 800308e:	464b      	mov	r3, r9
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	0159      	lsls	r1, r3, #5
 800309a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309e:	0150      	lsls	r0, r2, #5
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4641      	mov	r1, r8
 80030a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80030aa:	4649      	mov	r1, r9
 80030ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c4:	ebb2 040a 	subs.w	r4, r2, sl
 80030c8:	eb63 050b 	sbc.w	r5, r3, fp
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	00eb      	lsls	r3, r5, #3
 80030d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030da:	00e2      	lsls	r2, r4, #3
 80030dc:	4614      	mov	r4, r2
 80030de:	461d      	mov	r5, r3
 80030e0:	4643      	mov	r3, r8
 80030e2:	18e3      	adds	r3, r4, r3
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	464b      	mov	r3, r9
 80030e8:	eb45 0303 	adc.w	r3, r5, r3
 80030ec:	607b      	str	r3, [r7, #4]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030fa:	4629      	mov	r1, r5
 80030fc:	028b      	lsls	r3, r1, #10
 80030fe:	4621      	mov	r1, r4
 8003100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003104:	4621      	mov	r1, r4
 8003106:	028a      	lsls	r2, r1, #10
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800310e:	2200      	movs	r2, #0
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	61fa      	str	r2, [r7, #28]
 8003114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003118:	f7fd f85e 	bl	80001d8 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <HAL_RCC_GetSysClockFreq+0x200>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	f003 0303 	and.w	r3, r3, #3
 800312e:	3301      	adds	r3, #1
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003138:	fbb2 f3f3 	udiv	r3, r2, r3
 800313c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800313e:	e002      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003140:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetSysClockFreq+0x204>)
 8003142:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003148:	4618      	mov	r0, r3
 800314a:	3750      	adds	r7, #80	; 0x50
 800314c:	46bd      	mov	sp, r7
 800314e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003152:	bf00      	nop
 8003154:	40023800 	.word	0x40023800
 8003158:	00f42400 	.word	0x00f42400
 800315c:	007a1200 	.word	0x007a1200

08003160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003164:	4b03      	ldr	r3, [pc, #12]	; (8003174 <HAL_RCC_GetHCLKFreq+0x14>)
 8003166:	681b      	ldr	r3, [r3, #0]
}
 8003168:	4618      	mov	r0, r3
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	2000000c 	.word	0x2000000c

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800317c:	f7ff fff0 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b05      	ldr	r3, [pc, #20]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	0a9b      	lsrs	r3, r3, #10
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4903      	ldr	r1, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40023800 	.word	0x40023800
 800319c:	08006bd8 	.word	0x08006bd8

080031a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031a4:	f7ff ffdc 	bl	8003160 <HAL_RCC_GetHCLKFreq>
 80031a8:	4602      	mov	r2, r0
 80031aa:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	0b5b      	lsrs	r3, r3, #13
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	4903      	ldr	r1, [pc, #12]	; (80031c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b6:	5ccb      	ldrb	r3, [r1, r3]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40023800 	.word	0x40023800
 80031c4:	08006bd8 	.word	0x08006bd8

080031c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d105      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d038      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031f0:	4b68      	ldr	r3, [pc, #416]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031f6:	f7fe fe69 	bl	8001ecc <HAL_GetTick>
 80031fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031fe:	f7fe fe65 	bl	8001ecc <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e0bd      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003210:	4b61      	ldr	r3, [pc, #388]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1f0      	bne.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	019b      	lsls	r3, r3, #6
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	071b      	lsls	r3, r3, #28
 800322e:	495a      	ldr	r1, [pc, #360]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003236:	4b57      	ldr	r3, [pc, #348]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800323c:	f7fe fe46 	bl	8001ecc <HAL_GetTick>
 8003240:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003244:	f7fe fe42 	bl	8001ecc <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e09a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003256:	4b50      	ldr	r3, [pc, #320]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 8083 	beq.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a47      	ldr	r2, [pc, #284]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b45      	ldr	r3, [pc, #276]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800328c:	4b43      	ldr	r3, [pc, #268]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a42      	ldr	r2, [pc, #264]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003296:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003298:	f7fe fe18 	bl	8001ecc <HAL_GetTick>
 800329c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fe fe14 	bl	8001ecc <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e06c      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032b2:	4b3a      	ldr	r3, [pc, #232]	; (800339c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032be:	4b36      	ldr	r3, [pc, #216]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d02f      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d028      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032dc:	4b2e      	ldr	r3, [pc, #184]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032e6:	4b2e      	ldr	r3, [pc, #184]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032f2:	4a29      	ldr	r2, [pc, #164]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032f8:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d114      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003304:	f7fe fde2 	bl	8001ecc <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330a:	e00a      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330c:	f7fe fdde 	bl	8001ecc <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	f241 3288 	movw	r2, #5000	; 0x1388
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e034      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	4b1d      	ldr	r3, [pc, #116]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0ee      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800333a:	d10d      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	4911      	ldr	r1, [pc, #68]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003358:	4b0f      	ldr	r3, [pc, #60]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	4a0e      	ldr	r2, [pc, #56]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003362:	6093      	str	r3, [r2, #8]
 8003364:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003370:	4909      	ldr	r1, [pc, #36]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003372:	4313      	orrs	r3, r2
 8003374:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7d1a      	ldrb	r2, [r3, #20]
 8003386:	4b07      	ldr	r3, [pc, #28]	; (80033a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003388:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	42470068 	.word	0x42470068
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470e40 	.word	0x42470e40
 80033a4:	424711e0 	.word	0x424711e0

080033a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e066      	b.n	800348c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	7f5b      	ldrb	r3, [r3, #29]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d105      	bne.n	80033d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe f9a2 	bl	8001718 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	22ca      	movs	r2, #202	; 0xca
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2253      	movs	r2, #83	; 0x53
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f998 	bl	8003720 <RTC_EnterInitMode>
 80033f0:	4603      	mov	r3, r0
 80033f2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d12c      	bne.n	8003454 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003408:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6899      	ldr	r1, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68d2      	ldr	r2, [r2, #12]
 8003434:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6919      	ldr	r1, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	041a      	lsls	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f99f 	bl	800378e <RTC_ExitInitMode>
 8003450:	4603      	mov	r3, r0
 8003452:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d113      	bne.n	8003482 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699a      	ldr	r2, [r3, #24]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	22ff      	movs	r2, #255	; 0xff
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	7f1b      	ldrb	r3, [r3, #28]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_RTC_SetTime+0x1c>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e087      	b.n	80035c0 <HAL_RTC_SetTime+0x12c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2202      	movs	r2, #2
 80034ba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d126      	bne.n	8003510 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d102      	bne.n	80034d6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2200      	movs	r2, #0
 80034d4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f97c 	bl	80037d8 <RTC_ByteToBcd2>
 80034e0:	4603      	mov	r3, r0
 80034e2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	785b      	ldrb	r3, [r3, #1]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f975 	bl	80037d8 <RTC_ByteToBcd2>
 80034ee:	4603      	mov	r3, r0
 80034f0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034f2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	789b      	ldrb	r3, [r3, #2]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f96d 	bl	80037d8 <RTC_ByteToBcd2>
 80034fe:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003500:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	78db      	ldrb	r3, [r3, #3]
 8003508:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800350a:	4313      	orrs	r3, r2
 800350c:	617b      	str	r3, [r7, #20]
 800350e:	e018      	b.n	8003542 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d102      	bne.n	8003524 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	785b      	ldrb	r3, [r3, #1]
 800352e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003530:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003536:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	78db      	ldrb	r3, [r3, #3]
 800353c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	22ca      	movs	r2, #202	; 0xca
 8003548:	625a      	str	r2, [r3, #36]	; 0x24
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2253      	movs	r2, #83	; 0x53
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f8e4 	bl	8003720 <RTC_EnterInitMode>
 8003558:	4603      	mov	r3, r0
 800355a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d120      	bne.n	80035a4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800356c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003570:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003580:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6899      	ldr	r1, [r3, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	431a      	orrs	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f8f7 	bl	800378e <RTC_ExitInitMode>
 80035a0:	4603      	mov	r3, r0
 80035a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	22ff      	movs	r2, #255	; 0xff
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	771a      	strb	r2, [r3, #28]

  return status;
 80035be:	7cfb      	ldrb	r3, [r7, #19]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	371c      	adds	r7, #28
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd90      	pop	{r4, r7, pc}

080035c8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	7f1b      	ldrb	r3, [r3, #28]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_RTC_SetDate+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e071      	b.n	80036c8 <HAL_RTC_SetDate+0x100>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10e      	bne.n	8003614 <HAL_RTC_SetDate+0x4c>
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	785b      	ldrb	r3, [r3, #1]
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	f023 0310 	bic.w	r3, r3, #16
 800360a:	b2db      	uxtb	r3, r3
 800360c:	330a      	adds	r3, #10
 800360e:	b2da      	uxtb	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d11c      	bne.n	8003654 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	78db      	ldrb	r3, [r3, #3]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 f8da 	bl	80037d8 <RTC_ByteToBcd2>
 8003624:	4603      	mov	r3, r0
 8003626:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	785b      	ldrb	r3, [r3, #1]
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f8d3 	bl	80037d8 <RTC_ByteToBcd2>
 8003632:	4603      	mov	r3, r0
 8003634:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003636:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	789b      	ldrb	r3, [r3, #2]
 800363c:	4618      	mov	r0, r3
 800363e:	f000 f8cb 	bl	80037d8 <RTC_ByteToBcd2>
 8003642:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003644:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800364e:	4313      	orrs	r3, r2
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e00e      	b.n	8003672 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	78db      	ldrb	r3, [r3, #3]
 8003658:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003660:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003666:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	22ca      	movs	r2, #202	; 0xca
 8003678:	625a      	str	r2, [r3, #36]	; 0x24
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2253      	movs	r2, #83	; 0x53
 8003680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003682:	68f8      	ldr	r0, [r7, #12]
 8003684:	f000 f84c 	bl	8003720 <RTC_EnterInitMode>
 8003688:	4603      	mov	r3, r0
 800368a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80036a0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f873 	bl	800378e <RTC_ExitInitMode>
 80036a8:	4603      	mov	r3, r0
 80036aa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	771a      	strb	r2, [r3, #28]

  return status;
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	371c      	adds	r7, #28
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd90      	pop	{r4, r7, pc}

080036d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036ea:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036ec:	f7fe fbee 	bl	8001ecc <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036f2:	e009      	b.n	8003708 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036f4:	f7fe fbea 	bl	8001ecc <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003702:	d901      	bls.n	8003708 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e007      	b.n	8003718 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0320 	and.w	r3, r3, #32
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0ee      	beq.n	80036f4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800372c:	2300      	movs	r3, #0
 800372e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d122      	bne.n	8003784 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800374c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800374e:	f7fe fbbd 	bl	8001ecc <HAL_GetTick>
 8003752:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003754:	e00c      	b.n	8003770 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003756:	f7fe fbb9 	bl	8001ecc <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003764:	d904      	bls.n	8003770 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2204      	movs	r2, #4
 800376a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <RTC_EnterInitMode+0x64>
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d1e8      	bne.n	8003756 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7ff ff89 	bl	80036d0 <HAL_RTC_WaitForSynchro>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d004      	beq.n	80037ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2204      	movs	r2, #4
 80037c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80037e6:	e005      	b.n	80037f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	3301      	adds	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	3b0a      	subs	r3, #10
 80037f2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80037f4:	79fb      	ldrb	r3, [r7, #7]
 80037f6:	2b09      	cmp	r3, #9
 80037f8:	d8f6      	bhi.n	80037e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4313      	orrs	r3, r2
 8003804:	b2db      	uxtb	r3, r3
}
 8003806:	4618      	mov	r0, r3
 8003808:	3714      	adds	r7, #20
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e041      	b.n	80038a8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fd ff99 	bl	8001770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3304      	adds	r3, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4610      	mov	r0, r2
 8003852:	f000 ff91 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d001      	beq.n	80038c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e044      	b.n	8003952 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_TIM_Base_Start_IT+0xb0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d013      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a1a      	ldr	r2, [pc, #104]	; (8003964 <HAL_TIM_Base_Start_IT+0xb4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_Base_Start_IT+0xb8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_TIM_Base_Start_IT+0xbc>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x6c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_TIM_Base_Start_IT+0xc0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d111      	bne.n	8003940 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b06      	cmp	r3, #6
 800392c:	d010      	beq.n	8003950 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f042 0201 	orr.w	r2, r2, #1
 800393c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800393e:	e007      	b.n	8003950 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0201 	orr.w	r2, r2, #1
 800394e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40010000 	.word	0x40010000
 8003964:	40000400 	.word	0x40000400
 8003968:	40000800 	.word	0x40000800
 800396c:	40000c00 	.word	0x40000c00
 8003970:	40014000 	.word	0x40014000

08003974 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e041      	b.n	8003a0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7fd ff7a 	bl	8001894 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	4619      	mov	r1, r3
 80039b2:	4610      	mov	r0, r2
 80039b4:	f000 fee0 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start+0x24>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e022      	b.n	8003a7e <HAL_TIM_PWM_Start+0x6a>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d109      	bne.n	8003a52 <HAL_TIM_PWM_Start+0x3e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	bf14      	ite	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	2300      	moveq	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	e015      	b.n	8003a7e <HAL_TIM_PWM_Start+0x6a>
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d109      	bne.n	8003a6c <HAL_TIM_PWM_Start+0x58>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	bf14      	ite	ne
 8003a64:	2301      	movne	r3, #1
 8003a66:	2300      	moveq	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	e008      	b.n	8003a7e <HAL_TIM_PWM_Start+0x6a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e068      	b.n	8003b58 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start+0x82>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a94:	e013      	b.n	8003abe <HAL_TIM_PWM_Start+0xaa>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0x92>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003aa4:	e00b      	b.n	8003abe <HAL_TIM_PWM_Start+0xaa>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0xa2>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ab4:	e003      	b.n	8003abe <HAL_TIM_PWM_Start+0xaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	6839      	ldr	r1, [r7, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fa1a 	bl	8004f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <HAL_TIM_PWM_Start+0x14c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d107      	bne.n	8003ae6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <HAL_TIM_PWM_Start+0x14c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d018      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x10e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af8:	d013      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x10e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a19      	ldr	r2, [pc, #100]	; (8003b64 <HAL_TIM_PWM_Start+0x150>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x10e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a17      	ldr	r2, [pc, #92]	; (8003b68 <HAL_TIM_PWM_Start+0x154>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x10e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <HAL_TIM_PWM_Start+0x158>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x10e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a14      	ldr	r2, [pc, #80]	; (8003b70 <HAL_TIM_PWM_Start+0x15c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d111      	bne.n	8003b46 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d010      	beq.n	8003b56 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	e007      	b.n	8003b56 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f042 0201 	orr.w	r2, r2, #1
 8003b54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40010000 	.word	0x40010000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40000c00 	.word	0x40000c00
 8003b70:	40014000 	.word	0x40014000

08003b74 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d109      	bne.n	8003b9c <HAL_TIM_PWM_Start_IT+0x28>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	e022      	b.n	8003be2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	2b04      	cmp	r3, #4
 8003ba0:	d109      	bne.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x42>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	bf14      	ite	ne
 8003bae:	2301      	movne	r3, #1
 8003bb0:	2300      	moveq	r3, #0
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	e015      	b.n	8003be2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d109      	bne.n	8003bd0 <HAL_TIM_PWM_Start_IT+0x5c>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	bf14      	ite	ne
 8003bc8:	2301      	movne	r3, #1
 8003bca:	2300      	moveq	r3, #0
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	e008      	b.n	8003be2 <HAL_TIM_PWM_Start_IT+0x6e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	bf14      	ite	ne
 8003bdc:	2301      	movne	r3, #1
 8003bde:	2300      	moveq	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0b3      	b.n	8003d52 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d104      	bne.n	8003bfa <HAL_TIM_PWM_Start_IT+0x86>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bf8:	e013      	b.n	8003c22 <HAL_TIM_PWM_Start_IT+0xae>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d104      	bne.n	8003c0a <HAL_TIM_PWM_Start_IT+0x96>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c08:	e00b      	b.n	8003c22 <HAL_TIM_PWM_Start_IT+0xae>
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d104      	bne.n	8003c1a <HAL_TIM_PWM_Start_IT+0xa6>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c18:	e003      	b.n	8003c22 <HAL_TIM_PWM_Start_IT+0xae>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	d841      	bhi.n	8003cac <HAL_TIM_PWM_Start_IT+0x138>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003c65 	.word	0x08003c65
 8003c34:	08003cad 	.word	0x08003cad
 8003c38:	08003cad 	.word	0x08003cad
 8003c3c:	08003cad 	.word	0x08003cad
 8003c40:	08003c77 	.word	0x08003c77
 8003c44:	08003cad 	.word	0x08003cad
 8003c48:	08003cad 	.word	0x08003cad
 8003c4c:	08003cad 	.word	0x08003cad
 8003c50:	08003c89 	.word	0x08003c89
 8003c54:	08003cad 	.word	0x08003cad
 8003c58:	08003cad 	.word	0x08003cad
 8003c5c:	08003cad 	.word	0x08003cad
 8003c60:	08003c9b 	.word	0x08003c9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68da      	ldr	r2, [r3, #12]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0202 	orr.w	r2, r2, #2
 8003c72:	60da      	str	r2, [r3, #12]
      break;
 8003c74:	e01d      	b.n	8003cb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f042 0204 	orr.w	r2, r2, #4
 8003c84:	60da      	str	r2, [r3, #12]
      break;
 8003c86:	e014      	b.n	8003cb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0208 	orr.w	r2, r2, #8
 8003c96:	60da      	str	r2, [r3, #12]
      break;
 8003c98:	e00b      	b.n	8003cb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0210 	orr.w	r2, r2, #16
 8003ca8:	60da      	str	r2, [r3, #12]
      break;
 8003caa:	e002      	b.n	8003cb2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003cb2:	7bfb      	ldrb	r3, [r7, #15]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d14b      	bne.n	8003d50 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	6839      	ldr	r1, [r7, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 f91d 	bl	8004f00 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a24      	ldr	r2, [pc, #144]	; (8003d5c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d107      	bne.n	8003ce0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cde:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d018      	beq.n	8003d1c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cf2:	d013      	beq.n	8003d1c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a19      	ldr	r2, [pc, #100]	; (8003d60 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00e      	beq.n	8003d1c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a18      	ldr	r2, [pc, #96]	; (8003d64 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d009      	beq.n	8003d1c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d004      	beq.n	8003d1c <HAL_TIM_PWM_Start_IT+0x1a8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a15      	ldr	r2, [pc, #84]	; (8003d6c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d111      	bne.n	8003d40 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0307 	and.w	r3, r3, #7
 8003d26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b06      	cmp	r3, #6
 8003d2c:	d010      	beq.n	8003d50 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3e:	e007      	b.n	8003d50 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40000400 	.word	0x40000400
 8003d64:	40000800 	.word	0x40000800
 8003d68:	40000c00 	.word	0x40000c00
 8003d6c:	40014000 	.word	0x40014000

08003d70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e041      	b.n	8003e06 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f839 	bl	8003e0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fce2 	bl	8004778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
	...

08003e24 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_TIM_IC_Start_IT+0x1e>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	e013      	b.n	8003e6a <HAL_TIM_IC_Start_IT+0x46>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b04      	cmp	r3, #4
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_IC_Start_IT+0x2e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	e00b      	b.n	8003e6a <HAL_TIM_IC_Start_IT+0x46>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_IC_Start_IT+0x3e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	e003      	b.n	8003e6a <HAL_TIM_IC_Start_IT+0x46>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <HAL_TIM_IC_Start_IT+0x58>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	e013      	b.n	8003ea4 <HAL_TIM_IC_Start_IT+0x80>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d104      	bne.n	8003e8c <HAL_TIM_IC_Start_IT+0x68>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e00b      	b.n	8003ea4 <HAL_TIM_IC_Start_IT+0x80>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d104      	bne.n	8003e9c <HAL_TIM_IC_Start_IT+0x78>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	e003      	b.n	8003ea4 <HAL_TIM_IC_Start_IT+0x80>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ea6:	7bbb      	ldrb	r3, [r7, #14]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d102      	bne.n	8003eb2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003eac:	7b7b      	ldrb	r3, [r7, #13]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d001      	beq.n	8003eb6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0c2      	b.n	800403c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <HAL_TIM_IC_Start_IT+0xa2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ec4:	e013      	b.n	8003eee <HAL_TIM_IC_Start_IT+0xca>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_IC_Start_IT+0xb2>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ed4:	e00b      	b.n	8003eee <HAL_TIM_IC_Start_IT+0xca>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b08      	cmp	r3, #8
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_IC_Start_IT+0xc2>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ee4:	e003      	b.n	8003eee <HAL_TIM_IC_Start_IT+0xca>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_TIM_IC_Start_IT+0xda>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2202      	movs	r2, #2
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	e013      	b.n	8003f26 <HAL_TIM_IC_Start_IT+0x102>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d104      	bne.n	8003f0e <HAL_TIM_IC_Start_IT+0xea>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f0c:	e00b      	b.n	8003f26 <HAL_TIM_IC_Start_IT+0x102>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d104      	bne.n	8003f1e <HAL_TIM_IC_Start_IT+0xfa>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f1c:	e003      	b.n	8003f26 <HAL_TIM_IC_Start_IT+0x102>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2202      	movs	r2, #2
 8003f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b0c      	cmp	r3, #12
 8003f2a:	d841      	bhi.n	8003fb0 <HAL_TIM_IC_Start_IT+0x18c>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <HAL_TIM_IC_Start_IT+0x110>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f69 	.word	0x08003f69
 8003f38:	08003fb1 	.word	0x08003fb1
 8003f3c:	08003fb1 	.word	0x08003fb1
 8003f40:	08003fb1 	.word	0x08003fb1
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003fb1 	.word	0x08003fb1
 8003f50:	08003fb1 	.word	0x08003fb1
 8003f54:	08003f8d 	.word	0x08003f8d
 8003f58:	08003fb1 	.word	0x08003fb1
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003fb1 	.word	0x08003fb1
 8003f64:	08003f9f 	.word	0x08003f9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0202 	orr.w	r2, r2, #2
 8003f76:	60da      	str	r2, [r3, #12]
      break;
 8003f78:	e01d      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0204 	orr.w	r2, r2, #4
 8003f88:	60da      	str	r2, [r3, #12]
      break;
 8003f8a:	e014      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0208 	orr.w	r2, r2, #8
 8003f9a:	60da      	str	r2, [r3, #12]
      break;
 8003f9c:	e00b      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0210 	orr.w	r2, r2, #16
 8003fac:	60da      	str	r2, [r3, #12]
      break;
 8003fae:	e002      	b.n	8003fb6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003fb6:	7bfb      	ldrb	r3, [r7, #15]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d13e      	bne.n	800403a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 ff9b 	bl	8004f00 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <HAL_TIM_IC_Start_IT+0x220>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d018      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0x1e2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d013      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0x1e2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_TIM_IC_Start_IT+0x224>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00e      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0x1e2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a17      	ldr	r2, [pc, #92]	; (800404c <HAL_TIM_IC_Start_IT+0x228>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d009      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0x1e2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_TIM_IC_Start_IT+0x22c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d004      	beq.n	8004006 <HAL_TIM_IC_Start_IT+0x1e2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <HAL_TIM_IC_Start_IT+0x230>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d111      	bne.n	800402a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b06      	cmp	r3, #6
 8004016:	d010      	beq.n	800403a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	e007      	b.n	800403a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40010000 	.word	0x40010000
 8004048:	40000400 	.word	0x40000400
 800404c:	40000800 	.word	0x40000800
 8004050:	40000c00 	.word	0x40000c00
 8004054:	40014000 	.word	0x40014000

08004058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b02      	cmp	r3, #2
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0202 	mvn.w	r2, #2
 8004084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fe52 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 fb4a 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fb51 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d122      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d11b      	bne.n	8004108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0204 	mvn.w	r2, #4
 80040d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2202      	movs	r2, #2
 80040de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd fe28 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 80040f4:	e005      	b.n	8004102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 fb20 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fb27 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b08      	cmp	r3, #8
 8004114:	d122      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d11b      	bne.n	800415c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0208 	mvn.w	r2, #8
 800412c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2204      	movs	r2, #4
 8004132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	f003 0303 	and.w	r3, r3, #3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d003      	beq.n	800414a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd fdfe 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 8004148:	e005      	b.n	8004156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 faf6 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fafd 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b10      	cmp	r3, #16
 8004168:	d122      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d11b      	bne.n	80041b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0210 	mvn.w	r2, #16
 8004180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2208      	movs	r2, #8
 8004186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7fd fdd4 	bl	8001d44 <HAL_TIM_IC_CaptureCallback>
 800419c:	e005      	b.n	80041aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 facc 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fad3 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d107      	bne.n	80041dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0201 	mvn.w	r2, #1
 80041d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fc fab2 	bl	8000740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b80      	cmp	r3, #128	; 0x80
 80041e8:	d10e      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d107      	bne.n	8004208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 ff1a 	bl	800503c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d10e      	bne.n	8004234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d107      	bne.n	8004234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800422c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa98 	bl	8004764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b20      	cmp	r3, #32
 8004240:	d10e      	bne.n	8004260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0320 	and.w	r3, r3, #32
 800424c:	2b20      	cmp	r3, #32
 800424e:	d107      	bne.n	8004260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f06f 0220 	mvn.w	r2, #32
 8004258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fee4 	bl	8005028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004260:	bf00      	nop
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004282:	2302      	movs	r3, #2
 8004284:	e088      	b.n	8004398 <HAL_TIM_IC_ConfigChannel+0x130>
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d11b      	bne.n	80042cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6819      	ldr	r1, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f000 fc74 	bl	8004b90 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	699a      	ldr	r2, [r3, #24]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 020c 	bic.w	r2, r2, #12
 80042b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6999      	ldr	r1, [r3, #24]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	619a      	str	r2, [r3, #24]
 80042ca:	e060      	b.n	800438e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d11c      	bne.n	800430c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6819      	ldr	r1, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f000 fcec 	bl	8004cbe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	6999      	ldr	r1, [r3, #24]
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	021a      	lsls	r2, r3, #8
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
 800430a:	e040      	b.n	800438e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d11b      	bne.n	800434a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	f000 fd39 	bl	8004d98 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 020c 	bic.w	r2, r2, #12
 8004334:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69d9      	ldr	r1, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	61da      	str	r2, [r3, #28]
 8004348:	e021      	b.n	800438e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b0c      	cmp	r3, #12
 800434e:	d11c      	bne.n	800438a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	6819      	ldr	r1, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	685a      	ldr	r2, [r3, #4]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	f000 fd56 	bl	8004e10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69da      	ldr	r2, [r3, #28]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004372:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69d9      	ldr	r1, [r3, #28]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	021a      	lsls	r2, r3, #8
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	61da      	str	r2, [r3, #28]
 8004388:	e001      	b.n	800438e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004396:	7dfb      	ldrb	r3, [r7, #23]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e0ae      	b.n	800451c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b0c      	cmp	r3, #12
 80043ca:	f200 809f 	bhi.w	800450c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004409 	.word	0x08004409
 80043d8:	0800450d 	.word	0x0800450d
 80043dc:	0800450d 	.word	0x0800450d
 80043e0:	0800450d 	.word	0x0800450d
 80043e4:	08004449 	.word	0x08004449
 80043e8:	0800450d 	.word	0x0800450d
 80043ec:	0800450d 	.word	0x0800450d
 80043f0:	0800450d 	.word	0x0800450d
 80043f4:	0800448b 	.word	0x0800448b
 80043f8:	0800450d 	.word	0x0800450d
 80043fc:	0800450d 	.word	0x0800450d
 8004400:	0800450d 	.word	0x0800450d
 8004404:	080044cb 	.word	0x080044cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	4618      	mov	r0, r3
 8004410:	f000 fa32 	bl	8004878 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699a      	ldr	r2, [r3, #24]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0208 	orr.w	r2, r2, #8
 8004422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0204 	bic.w	r2, r2, #4
 8004432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6999      	ldr	r1, [r3, #24]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	691a      	ldr	r2, [r3, #16]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	619a      	str	r2, [r3, #24]
      break;
 8004446:	e064      	b.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68b9      	ldr	r1, [r7, #8]
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fa78 	bl	8004944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699a      	ldr	r2, [r3, #24]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6999      	ldr	r1, [r3, #24]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	021a      	lsls	r2, r3, #8
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	430a      	orrs	r2, r1
 8004486:	619a      	str	r2, [r3, #24]
      break;
 8004488:	e043      	b.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fac3 	bl	8004a1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0208 	orr.w	r2, r2, #8
 80044a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0204 	bic.w	r2, r2, #4
 80044b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69d9      	ldr	r1, [r3, #28]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	61da      	str	r2, [r3, #28]
      break;
 80044c8:	e023      	b.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fb0d 	bl	8004af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69da      	ldr	r2, [r3, #28]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69d9      	ldr	r1, [r3, #28]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	021a      	lsls	r2, r3, #8
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	61da      	str	r2, [r3, #28]
      break;
 800450a:	e002      	b.n	8004512 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	75fb      	strb	r3, [r7, #23]
      break;
 8004510:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800451a:	7dfb      	ldrb	r3, [r7, #23]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_TIM_ConfigClockSource+0x1c>
 800453c:	2302      	movs	r3, #2
 800453e:	e0b4      	b.n	80046aa <HAL_TIM_ConfigClockSource+0x186>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800455e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004566:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004578:	d03e      	beq.n	80045f8 <HAL_TIM_ConfigClockSource+0xd4>
 800457a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457e:	f200 8087 	bhi.w	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 8004582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004586:	f000 8086 	beq.w	8004696 <HAL_TIM_ConfigClockSource+0x172>
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458e:	d87f      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 8004590:	2b70      	cmp	r3, #112	; 0x70
 8004592:	d01a      	beq.n	80045ca <HAL_TIM_ConfigClockSource+0xa6>
 8004594:	2b70      	cmp	r3, #112	; 0x70
 8004596:	d87b      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 8004598:	2b60      	cmp	r3, #96	; 0x60
 800459a:	d050      	beq.n	800463e <HAL_TIM_ConfigClockSource+0x11a>
 800459c:	2b60      	cmp	r3, #96	; 0x60
 800459e:	d877      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045a0:	2b50      	cmp	r3, #80	; 0x50
 80045a2:	d03c      	beq.n	800461e <HAL_TIM_ConfigClockSource+0xfa>
 80045a4:	2b50      	cmp	r3, #80	; 0x50
 80045a6:	d873      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d058      	beq.n	800465e <HAL_TIM_ConfigClockSource+0x13a>
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d86f      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	2b30      	cmp	r3, #48	; 0x30
 80045b2:	d064      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045b4:	2b30      	cmp	r3, #48	; 0x30
 80045b6:	d86b      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d060      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045bc:	2b20      	cmp	r3, #32
 80045be:	d867      	bhi.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d05c      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045c4:	2b10      	cmp	r3, #16
 80045c6:	d05a      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x15a>
 80045c8:	e062      	b.n	8004690 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6818      	ldr	r0, [r3, #0]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f000 fc71 	bl	8004ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80045ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	609a      	str	r2, [r3, #8]
      break;
 80045f6:	e04f      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6899      	ldr	r1, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f000 fc5a 	bl	8004ec0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800461a:	609a      	str	r2, [r3, #8]
      break;
 800461c:	e03c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6818      	ldr	r0, [r3, #0]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	6859      	ldr	r1, [r3, #4]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	461a      	mov	r2, r3
 800462c:	f000 fb18 	bl	8004c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2150      	movs	r1, #80	; 0x50
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fc27 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 800463c:	e02c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	6859      	ldr	r1, [r3, #4]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	461a      	mov	r2, r3
 800464c:	f000 fb74 	bl	8004d38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2160      	movs	r1, #96	; 0x60
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fc17 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 800465c:	e01c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	6859      	ldr	r1, [r3, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	461a      	mov	r2, r3
 800466c:	f000 faf8 	bl	8004c60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2140      	movs	r1, #64	; 0x40
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fc07 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 800467c:	e00c      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f000 fbfe 	bl	8004e8a <TIM_ITRx_SetConfig>
      break;
 800468e:	e003      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	73fb      	strb	r3, [r7, #15]
      break;
 8004694:	e000      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b0c      	cmp	r3, #12
 80046c6:	d831      	bhi.n	800472c <HAL_TIM_ReadCapturedValue+0x78>
 80046c8:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80046ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ce:	bf00      	nop
 80046d0:	08004705 	.word	0x08004705
 80046d4:	0800472d 	.word	0x0800472d
 80046d8:	0800472d 	.word	0x0800472d
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	0800470f 	.word	0x0800470f
 80046e4:	0800472d 	.word	0x0800472d
 80046e8:	0800472d 	.word	0x0800472d
 80046ec:	0800472d 	.word	0x0800472d
 80046f0:	08004719 	.word	0x08004719
 80046f4:	0800472d 	.word	0x0800472d
 80046f8:	0800472d 	.word	0x0800472d
 80046fc:	0800472d 	.word	0x0800472d
 8004700:	08004723 	.word	0x08004723
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800470a:	60fb      	str	r3, [r7, #12]

      break;
 800470c:	e00f      	b.n	800472e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	60fb      	str	r3, [r7, #12]

      break;
 8004716:	e00a      	b.n	800472e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800471e:	60fb      	str	r3, [r7, #12]

      break;
 8004720:	e005      	b.n	800472e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004728:	60fb      	str	r3, [r7, #12]

      break;
 800472a:	e000      	b.n	800472e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800472c:	bf00      	nop
  }

  return tmpreg;
 800472e:	68fb      	ldr	r3, [r7, #12]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004778:	b480      	push	{r7}
 800477a:	b085      	sub	sp, #20
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a34      	ldr	r2, [pc, #208]	; (800485c <TIM_Base_SetConfig+0xe4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d00f      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004796:	d00b      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a31      	ldr	r2, [pc, #196]	; (8004860 <TIM_Base_SetConfig+0xe8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d007      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a30      	ldr	r2, [pc, #192]	; (8004864 <TIM_Base_SetConfig+0xec>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d003      	beq.n	80047b0 <TIM_Base_SetConfig+0x38>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a2f      	ldr	r2, [pc, #188]	; (8004868 <TIM_Base_SetConfig+0xf0>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d108      	bne.n	80047c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a25      	ldr	r2, [pc, #148]	; (800485c <TIM_Base_SetConfig+0xe4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d01b      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d017      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <TIM_Base_SetConfig+0xe8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d013      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a21      	ldr	r2, [pc, #132]	; (8004864 <TIM_Base_SetConfig+0xec>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00f      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a20      	ldr	r2, [pc, #128]	; (8004868 <TIM_Base_SetConfig+0xf0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d00b      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <TIM_Base_SetConfig+0xf4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d007      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <TIM_Base_SetConfig+0xf8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d003      	beq.n	8004802 <TIM_Base_SetConfig+0x8a>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <TIM_Base_SetConfig+0xfc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d108      	bne.n	8004814 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4313      	orrs	r3, r2
 8004812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	689a      	ldr	r2, [r3, #8]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <TIM_Base_SetConfig+0xe4>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800

08004878 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0201 	bic.w	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f023 0303 	bic.w	r3, r3, #3
 80048ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 0302 	bic.w	r3, r3, #2
 80048c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a1c      	ldr	r2, [pc, #112]	; (8004940 <TIM_OC1_SetConfig+0xc8>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10c      	bne.n	80048ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 0308 	bic.w	r3, r3, #8
 80048da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f023 0304 	bic.w	r3, r3, #4
 80048ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a13      	ldr	r2, [pc, #76]	; (8004940 <TIM_OC1_SetConfig+0xc8>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d111      	bne.n	800491a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40010000 	.word	0x40010000

08004944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f023 0210 	bic.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	699b      	ldr	r3, [r3, #24]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0320 	bic.w	r3, r3, #32
 800498e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a1e      	ldr	r2, [pc, #120]	; (8004a18 <TIM_OC2_SetConfig+0xd4>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d10d      	bne.n	80049c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	011b      	lsls	r3, r3, #4
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <TIM_OC2_SetConfig+0xd4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d113      	bne.n	80049f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	685a      	ldr	r2, [r3, #4]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	621a      	str	r2, [r3, #32]
}
 8004a0a:	bf00      	nop
 8004a0c:	371c      	adds	r7, #28
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000

08004a1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0303 	bic.w	r3, r3, #3
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <TIM_OC3_SetConfig+0xd0>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d10d      	bne.n	8004a96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a14      	ldr	r2, [pc, #80]	; (8004aec <TIM_OC3_SetConfig+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d113      	bne.n	8004ac6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010000 	.word	0x40010000

08004af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	031b      	lsls	r3, r3, #12
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a10      	ldr	r2, [pc, #64]	; (8004b8c <TIM_OC4_SetConfig+0x9c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000

08004b90 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0201 	bic.w	r2, r3, #1
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	4a24      	ldr	r2, [pc, #144]	; (8004c4c <TIM_TI1_SetConfig+0xbc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <TIM_TI1_SetConfig+0x56>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc4:	d00f      	beq.n	8004be6 <TIM_TI1_SetConfig+0x56>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <TIM_TI1_SetConfig+0xc0>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00b      	beq.n	8004be6 <TIM_TI1_SetConfig+0x56>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <TIM_TI1_SetConfig+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <TIM_TI1_SetConfig+0x56>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <TIM_TI1_SetConfig+0xc8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_TI1_SetConfig+0x56>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <TIM_TI1_SetConfig+0xcc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d101      	bne.n	8004bea <TIM_TI1_SetConfig+0x5a>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e000      	b.n	8004bec <TIM_TI1_SetConfig+0x5c>
 8004bea:	2300      	movs	r3, #0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	e003      	b.n	8004c0a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	011b      	lsls	r3, r3, #4
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f023 030a 	bic.w	r3, r3, #10
 8004c24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 030a 	and.w	r3, r3, #10
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40010000 	.word	0x40010000
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000

08004c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f023 0201 	bic.w	r2, r3, #1
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f023 030a 	bic.w	r3, r3, #10
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	621a      	str	r2, [r3, #32]
}
 8004cb2:	bf00      	nop
 8004cb4:	371c      	adds	r7, #28
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b087      	sub	sp, #28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f023 0210 	bic.w	r2, r3, #16
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	697a      	ldr	r2, [r7, #20]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cfc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	031b      	lsls	r3, r3, #12
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	011b      	lsls	r3, r3, #4
 8004d16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	621a      	str	r2, [r3, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f023 0210 	bic.w	r2, r3, #16
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	031b      	lsls	r3, r3, #12
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	621a      	str	r2, [r3, #32]
}
 8004d8c:	bf00      	nop
 8004d8e:	371c      	adds	r7, #28
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f023 0303 	bic.w	r3, r3, #3
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	011b      	lsls	r3, r3, #4
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004de8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	693a      	ldr	r2, [r7, #16]
 8004e02:	621a      	str	r2, [r3, #32]
}
 8004e04:	bf00      	nop
 8004e06:	371c      	adds	r7, #28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	021b      	lsls	r3, r3, #8
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	031b      	lsls	r3, r3, #12
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004e62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	031b      	lsls	r3, r3, #12
 8004e68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	621a      	str	r2, [r3, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	371c      	adds	r7, #28
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
 8004e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	f043 0307 	orr.w	r3, r3, #7
 8004eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	609a      	str	r2, [r3, #8]
}
 8004eb4:	bf00      	nop
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	021a      	lsls	r2, r3, #8
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	609a      	str	r2, [r3, #8]
}
 8004ef4:	bf00      	nop
 8004ef6:	371c      	adds	r7, #28
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	f003 031f 	and.w	r3, r3, #31
 8004f12:	2201      	movs	r2, #1
 8004f14:	fa02 f303 	lsl.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1a      	ldr	r2, [r3, #32]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	43db      	mvns	r3, r3
 8004f22:	401a      	ands	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	6879      	ldr	r1, [r7, #4]
 8004f34:	fa01 f303 	lsl.w	r3, r1, r3
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d101      	bne.n	8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f60:	2302      	movs	r3, #2
 8004f62:	e050      	b.n	8005006 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2202      	movs	r2, #2
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d018      	beq.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb0:	d013      	beq.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a18      	ldr	r2, [pc, #96]	; (8005018 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00e      	beq.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a16      	ldr	r2, [pc, #88]	; (800501c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d009      	beq.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a15      	ldr	r2, [pc, #84]	; (8005020 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d004      	beq.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a13      	ldr	r2, [pc, #76]	; (8005024 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d10c      	bne.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68ba      	ldr	r2, [r7, #8]
 8004ff2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40010000 	.word	0x40010000
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40014000 	.word	0x40014000

08005028 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e03f      	b.n	80050e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fc94 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005092:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fddf 	bl	8005c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2220      	movs	r2, #32
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b08a      	sub	sp, #40	; 0x28
 80050ee:	af02      	add	r7, sp, #8
 80050f0:	60f8      	str	r0, [r7, #12]
 80050f2:	60b9      	str	r1, [r7, #8]
 80050f4:	603b      	str	r3, [r7, #0]
 80050f6:	4613      	mov	r3, r2
 80050f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b20      	cmp	r3, #32
 8005108:	d17c      	bne.n	8005204 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Transmit+0x2c>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e075      	b.n	8005206 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_UART_Transmit+0x3e>
 8005124:	2302      	movs	r3, #2
 8005126:	e06e      	b.n	8005206 <HAL_UART_Transmit+0x11c>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2221      	movs	r2, #33	; 0x21
 800513a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513e:	f7fc fec5 	bl	8001ecc <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	88fa      	ldrh	r2, [r7, #6]
 800514e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d108      	bne.n	800516c <HAL_UART_Transmit+0x82>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e003      	b.n	8005174 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800517c:	e02a      	b.n	80051d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	; 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fb1f 	bl	80057cc <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e036      	b.n	8005206 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	881b      	ldrh	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	3302      	adds	r3, #2
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	e007      	b.n	80051c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	781a      	ldrb	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1cf      	bne.n	800517e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	2140      	movs	r1, #64	; 0x40
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 faef 	bl	80057cc <UART_WaitOnFlagUntilTimeout>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e006      	b.n	8005206 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2220      	movs	r2, #32
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005200:	2300      	movs	r3, #0
 8005202:	e000      	b.n	8005206 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005204:	2302      	movs	r3, #2
  }
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b084      	sub	sp, #16
 8005212:	af00      	add	r7, sp, #0
 8005214:	60f8      	str	r0, [r7, #12]
 8005216:	60b9      	str	r1, [r7, #8]
 8005218:	4613      	mov	r3, r2
 800521a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b20      	cmp	r3, #32
 8005226:	d11d      	bne.n	8005264 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_UART_Receive_IT+0x26>
 800522e:	88fb      	ldrh	r3, [r7, #6]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e016      	b.n	8005266 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_UART_Receive_IT+0x38>
 8005242:	2302      	movs	r3, #2
 8005244:	e00f      	b.n	8005266 <HAL_UART_Receive_IT+0x58>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005254:	88fb      	ldrh	r3, [r7, #6]
 8005256:	461a      	mov	r2, r3
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fb24 	bl	80058a8 <UART_Start_Receive_IT>
 8005260:	4603      	mov	r3, r0
 8005262:	e000      	b.n	8005266 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005264:	2302      	movs	r3, #2
  }
}
 8005266:	4618      	mov	r0, r3
 8005268:	3710      	adds	r7, #16
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
	...

08005270 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b0ba      	sub	sp, #232	; 0xe8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005296:	2300      	movs	r3, #0
 8005298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800529c:	2300      	movs	r3, #0
 800529e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a6:	f003 030f 	and.w	r3, r3, #15
 80052aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80052ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10f      	bne.n	80052d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ba:	f003 0320 	and.w	r3, r3, #32
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d009      	beq.n	80052d6 <HAL_UART_IRQHandler+0x66>
 80052c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fc07 	bl	8005ae2 <UART_Receive_IT>
      return;
 80052d4:	e256      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80de 	beq.w	800549c <HAL_UART_IRQHandler+0x22c>
 80052e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d106      	bne.n	80052fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052f0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 80d1 	beq.w	800549c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	d00b      	beq.n	800531e <HAL_UART_IRQHandler+0xae>
 8005306:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d005      	beq.n	800531e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800531e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00b      	beq.n	8005342 <HAL_UART_IRQHandler+0xd2>
 800532a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f043 0202 	orr.w	r2, r3, #2
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_UART_IRQHandler+0xf6>
 800534e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f043 0204 	orr.w	r2, r3, #4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d011      	beq.n	8005396 <HAL_UART_IRQHandler+0x126>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800537e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	d005      	beq.n	8005396 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f043 0208 	orr.w	r2, r3, #8
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 81ed 	beq.w	800577a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	f003 0320 	and.w	r3, r3, #32
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d008      	beq.n	80053be <HAL_UART_IRQHandler+0x14e>
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fb92 	bl	8005ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	f003 0308 	and.w	r3, r3, #8
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <HAL_UART_IRQHandler+0x17a>
 80053e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d04f      	beq.n	800548a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fa9a 	bl	8005924 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053fa:	2b40      	cmp	r3, #64	; 0x40
 80053fc:	d141      	bne.n	8005482 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3314      	adds	r3, #20
 8005404:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800540c:	e853 3f00 	ldrex	r3, [r3]
 8005410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005414:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800542a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800542e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005432:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005436:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005442:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1d9      	bne.n	80053fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d013      	beq.n	800547a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	4a7d      	ldr	r2, [pc, #500]	; (800564c <HAL_UART_IRQHandler+0x3dc>)
 8005458:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	4618      	mov	r0, r3
 8005460:	f7fc fee5 	bl	800222e <HAL_DMA_Abort_IT>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005474:	4610      	mov	r0, r2
 8005476:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005478:	e00e      	b.n	8005498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f990 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005480:	e00a      	b.n	8005498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f98c 	bl	80057a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005488:	e006      	b.n	8005498 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 f988 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005496:	e170      	b.n	800577a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005498:	bf00      	nop
    return;
 800549a:	e16e      	b.n	800577a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	f040 814a 	bne.w	800573a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8143 	beq.w	800573a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 813c 	beq.w	800573a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054c2:	2300      	movs	r3, #0
 80054c4:	60bb      	str	r3, [r7, #8]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60bb      	str	r3, [r7, #8]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	f040 80b4 	bne.w	8005650 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80054f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	f000 8140 	beq.w	800577e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005502:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005506:	429a      	cmp	r2, r3
 8005508:	f080 8139 	bcs.w	800577e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005512:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800551e:	f000 8088 	beq.w	8005632 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	330c      	adds	r3, #12
 8005528:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005530:	e853 3f00 	ldrex	r3, [r3]
 8005534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005538:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800553c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800554e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005552:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800555a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800555e:	e841 2300 	strex	r3, r2, [r1]
 8005562:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005566:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1d9      	bne.n	8005522 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3314      	adds	r3, #20
 8005574:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005576:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005578:	e853 3f00 	ldrex	r3, [r3]
 800557c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800557e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005580:	f023 0301 	bic.w	r3, r3, #1
 8005584:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3314      	adds	r3, #20
 800558e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005592:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005596:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800559a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e1      	bne.n	800556e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80055ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3314      	adds	r3, #20
 80055ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80055ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80055d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80055d6:	e841 2300 	strex	r3, r2, [r1]
 80055da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80055dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1e3      	bne.n	80055aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	330c      	adds	r3, #12
 80055f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005602:	f023 0310 	bic.w	r3, r3, #16
 8005606:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005614:	65ba      	str	r2, [r7, #88]	; 0x58
 8005616:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800561a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e3      	bne.n	80055f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	4618      	mov	r0, r3
 800562e:	f7fc fd8e 	bl	800214e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800563a:	b29b      	uxth	r3, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	b29b      	uxth	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f8b6 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005648:	e099      	b.n	800577e <HAL_UART_IRQHandler+0x50e>
 800564a:	bf00      	nop
 800564c:	080059eb 	.word	0x080059eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005658:	b29b      	uxth	r3, r3
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 808b 	beq.w	8005782 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800566c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 8086 	beq.w	8005782 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	330c      	adds	r3, #12
 800567c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005688:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800568c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	330c      	adds	r3, #12
 8005696:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800569a:	647a      	str	r2, [r7, #68]	; 0x44
 800569c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e3      	bne.n	8005676 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	e853 3f00 	ldrex	r3, [r3]
 80056bc:	623b      	str	r3, [r7, #32]
   return(result);
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	f023 0301 	bic.w	r3, r3, #1
 80056c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3314      	adds	r3, #20
 80056ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80056d2:	633a      	str	r2, [r7, #48]	; 0x30
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056da:	e841 2300 	strex	r3, r2, [r1]
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d1e3      	bne.n	80056ae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	330c      	adds	r3, #12
 80056fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	e853 3f00 	ldrex	r3, [r3]
 8005702:	60fb      	str	r3, [r7, #12]
   return(result);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f023 0310 	bic.w	r3, r3, #16
 800570a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	330c      	adds	r3, #12
 8005714:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005718:	61fa      	str	r2, [r7, #28]
 800571a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	69b9      	ldr	r1, [r7, #24]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	617b      	str	r3, [r7, #20]
   return(result);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e3      	bne.n	80056f4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800572c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005730:	4619      	mov	r1, r3
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f83e 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005738:	e023      	b.n	8005782 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <HAL_UART_IRQHandler+0x4ea>
 8005746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800574a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f95d 	bl	8005a12 <UART_Transmit_IT>
    return;
 8005758:	e014      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800575a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00e      	beq.n	8005784 <HAL_UART_IRQHandler+0x514>
 8005766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800576a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f99d 	bl	8005ab2 <UART_EndTransmit_IT>
    return;
 8005778:	e004      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
    return;
 800577a:	bf00      	nop
 800577c:	e002      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
      return;
 800577e:	bf00      	nop
 8005780:	e000      	b.n	8005784 <HAL_UART_IRQHandler+0x514>
      return;
 8005782:	bf00      	nop
  }
}
 8005784:	37e8      	adds	r7, #232	; 0xe8
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}
 800578a:	bf00      	nop

0800578c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b090      	sub	sp, #64	; 0x40
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	603b      	str	r3, [r7, #0]
 80057d8:	4613      	mov	r3, r2
 80057da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057dc:	e050      	b.n	8005880 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e4:	d04c      	beq.n	8005880 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80057e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <UART_WaitOnFlagUntilTimeout+0x30>
 80057ec:	f7fc fb6e 	bl	8001ecc <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d241      	bcs.n	8005880 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800580c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800581c:	637a      	str	r2, [r7, #52]	; 0x34
 800581e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e5      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3314      	adds	r3, #20
 8005836:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	613b      	str	r3, [r7, #16]
   return(result);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	f023 0301 	bic.w	r3, r3, #1
 8005846:	63bb      	str	r3, [r7, #56]	; 0x38
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3314      	adds	r3, #20
 800584e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005850:	623a      	str	r2, [r7, #32]
 8005852:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	69f9      	ldr	r1, [r7, #28]
 8005856:	6a3a      	ldr	r2, [r7, #32]
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	61bb      	str	r3, [r7, #24]
   return(result);
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e00f      	b.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	4013      	ands	r3, r2
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	429a      	cmp	r2, r3
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	429a      	cmp	r2, r3
 800589c:	d09f      	beq.n	80057de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3740      	adds	r7, #64	; 0x40
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	88fa      	ldrh	r2, [r7, #6]
 80058c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2222      	movs	r2, #34	; 0x22
 80058d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68da      	ldr	r2, [r3, #12]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0201 	orr.w	r2, r2, #1
 8005904:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f042 0220 	orr.w	r2, r2, #32
 8005914:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005916:	2300      	movs	r3, #0
}
 8005918:	4618      	mov	r0, r3
 800591a:	3714      	adds	r7, #20
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b095      	sub	sp, #84	; 0x54
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800594c:	643a      	str	r2, [r7, #64]	; 0x40
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	64bb      	str	r3, [r7, #72]	; 0x48
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005998:	2b01      	cmp	r3, #1
 800599a:	d119      	bne.n	80059d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f023 0310 	bic.w	r3, r3, #16
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059bc:	61ba      	str	r2, [r7, #24]
 80059be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059de:	bf00      	nop
 80059e0:	3754      	adds	r7, #84	; 0x54
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f7ff fecb 	bl	80057a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b21      	cmp	r3, #33	; 0x21
 8005a24:	d13e      	bne.n	8005aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a2e:	d114      	bne.n	8005a5a <UART_Transmit_IT+0x48>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d110      	bne.n	8005a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	1c9a      	adds	r2, r3, #2
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	621a      	str	r2, [r3, #32]
 8005a58:	e008      	b.n	8005a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	1c59      	adds	r1, r3, #1
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6211      	str	r1, [r2, #32]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10f      	bne.n	8005aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68da      	ldr	r2, [r3, #12]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	e000      	b.n	8005aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005aa4:	2302      	movs	r3, #2
  }
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b082      	sub	sp, #8
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2220      	movs	r2, #32
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff fe5a 	bl	800578c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b08c      	sub	sp, #48	; 0x30
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b22      	cmp	r3, #34	; 0x22
 8005af4:	f040 80ab 	bne.w	8005c4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b00:	d117      	bne.n	8005b32 <UART_Receive_IT+0x50>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d113      	bne.n	8005b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	1c9a      	adds	r2, r3, #2
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b30:	e026      	b.n	8005b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d007      	beq.n	8005b56 <UART_Receive_IT+0x74>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <UART_Receive_IT+0x82>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d106      	bne.n	8005b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e008      	b.n	8005b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	1c5a      	adds	r2, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	3b01      	subs	r3, #1
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d15a      	bne.n	8005c4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0220 	bic.w	r2, r2, #32
 8005ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68da      	ldr	r2, [r3, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695a      	ldr	r2, [r3, #20]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0201 	bic.w	r2, r2, #1
 8005bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2220      	movs	r2, #32
 8005bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d135      	bne.n	8005c40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f023 0310 	bic.w	r3, r3, #16
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	623a      	str	r2, [r7, #32]
 8005bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	69f9      	ldr	r1, [r7, #28]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d10a      	bne.n	8005c32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fdbb 	bl	80057b4 <HAL_UARTEx_RxEventCallback>
 8005c3e:	e002      	b.n	8005c46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7fa fc4b 	bl	80004dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e002      	b.n	8005c50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3730      	adds	r7, #48	; 0x30
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b0c0      	sub	sp, #256	; 0x100
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	68d9      	ldr	r1, [r3, #12]
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	ea40 0301 	orr.w	r3, r0, r1
 8005c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cb0:	f021 010c 	bic.w	r1, r1, #12
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd2:	6999      	ldr	r1, [r3, #24]
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	ea40 0301 	orr.w	r3, r0, r1
 8005cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b8f      	ldr	r3, [pc, #572]	; (8005f24 <UART_SetConfig+0x2cc>)
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d005      	beq.n	8005cf8 <UART_SetConfig+0xa0>
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b8d      	ldr	r3, [pc, #564]	; (8005f28 <UART_SetConfig+0x2d0>)
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d104      	bne.n	8005d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf8:	f7fd fa52 	bl	80031a0 <HAL_RCC_GetPCLK2Freq>
 8005cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d00:	e003      	b.n	8005d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d02:	f7fd fa39 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 8005d06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d14:	f040 810c 	bne.w	8005f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	1891      	adds	r1, r2, r2
 8005d30:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d32:	415b      	adcs	r3, r3
 8005d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	eb12 0801 	adds.w	r8, r2, r1
 8005d40:	4629      	mov	r1, r5
 8005d42:	eb43 0901 	adc.w	r9, r3, r1
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d5a:	4690      	mov	r8, r2
 8005d5c:	4699      	mov	r9, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	eb18 0303 	adds.w	r3, r8, r3
 8005d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d68:	462b      	mov	r3, r5
 8005d6a:	eb49 0303 	adc.w	r3, r9, r3
 8005d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d86:	460b      	mov	r3, r1
 8005d88:	18db      	adds	r3, r3, r3
 8005d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	eb42 0303 	adc.w	r3, r2, r3
 8005d92:	657b      	str	r3, [r7, #84]	; 0x54
 8005d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d9c:	f7fa fa1c 	bl	80001d8 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <UART_SetConfig+0x2d4>)
 8005da6:	fba3 2302 	umull	r2, r3, r3, r2
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	011c      	lsls	r4, r3, #4
 8005dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005db8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df0:	4692      	mov	sl, r2
 8005df2:	469b      	mov	fp, r3
 8005df4:	4643      	mov	r3, r8
 8005df6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	eb4b 0303 	adc.w	r3, fp, r3
 8005e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	18db      	adds	r3, r3, r3
 8005e20:	643b      	str	r3, [r7, #64]	; 0x40
 8005e22:	4613      	mov	r3, r2
 8005e24:	eb42 0303 	adc.w	r3, r2, r3
 8005e28:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e32:	f7fa f9d1 	bl	80001d8 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	; (8005f2c <UART_SetConfig+0x2d4>)
 8005e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2264      	movs	r2, #100	; 0x64
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	1acb      	subs	r3, r1, r3
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e52:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <UART_SetConfig+0x2d4>)
 8005e54:	fba3 2302 	umull	r2, r3, r3, r2
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e60:	441c      	add	r4, r3
 8005e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e74:	4642      	mov	r2, r8
 8005e76:	464b      	mov	r3, r9
 8005e78:	1891      	adds	r1, r2, r2
 8005e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e84:	4641      	mov	r1, r8
 8005e86:	1851      	adds	r1, r2, r1
 8005e88:	6339      	str	r1, [r7, #48]	; 0x30
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	414b      	adcs	r3, r1
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	00cb      	lsls	r3, r1, #3
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	00ca      	lsls	r2, r1, #3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005eb8:	464b      	mov	r3, r9
 8005eba:	460a      	mov	r2, r1
 8005ebc:	eb42 0303 	adc.w	r3, r2, r3
 8005ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ed8:	460b      	mov	r3, r1
 8005eda:	18db      	adds	r3, r3, r3
 8005edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ede:	4613      	mov	r3, r2
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005eee:	f7fa f973 	bl	80001d8 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	; (8005f2c <UART_SetConfig+0x2d4>)
 8005ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	2164      	movs	r1, #100	; 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	3332      	adds	r3, #50	; 0x32
 8005f0a:	4a08      	ldr	r2, [pc, #32]	; (8005f2c <UART_SetConfig+0x2d4>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	f003 0207 	and.w	r2, r3, #7
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4422      	add	r2, r4
 8005f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f20:	e105      	b.n	800612e <UART_SetConfig+0x4d6>
 8005f22:	bf00      	nop
 8005f24:	40011000 	.word	0x40011000
 8005f28:	40011400 	.word	0x40011400
 8005f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f42:	4642      	mov	r2, r8
 8005f44:	464b      	mov	r3, r9
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	6239      	str	r1, [r7, #32]
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f52:	4641      	mov	r1, r8
 8005f54:	1854      	adds	r4, r2, r1
 8005f56:	4649      	mov	r1, r9
 8005f58:	eb43 0501 	adc.w	r5, r3, r1
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	00eb      	lsls	r3, r5, #3
 8005f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6a:	00e2      	lsls	r2, r4, #3
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	461d      	mov	r5, r3
 8005f70:	4643      	mov	r3, r8
 8005f72:	18e3      	adds	r3, r4, r3
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f78:	464b      	mov	r3, r9
 8005f7a:	eb45 0303 	adc.w	r3, r5, r3
 8005f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	008b      	lsls	r3, r1, #2
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa8:	4621      	mov	r1, r4
 8005faa:	008a      	lsls	r2, r1, #2
 8005fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fb0:	f7fa f912 	bl	80001d8 <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4b60      	ldr	r3, [pc, #384]	; (800613c <UART_SetConfig+0x4e4>)
 8005fba:	fba3 2302 	umull	r2, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	011c      	lsls	r4, r3, #4
 8005fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	1891      	adds	r1, r2, r2
 8005fda:	61b9      	str	r1, [r7, #24]
 8005fdc:	415b      	adcs	r3, r3
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	1851      	adds	r1, r2, r1
 8005fe8:	6139      	str	r1, [r7, #16]
 8005fea:	4649      	mov	r1, r9
 8005fec:	414b      	adcs	r3, r1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	00cb      	lsls	r3, r1, #3
 8006000:	4651      	mov	r1, sl
 8006002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006006:	4651      	mov	r1, sl
 8006008:	00ca      	lsls	r2, r1, #3
 800600a:	4610      	mov	r0, r2
 800600c:	4619      	mov	r1, r3
 800600e:	4603      	mov	r3, r0
 8006010:	4642      	mov	r2, r8
 8006012:	189b      	adds	r3, r3, r2
 8006014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006018:	464b      	mov	r3, r9
 800601a:	460a      	mov	r2, r1
 800601c:	eb42 0303 	adc.w	r3, r2, r3
 8006020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	67bb      	str	r3, [r7, #120]	; 0x78
 800602e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800603c:	4649      	mov	r1, r9
 800603e:	008b      	lsls	r3, r1, #2
 8006040:	4641      	mov	r1, r8
 8006042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006046:	4641      	mov	r1, r8
 8006048:	008a      	lsls	r2, r1, #2
 800604a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800604e:	f7fa f8c3 	bl	80001d8 <__aeabi_uldivmod>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4b39      	ldr	r3, [pc, #228]	; (800613c <UART_SetConfig+0x4e4>)
 8006058:	fba3 1302 	umull	r1, r3, r3, r2
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	2164      	movs	r1, #100	; 0x64
 8006060:	fb01 f303 	mul.w	r3, r1, r3
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	3332      	adds	r3, #50	; 0x32
 800606a:	4a34      	ldr	r2, [pc, #208]	; (800613c <UART_SetConfig+0x4e4>)
 800606c:	fba2 2303 	umull	r2, r3, r2, r3
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006076:	441c      	add	r4, r3
 8006078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607c:	2200      	movs	r2, #0
 800607e:	673b      	str	r3, [r7, #112]	; 0x70
 8006080:	677a      	str	r2, [r7, #116]	; 0x74
 8006082:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006086:	4642      	mov	r2, r8
 8006088:	464b      	mov	r3, r9
 800608a:	1891      	adds	r1, r2, r2
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	415b      	adcs	r3, r3
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006096:	4641      	mov	r1, r8
 8006098:	1851      	adds	r1, r2, r1
 800609a:	6039      	str	r1, [r7, #0]
 800609c:	4649      	mov	r1, r9
 800609e:	414b      	adcs	r3, r1
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060ae:	4659      	mov	r1, fp
 80060b0:	00cb      	lsls	r3, r1, #3
 80060b2:	4651      	mov	r1, sl
 80060b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060b8:	4651      	mov	r1, sl
 80060ba:	00ca      	lsls	r2, r1, #3
 80060bc:	4610      	mov	r0, r2
 80060be:	4619      	mov	r1, r3
 80060c0:	4603      	mov	r3, r0
 80060c2:	4642      	mov	r2, r8
 80060c4:	189b      	adds	r3, r3, r2
 80060c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060c8:	464b      	mov	r3, r9
 80060ca:	460a      	mov	r2, r1
 80060cc:	eb42 0303 	adc.w	r3, r2, r3
 80060d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	663b      	str	r3, [r7, #96]	; 0x60
 80060dc:	667a      	str	r2, [r7, #100]	; 0x64
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060ea:	4649      	mov	r1, r9
 80060ec:	008b      	lsls	r3, r1, #2
 80060ee:	4641      	mov	r1, r8
 80060f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f4:	4641      	mov	r1, r8
 80060f6:	008a      	lsls	r2, r1, #2
 80060f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060fc:	f7fa f86c 	bl	80001d8 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4b0d      	ldr	r3, [pc, #52]	; (800613c <UART_SetConfig+0x4e4>)
 8006106:	fba3 1302 	umull	r1, r3, r3, r2
 800610a:	095b      	lsrs	r3, r3, #5
 800610c:	2164      	movs	r1, #100	; 0x64
 800610e:	fb01 f303 	mul.w	r3, r1, r3
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	3332      	adds	r3, #50	; 0x32
 8006118:	4a08      	ldr	r2, [pc, #32]	; (800613c <UART_SetConfig+0x4e4>)
 800611a:	fba2 2303 	umull	r2, r3, r2, r3
 800611e:	095b      	lsrs	r3, r3, #5
 8006120:	f003 020f 	and.w	r2, r3, #15
 8006124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4422      	add	r2, r4
 800612c:	609a      	str	r2, [r3, #8]
}
 800612e:	bf00      	nop
 8006130:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613a:	bf00      	nop
 800613c:	51eb851f 	.word	0x51eb851f

08006140 <__errno>:
 8006140:	4b01      	ldr	r3, [pc, #4]	; (8006148 <__errno+0x8>)
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000018 	.word	0x20000018

0800614c <__libc_init_array>:
 800614c:	b570      	push	{r4, r5, r6, lr}
 800614e:	4d0d      	ldr	r5, [pc, #52]	; (8006184 <__libc_init_array+0x38>)
 8006150:	4c0d      	ldr	r4, [pc, #52]	; (8006188 <__libc_init_array+0x3c>)
 8006152:	1b64      	subs	r4, r4, r5
 8006154:	10a4      	asrs	r4, r4, #2
 8006156:	2600      	movs	r6, #0
 8006158:	42a6      	cmp	r6, r4
 800615a:	d109      	bne.n	8006170 <__libc_init_array+0x24>
 800615c:	4d0b      	ldr	r5, [pc, #44]	; (800618c <__libc_init_array+0x40>)
 800615e:	4c0c      	ldr	r4, [pc, #48]	; (8006190 <__libc_init_array+0x44>)
 8006160:	f000 fd1e 	bl	8006ba0 <_init>
 8006164:	1b64      	subs	r4, r4, r5
 8006166:	10a4      	asrs	r4, r4, #2
 8006168:	2600      	movs	r6, #0
 800616a:	42a6      	cmp	r6, r4
 800616c:	d105      	bne.n	800617a <__libc_init_array+0x2e>
 800616e:	bd70      	pop	{r4, r5, r6, pc}
 8006170:	f855 3b04 	ldr.w	r3, [r5], #4
 8006174:	4798      	blx	r3
 8006176:	3601      	adds	r6, #1
 8006178:	e7ee      	b.n	8006158 <__libc_init_array+0xc>
 800617a:	f855 3b04 	ldr.w	r3, [r5], #4
 800617e:	4798      	blx	r3
 8006180:	3601      	adds	r6, #1
 8006182:	e7f2      	b.n	800616a <__libc_init_array+0x1e>
 8006184:	08006c4c 	.word	0x08006c4c
 8006188:	08006c4c 	.word	0x08006c4c
 800618c:	08006c4c 	.word	0x08006c4c
 8006190:	08006c50 	.word	0x08006c50

08006194 <memset>:
 8006194:	4402      	add	r2, r0
 8006196:	4603      	mov	r3, r0
 8006198:	4293      	cmp	r3, r2
 800619a:	d100      	bne.n	800619e <memset+0xa>
 800619c:	4770      	bx	lr
 800619e:	f803 1b01 	strb.w	r1, [r3], #1
 80061a2:	e7f9      	b.n	8006198 <memset+0x4>

080061a4 <_puts_r>:
 80061a4:	b570      	push	{r4, r5, r6, lr}
 80061a6:	460e      	mov	r6, r1
 80061a8:	4605      	mov	r5, r0
 80061aa:	b118      	cbz	r0, 80061b4 <_puts_r+0x10>
 80061ac:	6983      	ldr	r3, [r0, #24]
 80061ae:	b90b      	cbnz	r3, 80061b4 <_puts_r+0x10>
 80061b0:	f000 fa48 	bl	8006644 <__sinit>
 80061b4:	69ab      	ldr	r3, [r5, #24]
 80061b6:	68ac      	ldr	r4, [r5, #8]
 80061b8:	b913      	cbnz	r3, 80061c0 <_puts_r+0x1c>
 80061ba:	4628      	mov	r0, r5
 80061bc:	f000 fa42 	bl	8006644 <__sinit>
 80061c0:	4b2c      	ldr	r3, [pc, #176]	; (8006274 <_puts_r+0xd0>)
 80061c2:	429c      	cmp	r4, r3
 80061c4:	d120      	bne.n	8006208 <_puts_r+0x64>
 80061c6:	686c      	ldr	r4, [r5, #4]
 80061c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ca:	07db      	lsls	r3, r3, #31
 80061cc:	d405      	bmi.n	80061da <_puts_r+0x36>
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	0598      	lsls	r0, r3, #22
 80061d2:	d402      	bmi.n	80061da <_puts_r+0x36>
 80061d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061d6:	f000 fad3 	bl	8006780 <__retarget_lock_acquire_recursive>
 80061da:	89a3      	ldrh	r3, [r4, #12]
 80061dc:	0719      	lsls	r1, r3, #28
 80061de:	d51d      	bpl.n	800621c <_puts_r+0x78>
 80061e0:	6923      	ldr	r3, [r4, #16]
 80061e2:	b1db      	cbz	r3, 800621c <_puts_r+0x78>
 80061e4:	3e01      	subs	r6, #1
 80061e6:	68a3      	ldr	r3, [r4, #8]
 80061e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061ec:	3b01      	subs	r3, #1
 80061ee:	60a3      	str	r3, [r4, #8]
 80061f0:	bb39      	cbnz	r1, 8006242 <_puts_r+0x9e>
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	da38      	bge.n	8006268 <_puts_r+0xc4>
 80061f6:	4622      	mov	r2, r4
 80061f8:	210a      	movs	r1, #10
 80061fa:	4628      	mov	r0, r5
 80061fc:	f000 f848 	bl	8006290 <__swbuf_r>
 8006200:	3001      	adds	r0, #1
 8006202:	d011      	beq.n	8006228 <_puts_r+0x84>
 8006204:	250a      	movs	r5, #10
 8006206:	e011      	b.n	800622c <_puts_r+0x88>
 8006208:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <_puts_r+0xd4>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d101      	bne.n	8006212 <_puts_r+0x6e>
 800620e:	68ac      	ldr	r4, [r5, #8]
 8006210:	e7da      	b.n	80061c8 <_puts_r+0x24>
 8006212:	4b1a      	ldr	r3, [pc, #104]	; (800627c <_puts_r+0xd8>)
 8006214:	429c      	cmp	r4, r3
 8006216:	bf08      	it	eq
 8006218:	68ec      	ldreq	r4, [r5, #12]
 800621a:	e7d5      	b.n	80061c8 <_puts_r+0x24>
 800621c:	4621      	mov	r1, r4
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f888 	bl	8006334 <__swsetup_r>
 8006224:	2800      	cmp	r0, #0
 8006226:	d0dd      	beq.n	80061e4 <_puts_r+0x40>
 8006228:	f04f 35ff 	mov.w	r5, #4294967295
 800622c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800622e:	07da      	lsls	r2, r3, #31
 8006230:	d405      	bmi.n	800623e <_puts_r+0x9a>
 8006232:	89a3      	ldrh	r3, [r4, #12]
 8006234:	059b      	lsls	r3, r3, #22
 8006236:	d402      	bmi.n	800623e <_puts_r+0x9a>
 8006238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800623a:	f000 faa2 	bl	8006782 <__retarget_lock_release_recursive>
 800623e:	4628      	mov	r0, r5
 8006240:	bd70      	pop	{r4, r5, r6, pc}
 8006242:	2b00      	cmp	r3, #0
 8006244:	da04      	bge.n	8006250 <_puts_r+0xac>
 8006246:	69a2      	ldr	r2, [r4, #24]
 8006248:	429a      	cmp	r2, r3
 800624a:	dc06      	bgt.n	800625a <_puts_r+0xb6>
 800624c:	290a      	cmp	r1, #10
 800624e:	d004      	beq.n	800625a <_puts_r+0xb6>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	6022      	str	r2, [r4, #0]
 8006256:	7019      	strb	r1, [r3, #0]
 8006258:	e7c5      	b.n	80061e6 <_puts_r+0x42>
 800625a:	4622      	mov	r2, r4
 800625c:	4628      	mov	r0, r5
 800625e:	f000 f817 	bl	8006290 <__swbuf_r>
 8006262:	3001      	adds	r0, #1
 8006264:	d1bf      	bne.n	80061e6 <_puts_r+0x42>
 8006266:	e7df      	b.n	8006228 <_puts_r+0x84>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	250a      	movs	r5, #10
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	701d      	strb	r5, [r3, #0]
 8006272:	e7db      	b.n	800622c <_puts_r+0x88>
 8006274:	08006c04 	.word	0x08006c04
 8006278:	08006c24 	.word	0x08006c24
 800627c:	08006be4 	.word	0x08006be4

08006280 <puts>:
 8006280:	4b02      	ldr	r3, [pc, #8]	; (800628c <puts+0xc>)
 8006282:	4601      	mov	r1, r0
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f7ff bf8d 	b.w	80061a4 <_puts_r>
 800628a:	bf00      	nop
 800628c:	20000018 	.word	0x20000018

08006290 <__swbuf_r>:
 8006290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006292:	460e      	mov	r6, r1
 8006294:	4614      	mov	r4, r2
 8006296:	4605      	mov	r5, r0
 8006298:	b118      	cbz	r0, 80062a2 <__swbuf_r+0x12>
 800629a:	6983      	ldr	r3, [r0, #24]
 800629c:	b90b      	cbnz	r3, 80062a2 <__swbuf_r+0x12>
 800629e:	f000 f9d1 	bl	8006644 <__sinit>
 80062a2:	4b21      	ldr	r3, [pc, #132]	; (8006328 <__swbuf_r+0x98>)
 80062a4:	429c      	cmp	r4, r3
 80062a6:	d12b      	bne.n	8006300 <__swbuf_r+0x70>
 80062a8:	686c      	ldr	r4, [r5, #4]
 80062aa:	69a3      	ldr	r3, [r4, #24]
 80062ac:	60a3      	str	r3, [r4, #8]
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	071a      	lsls	r2, r3, #28
 80062b2:	d52f      	bpl.n	8006314 <__swbuf_r+0x84>
 80062b4:	6923      	ldr	r3, [r4, #16]
 80062b6:	b36b      	cbz	r3, 8006314 <__swbuf_r+0x84>
 80062b8:	6923      	ldr	r3, [r4, #16]
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	1ac0      	subs	r0, r0, r3
 80062be:	6963      	ldr	r3, [r4, #20]
 80062c0:	b2f6      	uxtb	r6, r6
 80062c2:	4283      	cmp	r3, r0
 80062c4:	4637      	mov	r7, r6
 80062c6:	dc04      	bgt.n	80062d2 <__swbuf_r+0x42>
 80062c8:	4621      	mov	r1, r4
 80062ca:	4628      	mov	r0, r5
 80062cc:	f000 f926 	bl	800651c <_fflush_r>
 80062d0:	bb30      	cbnz	r0, 8006320 <__swbuf_r+0x90>
 80062d2:	68a3      	ldr	r3, [r4, #8]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	60a3      	str	r3, [r4, #8]
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	6022      	str	r2, [r4, #0]
 80062de:	701e      	strb	r6, [r3, #0]
 80062e0:	6963      	ldr	r3, [r4, #20]
 80062e2:	3001      	adds	r0, #1
 80062e4:	4283      	cmp	r3, r0
 80062e6:	d004      	beq.n	80062f2 <__swbuf_r+0x62>
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	07db      	lsls	r3, r3, #31
 80062ec:	d506      	bpl.n	80062fc <__swbuf_r+0x6c>
 80062ee:	2e0a      	cmp	r6, #10
 80062f0:	d104      	bne.n	80062fc <__swbuf_r+0x6c>
 80062f2:	4621      	mov	r1, r4
 80062f4:	4628      	mov	r0, r5
 80062f6:	f000 f911 	bl	800651c <_fflush_r>
 80062fa:	b988      	cbnz	r0, 8006320 <__swbuf_r+0x90>
 80062fc:	4638      	mov	r0, r7
 80062fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006300:	4b0a      	ldr	r3, [pc, #40]	; (800632c <__swbuf_r+0x9c>)
 8006302:	429c      	cmp	r4, r3
 8006304:	d101      	bne.n	800630a <__swbuf_r+0x7a>
 8006306:	68ac      	ldr	r4, [r5, #8]
 8006308:	e7cf      	b.n	80062aa <__swbuf_r+0x1a>
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <__swbuf_r+0xa0>)
 800630c:	429c      	cmp	r4, r3
 800630e:	bf08      	it	eq
 8006310:	68ec      	ldreq	r4, [r5, #12]
 8006312:	e7ca      	b.n	80062aa <__swbuf_r+0x1a>
 8006314:	4621      	mov	r1, r4
 8006316:	4628      	mov	r0, r5
 8006318:	f000 f80c 	bl	8006334 <__swsetup_r>
 800631c:	2800      	cmp	r0, #0
 800631e:	d0cb      	beq.n	80062b8 <__swbuf_r+0x28>
 8006320:	f04f 37ff 	mov.w	r7, #4294967295
 8006324:	e7ea      	b.n	80062fc <__swbuf_r+0x6c>
 8006326:	bf00      	nop
 8006328:	08006c04 	.word	0x08006c04
 800632c:	08006c24 	.word	0x08006c24
 8006330:	08006be4 	.word	0x08006be4

08006334 <__swsetup_r>:
 8006334:	4b32      	ldr	r3, [pc, #200]	; (8006400 <__swsetup_r+0xcc>)
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	681d      	ldr	r5, [r3, #0]
 800633a:	4606      	mov	r6, r0
 800633c:	460c      	mov	r4, r1
 800633e:	b125      	cbz	r5, 800634a <__swsetup_r+0x16>
 8006340:	69ab      	ldr	r3, [r5, #24]
 8006342:	b913      	cbnz	r3, 800634a <__swsetup_r+0x16>
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f97d 	bl	8006644 <__sinit>
 800634a:	4b2e      	ldr	r3, [pc, #184]	; (8006404 <__swsetup_r+0xd0>)
 800634c:	429c      	cmp	r4, r3
 800634e:	d10f      	bne.n	8006370 <__swsetup_r+0x3c>
 8006350:	686c      	ldr	r4, [r5, #4]
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006358:	0719      	lsls	r1, r3, #28
 800635a:	d42c      	bmi.n	80063b6 <__swsetup_r+0x82>
 800635c:	06dd      	lsls	r5, r3, #27
 800635e:	d411      	bmi.n	8006384 <__swsetup_r+0x50>
 8006360:	2309      	movs	r3, #9
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006368:	81a3      	strh	r3, [r4, #12]
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	e03e      	b.n	80063ee <__swsetup_r+0xba>
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <__swsetup_r+0xd4>)
 8006372:	429c      	cmp	r4, r3
 8006374:	d101      	bne.n	800637a <__swsetup_r+0x46>
 8006376:	68ac      	ldr	r4, [r5, #8]
 8006378:	e7eb      	b.n	8006352 <__swsetup_r+0x1e>
 800637a:	4b24      	ldr	r3, [pc, #144]	; (800640c <__swsetup_r+0xd8>)
 800637c:	429c      	cmp	r4, r3
 800637e:	bf08      	it	eq
 8006380:	68ec      	ldreq	r4, [r5, #12]
 8006382:	e7e6      	b.n	8006352 <__swsetup_r+0x1e>
 8006384:	0758      	lsls	r0, r3, #29
 8006386:	d512      	bpl.n	80063ae <__swsetup_r+0x7a>
 8006388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638a:	b141      	cbz	r1, 800639e <__swsetup_r+0x6a>
 800638c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006390:	4299      	cmp	r1, r3
 8006392:	d002      	beq.n	800639a <__swsetup_r+0x66>
 8006394:	4630      	mov	r0, r6
 8006396:	f000 fa5b 	bl	8006850 <_free_r>
 800639a:	2300      	movs	r3, #0
 800639c:	6363      	str	r3, [r4, #52]	; 0x34
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	2300      	movs	r3, #0
 80063a8:	6063      	str	r3, [r4, #4]
 80063aa:	6923      	ldr	r3, [r4, #16]
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	f043 0308 	orr.w	r3, r3, #8
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	b94b      	cbnz	r3, 80063ce <__swsetup_r+0x9a>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c4:	d003      	beq.n	80063ce <__swsetup_r+0x9a>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4630      	mov	r0, r6
 80063ca:	f000 fa01 	bl	80067d0 <__smakebuf_r>
 80063ce:	89a0      	ldrh	r0, [r4, #12]
 80063d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063d4:	f010 0301 	ands.w	r3, r0, #1
 80063d8:	d00a      	beq.n	80063f0 <__swsetup_r+0xbc>
 80063da:	2300      	movs	r3, #0
 80063dc:	60a3      	str	r3, [r4, #8]
 80063de:	6963      	ldr	r3, [r4, #20]
 80063e0:	425b      	negs	r3, r3
 80063e2:	61a3      	str	r3, [r4, #24]
 80063e4:	6923      	ldr	r3, [r4, #16]
 80063e6:	b943      	cbnz	r3, 80063fa <__swsetup_r+0xc6>
 80063e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063ec:	d1ba      	bne.n	8006364 <__swsetup_r+0x30>
 80063ee:	bd70      	pop	{r4, r5, r6, pc}
 80063f0:	0781      	lsls	r1, r0, #30
 80063f2:	bf58      	it	pl
 80063f4:	6963      	ldrpl	r3, [r4, #20]
 80063f6:	60a3      	str	r3, [r4, #8]
 80063f8:	e7f4      	b.n	80063e4 <__swsetup_r+0xb0>
 80063fa:	2000      	movs	r0, #0
 80063fc:	e7f7      	b.n	80063ee <__swsetup_r+0xba>
 80063fe:	bf00      	nop
 8006400:	20000018 	.word	0x20000018
 8006404:	08006c04 	.word	0x08006c04
 8006408:	08006c24 	.word	0x08006c24
 800640c:	08006be4 	.word	0x08006be4

08006410 <__sflush_r>:
 8006410:	898a      	ldrh	r2, [r1, #12]
 8006412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	4605      	mov	r5, r0
 8006418:	0710      	lsls	r0, r2, #28
 800641a:	460c      	mov	r4, r1
 800641c:	d458      	bmi.n	80064d0 <__sflush_r+0xc0>
 800641e:	684b      	ldr	r3, [r1, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	dc05      	bgt.n	8006430 <__sflush_r+0x20>
 8006424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006426:	2b00      	cmp	r3, #0
 8006428:	dc02      	bgt.n	8006430 <__sflush_r+0x20>
 800642a:	2000      	movs	r0, #0
 800642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006432:	2e00      	cmp	r6, #0
 8006434:	d0f9      	beq.n	800642a <__sflush_r+0x1a>
 8006436:	2300      	movs	r3, #0
 8006438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800643c:	682f      	ldr	r7, [r5, #0]
 800643e:	602b      	str	r3, [r5, #0]
 8006440:	d032      	beq.n	80064a8 <__sflush_r+0x98>
 8006442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	075a      	lsls	r2, r3, #29
 8006448:	d505      	bpl.n	8006456 <__sflush_r+0x46>
 800644a:	6863      	ldr	r3, [r4, #4]
 800644c:	1ac0      	subs	r0, r0, r3
 800644e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006450:	b10b      	cbz	r3, 8006456 <__sflush_r+0x46>
 8006452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006454:	1ac0      	subs	r0, r0, r3
 8006456:	2300      	movs	r3, #0
 8006458:	4602      	mov	r2, r0
 800645a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800645c:	6a21      	ldr	r1, [r4, #32]
 800645e:	4628      	mov	r0, r5
 8006460:	47b0      	blx	r6
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	d106      	bne.n	8006476 <__sflush_r+0x66>
 8006468:	6829      	ldr	r1, [r5, #0]
 800646a:	291d      	cmp	r1, #29
 800646c:	d82c      	bhi.n	80064c8 <__sflush_r+0xb8>
 800646e:	4a2a      	ldr	r2, [pc, #168]	; (8006518 <__sflush_r+0x108>)
 8006470:	40ca      	lsrs	r2, r1
 8006472:	07d6      	lsls	r6, r2, #31
 8006474:	d528      	bpl.n	80064c8 <__sflush_r+0xb8>
 8006476:	2200      	movs	r2, #0
 8006478:	6062      	str	r2, [r4, #4]
 800647a:	04d9      	lsls	r1, r3, #19
 800647c:	6922      	ldr	r2, [r4, #16]
 800647e:	6022      	str	r2, [r4, #0]
 8006480:	d504      	bpl.n	800648c <__sflush_r+0x7c>
 8006482:	1c42      	adds	r2, r0, #1
 8006484:	d101      	bne.n	800648a <__sflush_r+0x7a>
 8006486:	682b      	ldr	r3, [r5, #0]
 8006488:	b903      	cbnz	r3, 800648c <__sflush_r+0x7c>
 800648a:	6560      	str	r0, [r4, #84]	; 0x54
 800648c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800648e:	602f      	str	r7, [r5, #0]
 8006490:	2900      	cmp	r1, #0
 8006492:	d0ca      	beq.n	800642a <__sflush_r+0x1a>
 8006494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006498:	4299      	cmp	r1, r3
 800649a:	d002      	beq.n	80064a2 <__sflush_r+0x92>
 800649c:	4628      	mov	r0, r5
 800649e:	f000 f9d7 	bl	8006850 <_free_r>
 80064a2:	2000      	movs	r0, #0
 80064a4:	6360      	str	r0, [r4, #52]	; 0x34
 80064a6:	e7c1      	b.n	800642c <__sflush_r+0x1c>
 80064a8:	6a21      	ldr	r1, [r4, #32]
 80064aa:	2301      	movs	r3, #1
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b0      	blx	r6
 80064b0:	1c41      	adds	r1, r0, #1
 80064b2:	d1c7      	bne.n	8006444 <__sflush_r+0x34>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d0c4      	beq.n	8006444 <__sflush_r+0x34>
 80064ba:	2b1d      	cmp	r3, #29
 80064bc:	d001      	beq.n	80064c2 <__sflush_r+0xb2>
 80064be:	2b16      	cmp	r3, #22
 80064c0:	d101      	bne.n	80064c6 <__sflush_r+0xb6>
 80064c2:	602f      	str	r7, [r5, #0]
 80064c4:	e7b1      	b.n	800642a <__sflush_r+0x1a>
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064cc:	81a3      	strh	r3, [r4, #12]
 80064ce:	e7ad      	b.n	800642c <__sflush_r+0x1c>
 80064d0:	690f      	ldr	r7, [r1, #16]
 80064d2:	2f00      	cmp	r7, #0
 80064d4:	d0a9      	beq.n	800642a <__sflush_r+0x1a>
 80064d6:	0793      	lsls	r3, r2, #30
 80064d8:	680e      	ldr	r6, [r1, #0]
 80064da:	bf08      	it	eq
 80064dc:	694b      	ldreq	r3, [r1, #20]
 80064de:	600f      	str	r7, [r1, #0]
 80064e0:	bf18      	it	ne
 80064e2:	2300      	movne	r3, #0
 80064e4:	eba6 0807 	sub.w	r8, r6, r7
 80064e8:	608b      	str	r3, [r1, #8]
 80064ea:	f1b8 0f00 	cmp.w	r8, #0
 80064ee:	dd9c      	ble.n	800642a <__sflush_r+0x1a>
 80064f0:	6a21      	ldr	r1, [r4, #32]
 80064f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064f4:	4643      	mov	r3, r8
 80064f6:	463a      	mov	r2, r7
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b0      	blx	r6
 80064fc:	2800      	cmp	r0, #0
 80064fe:	dc06      	bgt.n	800650e <__sflush_r+0xfe>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	f04f 30ff 	mov.w	r0, #4294967295
 800650c:	e78e      	b.n	800642c <__sflush_r+0x1c>
 800650e:	4407      	add	r7, r0
 8006510:	eba8 0800 	sub.w	r8, r8, r0
 8006514:	e7e9      	b.n	80064ea <__sflush_r+0xda>
 8006516:	bf00      	nop
 8006518:	20400001 	.word	0x20400001

0800651c <_fflush_r>:
 800651c:	b538      	push	{r3, r4, r5, lr}
 800651e:	690b      	ldr	r3, [r1, #16]
 8006520:	4605      	mov	r5, r0
 8006522:	460c      	mov	r4, r1
 8006524:	b913      	cbnz	r3, 800652c <_fflush_r+0x10>
 8006526:	2500      	movs	r5, #0
 8006528:	4628      	mov	r0, r5
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	b118      	cbz	r0, 8006536 <_fflush_r+0x1a>
 800652e:	6983      	ldr	r3, [r0, #24]
 8006530:	b90b      	cbnz	r3, 8006536 <_fflush_r+0x1a>
 8006532:	f000 f887 	bl	8006644 <__sinit>
 8006536:	4b14      	ldr	r3, [pc, #80]	; (8006588 <_fflush_r+0x6c>)
 8006538:	429c      	cmp	r4, r3
 800653a:	d11b      	bne.n	8006574 <_fflush_r+0x58>
 800653c:	686c      	ldr	r4, [r5, #4]
 800653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d0ef      	beq.n	8006526 <_fflush_r+0xa>
 8006546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006548:	07d0      	lsls	r0, r2, #31
 800654a:	d404      	bmi.n	8006556 <_fflush_r+0x3a>
 800654c:	0599      	lsls	r1, r3, #22
 800654e:	d402      	bmi.n	8006556 <_fflush_r+0x3a>
 8006550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006552:	f000 f915 	bl	8006780 <__retarget_lock_acquire_recursive>
 8006556:	4628      	mov	r0, r5
 8006558:	4621      	mov	r1, r4
 800655a:	f7ff ff59 	bl	8006410 <__sflush_r>
 800655e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006560:	07da      	lsls	r2, r3, #31
 8006562:	4605      	mov	r5, r0
 8006564:	d4e0      	bmi.n	8006528 <_fflush_r+0xc>
 8006566:	89a3      	ldrh	r3, [r4, #12]
 8006568:	059b      	lsls	r3, r3, #22
 800656a:	d4dd      	bmi.n	8006528 <_fflush_r+0xc>
 800656c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656e:	f000 f908 	bl	8006782 <__retarget_lock_release_recursive>
 8006572:	e7d9      	b.n	8006528 <_fflush_r+0xc>
 8006574:	4b05      	ldr	r3, [pc, #20]	; (800658c <_fflush_r+0x70>)
 8006576:	429c      	cmp	r4, r3
 8006578:	d101      	bne.n	800657e <_fflush_r+0x62>
 800657a:	68ac      	ldr	r4, [r5, #8]
 800657c:	e7df      	b.n	800653e <_fflush_r+0x22>
 800657e:	4b04      	ldr	r3, [pc, #16]	; (8006590 <_fflush_r+0x74>)
 8006580:	429c      	cmp	r4, r3
 8006582:	bf08      	it	eq
 8006584:	68ec      	ldreq	r4, [r5, #12]
 8006586:	e7da      	b.n	800653e <_fflush_r+0x22>
 8006588:	08006c04 	.word	0x08006c04
 800658c:	08006c24 	.word	0x08006c24
 8006590:	08006be4 	.word	0x08006be4

08006594 <std>:
 8006594:	2300      	movs	r3, #0
 8006596:	b510      	push	{r4, lr}
 8006598:	4604      	mov	r4, r0
 800659a:	e9c0 3300 	strd	r3, r3, [r0]
 800659e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065a2:	6083      	str	r3, [r0, #8]
 80065a4:	8181      	strh	r1, [r0, #12]
 80065a6:	6643      	str	r3, [r0, #100]	; 0x64
 80065a8:	81c2      	strh	r2, [r0, #14]
 80065aa:	6183      	str	r3, [r0, #24]
 80065ac:	4619      	mov	r1, r3
 80065ae:	2208      	movs	r2, #8
 80065b0:	305c      	adds	r0, #92	; 0x5c
 80065b2:	f7ff fdef 	bl	8006194 <memset>
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <std+0x38>)
 80065b8:	6263      	str	r3, [r4, #36]	; 0x24
 80065ba:	4b05      	ldr	r3, [pc, #20]	; (80065d0 <std+0x3c>)
 80065bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <std+0x40>)
 80065c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065c2:	4b05      	ldr	r3, [pc, #20]	; (80065d8 <std+0x44>)
 80065c4:	6224      	str	r4, [r4, #32]
 80065c6:	6323      	str	r3, [r4, #48]	; 0x30
 80065c8:	bd10      	pop	{r4, pc}
 80065ca:	bf00      	nop
 80065cc:	08006a31 	.word	0x08006a31
 80065d0:	08006a53 	.word	0x08006a53
 80065d4:	08006a8b 	.word	0x08006a8b
 80065d8:	08006aaf 	.word	0x08006aaf

080065dc <_cleanup_r>:
 80065dc:	4901      	ldr	r1, [pc, #4]	; (80065e4 <_cleanup_r+0x8>)
 80065de:	f000 b8af 	b.w	8006740 <_fwalk_reent>
 80065e2:	bf00      	nop
 80065e4:	0800651d 	.word	0x0800651d

080065e8 <__sfmoreglue>:
 80065e8:	b570      	push	{r4, r5, r6, lr}
 80065ea:	2268      	movs	r2, #104	; 0x68
 80065ec:	1e4d      	subs	r5, r1, #1
 80065ee:	4355      	muls	r5, r2
 80065f0:	460e      	mov	r6, r1
 80065f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065f6:	f000 f997 	bl	8006928 <_malloc_r>
 80065fa:	4604      	mov	r4, r0
 80065fc:	b140      	cbz	r0, 8006610 <__sfmoreglue+0x28>
 80065fe:	2100      	movs	r1, #0
 8006600:	e9c0 1600 	strd	r1, r6, [r0]
 8006604:	300c      	adds	r0, #12
 8006606:	60a0      	str	r0, [r4, #8]
 8006608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800660c:	f7ff fdc2 	bl	8006194 <memset>
 8006610:	4620      	mov	r0, r4
 8006612:	bd70      	pop	{r4, r5, r6, pc}

08006614 <__sfp_lock_acquire>:
 8006614:	4801      	ldr	r0, [pc, #4]	; (800661c <__sfp_lock_acquire+0x8>)
 8006616:	f000 b8b3 	b.w	8006780 <__retarget_lock_acquire_recursive>
 800661a:	bf00      	nop
 800661c:	200008ed 	.word	0x200008ed

08006620 <__sfp_lock_release>:
 8006620:	4801      	ldr	r0, [pc, #4]	; (8006628 <__sfp_lock_release+0x8>)
 8006622:	f000 b8ae 	b.w	8006782 <__retarget_lock_release_recursive>
 8006626:	bf00      	nop
 8006628:	200008ed 	.word	0x200008ed

0800662c <__sinit_lock_acquire>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__sinit_lock_acquire+0x8>)
 800662e:	f000 b8a7 	b.w	8006780 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	200008ee 	.word	0x200008ee

08006638 <__sinit_lock_release>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__sinit_lock_release+0x8>)
 800663a:	f000 b8a2 	b.w	8006782 <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	200008ee 	.word	0x200008ee

08006644 <__sinit>:
 8006644:	b510      	push	{r4, lr}
 8006646:	4604      	mov	r4, r0
 8006648:	f7ff fff0 	bl	800662c <__sinit_lock_acquire>
 800664c:	69a3      	ldr	r3, [r4, #24]
 800664e:	b11b      	cbz	r3, 8006658 <__sinit+0x14>
 8006650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006654:	f7ff bff0 	b.w	8006638 <__sinit_lock_release>
 8006658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800665c:	6523      	str	r3, [r4, #80]	; 0x50
 800665e:	4b13      	ldr	r3, [pc, #76]	; (80066ac <__sinit+0x68>)
 8006660:	4a13      	ldr	r2, [pc, #76]	; (80066b0 <__sinit+0x6c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	62a2      	str	r2, [r4, #40]	; 0x28
 8006666:	42a3      	cmp	r3, r4
 8006668:	bf04      	itt	eq
 800666a:	2301      	moveq	r3, #1
 800666c:	61a3      	streq	r3, [r4, #24]
 800666e:	4620      	mov	r0, r4
 8006670:	f000 f820 	bl	80066b4 <__sfp>
 8006674:	6060      	str	r0, [r4, #4]
 8006676:	4620      	mov	r0, r4
 8006678:	f000 f81c 	bl	80066b4 <__sfp>
 800667c:	60a0      	str	r0, [r4, #8]
 800667e:	4620      	mov	r0, r4
 8006680:	f000 f818 	bl	80066b4 <__sfp>
 8006684:	2200      	movs	r2, #0
 8006686:	60e0      	str	r0, [r4, #12]
 8006688:	2104      	movs	r1, #4
 800668a:	6860      	ldr	r0, [r4, #4]
 800668c:	f7ff ff82 	bl	8006594 <std>
 8006690:	68a0      	ldr	r0, [r4, #8]
 8006692:	2201      	movs	r2, #1
 8006694:	2109      	movs	r1, #9
 8006696:	f7ff ff7d 	bl	8006594 <std>
 800669a:	68e0      	ldr	r0, [r4, #12]
 800669c:	2202      	movs	r2, #2
 800669e:	2112      	movs	r1, #18
 80066a0:	f7ff ff78 	bl	8006594 <std>
 80066a4:	2301      	movs	r3, #1
 80066a6:	61a3      	str	r3, [r4, #24]
 80066a8:	e7d2      	b.n	8006650 <__sinit+0xc>
 80066aa:	bf00      	nop
 80066ac:	08006be0 	.word	0x08006be0
 80066b0:	080065dd 	.word	0x080065dd

080066b4 <__sfp>:
 80066b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b6:	4607      	mov	r7, r0
 80066b8:	f7ff ffac 	bl	8006614 <__sfp_lock_acquire>
 80066bc:	4b1e      	ldr	r3, [pc, #120]	; (8006738 <__sfp+0x84>)
 80066be:	681e      	ldr	r6, [r3, #0]
 80066c0:	69b3      	ldr	r3, [r6, #24]
 80066c2:	b913      	cbnz	r3, 80066ca <__sfp+0x16>
 80066c4:	4630      	mov	r0, r6
 80066c6:	f7ff ffbd 	bl	8006644 <__sinit>
 80066ca:	3648      	adds	r6, #72	; 0x48
 80066cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	d503      	bpl.n	80066dc <__sfp+0x28>
 80066d4:	6833      	ldr	r3, [r6, #0]
 80066d6:	b30b      	cbz	r3, 800671c <__sfp+0x68>
 80066d8:	6836      	ldr	r6, [r6, #0]
 80066da:	e7f7      	b.n	80066cc <__sfp+0x18>
 80066dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066e0:	b9d5      	cbnz	r5, 8006718 <__sfp+0x64>
 80066e2:	4b16      	ldr	r3, [pc, #88]	; (800673c <__sfp+0x88>)
 80066e4:	60e3      	str	r3, [r4, #12]
 80066e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066ea:	6665      	str	r5, [r4, #100]	; 0x64
 80066ec:	f000 f847 	bl	800677e <__retarget_lock_init_recursive>
 80066f0:	f7ff ff96 	bl	8006620 <__sfp_lock_release>
 80066f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066fc:	6025      	str	r5, [r4, #0]
 80066fe:	61a5      	str	r5, [r4, #24]
 8006700:	2208      	movs	r2, #8
 8006702:	4629      	mov	r1, r5
 8006704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006708:	f7ff fd44 	bl	8006194 <memset>
 800670c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006714:	4620      	mov	r0, r4
 8006716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006718:	3468      	adds	r4, #104	; 0x68
 800671a:	e7d9      	b.n	80066d0 <__sfp+0x1c>
 800671c:	2104      	movs	r1, #4
 800671e:	4638      	mov	r0, r7
 8006720:	f7ff ff62 	bl	80065e8 <__sfmoreglue>
 8006724:	4604      	mov	r4, r0
 8006726:	6030      	str	r0, [r6, #0]
 8006728:	2800      	cmp	r0, #0
 800672a:	d1d5      	bne.n	80066d8 <__sfp+0x24>
 800672c:	f7ff ff78 	bl	8006620 <__sfp_lock_release>
 8006730:	230c      	movs	r3, #12
 8006732:	603b      	str	r3, [r7, #0]
 8006734:	e7ee      	b.n	8006714 <__sfp+0x60>
 8006736:	bf00      	nop
 8006738:	08006be0 	.word	0x08006be0
 800673c:	ffff0001 	.word	0xffff0001

08006740 <_fwalk_reent>:
 8006740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006744:	4606      	mov	r6, r0
 8006746:	4688      	mov	r8, r1
 8006748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800674c:	2700      	movs	r7, #0
 800674e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006752:	f1b9 0901 	subs.w	r9, r9, #1
 8006756:	d505      	bpl.n	8006764 <_fwalk_reent+0x24>
 8006758:	6824      	ldr	r4, [r4, #0]
 800675a:	2c00      	cmp	r4, #0
 800675c:	d1f7      	bne.n	800674e <_fwalk_reent+0xe>
 800675e:	4638      	mov	r0, r7
 8006760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006764:	89ab      	ldrh	r3, [r5, #12]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d907      	bls.n	800677a <_fwalk_reent+0x3a>
 800676a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800676e:	3301      	adds	r3, #1
 8006770:	d003      	beq.n	800677a <_fwalk_reent+0x3a>
 8006772:	4629      	mov	r1, r5
 8006774:	4630      	mov	r0, r6
 8006776:	47c0      	blx	r8
 8006778:	4307      	orrs	r7, r0
 800677a:	3568      	adds	r5, #104	; 0x68
 800677c:	e7e9      	b.n	8006752 <_fwalk_reent+0x12>

0800677e <__retarget_lock_init_recursive>:
 800677e:	4770      	bx	lr

08006780 <__retarget_lock_acquire_recursive>:
 8006780:	4770      	bx	lr

08006782 <__retarget_lock_release_recursive>:
 8006782:	4770      	bx	lr

08006784 <__swhatbuf_r>:
 8006784:	b570      	push	{r4, r5, r6, lr}
 8006786:	460e      	mov	r6, r1
 8006788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800678c:	2900      	cmp	r1, #0
 800678e:	b096      	sub	sp, #88	; 0x58
 8006790:	4614      	mov	r4, r2
 8006792:	461d      	mov	r5, r3
 8006794:	da08      	bge.n	80067a8 <__swhatbuf_r+0x24>
 8006796:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	602a      	str	r2, [r5, #0]
 800679e:	061a      	lsls	r2, r3, #24
 80067a0:	d410      	bmi.n	80067c4 <__swhatbuf_r+0x40>
 80067a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067a6:	e00e      	b.n	80067c6 <__swhatbuf_r+0x42>
 80067a8:	466a      	mov	r2, sp
 80067aa:	f000 f9a7 	bl	8006afc <_fstat_r>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	dbf1      	blt.n	8006796 <__swhatbuf_r+0x12>
 80067b2:	9a01      	ldr	r2, [sp, #4]
 80067b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067bc:	425a      	negs	r2, r3
 80067be:	415a      	adcs	r2, r3
 80067c0:	602a      	str	r2, [r5, #0]
 80067c2:	e7ee      	b.n	80067a2 <__swhatbuf_r+0x1e>
 80067c4:	2340      	movs	r3, #64	; 0x40
 80067c6:	2000      	movs	r0, #0
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	b016      	add	sp, #88	; 0x58
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080067d0 <__smakebuf_r>:
 80067d0:	898b      	ldrh	r3, [r1, #12]
 80067d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067d4:	079d      	lsls	r5, r3, #30
 80067d6:	4606      	mov	r6, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	d507      	bpl.n	80067ec <__smakebuf_r+0x1c>
 80067dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	2301      	movs	r3, #1
 80067e6:	6163      	str	r3, [r4, #20]
 80067e8:	b002      	add	sp, #8
 80067ea:	bd70      	pop	{r4, r5, r6, pc}
 80067ec:	ab01      	add	r3, sp, #4
 80067ee:	466a      	mov	r2, sp
 80067f0:	f7ff ffc8 	bl	8006784 <__swhatbuf_r>
 80067f4:	9900      	ldr	r1, [sp, #0]
 80067f6:	4605      	mov	r5, r0
 80067f8:	4630      	mov	r0, r6
 80067fa:	f000 f895 	bl	8006928 <_malloc_r>
 80067fe:	b948      	cbnz	r0, 8006814 <__smakebuf_r+0x44>
 8006800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006804:	059a      	lsls	r2, r3, #22
 8006806:	d4ef      	bmi.n	80067e8 <__smakebuf_r+0x18>
 8006808:	f023 0303 	bic.w	r3, r3, #3
 800680c:	f043 0302 	orr.w	r3, r3, #2
 8006810:	81a3      	strh	r3, [r4, #12]
 8006812:	e7e3      	b.n	80067dc <__smakebuf_r+0xc>
 8006814:	4b0d      	ldr	r3, [pc, #52]	; (800684c <__smakebuf_r+0x7c>)
 8006816:	62b3      	str	r3, [r6, #40]	; 0x28
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	6020      	str	r0, [r4, #0]
 800681c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	9b00      	ldr	r3, [sp, #0]
 8006824:	6163      	str	r3, [r4, #20]
 8006826:	9b01      	ldr	r3, [sp, #4]
 8006828:	6120      	str	r0, [r4, #16]
 800682a:	b15b      	cbz	r3, 8006844 <__smakebuf_r+0x74>
 800682c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f975 	bl	8006b20 <_isatty_r>
 8006836:	b128      	cbz	r0, 8006844 <__smakebuf_r+0x74>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f023 0303 	bic.w	r3, r3, #3
 800683e:	f043 0301 	orr.w	r3, r3, #1
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	89a0      	ldrh	r0, [r4, #12]
 8006846:	4305      	orrs	r5, r0
 8006848:	81a5      	strh	r5, [r4, #12]
 800684a:	e7cd      	b.n	80067e8 <__smakebuf_r+0x18>
 800684c:	080065dd 	.word	0x080065dd

08006850 <_free_r>:
 8006850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006852:	2900      	cmp	r1, #0
 8006854:	d044      	beq.n	80068e0 <_free_r+0x90>
 8006856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685a:	9001      	str	r0, [sp, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	f1a1 0404 	sub.w	r4, r1, #4
 8006862:	bfb8      	it	lt
 8006864:	18e4      	addlt	r4, r4, r3
 8006866:	f000 f97d 	bl	8006b64 <__malloc_lock>
 800686a:	4a1e      	ldr	r2, [pc, #120]	; (80068e4 <_free_r+0x94>)
 800686c:	9801      	ldr	r0, [sp, #4]
 800686e:	6813      	ldr	r3, [r2, #0]
 8006870:	b933      	cbnz	r3, 8006880 <_free_r+0x30>
 8006872:	6063      	str	r3, [r4, #4]
 8006874:	6014      	str	r4, [r2, #0]
 8006876:	b003      	add	sp, #12
 8006878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800687c:	f000 b978 	b.w	8006b70 <__malloc_unlock>
 8006880:	42a3      	cmp	r3, r4
 8006882:	d908      	bls.n	8006896 <_free_r+0x46>
 8006884:	6825      	ldr	r5, [r4, #0]
 8006886:	1961      	adds	r1, r4, r5
 8006888:	428b      	cmp	r3, r1
 800688a:	bf01      	itttt	eq
 800688c:	6819      	ldreq	r1, [r3, #0]
 800688e:	685b      	ldreq	r3, [r3, #4]
 8006890:	1949      	addeq	r1, r1, r5
 8006892:	6021      	streq	r1, [r4, #0]
 8006894:	e7ed      	b.n	8006872 <_free_r+0x22>
 8006896:	461a      	mov	r2, r3
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	b10b      	cbz	r3, 80068a0 <_free_r+0x50>
 800689c:	42a3      	cmp	r3, r4
 800689e:	d9fa      	bls.n	8006896 <_free_r+0x46>
 80068a0:	6811      	ldr	r1, [r2, #0]
 80068a2:	1855      	adds	r5, r2, r1
 80068a4:	42a5      	cmp	r5, r4
 80068a6:	d10b      	bne.n	80068c0 <_free_r+0x70>
 80068a8:	6824      	ldr	r4, [r4, #0]
 80068aa:	4421      	add	r1, r4
 80068ac:	1854      	adds	r4, r2, r1
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	6011      	str	r1, [r2, #0]
 80068b2:	d1e0      	bne.n	8006876 <_free_r+0x26>
 80068b4:	681c      	ldr	r4, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	6053      	str	r3, [r2, #4]
 80068ba:	4421      	add	r1, r4
 80068bc:	6011      	str	r1, [r2, #0]
 80068be:	e7da      	b.n	8006876 <_free_r+0x26>
 80068c0:	d902      	bls.n	80068c8 <_free_r+0x78>
 80068c2:	230c      	movs	r3, #12
 80068c4:	6003      	str	r3, [r0, #0]
 80068c6:	e7d6      	b.n	8006876 <_free_r+0x26>
 80068c8:	6825      	ldr	r5, [r4, #0]
 80068ca:	1961      	adds	r1, r4, r5
 80068cc:	428b      	cmp	r3, r1
 80068ce:	bf04      	itt	eq
 80068d0:	6819      	ldreq	r1, [r3, #0]
 80068d2:	685b      	ldreq	r3, [r3, #4]
 80068d4:	6063      	str	r3, [r4, #4]
 80068d6:	bf04      	itt	eq
 80068d8:	1949      	addeq	r1, r1, r5
 80068da:	6021      	streq	r1, [r4, #0]
 80068dc:	6054      	str	r4, [r2, #4]
 80068de:	e7ca      	b.n	8006876 <_free_r+0x26>
 80068e0:	b003      	add	sp, #12
 80068e2:	bd30      	pop	{r4, r5, pc}
 80068e4:	200008f0 	.word	0x200008f0

080068e8 <sbrk_aligned>:
 80068e8:	b570      	push	{r4, r5, r6, lr}
 80068ea:	4e0e      	ldr	r6, [pc, #56]	; (8006924 <sbrk_aligned+0x3c>)
 80068ec:	460c      	mov	r4, r1
 80068ee:	6831      	ldr	r1, [r6, #0]
 80068f0:	4605      	mov	r5, r0
 80068f2:	b911      	cbnz	r1, 80068fa <sbrk_aligned+0x12>
 80068f4:	f000 f88c 	bl	8006a10 <_sbrk_r>
 80068f8:	6030      	str	r0, [r6, #0]
 80068fa:	4621      	mov	r1, r4
 80068fc:	4628      	mov	r0, r5
 80068fe:	f000 f887 	bl	8006a10 <_sbrk_r>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	d00a      	beq.n	800691c <sbrk_aligned+0x34>
 8006906:	1cc4      	adds	r4, r0, #3
 8006908:	f024 0403 	bic.w	r4, r4, #3
 800690c:	42a0      	cmp	r0, r4
 800690e:	d007      	beq.n	8006920 <sbrk_aligned+0x38>
 8006910:	1a21      	subs	r1, r4, r0
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f87c 	bl	8006a10 <_sbrk_r>
 8006918:	3001      	adds	r0, #1
 800691a:	d101      	bne.n	8006920 <sbrk_aligned+0x38>
 800691c:	f04f 34ff 	mov.w	r4, #4294967295
 8006920:	4620      	mov	r0, r4
 8006922:	bd70      	pop	{r4, r5, r6, pc}
 8006924:	200008f4 	.word	0x200008f4

08006928 <_malloc_r>:
 8006928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800692c:	1ccd      	adds	r5, r1, #3
 800692e:	f025 0503 	bic.w	r5, r5, #3
 8006932:	3508      	adds	r5, #8
 8006934:	2d0c      	cmp	r5, #12
 8006936:	bf38      	it	cc
 8006938:	250c      	movcc	r5, #12
 800693a:	2d00      	cmp	r5, #0
 800693c:	4607      	mov	r7, r0
 800693e:	db01      	blt.n	8006944 <_malloc_r+0x1c>
 8006940:	42a9      	cmp	r1, r5
 8006942:	d905      	bls.n	8006950 <_malloc_r+0x28>
 8006944:	230c      	movs	r3, #12
 8006946:	603b      	str	r3, [r7, #0]
 8006948:	2600      	movs	r6, #0
 800694a:	4630      	mov	r0, r6
 800694c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006950:	4e2e      	ldr	r6, [pc, #184]	; (8006a0c <_malloc_r+0xe4>)
 8006952:	f000 f907 	bl	8006b64 <__malloc_lock>
 8006956:	6833      	ldr	r3, [r6, #0]
 8006958:	461c      	mov	r4, r3
 800695a:	bb34      	cbnz	r4, 80069aa <_malloc_r+0x82>
 800695c:	4629      	mov	r1, r5
 800695e:	4638      	mov	r0, r7
 8006960:	f7ff ffc2 	bl	80068e8 <sbrk_aligned>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	4604      	mov	r4, r0
 8006968:	d14d      	bne.n	8006a06 <_malloc_r+0xde>
 800696a:	6834      	ldr	r4, [r6, #0]
 800696c:	4626      	mov	r6, r4
 800696e:	2e00      	cmp	r6, #0
 8006970:	d140      	bne.n	80069f4 <_malloc_r+0xcc>
 8006972:	6823      	ldr	r3, [r4, #0]
 8006974:	4631      	mov	r1, r6
 8006976:	4638      	mov	r0, r7
 8006978:	eb04 0803 	add.w	r8, r4, r3
 800697c:	f000 f848 	bl	8006a10 <_sbrk_r>
 8006980:	4580      	cmp	r8, r0
 8006982:	d13a      	bne.n	80069fa <_malloc_r+0xd2>
 8006984:	6821      	ldr	r1, [r4, #0]
 8006986:	3503      	adds	r5, #3
 8006988:	1a6d      	subs	r5, r5, r1
 800698a:	f025 0503 	bic.w	r5, r5, #3
 800698e:	3508      	adds	r5, #8
 8006990:	2d0c      	cmp	r5, #12
 8006992:	bf38      	it	cc
 8006994:	250c      	movcc	r5, #12
 8006996:	4629      	mov	r1, r5
 8006998:	4638      	mov	r0, r7
 800699a:	f7ff ffa5 	bl	80068e8 <sbrk_aligned>
 800699e:	3001      	adds	r0, #1
 80069a0:	d02b      	beq.n	80069fa <_malloc_r+0xd2>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	442b      	add	r3, r5
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	e00e      	b.n	80069c8 <_malloc_r+0xa0>
 80069aa:	6822      	ldr	r2, [r4, #0]
 80069ac:	1b52      	subs	r2, r2, r5
 80069ae:	d41e      	bmi.n	80069ee <_malloc_r+0xc6>
 80069b0:	2a0b      	cmp	r2, #11
 80069b2:	d916      	bls.n	80069e2 <_malloc_r+0xba>
 80069b4:	1961      	adds	r1, r4, r5
 80069b6:	42a3      	cmp	r3, r4
 80069b8:	6025      	str	r5, [r4, #0]
 80069ba:	bf18      	it	ne
 80069bc:	6059      	strne	r1, [r3, #4]
 80069be:	6863      	ldr	r3, [r4, #4]
 80069c0:	bf08      	it	eq
 80069c2:	6031      	streq	r1, [r6, #0]
 80069c4:	5162      	str	r2, [r4, r5]
 80069c6:	604b      	str	r3, [r1, #4]
 80069c8:	4638      	mov	r0, r7
 80069ca:	f104 060b 	add.w	r6, r4, #11
 80069ce:	f000 f8cf 	bl	8006b70 <__malloc_unlock>
 80069d2:	f026 0607 	bic.w	r6, r6, #7
 80069d6:	1d23      	adds	r3, r4, #4
 80069d8:	1af2      	subs	r2, r6, r3
 80069da:	d0b6      	beq.n	800694a <_malloc_r+0x22>
 80069dc:	1b9b      	subs	r3, r3, r6
 80069de:	50a3      	str	r3, [r4, r2]
 80069e0:	e7b3      	b.n	800694a <_malloc_r+0x22>
 80069e2:	6862      	ldr	r2, [r4, #4]
 80069e4:	42a3      	cmp	r3, r4
 80069e6:	bf0c      	ite	eq
 80069e8:	6032      	streq	r2, [r6, #0]
 80069ea:	605a      	strne	r2, [r3, #4]
 80069ec:	e7ec      	b.n	80069c8 <_malloc_r+0xa0>
 80069ee:	4623      	mov	r3, r4
 80069f0:	6864      	ldr	r4, [r4, #4]
 80069f2:	e7b2      	b.n	800695a <_malloc_r+0x32>
 80069f4:	4634      	mov	r4, r6
 80069f6:	6876      	ldr	r6, [r6, #4]
 80069f8:	e7b9      	b.n	800696e <_malloc_r+0x46>
 80069fa:	230c      	movs	r3, #12
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	4638      	mov	r0, r7
 8006a00:	f000 f8b6 	bl	8006b70 <__malloc_unlock>
 8006a04:	e7a1      	b.n	800694a <_malloc_r+0x22>
 8006a06:	6025      	str	r5, [r4, #0]
 8006a08:	e7de      	b.n	80069c8 <_malloc_r+0xa0>
 8006a0a:	bf00      	nop
 8006a0c:	200008f0 	.word	0x200008f0

08006a10 <_sbrk_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d06      	ldr	r5, [pc, #24]	; (8006a2c <_sbrk_r+0x1c>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fb f94a 	bl	8001cb4 <_sbrk>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_sbrk_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_sbrk_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	200008f8 	.word	0x200008f8

08006a30 <__sread>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	460c      	mov	r4, r1
 8006a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a38:	f000 f8a0 	bl	8006b7c <_read_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	bfab      	itete	ge
 8006a40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a42:	89a3      	ldrhlt	r3, [r4, #12]
 8006a44:	181b      	addge	r3, r3, r0
 8006a46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a4a:	bfac      	ite	ge
 8006a4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a4e:	81a3      	strhlt	r3, [r4, #12]
 8006a50:	bd10      	pop	{r4, pc}

08006a52 <__swrite>:
 8006a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a56:	461f      	mov	r7, r3
 8006a58:	898b      	ldrh	r3, [r1, #12]
 8006a5a:	05db      	lsls	r3, r3, #23
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4616      	mov	r6, r2
 8006a62:	d505      	bpl.n	8006a70 <__swrite+0x1e>
 8006a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a68:	2302      	movs	r3, #2
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f000 f868 	bl	8006b40 <_lseek_r>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	4632      	mov	r2, r6
 8006a7e:	463b      	mov	r3, r7
 8006a80:	4628      	mov	r0, r5
 8006a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a86:	f000 b817 	b.w	8006ab8 <_write_r>

08006a8a <__sseek>:
 8006a8a:	b510      	push	{r4, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a92:	f000 f855 	bl	8006b40 <_lseek_r>
 8006a96:	1c43      	adds	r3, r0, #1
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	bf15      	itete	ne
 8006a9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006aa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aa6:	81a3      	strheq	r3, [r4, #12]
 8006aa8:	bf18      	it	ne
 8006aaa:	81a3      	strhne	r3, [r4, #12]
 8006aac:	bd10      	pop	{r4, pc}

08006aae <__sclose>:
 8006aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab2:	f000 b813 	b.w	8006adc <_close_r>
	...

08006ab8 <_write_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d07      	ldr	r5, [pc, #28]	; (8006ad8 <_write_r+0x20>)
 8006abc:	4604      	mov	r4, r0
 8006abe:	4608      	mov	r0, r1
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	602a      	str	r2, [r5, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f7fb f8a3 	bl	8001c12 <_write>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_write_r+0x1e>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_write_r+0x1e>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	200008f8 	.word	0x200008f8

08006adc <_close_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4d06      	ldr	r5, [pc, #24]	; (8006af8 <_close_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	602b      	str	r3, [r5, #0]
 8006ae8:	f7fb f8af 	bl	8001c4a <_close>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_close_r+0x1a>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_close_r+0x1a>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	200008f8 	.word	0x200008f8

08006afc <_fstat_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d07      	ldr	r5, [pc, #28]	; (8006b1c <_fstat_r+0x20>)
 8006b00:	2300      	movs	r3, #0
 8006b02:	4604      	mov	r4, r0
 8006b04:	4608      	mov	r0, r1
 8006b06:	4611      	mov	r1, r2
 8006b08:	602b      	str	r3, [r5, #0]
 8006b0a:	f7fb f8aa 	bl	8001c62 <_fstat>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	d102      	bne.n	8006b18 <_fstat_r+0x1c>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	b103      	cbz	r3, 8006b18 <_fstat_r+0x1c>
 8006b16:	6023      	str	r3, [r4, #0]
 8006b18:	bd38      	pop	{r3, r4, r5, pc}
 8006b1a:	bf00      	nop
 8006b1c:	200008f8 	.word	0x200008f8

08006b20 <_isatty_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d06      	ldr	r5, [pc, #24]	; (8006b3c <_isatty_r+0x1c>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fb f8a9 	bl	8001c82 <_isatty>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_isatty_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_isatty_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	200008f8 	.word	0x200008f8

08006b40 <_lseek_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_lseek_r+0x20>)
 8006b44:	4604      	mov	r4, r0
 8006b46:	4608      	mov	r0, r1
 8006b48:	4611      	mov	r1, r2
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	602a      	str	r2, [r5, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f7fb f8a2 	bl	8001c98 <_lseek>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d102      	bne.n	8006b5e <_lseek_r+0x1e>
 8006b58:	682b      	ldr	r3, [r5, #0]
 8006b5a:	b103      	cbz	r3, 8006b5e <_lseek_r+0x1e>
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	bd38      	pop	{r3, r4, r5, pc}
 8006b60:	200008f8 	.word	0x200008f8

08006b64 <__malloc_lock>:
 8006b64:	4801      	ldr	r0, [pc, #4]	; (8006b6c <__malloc_lock+0x8>)
 8006b66:	f7ff be0b 	b.w	8006780 <__retarget_lock_acquire_recursive>
 8006b6a:	bf00      	nop
 8006b6c:	200008ec 	.word	0x200008ec

08006b70 <__malloc_unlock>:
 8006b70:	4801      	ldr	r0, [pc, #4]	; (8006b78 <__malloc_unlock+0x8>)
 8006b72:	f7ff be06 	b.w	8006782 <__retarget_lock_release_recursive>
 8006b76:	bf00      	nop
 8006b78:	200008ec 	.word	0x200008ec

08006b7c <_read_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d07      	ldr	r5, [pc, #28]	; (8006b9c <_read_r+0x20>)
 8006b80:	4604      	mov	r4, r0
 8006b82:	4608      	mov	r0, r1
 8006b84:	4611      	mov	r1, r2
 8006b86:	2200      	movs	r2, #0
 8006b88:	602a      	str	r2, [r5, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f7fb f824 	bl	8001bd8 <_read>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_read_r+0x1e>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_read_r+0x1e>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	200008f8 	.word	0x200008f8

08006ba0 <_init>:
 8006ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba2:	bf00      	nop
 8006ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ba6:	bc08      	pop	{r3}
 8006ba8:	469e      	mov	lr, r3
 8006baa:	4770      	bx	lr

08006bac <_fini>:
 8006bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bae:	bf00      	nop
 8006bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bb2:	bc08      	pop	{r3}
 8006bb4:	469e      	mov	lr, r3
 8006bb6:	4770      	bx	lr
