
07.ELEVATOR.REV.B.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c44  08008c44  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c44  08008c44  00018c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c4c  08008c4c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c4c  08008c4c  00018c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  200000a0  08008cf4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08008cf4  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016f92  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000387b  00000000  00000000  00037062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  0003a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  0003bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cfe  00000000  00000000  0003cf60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019841  00000000  00000000  00056c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009893a  00000000  00000000  0007049f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108dd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c2c  00000000  00000000  00108e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008958 	.word	0x08008958

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	08008958 	.word	0x08008958

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a4e      	ldr	r2, [pc, #312]	; (80006c8 <HAL_UART_RxCpltCallback+0x144>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d148      	bne.n	8000626 <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 8000594:	f000 f8ba 	bl	800070c <is_full>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d13e      	bne.n	800061c <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 800059e:	4b4b      	ldr	r3, [pc, #300]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	2b0a      	cmp	r3, #10
 80005a8:	d002      	beq.n	80005b0 <HAL_UART_RxCpltCallback+0x2c>
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
 80005ac:	2b0d      	cmp	r3, #13
 80005ae:	d123      	bne.n	80005f8 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 80005b0:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b47      	ldr	r3, [pc, #284]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80005b6:	6819      	ldr	r1, [r3, #0]
 80005b8:	4847      	ldr	r0, [pc, #284]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 80005ba:	4613      	mov	r3, r2
 80005bc:	011b      	lsls	r3, r3, #4
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	4403      	add	r3, r0
 80005c4:	440b      	add	r3, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 80005ca:	4b42      	ldr	r3, [pc, #264]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 80005d0:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a3e      	ldr	r2, [pc, #248]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005d8:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 80005da:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b3f      	ldr	r3, [pc, #252]	; (80006dc <HAL_UART_RxCpltCallback+0x158>)
 80005e0:	fb83 1302 	smull	r1, r3, r3, r2
 80005e4:	1119      	asrs	r1, r3, #4
 80005e6:	17d3      	asrs	r3, r2, #31
 80005e8:	1acb      	subs	r3, r1, r3
 80005ea:	2132      	movs	r1, #50	; 0x32
 80005ec:	fb01 f303 	mul.w	r3, r1, r3
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a37      	ldr	r2, [pc, #220]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005f4:	6013      	str	r3, [r2, #0]
 80005f6:	e011      	b.n	800061c <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 80005f8:	4b35      	ldr	r3, [pc, #212]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b35      	ldr	r3, [pc, #212]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80005fe:	6819      	ldr	r1, [r3, #0]
 8000600:	4835      	ldr	r0, [pc, #212]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 8000602:	4613      	mov	r3, r2
 8000604:	011b      	lsls	r3, r3, #4
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	4403      	add	r3, r0
 800060c:	440b      	add	r3, r1
 800060e:	7bfa      	ldrb	r2, [r7, #15]
 8000610:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a2e      	ldr	r2, [pc, #184]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 800061a:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	492b      	ldr	r1, [pc, #172]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 8000620:	4829      	ldr	r0, [pc, #164]	; (80006c8 <HAL_UART_RxCpltCallback+0x144>)
 8000622:	f005 ff36 	bl	8006492 <HAL_UART_Receive_IT>
	}
///////////////////////////////////////////////////////////////////////////
	if (huart == &huart1)   // BT
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4a2d      	ldr	r2, [pc, #180]	; (80006e0 <HAL_UART_RxCpltCallback+0x15c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d148      	bne.n	80006c0 <HAL_UART_RxCpltCallback+0x13c>
	{
		if(is_full())
 800062e:	f000 f86d 	bl	800070c <is_full>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d13e      	bne.n	80006b6 <HAL_UART_RxCpltCallback+0x132>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	73bb      	strb	r3, [r7, #14]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 800063e:	7bbb      	ldrb	r3, [r7, #14]
 8000640:	2b0a      	cmp	r3, #10
 8000642:	d002      	beq.n	800064a <HAL_UART_RxCpltCallback+0xc6>
 8000644:	7bbb      	ldrb	r3, [r7, #14]
 8000646:	2b0d      	cmp	r3, #13
 8000648:	d123      	bne.n	8000692 <HAL_UART_RxCpltCallback+0x10e>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 800064a:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000650:	6819      	ldr	r1, [r3, #0]
 8000652:	4821      	ldr	r0, [pc, #132]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 8000654:	4613      	mov	r3, r2
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	1a9b      	subs	r3, r3, r2
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	4403      	add	r3, r0
 800065e:	440b      	add	r3, r1
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 800066a:	4b19      	ldr	r3, [pc, #100]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	3301      	adds	r3, #1
 8000670:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 8000672:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 8000676:	681a      	ldr	r2, [r3, #0]
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <HAL_UART_RxCpltCallback+0x158>)
 800067a:	fb83 1302 	smull	r1, r3, r3, r2
 800067e:	1119      	asrs	r1, r3, #4
 8000680:	17d3      	asrs	r3, r2, #31
 8000682:	1acb      	subs	r3, r1, r3
 8000684:	2132      	movs	r1, #50	; 0x32
 8000686:	fb01 f303 	mul.w	r3, r1, r3
 800068a:	1ad3      	subs	r3, r2, r3
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	e011      	b.n	80006b6 <HAL_UART_RxCpltCallback+0x132>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <HAL_UART_RxCpltCallback+0x14c>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 8000698:	6819      	ldr	r1, [r3, #0]
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <HAL_UART_RxCpltCallback+0x154>)
 800069c:	4613      	mov	r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4403      	add	r3, r0
 80006a6:	440b      	add	r3, r1
 80006a8:	7bba      	ldrb	r2, [r7, #14]
 80006aa:	701a      	strb	r2, [r3, #0]
				rx_index++;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a08      	ldr	r2, [pc, #32]	; (80006d4 <HAL_UART_RxCpltCallback+0x150>)
 80006b4:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80006b6:	2201      	movs	r2, #1
 80006b8:	4904      	ldr	r1, [pc, #16]	; (80006cc <HAL_UART_RxCpltCallback+0x148>)
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <HAL_UART_RxCpltCallback+0x15c>)
 80006bc:	f005 fee9 	bl	8006492 <HAL_UART_Receive_IT>
	}
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200008b4 	.word	0x200008b4
 80006cc:	200006a0 	.word	0x200006a0
 80006d0:	200000bc 	.word	0x200000bc
 80006d4:	200006a4 	.word	0x200006a4
 80006d8:	200000c4 	.word	0x200000c4
 80006dc:	51eb851f 	.word	0x51eb851f
 80006e0:	20000870 	.word	0x20000870

080006e4 <is_empty>:

int is_empty()		// 큐의 공백 상태를 알려주는 함수
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
	if (input_pointer == output_pointer)
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <is_empty+0x20>)
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <is_empty+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d101      	bne.n	80006f8 <is_empty+0x14>
		return 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e000      	b.n	80006fa <is_empty+0x16>
	else
		return 0;
 80006f8:	2300      	movs	r3, #0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	200000bc 	.word	0x200000bc
 8000708:	200000c0 	.word	0x200000c0

0800070c <is_full>:

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <is_full+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	4a0d      	ldr	r2, [pc, #52]	; (8000750 <is_full+0x44>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1111      	asrs	r1, r2, #4
 8000720:	17da      	asrs	r2, r3, #31
 8000722:	1a8a      	subs	r2, r1, r2
 8000724:	2132      	movs	r1, #50	; 0x32
 8000726:	fb01 f202 	mul.w	r2, r1, r2
 800072a:	1a9b      	subs	r3, r3, r2
 800072c:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <is_full+0x48>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	429a      	cmp	r2, r3
 8000736:	d101      	bne.n	800073c <is_full+0x30>
		return 1;
 8000738:	2301      	movs	r3, #1
 800073a:	e000      	b.n	800073e <is_full+0x32>
	else
		return 0;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	200000bc 	.word	0x200000bc
 8000750:	51eb851f 	.word	0x51eb851f
 8000754:	200000c0 	.word	0x200000c0

08000758 <pc_command_processing>:


int printon = 1;

void pc_command_processing()
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	if (is_empty())
 800075e:	f7ff ffc1 	bl	80006e4 <is_empty>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	f040 8146 	bne.w	80009f6 <pc_command_processing+0x29e>
	{
		// printf("Queue is Empty");
	}
	else
	{
		if(printon)
 800076a:	4ba5      	ldr	r3, [pc, #660]	; (8000a00 <pc_command_processing+0x2a8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d010      	beq.n	8000794 <pc_command_processing+0x3c>
		{
			printf("output_pointer = %d\n", output_pointer);
 8000772:	4ba4      	ldr	r3, [pc, #656]	; (8000a04 <pc_command_processing+0x2ac>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	48a3      	ldr	r0, [pc, #652]	; (8000a08 <pc_command_processing+0x2b0>)
 800077a:	f006 fe59 	bl	8007430 <iprintf>
			printf("%s\n", rx_buff[output_pointer]);
 800077e:	4ba1      	ldr	r3, [pc, #644]	; (8000a04 <pc_command_processing+0x2ac>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4613      	mov	r3, r2
 8000784:	011b      	lsls	r3, r3, #4
 8000786:	1a9b      	subs	r3, r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	4aa0      	ldr	r2, [pc, #640]	; (8000a0c <pc_command_processing+0x2b4>)
 800078c:	4413      	add	r3, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fed4 	bl	800753c <puts>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printon", strlen("printon")-1) == 0)
 8000794:	4b9b      	ldr	r3, [pc, #620]	; (8000a04 <pc_command_processing+0x2ac>)
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	4613      	mov	r3, r2
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	4a9a      	ldr	r2, [pc, #616]	; (8000a0c <pc_command_processing+0x2b4>)
 80007a2:	4413      	add	r3, r2
 80007a4:	2206      	movs	r2, #6
 80007a6:	499a      	ldr	r1, [pc, #616]	; (8000a10 <pc_command_processing+0x2b8>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 feef 	bl	800758c <strncmp>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d108      	bne.n	80007c6 <pc_command_processing+0x6e>
		{
			printon = 1;
 80007b4:	4b92      	ldr	r3, [pc, #584]	; (8000a00 <pc_command_processing+0x2a8>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 80007ba:	4b91      	ldr	r3, [pc, #580]	; (8000a00 <pc_command_processing+0x2a8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	4894      	ldr	r0, [pc, #592]	; (8000a14 <pc_command_processing+0x2bc>)
 80007c2:	f006 fe35 	bl	8007430 <iprintf>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printoff", strlen("printoff")-1) == 0)
 80007c6:	4b8f      	ldr	r3, [pc, #572]	; (8000a04 <pc_command_processing+0x2ac>)
 80007c8:	681a      	ldr	r2, [r3, #0]
 80007ca:	4613      	mov	r3, r2
 80007cc:	011b      	lsls	r3, r3, #4
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4a8e      	ldr	r2, [pc, #568]	; (8000a0c <pc_command_processing+0x2b4>)
 80007d4:	4413      	add	r3, r2
 80007d6:	2207      	movs	r2, #7
 80007d8:	498f      	ldr	r1, [pc, #572]	; (8000a18 <pc_command_processing+0x2c0>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f006 fed6 	bl	800758c <strncmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d108      	bne.n	80007f8 <pc_command_processing+0xa0>
		{
			printon = 0;
 80007e6:	4b86      	ldr	r3, [pc, #536]	; (8000a00 <pc_command_processing+0x2a8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 80007ec:	4b84      	ldr	r3, [pc, #528]	; (8000a00 <pc_command_processing+0x2a8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	4888      	ldr	r0, [pc, #544]	; (8000a14 <pc_command_processing+0x2bc>)
 80007f4:	f006 fe1c 	bl	8007430 <iprintf>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11time", strlen("dht11time")-1) == 0)
 80007f8:	4b82      	ldr	r3, [pc, #520]	; (8000a04 <pc_command_processing+0x2ac>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	1a9b      	subs	r3, r3, r2
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	4a81      	ldr	r2, [pc, #516]	; (8000a0c <pc_command_processing+0x2b4>)
 8000806:	4413      	add	r3, r2
 8000808:	2208      	movs	r2, #8
 800080a:	4984      	ldr	r1, [pc, #528]	; (8000a1c <pc_command_processing+0x2c4>)
 800080c:	4618      	mov	r0, r3
 800080e:	f006 febd 	bl	800758c <strncmp>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d144      	bne.n	80008a2 <pc_command_processing+0x14a>
		{
			int time_value;

			if(digit_chk((char *)&rx_buff[output_pointer][9], 4))
 8000818:	4b7a      	ldr	r3, [pc, #488]	; (8000a04 <pc_command_processing+0x2ac>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	4613      	mov	r3, r2
 800081e:	011b      	lsls	r3, r3, #4
 8000820:	1a9b      	subs	r3, r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	3309      	adds	r3, #9
 8000826:	4a79      	ldr	r2, [pc, #484]	; (8000a0c <pc_command_processing+0x2b4>)
 8000828:	4413      	add	r3, r2
 800082a:	2104      	movs	r1, #4
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f91b 	bl	8000a68 <digit_chk>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d027      	beq.n	8000888 <pc_command_processing+0x130>
			{
 printf("@@@@%s\n", &rx_buff[output_pointer][9]);
 8000838:	4b72      	ldr	r3, [pc, #456]	; (8000a04 <pc_command_processing+0x2ac>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	011b      	lsls	r3, r3, #4
 8000840:	1a9b      	subs	r3, r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	3309      	adds	r3, #9
 8000846:	4a71      	ldr	r2, [pc, #452]	; (8000a0c <pc_command_processing+0x2b4>)
 8000848:	4413      	add	r3, r2
 800084a:	4619      	mov	r1, r3
 800084c:	4874      	ldr	r0, [pc, #464]	; (8000a20 <pc_command_processing+0x2c8>)
 800084e:	f006 fdef 	bl	8007430 <iprintf>

			time_value = atoi((char *)&rx_buff[output_pointer][9]); // atoi (ascii to integer)
 8000852:	4b6c      	ldr	r3, [pc, #432]	; (8000a04 <pc_command_processing+0x2ac>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4613      	mov	r3, r2
 8000858:	011b      	lsls	r3, r3, #4
 800085a:	1a9b      	subs	r3, r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	3309      	adds	r3, #9
 8000860:	4a6a      	ldr	r2, [pc, #424]	; (8000a0c <pc_command_processing+0x2b4>)
 8000862:	4413      	add	r3, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f006 fdad 	bl	80073c4 <atoi>
 800086a:	6078      	str	r0, [r7, #4]

			dht11time = time_value / 10;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a6d      	ldr	r2, [pc, #436]	; (8000a24 <pc_command_processing+0x2cc>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1092      	asrs	r2, r2, #2
 8000876:	17db      	asrs	r3, r3, #31
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	4a6b      	ldr	r2, [pc, #428]	; (8000a28 <pc_command_processing+0x2d0>)
 800087c:	6013      	str	r3, [r2, #0]
 printf("%dms\n", time_value);
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	486a      	ldr	r0, [pc, #424]	; (8000a2c <pc_command_processing+0x2d4>)
 8000882:	f006 fdd5 	bl	8007430 <iprintf>
 8000886:	e00c      	b.n	80008a2 <pc_command_processing+0x14a>
			}
			else
			{
				printf("invald number: %s\n", &rx_buff[output_pointer][9]);
 8000888:	4b5e      	ldr	r3, [pc, #376]	; (8000a04 <pc_command_processing+0x2ac>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4613      	mov	r3, r2
 800088e:	011b      	lsls	r3, r3, #4
 8000890:	1a9b      	subs	r3, r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	3309      	adds	r3, #9
 8000896:	4a5d      	ldr	r2, [pc, #372]	; (8000a0c <pc_command_processing+0x2b4>)
 8000898:	4413      	add	r3, r2
 800089a:	4619      	mov	r1, r3
 800089c:	4864      	ldr	r0, [pc, #400]	; (8000a30 <pc_command_processing+0x2d8>)
 800089e:	f006 fdc7 	bl	8007430 <iprintf>
			}
		}

		if(strncmp((const char *)rx_buff[output_pointer], "dht11on", strlen("dht11on")-1) == 0)
 80008a2:	4b58      	ldr	r3, [pc, #352]	; (8000a04 <pc_command_processing+0x2ac>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4613      	mov	r3, r2
 80008a8:	011b      	lsls	r3, r3, #4
 80008aa:	1a9b      	subs	r3, r3, r2
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	4a57      	ldr	r2, [pc, #348]	; (8000a0c <pc_command_processing+0x2b4>)
 80008b0:	4413      	add	r3, r2
 80008b2:	2206      	movs	r2, #6
 80008b4:	495f      	ldr	r1, [pc, #380]	; (8000a34 <pc_command_processing+0x2dc>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fe68 	bl	800758c <strncmp>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d105      	bne.n	80008ce <pc_command_processing+0x176>
		{
			dht11on = 1;
 80008c2:	4b5d      	ldr	r3, [pc, #372]	; (8000a38 <pc_command_processing+0x2e0>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
			printf("dht11_ON\n");
 80008c8:	485c      	ldr	r0, [pc, #368]	; (8000a3c <pc_command_processing+0x2e4>)
 80008ca:	f006 fe37 	bl	800753c <puts>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "dht11off", strlen("dht11off")-1) == 0)
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <pc_command_processing+0x2ac>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	4613      	mov	r3, r2
 80008d4:	011b      	lsls	r3, r3, #4
 80008d6:	1a9b      	subs	r3, r3, r2
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4a4c      	ldr	r2, [pc, #304]	; (8000a0c <pc_command_processing+0x2b4>)
 80008dc:	4413      	add	r3, r2
 80008de:	2207      	movs	r2, #7
 80008e0:	4957      	ldr	r1, [pc, #348]	; (8000a40 <pc_command_processing+0x2e8>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 fe52 	bl	800758c <strncmp>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d105      	bne.n	80008fa <pc_command_processing+0x1a2>
		{
			dht11on = 0;
 80008ee:	4b52      	ldr	r3, [pc, #328]	; (8000a38 <pc_command_processing+0x2e0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
			printf("dht11_OFF\n");
 80008f4:	4853      	ldr	r0, [pc, #332]	; (8000a44 <pc_command_processing+0x2ec>)
 80008f6:	f006 fe21 	bl	800753c <puts>
		}


		if(strncmp((const char *)rx_buff[output_pointer], "led_all_on", strlen("led_all_on")-1) == 0)
 80008fa:	4b42      	ldr	r3, [pc, #264]	; (8000a04 <pc_command_processing+0x2ac>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4613      	mov	r3, r2
 8000900:	011b      	lsls	r3, r3, #4
 8000902:	1a9b      	subs	r3, r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4a41      	ldr	r2, [pc, #260]	; (8000a0c <pc_command_processing+0x2b4>)
 8000908:	4413      	add	r3, r2
 800090a:	2209      	movs	r2, #9
 800090c:	494e      	ldr	r1, [pc, #312]	; (8000a48 <pc_command_processing+0x2f0>)
 800090e:	4618      	mov	r0, r3
 8000910:	f006 fe3c 	bl	800758c <strncmp>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <pc_command_processing+0x1c6>
		{
			 led_all_on();
 800091a:	f000 fb55 	bl	8000fc8 <led_all_on>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "led_all_off", strlen("led_all_off")-1) == 0)
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <pc_command_processing+0x2ac>)
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	4613      	mov	r3, r2
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	1a9b      	subs	r3, r3, r2
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	4a38      	ldr	r2, [pc, #224]	; (8000a0c <pc_command_processing+0x2b4>)
 800092c:	4413      	add	r3, r2
 800092e:	220a      	movs	r2, #10
 8000930:	4946      	ldr	r1, [pc, #280]	; (8000a4c <pc_command_processing+0x2f4>)
 8000932:	4618      	mov	r0, r3
 8000934:	f006 fe2a 	bl	800758c <strncmp>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d101      	bne.n	8000942 <pc_command_processing+0x1ea>
		{
			led_all_off();
 800093e:	f000 fb4f 	bl	8000fe0 <led_all_off>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11status", strlen("dht11status")-1) == 0)
 8000942:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <pc_command_processing+0x2ac>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	4613      	mov	r3, r2
 8000948:	011b      	lsls	r3, r3, #4
 800094a:	1a9b      	subs	r3, r3, r2
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4a2f      	ldr	r2, [pc, #188]	; (8000a0c <pc_command_processing+0x2b4>)
 8000950:	4413      	add	r3, r2
 8000952:	220a      	movs	r2, #10
 8000954:	493e      	ldr	r1, [pc, #248]	; (8000a50 <pc_command_processing+0x2f8>)
 8000956:	4618      	mov	r0, r3
 8000958:	f006 fe18 	bl	800758c <strncmp>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d11e      	bne.n	80009a0 <pc_command_processing+0x248>
		{
			if(dht11on == 0)
 8000962:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <pc_command_processing+0x2e0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d10d      	bne.n	8000986 <pc_command_processing+0x22e>
			{
				printf("dht11 : off\n");
 800096a:	483a      	ldr	r0, [pc, #232]	; (8000a54 <pc_command_processing+0x2fc>)
 800096c:	f006 fde6 	bl	800753c <puts>
				printf("dht11time : %dms\n", dht11time*10);
 8000970:	4b2d      	ldr	r3, [pc, #180]	; (8000a28 <pc_command_processing+0x2d0>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	4836      	ldr	r0, [pc, #216]	; (8000a58 <pc_command_processing+0x300>)
 8000980:	f006 fd56 	bl	8007430 <iprintf>
 8000984:	e00c      	b.n	80009a0 <pc_command_processing+0x248>
			}
			else
			{
				printf("dht11 : on\n");
 8000986:	4835      	ldr	r0, [pc, #212]	; (8000a5c <pc_command_processing+0x304>)
 8000988:	f006 fdd8 	bl	800753c <puts>
				printf("dht11time : %dms\n", dht11time*10);
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <pc_command_processing+0x2d0>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4613      	mov	r3, r2
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	4413      	add	r3, r2
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	4619      	mov	r1, r3
 800099a:	482f      	ldr	r0, [pc, #188]	; (8000a58 <pc_command_processing+0x300>)
 800099c:	f006 fd48 	bl	8007430 <iprintf>
			}
		}
		 // setrtc220830111500
	    if(strncmp((const char *)rx_buff[output_pointer], "setrtc", strlen("setrtc")-1) == 0)
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <pc_command_processing+0x2ac>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4613      	mov	r3, r2
 80009a6:	011b      	lsls	r3, r3, #4
 80009a8:	1a9b      	subs	r3, r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <pc_command_processing+0x2b4>)
 80009ae:	4413      	add	r3, r2
 80009b0:	2205      	movs	r2, #5
 80009b2:	492b      	ldr	r1, [pc, #172]	; (8000a60 <pc_command_processing+0x308>)
 80009b4:	4618      	mov	r0, r3
 80009b6:	f006 fde9 	bl	800758c <strncmp>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d10b      	bne.n	80009d8 <pc_command_processing+0x280>
		{
	    	// 앞단에 Filter 기능을 추가할 것
	    	set_rtc_date_time(&rx_buff[output_pointer][6]);	// 220830111500이것이 들어있는 주소 값이 넘어감
 80009c0:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <pc_command_processing+0x2ac>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	011b      	lsls	r3, r3, #4
 80009c8:	1a9b      	subs	r3, r3, r2
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	3306      	adds	r3, #6
 80009ce:	4a0f      	ldr	r2, [pc, #60]	; (8000a0c <pc_command_processing+0x2b4>)
 80009d0:	4413      	add	r3, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fa5a 	bl	8000e8c <set_rtc_date_time>
		}

		output_pointer = (output_pointer + 1) % COMMAND_MAX;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <pc_command_processing+0x2ac>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <pc_command_processing+0x30c>)
 80009e0:	fb83 1302 	smull	r1, r3, r3, r2
 80009e4:	1119      	asrs	r1, r3, #4
 80009e6:	17d3      	asrs	r3, r2, #31
 80009e8:	1acb      	subs	r3, r1, r3
 80009ea:	2132      	movs	r1, #50	; 0x32
 80009ec:	fb01 f303 	mul.w	r3, r1, r3
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <pc_command_processing+0x2ac>)
 80009f4:	6013      	str	r3, [r2, #0]
	}
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000008 	.word	0x20000008
 8000a04:	200000c0 	.word	0x200000c0
 8000a08:	08008970 	.word	0x08008970
 8000a0c:	200000c4 	.word	0x200000c4
 8000a10:	08008988 	.word	0x08008988
 8000a14:	08008990 	.word	0x08008990
 8000a18:	080089a0 	.word	0x080089a0
 8000a1c:	080089ac 	.word	0x080089ac
 8000a20:	080089b8 	.word	0x080089b8
 8000a24:	66666667 	.word	0x66666667
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	080089c0 	.word	0x080089c0
 8000a30:	080089c8 	.word	0x080089c8
 8000a34:	080089dc 	.word	0x080089dc
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	080089e4 	.word	0x080089e4
 8000a40:	080089f0 	.word	0x080089f0
 8000a44:	080089fc 	.word	0x080089fc
 8000a48:	08008a08 	.word	0x08008a08
 8000a4c:	08008a14 	.word	0x08008a14
 8000a50:	08008a20 	.word	0x08008a20
 8000a54:	08008a2c 	.word	0x08008a2c
 8000a58:	08008a38 	.word	0x08008a38
 8000a5c:	08008a4c 	.word	0x08008a4c
 8000a60:	08008a58 	.word	0x08008a58
 8000a64:	51eb851f 	.word	0x51eb851f

08000a68 <digit_chk>:

// True : 1
// False : 0
int digit_chk(char *d, int len)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++)
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e010      	b.n	8000a9a <digit_chk+0x32>
	{
		if(d[i] >= '0' && d[i] <= '9')
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b2f      	cmp	r3, #47	; 0x2f
 8000a82:	d905      	bls.n	8000a90 <digit_chk+0x28>
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b39      	cmp	r3, #57	; 0x39
 8000a8e:	d901      	bls.n	8000a94 <digit_chk+0x2c>
		{
			;
		}
		else
		{
			return 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e007      	b.n	8000aa4 <digit_chk+0x3c>
	for(int i = 0; i < len; i++)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	dbea      	blt.n	8000a78 <digit_chk+0x10>
		}

	}
	return 1;
 8000aa2:	2301      	movs	r3, #1
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <get_button>:
uint8_t prev_button5_state=BUTTON_RELEASE;
uint8_t prev_button6_state=BUTTON_RELEASE;

// 1. GPIO 2. GPIO PIN 3. 이전의 버튼
int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *prev_button_state)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	460b      	mov	r3, r1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	817b      	strh	r3, [r7, #10]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000abe:	897b      	ldrh	r3, [r7, #10]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	68f8      	ldr	r0, [r7, #12]
 8000ac4:	f002 fa18 	bl	8002ef8 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	75fb      	strb	r3, [r7, #23]

	if ((current_state == BUTTON_PRESS) && (*prev_button_state == BUTTON_RELEASE))  // 처음 누른상태
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d10b      	bne.n	8000aea <get_button+0x3a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d107      	bne.n	8000aea <get_button+0x3a>
	{
		*prev_button_state = current_state;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7dfa      	ldrb	r2, [r7, #23]
 8000ade:	701a      	strb	r2, [r3, #0]
		HAL_Delay(30);   // noise가 지나가기를 기다린다.
 8000ae0:	201e      	movs	r0, #30
 8000ae2:	f001 febd 	bl	8002860 <HAL_Delay>
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e00c      	b.n	8000b04 <get_button+0x54>
	}
	else if ((current_state == BUTTON_RELEASE) && (*prev_button_state == BUTTON_PRESS))
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d108      	bne.n	8000b02 <get_button+0x52>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d104      	bne.n	8000b02 <get_button+0x52>
	{
		*prev_button_state = current_state;   // 릴리즈 상태
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	7dfa      	ldrb	r2, [r7, #23]
 8000afc:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <get_button+0x54>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <noTone>:
 };

  unsigned int duration[] = {1,1,1,2};

 void noTone()
 {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
     htim3.Instance->CCR1=0;
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <noTone+0x18>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	635a      	str	r2, [r3, #52]	; 0x34
     HAL_Delay(50);
 8000b18:	2032      	movs	r0, #50	; 0x32
 8000b1a:	f001 fea1 	bl	8002860 <HAL_Delay>
 }
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200007e0 	.word	0x200007e0

08000b28 <arrival_buzzer>:
void arrival_buzzer()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
	int divide_freq = 1600000;
 8000b2e:	4b29      	ldr	r3, [pc, #164]	; (8000bd4 <arrival_buzzer+0xac>)
 8000b30:	607b      	str	r3, [r7, #4]

	if(buzzer_mode == 0)
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <arrival_buzzer+0xb0>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <arrival_buzzer+0x20>
	{
		if(elevator_mode_state == 3)
 8000b3a:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <arrival_buzzer+0xb4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	2b03      	cmp	r3, #3
 8000b40:	d102      	bne.n	8000b48 <arrival_buzzer+0x20>
		{
			buzzer_mode = 1;
 8000b42:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <arrival_buzzer+0xb0>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	601a      	str	r2, [r3, #0]
		}
	}

	if(buzzer_mode == 1)
 8000b48:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <arrival_buzzer+0xb0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d13c      	bne.n	8000bca <arrival_buzzer+0xa2>
	{
		b_step++;
 8000b50:	4b23      	ldr	r3, [pc, #140]	; (8000be0 <arrival_buzzer+0xb8>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a22      	ldr	r2, [pc, #136]	; (8000be0 <arrival_buzzer+0xb8>)
 8000b58:	6013      	str	r3, [r2, #0]

		if(b_step >= 4)
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <arrival_buzzer+0xb8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	dd08      	ble.n	8000b74 <arrival_buzzer+0x4c>
		{
			b_step = 0;
 8000b62:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <arrival_buzzer+0xb8>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
			buzzer_mode = 0;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <arrival_buzzer+0xb0>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
			door_mode = 3;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <arrival_buzzer+0xbc>)
 8000b70:	2203      	movs	r2, #3
 8000b72:	601a      	str	r2, [r3, #0]
		}

		if(TIM11_10ms_buzzer_counter <= 300)
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <arrival_buzzer+0xc0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000b7c:	dc23      	bgt.n	8000bc6 <arrival_buzzer+0x9e>
		{
			__HAL_TIM_SET_AUTORELOAD(&htim3, divide_freq / arrival[b_step]);
 8000b7e:	6879      	ldr	r1, [r7, #4]
 8000b80:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <arrival_buzzer+0xb8>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <arrival_buzzer+0xc4>)
 8000b86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <arrival_buzzer+0xc8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	fbb1 f2f2 	udiv	r2, r1, r2
 8000b92:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <arrival_buzzer+0xb8>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4914      	ldr	r1, [pc, #80]	; (8000bec <arrival_buzzer+0xc4>)
 8000b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <arrival_buzzer+0xc8>)
 8000ba6:	60d3      	str	r3, [r2, #12]
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, divide_freq / arrival[b_step] / 2);
 8000ba8:	687a      	ldr	r2, [r7, #4]
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <arrival_buzzer+0xb8>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	490f      	ldr	r1, [pc, #60]	; (8000bec <arrival_buzzer+0xc4>)
 8000bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <arrival_buzzer+0xc8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	0852      	lsrs	r2, r2, #1
 8000bbe:	635a      	str	r2, [r3, #52]	; 0x34
			TIM11_10ms_buzzer_counter = 0;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <arrival_buzzer+0xc0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
		}

		noTone();
 8000bc6:	f7ff ffa1 	bl	8000b0c <noTone>
	}

}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	00186a00 	.word	0x00186a00
 8000bd8:	200006ac 	.word	0x200006ac
 8000bdc:	20000918 	.word	0x20000918
 8000be0:	200006a8 	.word	0x200006a8
 8000be4:	20000914 	.word	0x20000914
 8000be8:	20000910 	.word	0x20000910
 8000bec:	20000014 	.word	0x20000014
 8000bf0:	200007e0 	.word	0x200007e0

08000bf4 <lcd_command>:




void lcd_command(uint8_t command)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af02      	add	r7, sp, #8
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	f023 030f 	bic.w	r3, r3, #15
 8000c04:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	011b      	lsls	r3, r3, #4
 8000c0a:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	f043 030c 	orr.w	r3, r3, #12
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000c20:	7bbb      	ldrb	r3, [r7, #14]
 8000c22:	f043 030c 	orr.w	r3, r3, #12
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000c34:	bf00      	nop
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2304      	movs	r3, #4
 8000c40:	214e      	movs	r1, #78	; 0x4e
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <lcd_command+0x64>)
 8000c44:	f002 fae6 	bl	8003214 <HAL_I2C_Master_Transmit>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f3      	bne.n	8000c36 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000c4e:	bf00      	nop
}
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200006dc 	.word	0x200006dc

08000c5c <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af02      	add	r7, sp, #8
 8000c62:	4603      	mov	r3, r0
 8000c64:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f023 030f 	bic.w	r3, r3, #15
 8000c6c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	011b      	lsls	r3, r3, #4
 8000c72:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	f043 030d 	orr.w	r3, r3, #13
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000c7e:	7bfb      	ldrb	r3, [r7, #15]
 8000c80:	f043 0309 	orr.w	r3, r3, #9
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000c88:	7bbb      	ldrb	r3, [r7, #14]
 8000c8a:	f043 030d 	orr.w	r3, r3, #13
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	f043 0309 	orr.w	r3, r3, #9
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000c9c:	bf00      	nop
 8000c9e:	f107 0208 	add.w	r2, r7, #8
 8000ca2:	2364      	movs	r3, #100	; 0x64
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	214e      	movs	r1, #78	; 0x4e
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <lcd_data+0x64>)
 8000cac:	f002 fab2 	bl	8003214 <HAL_I2C_Master_Transmit>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d1f3      	bne.n	8000c9e <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000cb6:	bf00      	nop
}
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200006dc 	.word	0x200006dc

08000cc4 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000cc8:	2033      	movs	r0, #51	; 0x33
 8000cca:	f7ff ff93 	bl	8000bf4 <lcd_command>
	lcd_command(0x32);
 8000cce:	2032      	movs	r0, #50	; 0x32
 8000cd0:	f7ff ff90 	bl	8000bf4 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000cd4:	2028      	movs	r0, #40	; 0x28
 8000cd6:	f7ff ff8d 	bl	8000bf4 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000cda:	200c      	movs	r0, #12
 8000cdc:	f7ff ff8a 	bl	8000bf4 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000ce0:	2006      	movs	r0, #6
 8000ce2:	f7ff ff87 	bl	8000bf4 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff84 	bl	8000bf4 <lcd_command>
	HAL_Delay(2);
 8000cec:	2002      	movs	r0, #2
 8000cee:	f001 fdb7 	bl	8002860 <HAL_Delay>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 8000cfe:	e006      	b.n	8000d0e <lcd_string+0x18>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ffa7 	bl	8000c5c <lcd_data>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f4      	bne.n	8000d00 <lcd_string+0xa>
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	019b      	lsls	r3, r3, #6
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff56 	bl	8000bf4 <lcd_command>
	return;
 8000d48:	bf00      	nop
}
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <bin2dec>:
// high nibble, Low nibble
// 0010 0010
// 20 + 2
// ==> 22
uint8_t bin2dec(uint8_t byte)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	low = byte & 0x0f; // 하위 4비트만 취한다.
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	73fb      	strb	r3, [r7, #15]
	high = ((byte >> 4) & 0x0f) * 10; 		// 00100010 ----> 4bit shift 우측으로 ==> 00000010 * 10 ==> 22
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	0092      	lsls	r2, r2, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	73bb      	strb	r3, [r7, #14]

	return high + low;
 8000d72:	7bba      	ldrb	r2, [r7, #14]
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	4413      	add	r3, r2
 8000d78:	b2db      	uxtb	r3, r3
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <dec2bin>:

// 10진수 --> BCD			22
uint8_t dec2bin(uint8_t byte)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = ((byte / 10) << 4);
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4a0d      	ldr	r2, [pc, #52]	; (8000dcc <dec2bin+0x44>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	08db      	lsrs	r3, r3, #3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	73fb      	strb	r3, [r7, #15]
	//00000010 << 4 ==> 00100000
	low = byte % 10;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <dec2bin+0x44>)
 8000da6:	fba3 1302 	umull	r1, r3, r3, r2
 8000daa:	08d9      	lsrs	r1, r3, #3
 8000dac:	460b      	mov	r3, r1
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	440b      	add	r3, r1
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	73bb      	strb	r3, [r7, #14]

	return high + low; // 0010 0010
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	7bbb      	ldrb	r3, [r7, #14]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	b2db      	uxtb	r3, r3
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	cccccccd 	.word	0xcccccccd

08000dd0 <get_rtc_time>:

// RTC에서 날짜와 시각 정보를 가져오는 함수
void get_rtc_time(void)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b096      	sub	sp, #88	; 0x58
 8000dd4:	af02      	add	r7, sp, #8
	static RTC_TimeTypeDef oTime;	// 이전 시각 정보
	char lcd_buff_floor_data[40];
	char lcd_buff_time[40];
	// 각 매개 변수에 call by ref 이기 때문에 주소 연산자를 앞에 붙임
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4925      	ldr	r1, [pc, #148]	; (8000e70 <get_rtc_time+0xa0>)
 8000dda:	4826      	ldr	r0, [pc, #152]	; (8000e74 <get_rtc_time+0xa4>)
 8000ddc:	f003 fbba 	bl	8004554 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000de0:	2201      	movs	r2, #1
 8000de2:	4925      	ldr	r1, [pc, #148]	; (8000e78 <get_rtc_time+0xa8>)
 8000de4:	4823      	ldr	r0, [pc, #140]	; (8000e74 <get_rtc_time+0xa4>)
 8000de6:	f003 fc97 	bl	8004718 <HAL_RTC_GetDate>

	if(oTime.Seconds != sTime.Seconds)
 8000dea:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <get_rtc_time+0xac>)
 8000dec:	789a      	ldrb	r2, [r3, #2]
 8000dee:	4b20      	ldr	r3, [pc, #128]	; (8000e70 <get_rtc_time+0xa0>)
 8000df0:	789b      	ldrb	r3, [r3, #2]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d033      	beq.n	8000e5e <get_rtc_time+0x8e>
//		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
//				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
//				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
		// text lcd의 1번 째 line에 출력

		sprintf(lcd_buff_floor_data,"Floor : 0%d",elevator_state);
 8000df6:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <get_rtc_time+0xb0>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dfe:	4921      	ldr	r1, [pc, #132]	; (8000e84 <get_rtc_time+0xb4>)
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 fba3 	bl	800754c <siprintf>
		move_cursor(1,0);
 8000e06:	2100      	movs	r1, #0
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff ff89 	bl	8000d20 <move_cursor>
		lcd_string(lcd_buff_floor_data);
 8000e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ff6f 	bl	8000cf6 <lcd_string>

		sprintf(lcd_buff_time,"TIME %02d:%02d:%02d",bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 8000e18:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <get_rtc_time+0xa0>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff97 	bl	8000d50 <bin2dec>
 8000e22:	4603      	mov	r3, r0
 8000e24:	461c      	mov	r4, r3
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <get_rtc_time+0xa0>)
 8000e28:	785b      	ldrb	r3, [r3, #1]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff90 	bl	8000d50 <bin2dec>
 8000e30:	4603      	mov	r3, r0
 8000e32:	461d      	mov	r5, r3
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <get_rtc_time+0xa0>)
 8000e36:	789b      	ldrb	r3, [r3, #2]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff89 	bl	8000d50 <bin2dec>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4638      	mov	r0, r7
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	462b      	mov	r3, r5
 8000e46:	4622      	mov	r2, r4
 8000e48:	490f      	ldr	r1, [pc, #60]	; (8000e88 <get_rtc_time+0xb8>)
 8000e4a:	f006 fb7f 	bl	800754c <siprintf>
		move_cursor(0,0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2000      	movs	r0, #0
 8000e52:	f7ff ff65 	bl	8000d20 <move_cursor>
		lcd_string(lcd_buff_time);
 8000e56:	463b      	mov	r3, r7
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff4c 	bl	8000cf6 <lcd_string>
	}
	oTime.Seconds = sTime.Seconds;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <get_rtc_time+0xa0>)
 8000e60:	789a      	ldrb	r2, [r3, #2]
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <get_rtc_time+0xac>)
 8000e64:	709a      	strb	r2, [r3, #2]
}
 8000e66:	bf00      	nop
 8000e68:	3750      	adds	r7, #80	; 0x50
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200006b0 	.word	0x200006b0
 8000e74:	20000730 	.word	0x20000730
 8000e78:	200006c4 	.word	0x200006c4
 8000e7c:	200006c8 	.word	0x200006c8
 8000e80:	20000028 	.word	0x20000028
 8000e84:	08008a60 	.word	0x08008a60
 8000e88:	08008a6c 	.word	0x08008a6c

08000e8c <set_rtc_date_time>:
// setrtc220830111500
// 012345678901234567
// pc_command_processing에 입력 받음
// data time이라는 변수에는  220830111500의 주소가 넘어온다.
void set_rtc_date_time(char *date_time)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4]; // 날짜 정보
	char hh[4], min[4], ss[4]; // 시각 정보

	strncpy(yy, date_time, 2);
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	2202      	movs	r2, #2
 8000e9a:	6879      	ldr	r1, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f006 fb89 	bl	80075b4 <strncpy>
	strncpy(mm, date_time+2, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	1c99      	adds	r1, r3, #2
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f006 fb81 	bl	80075b4 <strncpy>
	strncpy(dd, date_time+4, 2);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	1d19      	adds	r1, r3, #4
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	2202      	movs	r2, #2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fb79 	bl	80075b4 <strncpy>

	strncpy(hh, date_time+6, 2);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	1d99      	adds	r1, r3, #6
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	2202      	movs	r2, #2
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f006 fb71 	bl	80075b4 <strncpy>
	strncpy(min, date_time+8, 2);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f103 0108 	add.w	r1, r3, #8
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	2202      	movs	r2, #2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 fb68 	bl	80075b4 <strncpy>
	strncpy(ss, date_time+10, 2);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f103 010a 	add.w	r1, r3, #10
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2202      	movs	r2, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 fb5f 	bl	80075b4 <strncpy>

	// 1.ascii ==> int ==> bcd ==> rtc
	sDate.Year = dec2bin(atoi(yy));
 8000ef6:	f107 031c 	add.w	r3, r7, #28
 8000efa:	4618      	mov	r0, r3
 8000efc:	f006 fa62 	bl	80073c4 <atoi>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff3f 	bl	8000d88 <dec2bin>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b2b      	ldr	r3, [pc, #172]	; (8000fbc <set_rtc_date_time+0x130>)
 8000f10:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f006 fa54 	bl	80073c4 <atoi>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff31 	bl	8000d88 <dec2bin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <set_rtc_date_time+0x130>)
 8000f2c:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4618      	mov	r0, r3
 8000f34:	f006 fa46 	bl	80073c4 <atoi>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ff23 	bl	8000d88 <dec2bin>
 8000f42:	4603      	mov	r3, r0
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b1d      	ldr	r3, [pc, #116]	; (8000fbc <set_rtc_date_time+0x130>)
 8000f48:	709a      	strb	r2, [r3, #2]

	sTime.Hours = dec2bin(atoi(hh));
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f006 fa38 	bl	80073c4 <atoi>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff ff15 	bl	8000d88 <dec2bin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <set_rtc_date_time+0x134>)
 8000f64:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fa2a 	bl	80073c4 <atoi>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff07 	bl	8000d88 <dec2bin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <set_rtc_date_time+0x134>)
 8000f80:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4618      	mov	r0, r3
 8000f88:	f006 fa1c 	bl	80073c4 <atoi>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff fef9 	bl	8000d88 <dec2bin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <set_rtc_date_time+0x134>)
 8000f9c:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4906      	ldr	r1, [pc, #24]	; (8000fbc <set_rtc_date_time+0x130>)
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <set_rtc_date_time+0x138>)
 8000fa4:	f003 fb34 	bl	8004610 <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <set_rtc_date_time+0x134>)
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <set_rtc_date_time+0x138>)
 8000fae:	f003 fa37 	bl	8004420 <HAL_RTC_SetTime>
}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200006c4 	.word	0x200006c4
 8000fc0:	200006b0 	.word	0x200006b0
 8000fc4:	20000730 	.word	0x20000730

08000fc8 <led_all_on>:
		HAL_Delay(200);
	}
}

void led_all_on()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	21ff      	movs	r1, #255	; 0xff
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <led_all_on+0x14>)
 8000fd2:	f001 ffa9 	bl	8002f28 <HAL_GPIO_WritePin>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <led_all_off>:

void led_all_off()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	21ff      	movs	r1, #255	; 0xff
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <led_all_off+0x14>)
 8000fea:	f001 ff9d 	bl	8002f28 <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020400 	.word	0x40020400

08000ff8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001000:	1d39      	adds	r1, r7, #4
 8001002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001006:	2201      	movs	r2, #1
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <__io_putchar+0x20>)
 800100a:	f005 f9b0 	bl	800636e <HAL_UART_Transmit>

  return ch;
 800100e:	687b      	ldr	r3, [r7, #4]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200008b4 	.word	0x200008b4

0800101c <HAL_SYSTICK_Callback>:
volatile int led_timer = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	t1ms_count++;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_SYSTICK_Callback+0x2c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_SYSTICK_Callback+0x2c>)
 8001028:	6013      	str	r3, [r2, #0]
	t2ms_count ++;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_SYSTICK_Callback+0x30>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_SYSTICK_Callback+0x30>)
 8001032:	6013      	str	r3, [r2, #0]
	led_timer++;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_SYSTICK_Callback+0x34>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	3301      	adds	r3, #1
 800103a:	4a05      	ldr	r2, [pc, #20]	; (8001050 <HAL_SYSTICK_Callback+0x34>)
 800103c:	6013      	str	r3, [r2, #0]
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	200008f8 	.word	0x200008f8
 800104c:	200008fc 	.word	0x200008fc
 8001050:	20000900 	.word	0x20000900

08001054 <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM11_10ms_ultrasonic_counter = 0;
volatile int TIM11_10ms_servomotor_counter = 0;
volatile int TIM11_10ms_buzzer_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d113      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x3a>
	{
		TIM11_10ms_counter++;
 8001066:	4b0e      	ldr	r3, [pc, #56]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800106e:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a0b      	ldr	r2, [pc, #44]	; (80010a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001078:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001082:	6013      	str	r3, [r2, #0]
		TIM11_10ms_buzzer_counter++;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_TIM_PeriodElapsedCallback+0x58>)
 800108c:	6013      	str	r3, [r2, #0]
	}
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	40014800 	.word	0x40014800
 80010a0:	20000904 	.word	0x20000904
 80010a4:	20000908 	.word	0x20000908
 80010a8:	2000090c 	.word	0x2000090c
 80010ac:	20000910 	.word	0x20000910

080010b0 <HAL_GPIO_EXTI_Callback>:
// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every GPIO_EXTI_Callback function : enter here every 10ms
volatile int exint_signal = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80010ba:	88fb      	ldrh	r3, [r7, #6]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d002      	beq.n	80010c6 <HAL_GPIO_EXTI_Callback+0x16>
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d00f      	beq.n	80010e4 <HAL_GPIO_EXTI_Callback+0x34>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

  		exint_signal = 1;
  	  break;
  }
}
 80010c4:	e01d      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_0, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80010cc:	480f      	ldr	r0, [pc, #60]	; (800110c <HAL_GPIO_EXTI_Callback+0x5c>)
 80010ce:	f001 ff2b 	bl	8002f28 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	480d      	ldr	r0, [pc, #52]	; (800110c <HAL_GPIO_EXTI_Callback+0x5c>)
 80010d8:	f001 ff26 	bl	8002f28 <HAL_GPIO_WritePin>
  		exint_signal = 0;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_GPIO_EXTI_Callback+0x60>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
  	  break;
 80010e2:	e00e      	b.n	8001102 <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_1, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <HAL_GPIO_EXTI_Callback+0x5c>)
 80010ec:	f001 ff1c 	bl	8002f28 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2102      	movs	r1, #2
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_GPIO_EXTI_Callback+0x5c>)
 80010f6:	f001 ff17 	bl	8002f28 <HAL_GPIO_WritePin>
  		exint_signal = 1;
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <HAL_GPIO_EXTI_Callback+0x60>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
  	  break;
 8001100:	bf00      	nop
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40020400 	.word	0x40020400
 8001110:	20000024 	.word	0x20000024

08001114 <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <delay_us+0x2c>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 8001124:	bf00      	nop
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <delay_us+0x2c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	429a      	cmp	r2, r3
 8001130:	d8f9      	bhi.n	8001126 <delay_us+0x12>
	;
}
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000750 	.word	0x20000750

08001144 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001148:	f001 fb18 	bl	800277c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114c:	f000 f84a 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001150:	f000 fb04 	bl	800175c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001154:	f000 fad8 	bl	8001708 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8001158:	f000 fa88 	bl	800166c <MX_TIM11_Init>
  MX_TIM1_Init();
 800115c:	f000 f942 	bl	80013e4 <MX_TIM1_Init>
  MX_RTC_Init();
 8001160:	f000 f8e6 	bl	8001330 <MX_RTC_Init>
  MX_I2C1_Init();
 8001164:	f000 f8b6 	bl	80012d4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001168:	f000 f9b0 	bl	80014cc <MX_TIM2_Init>
  MX_TIM3_Init();
 800116c:	f000 fa24 	bl	80015b8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001170:	f000 faa0 	bl	80016b4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001174:	f000 f8a2 	bl	80012bc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 8001178:	4812      	ldr	r0, [pc, #72]	; (80011c4 <main+0x80>)
 800117a:	f003 fc29 	bl	80049d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 800117e:	2100      	movs	r1, #0
 8001180:	4811      	ldr	r0, [pc, #68]	; (80011c8 <main+0x84>)
 8001182:	f003 ff91 	bl	80050a8 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 8001186:	2201      	movs	r2, #1
 8001188:	4910      	ldr	r1, [pc, #64]	; (80011cc <main+0x88>)
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <main+0x8c>)
 800118c:	f005 f981 	bl	8006492 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);	// BT UART Enable rx_interrupt
 8001190:	2201      	movs	r2, #1
 8001192:	490e      	ldr	r1, [pc, #56]	; (80011cc <main+0x88>)
 8001194:	480f      	ldr	r0, [pc, #60]	; (80011d4 <main+0x90>)
 8001196:	f005 f97c 	bl	8006492 <HAL_UART_Receive_IT>
  // PC, BT
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PWM Control for Servo motor
 800119a:	2108      	movs	r1, #8
 800119c:	480e      	ldr	r0, [pc, #56]	; (80011d8 <main+0x94>)
 800119e:	f003 fd79 	bl	8004c94 <HAL_TIM_PWM_Start_IT>
  // TIM3 CH1 : PIEZO BUZZER
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011a2:	2100      	movs	r1, #0
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <main+0x98>)
 80011a6:	f003 fcc5 	bl	8004b34 <HAL_TIM_PWM_Start>

  i2c_lcd_init();
 80011aa:	f7ff fd8b 	bl	8000cc4 <i2c_lcd_init>
  printf("Hello STM32!!!\n");
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <main+0x9c>)
 80011b0:	f006 f9c4 	bl	800753c <puts>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pc_command_processing();
 80011b4:	f7ff fad0 	bl	8000758 <pc_command_processing>
	 // ultrasonic_processing();
	  get_rtc_time();
 80011b8:	f7ff fe0a 	bl	8000dd0 <get_rtc_time>
	  flow_button_move();
 80011bc:	f000 fd18 	bl	8001bf0 <flow_button_move>
  {
 80011c0:	e7f8      	b.n	80011b4 <main+0x70>
 80011c2:	bf00      	nop
 80011c4:	20000828 	.word	0x20000828
 80011c8:	20000750 	.word	0x20000750
 80011cc:	200006a0 	.word	0x200006a0
 80011d0:	200008b4 	.word	0x200008b4
 80011d4:	20000870 	.word	0x20000870
 80011d8:	20000798 	.word	0x20000798
 80011dc:	200007e0 	.word	0x200007e0
 80011e0:	08008a80 	.word	0x08008a80

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f006 f914 	bl	8007420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <SystemClock_Config+0xd0>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <SystemClock_Config+0xd0>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <SystemClock_Config+0xd0>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <SystemClock_Config+0xd4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a22      	ldr	r2, [pc, #136]	; (80012b8 <SystemClock_Config+0xd4>)
 800122e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <SystemClock_Config+0xd4>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001240:	230a      	movs	r3, #10
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800124c:	2301      	movs	r3, #1
 800124e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001254:	2300      	movs	r3, #0
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001258:	2310      	movs	r3, #16
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800125c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001262:	2304      	movs	r3, #4
 8001264:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001266:	2304      	movs	r3, #4
 8001268:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fad8 	bl	8003824 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800127a:	f000 fb11 	bl	80018a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001282:	2302      	movs	r3, #2
 8001284:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2102      	movs	r1, #2
 800129a:	4618      	mov	r0, r3
 800129c:	f002 fd3a 	bl	8003d14 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012a6:	f000 fafb 	bl	80018a0 <Error_Handler>
  }
}
 80012aa:	bf00      	nop
 80012ac:	3750      	adds	r7, #80	; 0x50
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40007000 	.word	0x40007000

080012bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	201a      	movs	r0, #26
 80012c6:	f001 fbca 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80012ca:	201a      	movs	r0, #26
 80012cc:	f001 fbe3 	bl	8002a96 <HAL_NVIC_EnableIRQ>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <MX_I2C1_Init+0x50>)
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <MX_I2C1_Init+0x54>)
 80012dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <MX_I2C1_Init+0x58>)
 80012e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_I2C1_Init+0x50>)
 80012f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012fe:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <MX_I2C1_Init+0x50>)
 8001312:	f001 fe3b 	bl	8002f8c <HAL_I2C_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800131c:	f000 fac0 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	200006dc 	.word	0x200006dc
 8001328:	40005400 	.word	0x40005400
 800132c:	000186a0 	.word	0x000186a0

08001330 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001344:	2300      	movs	r3, #0
 8001346:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <MX_RTC_Init+0xac>)
 800134a:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <MX_RTC_Init+0xb0>)
 800134c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <MX_RTC_Init+0xac>)
 8001350:	2200      	movs	r2, #0
 8001352:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <MX_RTC_Init+0xac>)
 8001356:	227f      	movs	r2, #127	; 0x7f
 8001358:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800135a:	4b20      	ldr	r3, [pc, #128]	; (80013dc <MX_RTC_Init+0xac>)
 800135c:	22ff      	movs	r2, #255	; 0xff
 800135e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_RTC_Init+0xac>)
 8001362:	2200      	movs	r2, #0
 8001364:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_RTC_Init+0xac>)
 8001368:	2200      	movs	r2, #0
 800136a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_RTC_Init+0xac>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001372:	481a      	ldr	r0, [pc, #104]	; (80013dc <MX_RTC_Init+0xac>)
 8001374:	f002 ffde 	bl	8004334 <HAL_RTC_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800137e:	f000 fa8f 	bl	80018a0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8001382:	2311      	movs	r3, #17
 8001384:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8001386:	2310      	movs	r3, #16
 8001388:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800138a:	2300      	movs	r3, #0
 800138c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2201      	movs	r2, #1
 800139a:	4619      	mov	r1, r3
 800139c:	480f      	ldr	r0, [pc, #60]	; (80013dc <MX_RTC_Init+0xac>)
 800139e:	f003 f83f 	bl	8004420 <HAL_RTC_SetTime>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013a8:	f000 fa7a 	bl	80018a0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80013ac:	2302      	movs	r3, #2
 80013ae:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80013b0:	2308      	movs	r3, #8
 80013b2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 80013b4:	2330      	movs	r3, #48	; 0x30
 80013b6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 80013b8:	2322      	movs	r3, #34	; 0x22
 80013ba:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013bc:	463b      	mov	r3, r7
 80013be:	2201      	movs	r2, #1
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_RTC_Init+0xac>)
 80013c4:	f003 f924 	bl	8004610 <HAL_RTC_SetDate>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80013ce:	f000 fa67 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000730 	.word	0x20000730
 80013e0:	40002800 	.word	0x40002800

080013e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001410:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <MX_TIM1_Init+0xe4>)
 8001412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001416:	2253      	movs	r2, #83	; 0x53
 8001418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <MX_TIM1_Init+0xe0>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001420:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_TIM1_Init+0xe0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142e:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800143a:	4822      	ldr	r0, [pc, #136]	; (80014c4 <MX_TIM1_Init+0xe0>)
 800143c:	f003 fa78 	bl	8004930 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001446:	f000 fa2b 	bl	80018a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4619      	mov	r1, r3
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001458:	f004 f9a6 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001462:	f000 fa1d 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001468:	f003 fdc4 	bl	8004ff4 <HAL_TIM_IC_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001472:	f000 fa15 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147e:	f107 0310 	add.w	r3, r7, #16
 8001482:	4619      	mov	r1, r3
 8001484:	480f      	ldr	r0, [pc, #60]	; (80014c4 <MX_TIM1_Init+0xe0>)
 8001486:	f004 fea3 	bl	80061d0 <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001490:	f000 fa06 	bl	80018a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001494:	230a      	movs	r3, #10
 8001496:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001498:	2301      	movs	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_TIM1_Init+0xe0>)
 80014ac:	f004 f81e 	bl	80054ec <HAL_TIM_IC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80014b6:	f000 f9f3 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3728      	adds	r7, #40	; 0x28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000750 	.word	0x20000750
 80014c8:	40010000 	.word	0x40010000

080014cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	; 0x38
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
 80014f8:	615a      	str	r2, [r3, #20]
 80014fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <MX_TIM2_Init+0xe8>)
 80014fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001502:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001504:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001506:	f240 628f 	movw	r2, #1679	; 0x68f
 800150a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM2_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001518:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_TIM2_Init+0xe8>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001526:	4823      	ldr	r0, [pc, #140]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001528:	f003 fa02 	bl	8004930 <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001532:	f000 f9b5 	bl	80018a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001540:	4619      	mov	r1, r3
 8001542:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001544:	f004 f930 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800154e:	f000 f9a7 	bl	80018a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001552:	4818      	ldr	r0, [pc, #96]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001554:	f003 fa9e 	bl	8004a94 <HAL_TIM_PWM_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800155e:	f000 f99f 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800156a:	f107 0320 	add.w	r3, r7, #32
 800156e:	4619      	mov	r1, r3
 8001570:	4810      	ldr	r0, [pc, #64]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001572:	f004 fe2d 	bl	80061d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800157c:	f000 f990 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001580:	2360      	movs	r3, #96	; 0x60
 8001582:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2208      	movs	r2, #8
 8001594:	4619      	mov	r1, r3
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM2_Init+0xe8>)
 8001598:	f004 f844 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015a2:	f000 f97d 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM2_Init+0xe8>)
 80015a8:	f000 fe5a 	bl	8002260 <HAL_TIM_MspPostInit>

}
 80015ac:	bf00      	nop
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000798 	.word	0x20000798

080015b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	; 0x28
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]
 80015d6:	615a      	str	r2, [r3, #20]
 80015d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_TIM3_Init+0xac>)
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <MX_TIM3_Init+0xb0>)
 80015de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_TIM3_Init+0xac>)
 80015e2:	2233      	movs	r2, #51	; 0x33
 80015e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_TIM3_Init+0xac>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_TIM3_Init+0xac>)
 80015ee:	f240 128f 	movw	r2, #399	; 0x18f
 80015f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_TIM3_Init+0xac>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_TIM3_Init+0xac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001600:	4818      	ldr	r0, [pc, #96]	; (8001664 <MX_TIM3_Init+0xac>)
 8001602:	f003 fa47 	bl	8004a94 <HAL_TIM_PWM_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 f948 	bl	80018a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001618:	f107 0320 	add.w	r3, r7, #32
 800161c:	4619      	mov	r1, r3
 800161e:	4811      	ldr	r0, [pc, #68]	; (8001664 <MX_TIM3_Init+0xac>)
 8001620:	f004 fdd6 	bl	80061d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800162a:	f000 f939 	bl	80018a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800162e:	2360      	movs	r3, #96	; 0x60
 8001630:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8001632:	23c7      	movs	r3, #199	; 0xc7
 8001634:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_TIM3_Init+0xac>)
 8001646:	f003 ffed 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001650:	f000 f926 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <MX_TIM3_Init+0xac>)
 8001656:	f000 fe03 	bl	8002260 <HAL_TIM_MspPostInit>

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200007e0 	.word	0x200007e0
 8001668:	40000400 	.word	0x40000400

0800166c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_TIM11_Init+0x40>)
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <MX_TIM11_Init+0x44>)
 8001674:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <MX_TIM11_Init+0x40>)
 8001678:	2253      	movs	r2, #83	; 0x53
 800167a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <MX_TIM11_Init+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_TIM11_Init+0x40>)
 8001684:	f242 720f 	movw	r2, #9999	; 0x270f
 8001688:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <MX_TIM11_Init+0x40>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_TIM11_Init+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001696:	4805      	ldr	r0, [pc, #20]	; (80016ac <MX_TIM11_Init+0x40>)
 8001698:	f003 f94a 	bl	8004930 <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80016a2:	f000 f8fd 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000828 	.word	0x20000828
 80016b0:	40014800 	.word	0x40014800

080016b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART1_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART1_UART_Init+0x4c>)
 80016ec:	f004 fdf2 	bl	80062d4 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f000 f8d3 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000870 	.word	0x20000870
 8001704:	40011000 	.word	0x40011000

08001708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 800170e:	4a12      	ldr	r2, [pc, #72]	; (8001758 <MX_USART2_UART_Init+0x50>)
 8001710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 8001714:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b08      	ldr	r3, [pc, #32]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173e:	4805      	ldr	r0, [pc, #20]	; (8001754 <MX_USART2_UART_Init+0x4c>)
 8001740:	f004 fdc8 	bl	80062d4 <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800174a:	f000 f8a9 	bl	80018a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200008b4 	.word	0x200008b4
 8001758:	40004400 	.word	0x40004400

0800175c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]
 800176c:	609a      	str	r2, [r3, #8]
 800176e:	60da      	str	r2, [r3, #12]
 8001770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b46      	ldr	r3, [pc, #280]	; (8001890 <MX_GPIO_Init+0x134>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a45      	ldr	r2, [pc, #276]	; (8001890 <MX_GPIO_Init+0x134>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b43      	ldr	r3, [pc, #268]	; (8001890 <MX_GPIO_Init+0x134>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b3f      	ldr	r3, [pc, #252]	; (8001890 <MX_GPIO_Init+0x134>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <MX_GPIO_Init+0x134>)
 8001798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <MX_GPIO_Init+0x134>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	4b38      	ldr	r3, [pc, #224]	; (8001890 <MX_GPIO_Init+0x134>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a37      	ldr	r2, [pc, #220]	; (8001890 <MX_GPIO_Init+0x134>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b35      	ldr	r3, [pc, #212]	; (8001890 <MX_GPIO_Init+0x134>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <MX_GPIO_Init+0x134>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a30      	ldr	r2, [pc, #192]	; (8001890 <MX_GPIO_Init+0x134>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <MX_GPIO_Init+0x134>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 80017e8:	482a      	ldr	r0, [pc, #168]	; (8001894 <MX_GPIO_Init+0x138>)
 80017ea:	f001 fb9d 	bl	8002f28 <HAL_GPIO_WritePin>
                          |INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80017ee:	2200      	movs	r2, #0
 80017f0:	21ff      	movs	r1, #255	; 0xff
 80017f2:	4829      	ldr	r0, [pc, #164]	; (8001898 <MX_GPIO_Init+0x13c>)
 80017f4:	f001 fb98 	bl	8002f28 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin
                           BUTTON5_Pin BUTTON6_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin
 80017f8:	f640 430f 	movw	r3, #3087	; 0xc0f
 80017fc:	617b      	str	r3, [r7, #20]
                          |BUTTON5_Pin|BUTTON6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4821      	ldr	r0, [pc, #132]	; (8001894 <MX_GPIO_Init+0x138>)
 800180e:	f001 f9ef 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001812:	2303      	movs	r3, #3
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0314 	add.w	r3, r7, #20
 8001824:	4619      	mov	r1, r3
 8001826:	481d      	ldr	r0, [pc, #116]	; (800189c <MX_GPIO_Init+0x140>)
 8001828:	f001 f9e2 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIG_Pin INT1_STEP_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin|INT1_STEP_Pin|INT2_Pin|INT3_Pin
 800182c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001830:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183e:	f107 0314 	add.w	r3, r7, #20
 8001842:	4619      	mov	r1, r3
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <MX_GPIO_Init+0x138>)
 8001846:	f001 f9d3 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800184a:	23ff      	movs	r3, #255	; 0xff
 800184c:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800185a:	f107 0314 	add.w	r3, r7, #20
 800185e:	4619      	mov	r1, r3
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_GPIO_Init+0x13c>)
 8001862:	f001 f9c5 	bl	8002bf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2100      	movs	r1, #0
 800186a:	2006      	movs	r0, #6
 800186c:	f001 f8f7 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001870:	2006      	movs	r0, #6
 8001872:	f001 f910 	bl	8002a96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	2007      	movs	r0, #7
 800187c:	f001 f8ef 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001880:	2007      	movs	r0, #7
 8001882:	f001 f908 	bl	8002a96 <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3728      	adds	r7, #40	; 0x28
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	40020800 	.word	0x40020800
 8001898:	40020400 	.word	0x40020400
 800189c:	40020000 	.word	0x40020000

080018a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a4:	b672      	cpsid	i
}
 80018a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <Error_Handler+0x8>
	...

080018ac <auto_door_sequence>:

int door_mode = 0;
int arm_rotate_indicator = 0;

void auto_door_sequence()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

	if(door_mode == 3)
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <auto_door_sequence+0x6c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b03      	cmp	r3, #3
 80018b6:	d111      	bne.n	80018dc <auto_door_sequence+0x30>
	{
		HAL_TIM_PWM_Stop_IT(&htim2, TIM_CHANNEL_3);
 80018b8:	2108      	movs	r1, #8
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <auto_door_sequence+0x70>)
 80018bc:	f003 fae8 	bl	8004e90 <HAL_TIM_PWM_Stop_IT>
		if(elevator_mode_state == 3)
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <auto_door_sequence+0x74>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d109      	bne.n	80018dc <auto_door_sequence+0x30>
		{
			HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);
 80018c8:	2108      	movs	r1, #8
 80018ca:	4814      	ldr	r0, [pc, #80]	; (800191c <auto_door_sequence+0x70>)
 80018cc:	f003 f9e2 	bl	8004c94 <HAL_TIM_PWM_Start_IT>
			TIM11_10ms_servomotor_counter = 0;
 80018d0:	4b14      	ldr	r3, [pc, #80]	; (8001924 <auto_door_sequence+0x78>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
			door_mode = 1;
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <auto_door_sequence+0x6c>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
		}

	}

	// 180' turn
	if(door_mode == 1)
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <auto_door_sequence+0x6c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d117      	bne.n	8001914 <auto_door_sequence+0x68>
	{
		// get_button ==> timer 0initial
		if(TIM11_10ms_servomotor_counter == 0)
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <auto_door_sequence+0x78>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d104      	bne.n	80018f6 <auto_door_sequence+0x4a>
		{
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 110); // door open
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <auto_door_sequence+0x70>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	226e      	movs	r2, #110	; 0x6e
 80018f2:	63da      	str	r2, [r3, #60]	; 0x3c
			door_mode = 0;
			elevator_mode_state = 0;
		}

	}
}
 80018f4:	e00e      	b.n	8001914 <auto_door_sequence+0x68>
		else if(TIM11_10ms_servomotor_counter == 300)
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <auto_door_sequence+0x78>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80018fe:	d109      	bne.n	8001914 <auto_door_sequence+0x68>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 10);	// close
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <auto_door_sequence+0x70>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	220a      	movs	r2, #10
 8001906:	63da      	str	r2, [r3, #60]	; 0x3c
			door_mode = 0;
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <auto_door_sequence+0x6c>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
			elevator_mode_state = 0;
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <auto_door_sequence+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000914 	.word	0x20000914
 800191c:	20000798 	.word	0x20000798
 8001920:	20000918 	.word	0x20000918
 8001924:	2000090c 	.word	0x2000090c

08001928 <set_rpm>:

extern volatile int exint_signal;


void set_rpm(int rpm)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
	delay_us(60000000/ STEPS_PER_REV/rpm);
 8001930:	f643 1238 	movw	r2, #14648	; 0x3938
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	fb92 f3f3 	sdiv	r3, r2, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fbea 	bl	8001114 <delay_us>
	// 최대 speed 기준 (13) ==> _delay_us(1126)
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <stepmotor_driver_step>:


void stepmotor_driver_step(int direction, int step_limit)	// direction ==> Forward or Backward
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
	switch(temp_step)
 8001952:	4ba2      	ldr	r3, [pc, #648]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b07      	cmp	r3, #7
 8001958:	f200 80cc 	bhi.w	8001af4 <stepmotor_driver_step+0x1ac>
 800195c:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <stepmotor_driver_step+0x1c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001985 	.word	0x08001985
 8001968:	080019b3 	.word	0x080019b3
 800196c:	080019e1 	.word	0x080019e1
 8001970:	08001a0f 	.word	0x08001a0f
 8001974:	08001a3d 	.word	0x08001a3d
 8001978:	08001a6b 	.word	0x08001a6b
 800197c:	08001a99 	.word	0x08001a99
 8001980:	08001ac7 	.word	0x08001ac7
	{
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	2140      	movs	r1, #64	; 0x40
 8001988:	4895      	ldr	r0, [pc, #596]	; (8001be0 <stepmotor_driver_step+0x298>)
 800198a:	f001 facd 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	4893      	ldr	r0, [pc, #588]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001994:	f001 fac8 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199e:	4890      	ldr	r0, [pc, #576]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019a0:	f001 fac2 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019aa:	488d      	ldr	r0, [pc, #564]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019ac:	f001 fabc 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 80019b0:	e0a0      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 1:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 80019b2:	2201      	movs	r2, #1
 80019b4:	2140      	movs	r1, #64	; 0x40
 80019b6:	488a      	ldr	r0, [pc, #552]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019b8:	f001 fab6 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80019bc:	2201      	movs	r2, #1
 80019be:	2180      	movs	r1, #128	; 0x80
 80019c0:	4887      	ldr	r0, [pc, #540]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019c2:	f001 fab1 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019cc:	4884      	ldr	r0, [pc, #528]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019ce:	f001 faab 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019d8:	4881      	ldr	r0, [pc, #516]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019da:	f001 faa5 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 80019de:	e089      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 2:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2140      	movs	r1, #64	; 0x40
 80019e4:	487e      	ldr	r0, [pc, #504]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019e6:	f001 fa9f 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80019ea:	2201      	movs	r2, #1
 80019ec:	2180      	movs	r1, #128	; 0x80
 80019ee:	487c      	ldr	r0, [pc, #496]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019f0:	f001 fa9a 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019fa:	4879      	ldr	r0, [pc, #484]	; (8001be0 <stepmotor_driver_step+0x298>)
 80019fc:	f001 fa94 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a06:	4876      	ldr	r0, [pc, #472]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a08:	f001 fa8e 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001a0c:	e072      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 3:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2140      	movs	r1, #64	; 0x40
 8001a12:	4873      	ldr	r0, [pc, #460]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a14:	f001 fa88 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2180      	movs	r1, #128	; 0x80
 8001a1c:	4870      	ldr	r0, [pc, #448]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a1e:	f001 fa83 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a28:	486d      	ldr	r0, [pc, #436]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a2a:	f001 fa7d 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a34:	486a      	ldr	r0, [pc, #424]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a36:	f001 fa77 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001a3a:	e05b      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 4:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2140      	movs	r1, #64	; 0x40
 8001a40:	4867      	ldr	r0, [pc, #412]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a42:	f001 fa71 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2180      	movs	r1, #128	; 0x80
 8001a4a:	4865      	ldr	r0, [pc, #404]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a4c:	f001 fa6c 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a56:	4862      	ldr	r0, [pc, #392]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a58:	f001 fa66 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a62:	485f      	ldr	r0, [pc, #380]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a64:	f001 fa60 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001a68:	e044      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 5:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2140      	movs	r1, #64	; 0x40
 8001a6e:	485c      	ldr	r0, [pc, #368]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a70:	f001 fa5a 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2180      	movs	r1, #128	; 0x80
 8001a78:	4859      	ldr	r0, [pc, #356]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a7a:	f001 fa55 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a84:	4856      	ldr	r0, [pc, #344]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a86:	f001 fa4f 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a90:	4853      	ldr	r0, [pc, #332]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a92:	f001 fa49 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001a96:	e02d      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 6:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2140      	movs	r1, #64	; 0x40
 8001a9c:	4850      	ldr	r0, [pc, #320]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001a9e:	f001 fa43 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2180      	movs	r1, #128	; 0x80
 8001aa6:	484e      	ldr	r0, [pc, #312]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001aa8:	f001 fa3e 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001aac:	2200      	movs	r2, #0
 8001aae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab2:	484b      	ldr	r0, [pc, #300]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001ab4:	f001 fa38 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001abe:	4848      	ldr	r0, [pc, #288]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001ac0:	f001 fa32 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001ac4:	e016      	b.n	8001af4 <stepmotor_driver_step+0x1ac>

		case 7:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2140      	movs	r1, #64	; 0x40
 8001aca:	4845      	ldr	r0, [pc, #276]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001acc:	f001 fa2c 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	4842      	ldr	r0, [pc, #264]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001ad6:	f001 fa27 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae0:	483f      	ldr	r0, [pc, #252]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001ae2:	f001 fa21 	bl	8002f28 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001aec:	483c      	ldr	r0, [pc, #240]	; (8001be0 <stepmotor_driver_step+0x298>)
 8001aee:	f001 fa1b 	bl	8002f28 <HAL_GPIO_WritePin>
		break;
 8001af2:	bf00      	nop
	}
	if(direction == FORWARD)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d12e      	bne.n	8001b58 <stepmotor_driver_step+0x210>
	{
		if(temp_step_count <= step_limit)
 8001afa:	4b3a      	ldr	r3, [pc, #232]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	db20      	blt.n	8001b46 <stepmotor_driver_step+0x1fe>
		{
			temp_step_count++;
 8001b04:	4b37      	ldr	r3, [pc, #220]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b0c:	6013      	str	r3, [r2, #0]
			temp_step++;
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	3301      	adds	r3, #1
 8001b14:	4a31      	ldr	r2, [pc, #196]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b16:	6013      	str	r3, [r2, #0]
			temp_step %= 8;
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	425a      	negs	r2, r3
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	f002 0207 	and.w	r2, r2, #7
 8001b26:	bf58      	it	pl
 8001b28:	4253      	negpl	r3, r2
 8001b2a:	4a2c      	ldr	r2, [pc, #176]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b2c:	6013      	str	r3, [r2, #0]

			if(temp_step_count % STEPS_PER_REV == 0)
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10e      	bne.n	8001b58 <stepmotor_driver_step+0x210>
			{
				elevator_state++; // LCD
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <stepmotor_driver_step+0x2a0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a29      	ldr	r2, [pc, #164]	; (8001be8 <stepmotor_driver_step+0x2a0>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	e008      	b.n	8001b58 <stepmotor_driver_step+0x210>
			}
		}
		else
		{
			temp_step = 0;
 8001b46:	4b25      	ldr	r3, [pc, #148]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
			temp_step_count = 0;
 8001b4c:	4b25      	ldr	r3, [pc, #148]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

			elevator_mode_state = ARRIVAL_MODE;
 8001b52:	4b26      	ldr	r3, [pc, #152]	; (8001bec <stepmotor_driver_step+0x2a4>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	601a      	str	r2, [r3, #0]
		}


	}

	if(direction == BACKWARD)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d13a      	bne.n	8001bd4 <stepmotor_driver_step+0x28c>
	{

		if(temp_step_count <= step_limit)
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	db2c      	blt.n	8001bc2 <stepmotor_driver_step+0x27a>
		{
			temp_step_count++;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	4a1d      	ldr	r2, [pc, #116]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001b70:	6013      	str	r3, [r2, #0]

			if(temp_step >= 0)
 8001b72:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	db10      	blt.n	8001b9c <stepmotor_driver_step+0x254>
			{
				temp_step--;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b82:	6013      	str	r3, [r2, #0]
				temp_step %= 8;
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	425a      	negs	r2, r3
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	f002 0207 	and.w	r2, r2, #7
 8001b92:	bf58      	it	pl
 8001b94:	4253      	negpl	r3, r2
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e006      	b.n	8001baa <stepmotor_driver_step+0x262>
			}
			else if(temp_step < 0)
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	da02      	bge.n	8001baa <stepmotor_driver_step+0x262>
			{
				temp_step = 7;
 8001ba4:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001ba6:	2207      	movs	r2, #7
 8001ba8:	601a      	str	r2, [r3, #0]
			}

			if(temp_step_count % STEPS_PER_REV == 0)
 8001baa:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10e      	bne.n	8001bd4 <stepmotor_driver_step+0x28c>
			{
				elevator_state--;
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <stepmotor_driver_step+0x2a0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <stepmotor_driver_step+0x2a0>)
 8001bbe:	6013      	str	r3, [r2, #0]
			temp_step_count = 0;

			elevator_mode_state = ARRIVAL_MODE;
		}
	}
}
 8001bc0:	e008      	b.n	8001bd4 <stepmotor_driver_step+0x28c>
			temp_step = 0;
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <stepmotor_driver_step+0x294>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
			temp_step_count = 0;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <stepmotor_driver_step+0x29c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
			elevator_mode_state = ARRIVAL_MODE;
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <stepmotor_driver_step+0x2a4>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	601a      	str	r2, [r3, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000920 	.word	0x20000920
 8001be0:	40020800 	.word	0x40020800
 8001be4:	20000924 	.word	0x20000924
 8001be8:	20000028 	.word	0x20000028
 8001bec:	20000918 	.word	0x20000918

08001bf0 <flow_button_move>:


void flow_button_move()
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

	switch(elevator_mode_state)
 8001bf4:	4b86      	ldr	r3, [pc, #536]	; (8001e10 <flow_button_move+0x220>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	f200 81c8 	bhi.w	8001f8e <flow_button_move+0x39e>
 8001bfe:	a201      	add	r2, pc, #4	; (adr r2, 8001c04 <flow_button_move+0x14>)
 8001c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c04:	08001c15 	.word	0x08001c15
 8001c08:	08001f27 	.word	0x08001f27
 8001c0c:	08001f55 	.word	0x08001f55
 8001c10:	08001f83 	.word	0x08001f83
		{
			case STANDBY_MODE:
				if(pre_floor == 1)
 8001c14:	4b7f      	ldr	r3, [pc, #508]	; (8001e14 <flow_button_move+0x224>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10a      	bne.n	8001c32 <flow_button_move+0x42>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	487d      	ldr	r0, [pc, #500]	; (8001e18 <flow_button_move+0x228>)
 8001c22:	f001 f981 	bl	8002f28 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x01, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2101      	movs	r1, #1
 8001c2a:	487b      	ldr	r0, [pc, #492]	; (8001e18 <flow_button_move+0x228>)
 8001c2c:	f001 f97c 	bl	8002f28 <HAL_GPIO_WritePin>
 8001c30:	e049      	b.n	8001cc6 <flow_button_move+0xd6>
				}
				else if(pre_floor == 2)
 8001c32:	4b78      	ldr	r3, [pc, #480]	; (8001e14 <flow_button_move+0x224>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d10a      	bne.n	8001c50 <flow_button_move+0x60>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	21ff      	movs	r1, #255	; 0xff
 8001c3e:	4876      	ldr	r0, [pc, #472]	; (8001e18 <flow_button_move+0x228>)
 8001c40:	f001 f972 	bl	8002f28 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x03, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	2103      	movs	r1, #3
 8001c48:	4873      	ldr	r0, [pc, #460]	; (8001e18 <flow_button_move+0x228>)
 8001c4a:	f001 f96d 	bl	8002f28 <HAL_GPIO_WritePin>
 8001c4e:	e03a      	b.n	8001cc6 <flow_button_move+0xd6>
				}
				else if(pre_floor == 3)
 8001c50:	4b70      	ldr	r3, [pc, #448]	; (8001e14 <flow_button_move+0x224>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d10a      	bne.n	8001c6e <flow_button_move+0x7e>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	21ff      	movs	r1, #255	; 0xff
 8001c5c:	486e      	ldr	r0, [pc, #440]	; (8001e18 <flow_button_move+0x228>)
 8001c5e:	f001 f963 	bl	8002f28 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_SET);
 8001c62:	2201      	movs	r2, #1
 8001c64:	2107      	movs	r1, #7
 8001c66:	486c      	ldr	r0, [pc, #432]	; (8001e18 <flow_button_move+0x228>)
 8001c68:	f001 f95e 	bl	8002f28 <HAL_GPIO_WritePin>
 8001c6c:	e02b      	b.n	8001cc6 <flow_button_move+0xd6>
				}
				else if(pre_floor == 4)
 8001c6e:	4b69      	ldr	r3, [pc, #420]	; (8001e14 <flow_button_move+0x224>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d10a      	bne.n	8001c8c <flow_button_move+0x9c>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	21ff      	movs	r1, #255	; 0xff
 8001c7a:	4867      	ldr	r0, [pc, #412]	; (8001e18 <flow_button_move+0x228>)
 8001c7c:	f001 f954 	bl	8002f28 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x0f, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	210f      	movs	r1, #15
 8001c84:	4864      	ldr	r0, [pc, #400]	; (8001e18 <flow_button_move+0x228>)
 8001c86:	f001 f94f 	bl	8002f28 <HAL_GPIO_WritePin>
 8001c8a:	e01c      	b.n	8001cc6 <flow_button_move+0xd6>
				}
				else if(pre_floor == 5)
 8001c8c:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <flow_button_move+0x224>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b05      	cmp	r3, #5
 8001c92:	d10a      	bne.n	8001caa <flow_button_move+0xba>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	21ff      	movs	r1, #255	; 0xff
 8001c98:	485f      	ldr	r0, [pc, #380]	; (8001e18 <flow_button_move+0x228>)
 8001c9a:	f001 f945 	bl	8002f28 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x1f, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	211f      	movs	r1, #31
 8001ca2:	485d      	ldr	r0, [pc, #372]	; (8001e18 <flow_button_move+0x228>)
 8001ca4:	f001 f940 	bl	8002f28 <HAL_GPIO_WritePin>
 8001ca8:	e00d      	b.n	8001cc6 <flow_button_move+0xd6>
				}
				else if(pre_floor == 6)
 8001caa:	4b5a      	ldr	r3, [pc, #360]	; (8001e14 <flow_button_move+0x224>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d109      	bne.n	8001cc6 <flow_button_move+0xd6>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	21ff      	movs	r1, #255	; 0xff
 8001cb6:	4858      	ldr	r0, [pc, #352]	; (8001e18 <flow_button_move+0x228>)
 8001cb8:	f001 f936 	bl	8002f28 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x3f, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	213f      	movs	r1, #63	; 0x3f
 8001cc0:	4855      	ldr	r0, [pc, #340]	; (8001e18 <flow_button_move+0x228>)
 8001cc2:	f001 f931 	bl	8002f28 <HAL_GPIO_WritePin>
				}


				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001cc6:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <flow_button_move+0x22c>)
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4855      	ldr	r0, [pc, #340]	; (8001e20 <flow_button_move+0x230>)
 8001ccc:	f7fe fef0 	bl	8000ab0 <get_button>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d120      	bne.n	8001d18 <flow_button_move+0x128>
				{
					if(pre_floor > 1)
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	; (8001e14 <flow_button_move+0x224>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	dd0f      	ble.n	8001cfe <flow_button_move+0x10e>
					{
						elevator_state = pre_floor;
 8001cde:	4b4d      	ldr	r3, [pc, #308]	; (8001e14 <flow_button_move+0x224>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a50      	ldr	r2, [pc, #320]	; (8001e24 <flow_button_move+0x234>)
 8001ce4:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 1;
 8001ce6:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <flow_button_move+0x224>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	4a4e      	ldr	r2, [pc, #312]	; (8001e28 <flow_button_move+0x238>)
 8001cee:	6013      	str	r3, [r2, #0]
						pre_floor = 1;
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <flow_button_move+0x224>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE; // BACKWARD
 8001cf6:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <flow_button_move+0x220>)
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e00c      	b.n	8001d18 <flow_button_move+0x128>
					}
					else if(pre_floor < 1)
 8001cfe:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <flow_button_move+0x224>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	dc08      	bgt.n	8001d18 <flow_button_move+0x128>
					{
						elevator_state = 1;
 8001d06:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <flow_button_move+0x234>)
 8001d08:	2201      	movs	r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
						pre_floor = 1;
 8001d0c:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <flow_button_move+0x224>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE;
 8001d12:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <flow_button_move+0x220>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]
					}

				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 8001d18:	4a44      	ldr	r2, [pc, #272]	; (8001e2c <flow_button_move+0x23c>)
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	4840      	ldr	r0, [pc, #256]	; (8001e20 <flow_button_move+0x230>)
 8001d1e:	f7fe fec7 	bl	8000ab0 <get_button>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d127      	bne.n	8001d78 <flow_button_move+0x188>
				{
					if(pre_floor > 2)
 8001d28:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <flow_button_move+0x224>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	dd0f      	ble.n	8001d50 <flow_button_move+0x160>
					{
						elevator_state = pre_floor;
 8001d30:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <flow_button_move+0x224>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <flow_button_move+0x234>)
 8001d36:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 2;
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <flow_button_move+0x224>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	3b02      	subs	r3, #2
 8001d3e:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <flow_button_move+0x238>)
 8001d40:	6013      	str	r3, [r2, #0]
						pre_floor = 2;
 8001d42:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <flow_button_move+0x224>)
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <flow_button_move+0x220>)
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e013      	b.n	8001d78 <flow_button_move+0x188>
					}
					else if(pre_floor < 2)
 8001d50:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <flow_button_move+0x224>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	dc0f      	bgt.n	8001d78 <flow_button_move+0x188>
					{
						elevator_state = pre_floor;
 8001d58:	4b2e      	ldr	r3, [pc, #184]	; (8001e14 <flow_button_move+0x224>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a31      	ldr	r2, [pc, #196]	; (8001e24 <flow_button_move+0x234>)
 8001d5e:	6013      	str	r3, [r2, #0]
						floor_gap = 2 - pre_floor;
 8001d60:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <flow_button_move+0x224>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1c3 0302 	rsb	r3, r3, #2
 8001d68:	4a2f      	ldr	r2, [pc, #188]	; (8001e28 <flow_button_move+0x238>)
 8001d6a:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 2;
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <flow_button_move+0x224>)
 8001d6e:	2202      	movs	r2, #2
 8001d70:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001d72:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <flow_button_move+0x220>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON3_Pin, &prev_button3_state) == BUTTON_PRESS)
 8001d78:	4a2d      	ldr	r2, [pc, #180]	; (8001e30 <flow_button_move+0x240>)
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	4828      	ldr	r0, [pc, #160]	; (8001e20 <flow_button_move+0x230>)
 8001d7e:	f7fe fe97 	bl	8000ab0 <get_button>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d127      	bne.n	8001dd8 <flow_button_move+0x1e8>
				{
					if(pre_floor > 3)
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <flow_button_move+0x224>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	dd0f      	ble.n	8001db0 <flow_button_move+0x1c0>
					{
						elevator_state = pre_floor;
 8001d90:	4b20      	ldr	r3, [pc, #128]	; (8001e14 <flow_button_move+0x224>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <flow_button_move+0x234>)
 8001d96:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 3;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <flow_button_move+0x224>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	4a22      	ldr	r2, [pc, #136]	; (8001e28 <flow_button_move+0x238>)
 8001da0:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 3;
 8001da2:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <flow_button_move+0x224>)
 8001da4:	2203      	movs	r2, #3
 8001da6:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <flow_button_move+0x220>)
 8001daa:	2202      	movs	r2, #2
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e013      	b.n	8001dd8 <flow_button_move+0x1e8>
					}
					else if(pre_floor < 3)
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <flow_button_move+0x224>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	dc0f      	bgt.n	8001dd8 <flow_button_move+0x1e8>
					{
						elevator_state = pre_floor;
 8001db8:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <flow_button_move+0x224>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a19      	ldr	r2, [pc, #100]	; (8001e24 <flow_button_move+0x234>)
 8001dbe:	6013      	str	r3, [r2, #0]
						floor_gap = 3 - pre_floor;
 8001dc0:	4b14      	ldr	r3, [pc, #80]	; (8001e14 <flow_button_move+0x224>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1c3 0303 	rsb	r3, r3, #3
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <flow_button_move+0x238>)
 8001dca:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 3;
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <flow_button_move+0x224>)
 8001dce:	2203      	movs	r2, #3
 8001dd0:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <flow_button_move+0x220>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON4_Pin, &prev_button4_state) == BUTTON_PRESS)
 8001dd8:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <flow_button_move+0x244>)
 8001dda:	2108      	movs	r1, #8
 8001ddc:	4810      	ldr	r0, [pc, #64]	; (8001e20 <flow_button_move+0x230>)
 8001dde:	f7fe fe67 	bl	8000ab0 <get_button>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d13b      	bne.n	8001e60 <flow_button_move+0x270>
				{


					if(pre_floor > 4)
 8001de8:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <flow_button_move+0x224>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	dd23      	ble.n	8001e38 <flow_button_move+0x248>
					{
						elevator_state = pre_floor;
 8001df0:	4b08      	ldr	r3, [pc, #32]	; (8001e14 <flow_button_move+0x224>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <flow_button_move+0x234>)
 8001df6:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 4;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <flow_button_move+0x224>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3b04      	subs	r3, #4
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	; (8001e28 <flow_button_move+0x238>)
 8001e00:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 4;
 8001e02:	4b04      	ldr	r3, [pc, #16]	; (8001e14 <flow_button_move+0x224>)
 8001e04:	2204      	movs	r2, #4
 8001e06:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001e08:	4b01      	ldr	r3, [pc, #4]	; (8001e10 <flow_button_move+0x220>)
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	e027      	b.n	8001e60 <flow_button_move+0x270>
 8001e10:	20000918 	.word	0x20000918
 8001e14:	2000002c 	.word	0x2000002c
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	40020800 	.word	0x40020800
 8001e24:	20000028 	.word	0x20000028
 8001e28:	2000091c 	.word	0x2000091c
 8001e2c:	2000000d 	.word	0x2000000d
 8001e30:	2000000e 	.word	0x2000000e
 8001e34:	2000000f 	.word	0x2000000f
					}
					else if(pre_floor < 4)
 8001e38:	4b56      	ldr	r3, [pc, #344]	; (8001f94 <flow_button_move+0x3a4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	dc0f      	bgt.n	8001e60 <flow_button_move+0x270>
					{
						elevator_state = pre_floor;
 8001e40:	4b54      	ldr	r3, [pc, #336]	; (8001f94 <flow_button_move+0x3a4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a54      	ldr	r2, [pc, #336]	; (8001f98 <flow_button_move+0x3a8>)
 8001e46:	6013      	str	r3, [r2, #0]
						floor_gap = 4 - pre_floor;
 8001e48:	4b52      	ldr	r3, [pc, #328]	; (8001f94 <flow_button_move+0x3a4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1c3 0304 	rsb	r3, r3, #4
 8001e50:	4a52      	ldr	r2, [pc, #328]	; (8001f9c <flow_button_move+0x3ac>)
 8001e52:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 4;
 8001e54:	4b4f      	ldr	r3, [pc, #316]	; (8001f94 <flow_button_move+0x3a4>)
 8001e56:	2204      	movs	r2, #4
 8001e58:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001e5a:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <flow_button_move+0x3b0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON5_Pin, &prev_button5_state) == BUTTON_PRESS)
 8001e60:	4a50      	ldr	r2, [pc, #320]	; (8001fa4 <flow_button_move+0x3b4>)
 8001e62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e66:	4850      	ldr	r0, [pc, #320]	; (8001fa8 <flow_button_move+0x3b8>)
 8001e68:	f7fe fe22 	bl	8000ab0 <get_button>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d127      	bne.n	8001ec2 <flow_button_move+0x2d2>
				{


					if(pre_floor > 5)
 8001e72:	4b48      	ldr	r3, [pc, #288]	; (8001f94 <flow_button_move+0x3a4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2b05      	cmp	r3, #5
 8001e78:	dd0f      	ble.n	8001e9a <flow_button_move+0x2aa>
					{
						elevator_state = pre_floor;
 8001e7a:	4b46      	ldr	r3, [pc, #280]	; (8001f94 <flow_button_move+0x3a4>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <flow_button_move+0x3a8>)
 8001e80:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 5;
 8001e82:	4b44      	ldr	r3, [pc, #272]	; (8001f94 <flow_button_move+0x3a4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3b05      	subs	r3, #5
 8001e88:	4a44      	ldr	r2, [pc, #272]	; (8001f9c <flow_button_move+0x3ac>)
 8001e8a:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 5;
 8001e8c:	4b41      	ldr	r3, [pc, #260]	; (8001f94 <flow_button_move+0x3a4>)
 8001e8e:	2205      	movs	r2, #5
 8001e90:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001e92:	4b43      	ldr	r3, [pc, #268]	; (8001fa0 <flow_button_move+0x3b0>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e013      	b.n	8001ec2 <flow_button_move+0x2d2>
					}
					else if(pre_floor < 5)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	; (8001f94 <flow_button_move+0x3a4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	dc0f      	bgt.n	8001ec2 <flow_button_move+0x2d2>
					{
						elevator_state = pre_floor;
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	; (8001f94 <flow_button_move+0x3a4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <flow_button_move+0x3a8>)
 8001ea8:	6013      	str	r3, [r2, #0]
						floor_gap = 5 - pre_floor;
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <flow_button_move+0x3a4>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1c3 0305 	rsb	r3, r3, #5
 8001eb2:	4a3a      	ldr	r2, [pc, #232]	; (8001f9c <flow_button_move+0x3ac>)
 8001eb4:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;	// floor
						pre_floor = 5;
 8001eb6:	4b37      	ldr	r3, [pc, #220]	; (8001f94 <flow_button_move+0x3a4>)
 8001eb8:	2205      	movs	r2, #5
 8001eba:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001ebc:	4b38      	ldr	r3, [pc, #224]	; (8001fa0 <flow_button_move+0x3b0>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON6_Pin, &prev_button6_state) == BUTTON_PRESS)
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <flow_button_move+0x3bc>)
 8001ec4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ec8:	4837      	ldr	r0, [pc, #220]	; (8001fa8 <flow_button_move+0x3b8>)
 8001eca:	f7fe fdf1 	bl	8000ab0 <get_button>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d15b      	bne.n	8001f8c <flow_button_move+0x39c>
				{

					if(pre_floor > 6)
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <flow_button_move+0x3a4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b06      	cmp	r3, #6
 8001eda:	dd0f      	ble.n	8001efc <flow_button_move+0x30c>
					{
						elevator_state = pre_floor;
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <flow_button_move+0x3a4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <flow_button_move+0x3a8>)
 8001ee2:	6013      	str	r3, [r2, #0]
						floor_gap = pre_floor - 6;
 8001ee4:	4b2b      	ldr	r3, [pc, #172]	; (8001f94 <flow_button_move+0x3a4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	3b06      	subs	r3, #6
 8001eea:	4a2c      	ldr	r2, [pc, #176]	; (8001f9c <flow_button_move+0x3ac>)
 8001eec:	6013      	str	r3, [r2, #0]
						//elevator_state = floor_gap;
						pre_floor = 6;
 8001eee:	4b29      	ldr	r3, [pc, #164]	; (8001f94 <flow_button_move+0x3a4>)
 8001ef0:	2206      	movs	r2, #6
 8001ef2:	601a      	str	r2, [r3, #0]
						elevator_mode_state = BACKWARD_MODE;
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	; (8001fa0 <flow_button_move+0x3b0>)
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	601a      	str	r2, [r3, #0]
						pre_floor = 6;
						elevator_mode_state = FORWARD_MODE; // FORWARD
					}
				}

			break;
 8001efa:	e047      	b.n	8001f8c <flow_button_move+0x39c>
					else if(pre_floor < 6)
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <flow_button_move+0x3a4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	dc43      	bgt.n	8001f8c <flow_button_move+0x39c>
						elevator_state = pre_floor;
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <flow_button_move+0x3a4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a23      	ldr	r2, [pc, #140]	; (8001f98 <flow_button_move+0x3a8>)
 8001f0a:	6013      	str	r3, [r2, #0]
						floor_gap = 6 - pre_floor;
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <flow_button_move+0x3a4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f1c3 0306 	rsb	r3, r3, #6
 8001f14:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <flow_button_move+0x3ac>)
 8001f16:	6013      	str	r3, [r2, #0]
						pre_floor = 6;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <flow_button_move+0x3a4>)
 8001f1a:	2206      	movs	r2, #6
 8001f1c:	601a      	str	r2, [r3, #0]
						elevator_mode_state = FORWARD_MODE; // FORWARD
 8001f1e:	4b20      	ldr	r3, [pc, #128]	; (8001fa0 <flow_button_move+0x3b0>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	601a      	str	r2, [r3, #0]
			break;
 8001f24:	e032      	b.n	8001f8c <flow_button_move+0x39c>
// if ==> pre_f < current_f
			case FORWARD_MODE:

			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001f26:	4a22      	ldr	r2, [pc, #136]	; (8001fb0 <flow_button_move+0x3c0>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	481f      	ldr	r0, [pc, #124]	; (8001fa8 <flow_button_move+0x3b8>)
 8001f2c:	f7fe fdc0 	bl	8000ab0 <get_button>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d103      	bne.n	8001f3e <flow_button_move+0x34e>
			{
				elevator_mode_state = STANDBY_MODE;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <flow_button_move+0x3b0>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
			{
				//led_lr_shift(); 동작을 잘 안함 확인 필요
				stepmotor_driver_step(FORWARD, floor_gap * STEPS_PER_REV);
				set_rpm(13);
			}
			break;
 8001f3c:	e027      	b.n	8001f8e <flow_button_move+0x39e>
				stepmotor_driver_step(FORWARD, floor_gap * STEPS_PER_REV);
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <flow_button_move+0x3ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	031b      	lsls	r3, r3, #12
 8001f44:	4619      	mov	r1, r3
 8001f46:	2001      	movs	r0, #1
 8001f48:	f7ff fcfe 	bl	8001948 <stepmotor_driver_step>
				set_rpm(13);
 8001f4c:	200d      	movs	r0, #13
 8001f4e:	f7ff fceb 	bl	8001928 <set_rpm>
			break;
 8001f52:	e01c      	b.n	8001f8e <flow_button_move+0x39e>
// if ==> pre_f > current_f
			case BACKWARD_MODE:

				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001f54:	4a16      	ldr	r2, [pc, #88]	; (8001fb0 <flow_button_move+0x3c0>)
 8001f56:	2101      	movs	r1, #1
 8001f58:	4813      	ldr	r0, [pc, #76]	; (8001fa8 <flow_button_move+0x3b8>)
 8001f5a:	f7fe fda9 	bl	8000ab0 <get_button>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d103      	bne.n	8001f6c <flow_button_move+0x37c>
				{
					elevator_mode_state = STANDBY_MODE;
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <flow_button_move+0x3b0>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
				{
					//led_rl_shift();
					stepmotor_driver_step(BACKWARD, floor_gap * STEPS_PER_REV);
					set_rpm(13);
				}
			break;
 8001f6a:	e010      	b.n	8001f8e <flow_button_move+0x39e>
					stepmotor_driver_step(BACKWARD, floor_gap * STEPS_PER_REV);
 8001f6c:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <flow_button_move+0x3ac>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	031b      	lsls	r3, r3, #12
 8001f72:	4619      	mov	r1, r3
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7ff fce7 	bl	8001948 <stepmotor_driver_step>
					set_rpm(13);
 8001f7a:	200d      	movs	r0, #13
 8001f7c:	f7ff fcd4 	bl	8001928 <set_rpm>
			break;
 8001f80:	e005      	b.n	8001f8e <flow_button_move+0x39e>

			case ARRIVAL_MODE:
				arrival_buzzer();
 8001f82:	f7fe fdd1 	bl	8000b28 <arrival_buzzer>
				auto_door_sequence();
 8001f86:	f7ff fc91 	bl	80018ac <auto_door_sequence>

			break;
 8001f8a:	e000      	b.n	8001f8e <flow_button_move+0x39e>
			break;
 8001f8c:	bf00      	nop
		}
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2000002c 	.word	0x2000002c
 8001f98:	20000028 	.word	0x20000028
 8001f9c:	2000091c 	.word	0x2000091c
 8001fa0:	20000918 	.word	0x20000918
 8001fa4:	20000010 	.word	0x20000010
 8001fa8:	40020800 	.word	0x40020800
 8001fac:	20000011 	.word	0x20000011
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b10      	ldr	r3, [pc, #64]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a0f      	ldr	r2, [pc, #60]	; (8002000 <HAL_MspInit+0x4c>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_MspInit+0x4c>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	603b      	str	r3, [r7, #0]
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a08      	ldr	r2, [pc, #32]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_MspInit+0x4c>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	603b      	str	r3, [r7, #0]
 8001ff0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ff2:	2007      	movs	r0, #7
 8001ff4:	f000 fd28 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800

08002004 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b08a      	sub	sp, #40	; 0x28
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_I2C_MspInit+0x84>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d12c      	bne.n	8002080 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_I2C_MspInit+0x88>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	6313      	str	r3, [r2, #48]	; 0x30
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	613b      	str	r3, [r7, #16]
 8002040:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002042:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002048:	2312      	movs	r3, #18
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002054:	2304      	movs	r3, #4
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	480c      	ldr	r0, [pc, #48]	; (8002090 <HAL_I2C_MspInit+0x8c>)
 8002060:	f000 fdc6 	bl	8002bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_I2C_MspInit+0x88>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_I2C_MspInit+0x88>)
 800206e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002072:	6413      	str	r3, [r2, #64]	; 0x40
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_I2C_MspInit+0x88>)
 8002076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40005400 	.word	0x40005400
 800208c:	40023800 	.word	0x40023800
 8002090:	40020400 	.word	0x40020400

08002094 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b088      	sub	sp, #32
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	611a      	str	r2, [r3, #16]
 80020ac:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0c      	ldr	r2, [pc, #48]	; (80020e4 <HAL_RTC_MspInit+0x50>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d111      	bne.n	80020dc <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020b8:	2302      	movs	r3, #2
 80020ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	4618      	mov	r0, r3
 80020c8:	f002 f844 	bl	8004154 <HAL_RCCEx_PeriphCLKConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80020d2:	f7ff fbe5 	bl	80018a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <HAL_RTC_MspInit+0x54>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80020dc:	bf00      	nop
 80020de:	3720      	adds	r7, #32
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40002800 	.word	0x40002800
 80020e8:	42470e3c 	.word	0x42470e3c

080020ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
 8002102:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a3d      	ldr	r2, [pc, #244]	; (8002200 <HAL_TIM_Base_MspInit+0x114>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d145      	bne.n	800219a <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	4b35      	ldr	r3, [pc, #212]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a34      	ldr	r2, [pc, #208]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800214a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002158:	2301      	movs	r3, #1
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4619      	mov	r1, r3
 8002162:	4829      	ldr	r0, [pc, #164]	; (8002208 <HAL_TIM_Base_MspInit+0x11c>)
 8002164:	f000 fd44 	bl	8002bf0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2018      	movs	r0, #24
 800216e:	f000 fc76 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002172:	2018      	movs	r0, #24
 8002174:	f000 fc8f 	bl	8002a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002178:	2200      	movs	r2, #0
 800217a:	2100      	movs	r1, #0
 800217c:	2019      	movs	r0, #25
 800217e:	f000 fc6e 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002182:	2019      	movs	r0, #25
 8002184:	f000 fc87 	bl	8002a96 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002188:	2200      	movs	r2, #0
 800218a:	2100      	movs	r1, #0
 800218c:	201b      	movs	r0, #27
 800218e:	f000 fc66 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002192:	201b      	movs	r0, #27
 8002194:	f000 fc7f 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002198:	e02e      	b.n	80021f8 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a2:	d116      	bne.n	80021d2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a15      	ldr	r2, [pc, #84]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 80021ae:	f043 0301 	orr.w	r3, r3, #1
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 0301 	and.w	r3, r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2100      	movs	r1, #0
 80021c4:	201c      	movs	r0, #28
 80021c6:	f000 fc4a 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ca:	201c      	movs	r0, #28
 80021cc:	f000 fc63 	bl	8002a96 <HAL_NVIC_EnableIRQ>
}
 80021d0:	e012      	b.n	80021f8 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a0d      	ldr	r2, [pc, #52]	; (800220c <HAL_TIM_Base_MspInit+0x120>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d10d      	bne.n	80021f8 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 80021e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ea:	6453      	str	r3, [r2, #68]	; 0x44
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <HAL_TIM_Base_MspInit+0x118>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3730      	adds	r7, #48	; 0x30
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800
 8002208:	40020000 	.word	0x40020000
 800220c:	40014800 	.word	0x40014800

08002210 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <HAL_TIM_PWM_MspInit+0x48>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d115      	bne.n	800224e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <HAL_TIM_PWM_MspInit+0x4c>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_TIM_PWM_MspInit+0x4c>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <HAL_TIM_PWM_MspInit+0x4c>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800223e:	2200      	movs	r2, #0
 8002240:	2100      	movs	r1, #0
 8002242:	201d      	movs	r0, #29
 8002244:	f000 fc0b 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002248:	201d      	movs	r0, #29
 800224a:	f000 fc24 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40000400 	.word	0x40000400
 800225c:	40023800 	.word	0x40023800

08002260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	605a      	str	r2, [r3, #4]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	60da      	str	r2, [r3, #12]
 8002276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002280:	d11f      	bne.n	80022c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_TIM_MspPostInit+0xb0>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a21      	ldr	r2, [pc, #132]	; (8002310 <HAL_TIM_MspPostInit+0xb0>)
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_TIM_MspPostInit+0xb0>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800229e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4816      	ldr	r0, [pc, #88]	; (8002314 <HAL_TIM_MspPostInit+0xb4>)
 80022bc:	f000 fc98 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022c0:	e022      	b.n	8002308 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a14      	ldr	r2, [pc, #80]	; (8002318 <HAL_TIM_MspPostInit+0xb8>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d11d      	bne.n	8002308 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_TIM_MspPostInit+0xb0>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <HAL_TIM_MspPostInit+0xb0>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_TIM_MspPostInit+0xb0>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022e8:	2340      	movs	r3, #64	; 0x40
 80022ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f4:	2300      	movs	r3, #0
 80022f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022f8:	2302      	movs	r3, #2
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0314 	add.w	r3, r7, #20
 8002300:	4619      	mov	r1, r3
 8002302:	4806      	ldr	r0, [pc, #24]	; (800231c <HAL_TIM_MspPostInit+0xbc>)
 8002304:	f000 fc74 	bl	8002bf0 <HAL_GPIO_Init>
}
 8002308:	bf00      	nop
 800230a:	3728      	adds	r7, #40	; 0x28
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020400 	.word	0x40020400
 8002318:	40000400 	.word	0x40000400
 800231c:	40020000 	.word	0x40020000

08002320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a3a      	ldr	r2, [pc, #232]	; (8002428 <HAL_UART_MspInit+0x108>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d135      	bne.n	80023ae <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_UART_MspInit+0x10c>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a38      	ldr	r2, [pc, #224]	; (800242c <HAL_UART_MspInit+0x10c>)
 800234c:	f043 0310 	orr.w	r3, r3, #16
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_UART_MspInit+0x10c>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <HAL_UART_MspInit+0x10c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a31      	ldr	r2, [pc, #196]	; (800242c <HAL_UART_MspInit+0x10c>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_UART_MspInit+0x10c>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800237a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800237e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002380:	2302      	movs	r3, #2
 8002382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002388:	2303      	movs	r3, #3
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800238c:	2307      	movs	r3, #7
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	f107 031c 	add.w	r3, r7, #28
 8002394:	4619      	mov	r1, r3
 8002396:	4826      	ldr	r0, [pc, #152]	; (8002430 <HAL_UART_MspInit+0x110>)
 8002398:	f000 fc2a 	bl	8002bf0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800239c:	2200      	movs	r2, #0
 800239e:	2100      	movs	r1, #0
 80023a0:	2025      	movs	r0, #37	; 0x25
 80023a2:	f000 fb5c 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a6:	2025      	movs	r0, #37	; 0x25
 80023a8:	f000 fb75 	bl	8002a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023ac:	e038      	b.n	8002420 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a20      	ldr	r2, [pc, #128]	; (8002434 <HAL_UART_MspInit+0x114>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d133      	bne.n	8002420 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
 80023bc:	4b1b      	ldr	r3, [pc, #108]	; (800242c <HAL_UART_MspInit+0x10c>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	4a1a      	ldr	r2, [pc, #104]	; (800242c <HAL_UART_MspInit+0x10c>)
 80023c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c6:	6413      	str	r3, [r2, #64]	; 0x40
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_UART_MspInit+0x10c>)
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	2300      	movs	r3, #0
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	4b14      	ldr	r3, [pc, #80]	; (800242c <HAL_UART_MspInit+0x10c>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023dc:	4a13      	ldr	r2, [pc, #76]	; (800242c <HAL_UART_MspInit+0x10c>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	6313      	str	r3, [r2, #48]	; 0x30
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_UART_MspInit+0x10c>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023f0:	230c      	movs	r3, #12
 80023f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f4:	2302      	movs	r3, #2
 80023f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fc:	2303      	movs	r3, #3
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002400:	2307      	movs	r3, #7
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	4809      	ldr	r0, [pc, #36]	; (8002430 <HAL_UART_MspInit+0x110>)
 800240c:	f000 fbf0 	bl	8002bf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002410:	2200      	movs	r2, #0
 8002412:	2100      	movs	r1, #0
 8002414:	2026      	movs	r0, #38	; 0x26
 8002416:	f000 fb22 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800241a:	2026      	movs	r0, #38	; 0x26
 800241c:	f000 fb3b 	bl	8002a96 <HAL_NVIC_EnableIRQ>
}
 8002420:	bf00      	nop
 8002422:	3730      	adds	r7, #48	; 0x30
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40011000 	.word	0x40011000
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000
 8002434:	40004400 	.word	0x40004400

08002438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800243c:	e7fe      	b.n	800243c <NMI_Handler+0x4>

0800243e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002442:	e7fe      	b.n	8002442 <HardFault_Handler+0x4>

08002444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002448:	e7fe      	b.n	8002448 <MemManage_Handler+0x4>

0800244a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800244a:	b480      	push	{r7}
 800244c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800244e:	e7fe      	b.n	800244e <BusFault_Handler+0x4>

08002450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <UsageFault_Handler+0x4>

08002456 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002472:	b480      	push	{r7}
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002484:	f000 f9cc 	bl	8002820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 8002488:	f7fe fdc8 	bl	800101c <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800248c:	bf00      	nop
 800248e:	bd80      	pop	{r7, pc}

08002490 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002494:	2001      	movs	r0, #1
 8002496:	f000 fd61 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}

0800249e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024a2:	2002      	movs	r0, #2
 80024a4:	f000 fd5a 	bl	8002f5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80024b2:	f002 ff13 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000750 	.word	0x20000750

080024c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024c6:	f002 ff09 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000750 	.word	0x20000750

080024d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024d8:	4803      	ldr	r0, [pc, #12]	; (80024e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80024da:	f002 feff 	bl	80052dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80024de:	4803      	ldr	r0, [pc, #12]	; (80024ec <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80024e0:	f002 fefc 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80024e4:	bf00      	nop
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000750 	.word	0x20000750
 80024ec:	20000828 	.word	0x20000828

080024f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <TIM1_CC_IRQHandler+0x10>)
 80024f6:	f002 fef1 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000750 	.word	0x20000750

08002504 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <TIM2_IRQHandler+0x10>)
 800250a:	f002 fee7 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000798 	.word	0x20000798

08002518 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800251c:	4802      	ldr	r0, [pc, #8]	; (8002528 <TIM3_IRQHandler+0x10>)
 800251e:	f002 fedd 	bl	80052dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	200007e0 	.word	0x200007e0

0800252c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002530:	4802      	ldr	r0, [pc, #8]	; (800253c <USART1_IRQHandler+0x10>)
 8002532:	f003 ffdf 	bl	80064f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000870 	.word	0x20000870

08002540 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002544:	4802      	ldr	r0, [pc, #8]	; (8002550 <USART2_IRQHandler+0x10>)
 8002546:	f003 ffd5 	bl	80064f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	200008b4 	.word	0x200008b4

08002554 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002560:	2300      	movs	r3, #0
 8002562:	617b      	str	r3, [r7, #20]
 8002564:	e00a      	b.n	800257c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002566:	f3af 8000 	nop.w
 800256a:	4601      	mov	r1, r0
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	60ba      	str	r2, [r7, #8]
 8002572:	b2ca      	uxtb	r2, r1
 8002574:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3301      	adds	r3, #1
 800257a:	617b      	str	r3, [r7, #20]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	dbf0      	blt.n	8002566 <_read+0x12>
	}

return len;
 8002584:	687b      	ldr	r3, [r7, #4]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e009      	b.n	80025b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	60ba      	str	r2, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fe fd25 	bl	8000ff8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	dbf1      	blt.n	80025a0 <_write+0x12>
	}
	return len;
 80025bc:	687b      	ldr	r3, [r7, #4]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3718      	adds	r7, #24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <_close>:

int _close(int file)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
	return -1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr

080025de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025ee:	605a      	str	r2, [r3, #4]
	return 0;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_isatty>:

int _isatty(int file)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
	return 1;
 8002606:	2301      	movs	r3, #1
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
	return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f004 feb4 	bl	80073cc <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20020000 	.word	0x20020000
 8002690:	00000400 	.word	0x00000400
 8002694:	20000928 	.word	0x20000928
 8002698:	20000950 	.word	0x20000950

0800269c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <SystemInit+0x20>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	4a05      	ldr	r2, [pc, #20]	; (80026bc <SystemInit+0x20>)
 80026a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b0:	bf00      	nop
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <HAL_TIM_IC_CaptureCallback>:
int distance, distance_chk; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_TIM_IC_CaptureCallback+0x58>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d11d      	bne.n	800270e <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d107      	bne.n	80026ea <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 80026e8:	e011      	b.n	800270e <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10d      	bne.n	800270e <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_TIM_IC_CaptureCallback+0x5c>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 80026f8:	2100      	movs	r1, #0
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f003 f91c 	bl	8005938 <HAL_TIM_ReadCapturedValue>
 8002700:	4603      	mov	r3, r0
 8002702:	461a      	mov	r2, r3
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002706:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <HAL_TIM_IC_CaptureCallback+0x64>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000
 800271c:	20000934 	.word	0x20000934
 8002720:	2000092c 	.word	0x2000092c
 8002724:	20000930 	.word	0x20000930

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272e:	490e      	ldr	r1, [pc, #56]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002744:	4c0b      	ldr	r4, [pc, #44]	; (8002774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002752:	f7ff ffa3 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f004 fe3f 	bl	80073d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7fe fcf3 	bl	8001144 <main>
  bx  lr    
 800275e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002760:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800276c:	08008c54 	.word	0x08008c54
  ldr r2, =_sbss
 8002770:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002774:	2000094c 	.word	0x2000094c

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>
	...

0800277c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002780:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <HAL_Init+0x40>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0d      	ldr	r2, [pc, #52]	; (80027bc <HAL_Init+0x40>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_Init+0x40>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0a      	ldr	r2, [pc, #40]	; (80027bc <HAL_Init+0x40>)
 8002792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002798:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a07      	ldr	r2, [pc, #28]	; (80027bc <HAL_Init+0x40>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a4:	2003      	movs	r0, #3
 80027a6:	f000 f94f 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f000 f808 	bl	80027c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027b0:	f7ff fc00 	bl	8001fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40023c00 	.word	0x40023c00

080027c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027c8:	4b12      	ldr	r3, [pc, #72]	; (8002814 <HAL_InitTick+0x54>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b12      	ldr	r3, [pc, #72]	; (8002818 <HAL_InitTick+0x58>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	4619      	mov	r1, r3
 80027d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f967 	bl	8002ab2 <HAL_SYSTICK_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e00e      	b.n	800280c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b0f      	cmp	r3, #15
 80027f2:	d80a      	bhi.n	800280a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f4:	2200      	movs	r2, #0
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	f04f 30ff 	mov.w	r0, #4294967295
 80027fc:	f000 f92f 	bl	8002a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002800:	4a06      	ldr	r2, [pc, #24]	; (800281c <HAL_InitTick+0x5c>)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002806:	2300      	movs	r3, #0
 8002808:	e000      	b.n	800280c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000030 	.word	0x20000030
 8002818:	20000038 	.word	0x20000038
 800281c:	20000034 	.word	0x20000034

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	; (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000038 	.word	0x20000038
 8002844:	20000938 	.word	0x20000938

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	; (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	20000938 	.word	0x20000938

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000038 	.word	0x20000038

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	; (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	; (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	; (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	; (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff29 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a70:	f7ff ff3e 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68b9      	ldr	r1, [r7, #8]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff ff8e 	bl	800299c <NVIC_EncodePriority>
 8002a80:	4602      	mov	r2, r0
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4611      	mov	r1, r2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7ff ff5d 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8e:	bf00      	nop
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b082      	sub	sp, #8
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff ff31 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f7ff ffa2 	bl	8002a04 <SysTick_Config>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7ff feb6 	bl	8002848 <HAL_GetTick>
 8002adc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d008      	beq.n	8002afc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e052      	b.n	8002ba2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0216 	bic.w	r2, r2, #22
 8002b0a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b1a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <HAL_DMA_Abort+0x62>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0208 	bic.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b4c:	e013      	b.n	8002b76 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b4e:	f7ff fe7b 	bl	8002848 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b05      	cmp	r3, #5
 8002b5a:	d90c      	bls.n	8002b76 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2203      	movs	r2, #3
 8002b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e015      	b.n	8002ba2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e4      	bne.n	8002b4e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	223f      	movs	r2, #63	; 0x3f
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d004      	beq.n	8002bc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2280      	movs	r2, #128	; 0x80
 8002bc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e00c      	b.n	8002be2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2205      	movs	r2, #5
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e159      	b.n	8002ec0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8148 	bne.w	8002eba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d005      	beq.n	8002c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d130      	bne.n	8002ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 0201 	and.w	r2, r3, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d017      	beq.n	8002ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d123      	bne.n	8002d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a2 	beq.w	8002eba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b54      	ldr	r3, [pc, #336]	; (8002ed8 <HAL_GPIO_Init+0x2e8>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d92:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_GPIO_Init+0x2ec>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a49      	ldr	r2, [pc, #292]	; (8002ee0 <HAL_GPIO_Init+0x2f0>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d019      	beq.n	8002df2 <HAL_GPIO_Init+0x202>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a48      	ldr	r2, [pc, #288]	; (8002ee4 <HAL_GPIO_Init+0x2f4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <HAL_GPIO_Init+0x1fe>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a47      	ldr	r2, [pc, #284]	; (8002ee8 <HAL_GPIO_Init+0x2f8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00d      	beq.n	8002dea <HAL_GPIO_Init+0x1fa>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a46      	ldr	r2, [pc, #280]	; (8002eec <HAL_GPIO_Init+0x2fc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d007      	beq.n	8002de6 <HAL_GPIO_Init+0x1f6>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a45      	ldr	r2, [pc, #276]	; (8002ef0 <HAL_GPIO_Init+0x300>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_GPIO_Init+0x1f2>
 8002dde:	2304      	movs	r3, #4
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002de2:	2307      	movs	r3, #7
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x204>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4935      	ldr	r1, [pc, #212]	; (8002edc <HAL_GPIO_Init+0x2ec>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e36:	4a2f      	ldr	r2, [pc, #188]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e60:	4a24      	ldr	r2, [pc, #144]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e66:	4b23      	ldr	r3, [pc, #140]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8a:	4a1a      	ldr	r2, [pc, #104]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_GPIO_Init+0x304>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f aea2 	bls.w	8002c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3724      	adds	r7, #36	; 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40013c00 	.word	0x40013c00

08002ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691a      	ldr	r2, [r3, #16]
 8002f08:	887b      	ldrh	r3, [r7, #2]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d002      	beq.n	8002f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e001      	b.n	8002f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
 8002f34:	4613      	mov	r3, r2
 8002f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f38:	787b      	ldrb	r3, [r7, #1]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f44:	e003      	b.n	8002f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f46:	887b      	ldrh	r3, [r7, #2]
 8002f48:	041a      	lsls	r2, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	619a      	str	r2, [r3, #24]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
	...

08002f5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe f898 	bl	80010b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f80:	bf00      	nop
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40013c00 	.word	0x40013c00

08002f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e12b      	b.n	80031f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff f826 	bl	8002004 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f001 f888 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a81      	ldr	r2, [pc, #516]	; (8003200 <HAL_I2C_Init+0x274>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d807      	bhi.n	8003010 <HAL_I2C_Init+0x84>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4a80      	ldr	r2, [pc, #512]	; (8003204 <HAL_I2C_Init+0x278>)
 8003004:	4293      	cmp	r3, r2
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e006      	b.n	800301e <HAL_I2C_Init+0x92>
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	4a7d      	ldr	r2, [pc, #500]	; (8003208 <HAL_I2C_Init+0x27c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	bf94      	ite	ls
 8003018:	2301      	movls	r3, #1
 800301a:	2300      	movhi	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0e7      	b.n	80031f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a78      	ldr	r2, [pc, #480]	; (800320c <HAL_I2C_Init+0x280>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	0c9b      	lsrs	r3, r3, #18
 8003030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	4a6a      	ldr	r2, [pc, #424]	; (8003200 <HAL_I2C_Init+0x274>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d802      	bhi.n	8003060 <HAL_I2C_Init+0xd4>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	3301      	adds	r3, #1
 800305e:	e009      	b.n	8003074 <HAL_I2C_Init+0xe8>
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	4a69      	ldr	r2, [pc, #420]	; (8003210 <HAL_I2C_Init+0x284>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	099b      	lsrs	r3, r3, #6
 8003072:	3301      	adds	r3, #1
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6812      	ldr	r2, [r2, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003086:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	495c      	ldr	r1, [pc, #368]	; (8003200 <HAL_I2C_Init+0x274>)
 8003090:	428b      	cmp	r3, r1
 8003092:	d819      	bhi.n	80030c8 <HAL_I2C_Init+0x13c>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	1e59      	subs	r1, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a2:	1c59      	adds	r1, r3, #1
 80030a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030a8:	400b      	ands	r3, r1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_I2C_Init+0x138>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e59      	subs	r1, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030c2:	e051      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 80030c4:	2304      	movs	r3, #4
 80030c6:	e04f      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d111      	bne.n	80030f4 <HAL_I2C_Init+0x168>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e58      	subs	r0, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	440b      	add	r3, r1
 80030de:	fbb0 f3f3 	udiv	r3, r0, r3
 80030e2:	3301      	adds	r3, #1
 80030e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e012      	b.n	800311a <HAL_I2C_Init+0x18e>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	1e58      	subs	r0, r3, #1
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	0099      	lsls	r1, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	fbb0 f3f3 	udiv	r3, r0, r3
 800310a:	3301      	adds	r3, #1
 800310c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <HAL_I2C_Init+0x196>
 800311e:	2301      	movs	r3, #1
 8003120:	e022      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10e      	bne.n	8003148 <HAL_I2C_Init+0x1bc>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1e58      	subs	r0, r3, #1
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	440b      	add	r3, r1
 8003138:	fbb0 f3f3 	udiv	r3, r0, r3
 800313c:	3301      	adds	r3, #1
 800313e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003146:	e00f      	b.n	8003168 <HAL_I2C_Init+0x1dc>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1e58      	subs	r0, r3, #1
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6859      	ldr	r1, [r3, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	0099      	lsls	r1, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	fbb0 f3f3 	udiv	r3, r0, r3
 800315e:	3301      	adds	r3, #1
 8003160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	6809      	ldr	r1, [r1, #0]
 800316c:	4313      	orrs	r3, r2
 800316e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69da      	ldr	r2, [r3, #28]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	430a      	orrs	r2, r1
 800318a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003196:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6911      	ldr	r1, [r2, #16]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	4311      	orrs	r1, r2
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	430b      	orrs	r3, r1
 80031aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	000186a0 	.word	0x000186a0
 8003204:	001e847f 	.word	0x001e847f
 8003208:	003d08ff 	.word	0x003d08ff
 800320c:	431bde83 	.word	0x431bde83
 8003210:	10624dd3 	.word	0x10624dd3

08003214 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b088      	sub	sp, #32
 8003218:	af02      	add	r7, sp, #8
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607a      	str	r2, [r7, #4]
 800321e:	461a      	mov	r2, r3
 8003220:	460b      	mov	r3, r1
 8003222:	817b      	strh	r3, [r7, #10]
 8003224:	4613      	mov	r3, r2
 8003226:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003228:	f7ff fb0e 	bl	8002848 <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b20      	cmp	r3, #32
 8003238:	f040 80e0 	bne.w	80033fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	2319      	movs	r3, #25
 8003242:	2201      	movs	r2, #1
 8003244:	4970      	ldr	r1, [pc, #448]	; (8003408 <HAL_I2C_Master_Transmit+0x1f4>)
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f000 f964 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	e0d3      	b.n	80033fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_I2C_Master_Transmit+0x50>
 8003260:	2302      	movs	r3, #2
 8003262:	e0cc      	b.n	80033fe <HAL_I2C_Master_Transmit+0x1ea>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b01      	cmp	r3, #1
 8003278:	d007      	beq.n	800328a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0201 	orr.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003298:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2221      	movs	r2, #33	; 0x21
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2210      	movs	r2, #16
 80032a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	893a      	ldrh	r2, [r7, #8]
 80032ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4a50      	ldr	r2, [pc, #320]	; (800340c <HAL_I2C_Master_Transmit+0x1f8>)
 80032ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032cc:	8979      	ldrh	r1, [r7, #10]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	6a3a      	ldr	r2, [r7, #32]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f89c 	bl	8003410 <I2C_MasterRequestWrite>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e08d      	b.n	80033fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032e2:	2300      	movs	r3, #0
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032f8:	e066      	b.n	80033c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032fa:	697a      	ldr	r2, [r7, #20]
 80032fc:	6a39      	ldr	r1, [r7, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f9de 	bl	80036c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00d      	beq.n	8003326 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	2b04      	cmp	r3, #4
 8003310:	d107      	bne.n	8003322 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003320:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e06b      	b.n	80033fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003340:	b29b      	uxth	r3, r3
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b04      	cmp	r3, #4
 8003362:	d11b      	bne.n	800339c <HAL_I2C_Master_Transmit+0x188>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003368:	2b00      	cmp	r3, #0
 800336a:	d017      	beq.n	800339c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	781a      	ldrb	r2, [r3, #0]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	1c5a      	adds	r2, r3, #1
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003386:	b29b      	uxth	r3, r3
 8003388:	3b01      	subs	r3, #1
 800338a:	b29a      	uxth	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6a39      	ldr	r1, [r7, #32]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f9ce 	bl	8003742 <I2C_WaitOnBTFFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d107      	bne.n	80033c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e01a      	b.n	80033fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d194      	bne.n	80032fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	00100002 	.word	0x00100002
 800340c:	ffff0000 	.word	0xffff0000

08003410 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	603b      	str	r3, [r7, #0]
 800341c:	460b      	mov	r3, r1
 800341e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2b08      	cmp	r3, #8
 800342a:	d006      	beq.n	800343a <I2C_MasterRequestWrite+0x2a>
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d003      	beq.n	800343a <I2C_MasterRequestWrite+0x2a>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003438:	d108      	bne.n	800344c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	e00b      	b.n	8003464 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003450:	2b12      	cmp	r3, #18
 8003452:	d107      	bne.n	8003464 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003462:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f84f 	bl	8003514 <I2C_WaitOnFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00d      	beq.n	8003498 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348a:	d103      	bne.n	8003494 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003492:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e035      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a0:	d108      	bne.n	80034b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034a2:	897b      	ldrh	r3, [r7, #10]
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	461a      	mov	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034b0:	611a      	str	r2, [r3, #16]
 80034b2:	e01b      	b.n	80034ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034b4:	897b      	ldrh	r3, [r7, #10]
 80034b6:	11db      	asrs	r3, r3, #7
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	f003 0306 	and.w	r3, r3, #6
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	f063 030f 	orn	r3, r3, #15
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	490e      	ldr	r1, [pc, #56]	; (800350c <I2C_MasterRequestWrite+0xfc>)
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f875 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e010      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034e2:	897b      	ldrh	r3, [r7, #10]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <I2C_MasterRequestWrite+0x100>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f865 	bl	80035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e000      	b.n	8003504 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	00010008 	.word	0x00010008
 8003510:	00010002 	.word	0x00010002

08003514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	4613      	mov	r3, r2
 8003522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003524:	e025      	b.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352c:	d021      	beq.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352e:	f7ff f98b 	bl	8002848 <HAL_GetTick>
 8003532:	4602      	mov	r2, r0
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x30>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d116      	bne.n	8003572 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0220 	orr.w	r2, r3, #32
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e023      	b.n	80035ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b01      	cmp	r3, #1
 800357a:	d10d      	bne.n	8003598 <I2C_WaitOnFlagUntilTimeout+0x84>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	4013      	ands	r3, r2
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	461a      	mov	r2, r3
 8003596:	e00c      	b.n	80035b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	43da      	mvns	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	4013      	ands	r3, r2
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d0b6      	beq.n	8003526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d0:	e051      	b.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035e0:	d123      	bne.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f043 0204 	orr.w	r2, r3, #4
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e046      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d021      	beq.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7ff f909 	bl	8002848 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d116      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e020      	b.n	80036b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	0c1b      	lsrs	r3, r3, #16
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d10c      	bne.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	43da      	mvns	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	4013      	ands	r3, r2
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	bf14      	ite	ne
 8003692:	2301      	movne	r3, #1
 8003694:	2300      	moveq	r3, #0
 8003696:	b2db      	uxtb	r3, r3
 8003698:	e00b      	b.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	43da      	mvns	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	4013      	ands	r3, r2
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	bf14      	ite	ne
 80036ac:	2301      	movne	r3, #1
 80036ae:	2300      	moveq	r3, #0
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d18d      	bne.n	80035d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036cc:	e02d      	b.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f878 	bl	80037c4 <I2C_IsAcknowledgeFailed>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e02d      	b.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d021      	beq.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7ff f8af 	bl	8002848 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d116      	bne.n	800372a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d1ca      	bne.n	80036ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800374e:	e02d      	b.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f837 	bl	80037c4 <I2C_IsAcknowledgeFailed>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e02d      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003766:	d021      	beq.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003768:	f7ff f86e 	bl	8002848 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e007      	b.n	80037bc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d1ca      	bne.n	8003750 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037da:	d11b      	bne.n	8003814 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f043 0204 	orr.w	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e267      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d075      	beq.n	800392e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	4b88      	ldr	r3, [pc, #544]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b04      	cmp	r3, #4
 800384c:	d00c      	beq.n	8003868 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800384e:	4b85      	ldr	r3, [pc, #532]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003856:	2b08      	cmp	r3, #8
 8003858:	d112      	bne.n	8003880 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b82      	ldr	r3, [pc, #520]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003862:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003866:	d10b      	bne.n	8003880 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	4b7e      	ldr	r3, [pc, #504]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d05b      	beq.n	800392c <HAL_RCC_OscConfig+0x108>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d157      	bne.n	800392c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e242      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003888:	d106      	bne.n	8003898 <HAL_RCC_OscConfig+0x74>
 800388a:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a75      	ldr	r2, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e01d      	b.n	80038d4 <HAL_RCC_OscConfig+0xb0>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a0:	d10c      	bne.n	80038bc <HAL_RCC_OscConfig+0x98>
 80038a2:	4b70      	ldr	r3, [pc, #448]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a6f      	ldr	r2, [pc, #444]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	4b6d      	ldr	r3, [pc, #436]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6c      	ldr	r2, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	e00b      	b.n	80038d4 <HAL_RCC_OscConfig+0xb0>
 80038bc:	4b69      	ldr	r3, [pc, #420]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a68      	ldr	r2, [pc, #416]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d013      	beq.n	8003904 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038dc:	f7fe ffb4 	bl	8002848 <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038e4:	f7fe ffb0 	bl	8002848 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b64      	cmp	r3, #100	; 0x64
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e207      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	4b5b      	ldr	r3, [pc, #364]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0xc0>
 8003902:	e014      	b.n	800392e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003904:	f7fe ffa0 	bl	8002848 <HAL_GetTick>
 8003908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	e008      	b.n	800391e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800390c:	f7fe ff9c 	bl	8002848 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	2b64      	cmp	r3, #100	; 0x64
 8003918:	d901      	bls.n	800391e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e1f3      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	4b51      	ldr	r3, [pc, #324]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1f0      	bne.n	800390c <HAL_RCC_OscConfig+0xe8>
 800392a:	e000      	b.n	800392e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800392c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d063      	beq.n	8003a02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	4b4a      	ldr	r3, [pc, #296]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003946:	4b47      	ldr	r3, [pc, #284]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394e:	2b08      	cmp	r3, #8
 8003950:	d11c      	bne.n	800398c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b44      	ldr	r3, [pc, #272]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d116      	bne.n	800398c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800395e:	4b41      	ldr	r3, [pc, #260]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d005      	beq.n	8003976 <HAL_RCC_OscConfig+0x152>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d001      	beq.n	8003976 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e1c7      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003976:	4b3b      	ldr	r3, [pc, #236]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	4937      	ldr	r1, [pc, #220]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800398a:	e03a      	b.n	8003a02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <HAL_RCC_OscConfig+0x244>)
 8003996:	2201      	movs	r2, #1
 8003998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399a:	f7fe ff55 	bl	8002848 <HAL_GetTick>
 800399e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	e008      	b.n	80039b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039a2:	f7fe ff51 	bl	8002848 <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e1a8      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b4:	4b2b      	ldr	r3, [pc, #172]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d0f0      	beq.n	80039a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039c0:	4b28      	ldr	r3, [pc, #160]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4925      	ldr	r1, [pc, #148]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	600b      	str	r3, [r1, #0]
 80039d4:	e015      	b.n	8003a02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039d6:	4b24      	ldr	r3, [pc, #144]	; (8003a68 <HAL_RCC_OscConfig+0x244>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039dc:	f7fe ff34 	bl	8002848 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039e4:	f7fe ff30 	bl	8002848 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e187      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d036      	beq.n	8003a7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d016      	beq.n	8003a44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <HAL_RCC_OscConfig+0x248>)
 8003a18:	2201      	movs	r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1c:	f7fe ff14 	bl	8002848 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a24:	f7fe ff10 	bl	8002848 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e167      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_OscConfig+0x240>)
 8003a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x200>
 8003a42:	e01b      	b.n	8003a7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_OscConfig+0x248>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a4a:	f7fe fefd 	bl	8002848 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a50:	e00e      	b.n	8003a70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a52:	f7fe fef9 	bl	8002848 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d907      	bls.n	8003a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	e150      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
 8003a64:	40023800 	.word	0x40023800
 8003a68:	42470000 	.word	0x42470000
 8003a6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	4b88      	ldr	r3, [pc, #544]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ea      	bne.n	8003a52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 8097 	beq.w	8003bb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8e:	4b81      	ldr	r3, [pc, #516]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b7d      	ldr	r3, [pc, #500]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a7c      	ldr	r2, [pc, #496]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b77      	ldr	r3, [pc, #476]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d118      	bne.n	8003af8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac6:	4b74      	ldr	r3, [pc, #464]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a73      	ldr	r2, [pc, #460]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad2:	f7fe feb9 	bl	8002848 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ada:	f7fe feb5 	bl	8002848 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e10c      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b6a      	ldr	r3, [pc, #424]	; (8003c98 <HAL_RCC_OscConfig+0x474>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d106      	bne.n	8003b0e <HAL_RCC_OscConfig+0x2ea>
 8003b00:	4b64      	ldr	r3, [pc, #400]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b04:	4a63      	ldr	r2, [pc, #396]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b0c:	e01c      	b.n	8003b48 <HAL_RCC_OscConfig+0x324>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x30c>
 8003b16:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4a5e      	ldr	r2, [pc, #376]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	6713      	str	r3, [r2, #112]	; 0x70
 8003b22:	4b5c      	ldr	r3, [pc, #368]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a5b      	ldr	r2, [pc, #364]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 0301 	orr.w	r3, r3, #1
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0x324>
 8003b30:	4b58      	ldr	r3, [pc, #352]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	4a57      	ldr	r2, [pc, #348]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3c:	4b55      	ldr	r3, [pc, #340]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 0304 	bic.w	r3, r3, #4
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d015      	beq.n	8003b7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b50:	f7fe fe7a 	bl	8002848 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b56:	e00a      	b.n	8003b6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b58:	f7fe fe76 	bl	8002848 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e0cb      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b6e:	4b49      	ldr	r3, [pc, #292]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0ee      	beq.n	8003b58 <HAL_RCC_OscConfig+0x334>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b7c:	f7fe fe64 	bl	8002848 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b82:	e00a      	b.n	8003b9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b84:	f7fe fe60 	bl	8002848 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e0b5      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b9a:	4b3e      	ldr	r3, [pc, #248]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ee      	bne.n	8003b84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ba6:	7dfb      	ldrb	r3, [r7, #23]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bac:	4b39      	ldr	r3, [pc, #228]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb0:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80a1 	beq.w	8003d04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bc2:	4b34      	ldr	r3, [pc, #208]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 030c 	and.w	r3, r3, #12
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d05c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d141      	bne.n	8003c5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd6:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fe34 	bl	8002848 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be4:	f7fe fe30 	bl	8002848 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e087      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf6:	4b27      	ldr	r3, [pc, #156]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	69da      	ldr	r2, [r3, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	019b      	lsls	r3, r3, #6
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c18:	085b      	lsrs	r3, r3, #1
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	061b      	lsls	r3, r3, #24
 8003c26:	491b      	ldr	r1, [pc, #108]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	; (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003c2e:	2201      	movs	r2, #1
 8003c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c32:	f7fe fe09 	bl	8002848 <HAL_GetTick>
 8003c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3a:	f7fe fe05 	bl	8002848 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e05c      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4c:	4b11      	ldr	r3, [pc, #68]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x416>
 8003c58:	e054      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5a:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCC_OscConfig+0x478>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe fdf2 	bl	8002848 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c68:	f7fe fdee 	bl	8002848 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e045      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x444>
 8003c86:	e03d      	b.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d107      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e038      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40007000 	.word	0x40007000
 8003c9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	; (8003d10 <HAL_RCC_OscConfig+0x4ec>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d028      	beq.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d121      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d11a      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce6:	085b      	lsrs	r3, r3, #1
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d107      	bne.n	8003d00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800

08003d14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0cc      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d90c      	bls.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	b2d2      	uxtb	r2, r2
 8003d3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d3e:	4b63      	ldr	r3, [pc, #396]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d001      	beq.n	8003d50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e0b8      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d020      	beq.n	8003d9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d68:	4b59      	ldr	r3, [pc, #356]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	4a58      	ldr	r2, [pc, #352]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d80:	4b53      	ldr	r3, [pc, #332]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a52      	ldr	r2, [pc, #328]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d8c:	4b50      	ldr	r3, [pc, #320]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	494d      	ldr	r1, [pc, #308]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d044      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d107      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db2:	4b47      	ldr	r3, [pc, #284]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d119      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d003      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	2b03      	cmp	r3, #3
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b3f      	ldr	r3, [pc, #252]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e06f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3b      	ldr	r3, [pc, #236]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e067      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4934      	ldr	r1, [pc, #208]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e04:	f7fe fd20 	bl	8002848 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fe fd1c 	bl	8002848 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e04f      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b25      	ldr	r3, [pc, #148]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0307 	and.w	r3, r3, #7
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d20c      	bcs.n	8003e5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b22      	ldr	r3, [pc, #136]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	b2d2      	uxtb	r2, r2
 8003e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e4a:	4b20      	ldr	r3, [pc, #128]	; (8003ecc <HAL_RCC_ClockConfig+0x1b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d001      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e032      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d008      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e68:	4b19      	ldr	r3, [pc, #100]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4916      	ldr	r1, [pc, #88]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e86:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	490e      	ldr	r1, [pc, #56]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e9a:	f000 f821 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	490a      	ldr	r1, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	5ccb      	ldrb	r3, [r1, r3]
 8003eae:	fa22 f303 	lsr.w	r3, r2, r3
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c4>)
 8003eb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_ClockConfig+0x1c8>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fe fc80 	bl	80027c0 <HAL_InitTick>

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023c00 	.word	0x40023c00
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	08008a90 	.word	0x08008a90
 8003ed8:	20000030 	.word	0x20000030
 8003edc:	20000034 	.word	0x20000034

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b094      	sub	sp, #80	; 0x50
 8003ee6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	647b      	str	r3, [r7, #68]	; 0x44
 8003eec:	2300      	movs	r3, #0
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef8:	4b79      	ldr	r3, [pc, #484]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f003 030c 	and.w	r3, r3, #12
 8003f00:	2b08      	cmp	r3, #8
 8003f02:	d00d      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x40>
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	f200 80e1 	bhi.w	80040cc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0x34>
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f12:	e0db      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f14:	4b73      	ldr	r3, [pc, #460]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f16:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f18:	e0db      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f1a:	4b73      	ldr	r3, [pc, #460]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f1e:	e0d8      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f20:	4b6f      	ldr	r3, [pc, #444]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f28:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f2a:	4b6d      	ldr	r3, [pc, #436]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d063      	beq.n	8003ffe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f36:	4b6a      	ldr	r3, [pc, #424]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	099b      	lsrs	r3, r3, #6
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f40:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f48:	633b      	str	r3, [r7, #48]	; 0x30
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f52:	4622      	mov	r2, r4
 8003f54:	462b      	mov	r3, r5
 8003f56:	f04f 0000 	mov.w	r0, #0
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	0159      	lsls	r1, r3, #5
 8003f60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f64:	0150      	lsls	r0, r2, #5
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	1a51      	subs	r1, r2, r1
 8003f6e:	6139      	str	r1, [r7, #16]
 8003f70:	4629      	mov	r1, r5
 8003f72:	eb63 0301 	sbc.w	r3, r3, r1
 8003f76:	617b      	str	r3, [r7, #20]
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f84:	4659      	mov	r1, fp
 8003f86:	018b      	lsls	r3, r1, #6
 8003f88:	4651      	mov	r1, sl
 8003f8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f8e:	4651      	mov	r1, sl
 8003f90:	018a      	lsls	r2, r1, #6
 8003f92:	4651      	mov	r1, sl
 8003f94:	ebb2 0801 	subs.w	r8, r2, r1
 8003f98:	4659      	mov	r1, fp
 8003f9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fb2:	4690      	mov	r8, r2
 8003fb4:	4699      	mov	r9, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	eb18 0303 	adds.w	r3, r8, r3
 8003fbc:	60bb      	str	r3, [r7, #8]
 8003fbe:	462b      	mov	r3, r5
 8003fc0:	eb49 0303 	adc.w	r3, r9, r3
 8003fc4:	60fb      	str	r3, [r7, #12]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fd2:	4629      	mov	r1, r5
 8003fd4:	024b      	lsls	r3, r1, #9
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fdc:	4621      	mov	r1, r4
 8003fde:	024a      	lsls	r2, r1, #9
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ff0:	f7fc f946 	bl	8000280 <__aeabi_uldivmod>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ffc:	e058      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b38      	ldr	r3, [pc, #224]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	4618      	mov	r0, r3
 8004008:	4611      	mov	r1, r2
 800400a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800400e:	623b      	str	r3, [r7, #32]
 8004010:	2300      	movs	r3, #0
 8004012:	627b      	str	r3, [r7, #36]	; 0x24
 8004014:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004018:	4642      	mov	r2, r8
 800401a:	464b      	mov	r3, r9
 800401c:	f04f 0000 	mov.w	r0, #0
 8004020:	f04f 0100 	mov.w	r1, #0
 8004024:	0159      	lsls	r1, r3, #5
 8004026:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800402a:	0150      	lsls	r0, r2, #5
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4641      	mov	r1, r8
 8004032:	ebb2 0a01 	subs.w	sl, r2, r1
 8004036:	4649      	mov	r1, r9
 8004038:	eb63 0b01 	sbc.w	fp, r3, r1
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004048:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800404c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004050:	ebb2 040a 	subs.w	r4, r2, sl
 8004054:	eb63 050b 	sbc.w	r5, r3, fp
 8004058:	f04f 0200 	mov.w	r2, #0
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	00eb      	lsls	r3, r5, #3
 8004062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004066:	00e2      	lsls	r2, r4, #3
 8004068:	4614      	mov	r4, r2
 800406a:	461d      	mov	r5, r3
 800406c:	4643      	mov	r3, r8
 800406e:	18e3      	adds	r3, r4, r3
 8004070:	603b      	str	r3, [r7, #0]
 8004072:	464b      	mov	r3, r9
 8004074:	eb45 0303 	adc.w	r3, r5, r3
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004086:	4629      	mov	r1, r5
 8004088:	028b      	lsls	r3, r1, #10
 800408a:	4621      	mov	r1, r4
 800408c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004090:	4621      	mov	r1, r4
 8004092:	028a      	lsls	r2, r1, #10
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409a:	2200      	movs	r2, #0
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	61fa      	str	r2, [r7, #28]
 80040a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040a4:	f7fc f8ec 	bl	8000280 <__aeabi_uldivmod>
 80040a8:	4602      	mov	r2, r0
 80040aa:	460b      	mov	r3, r1
 80040ac:	4613      	mov	r3, r2
 80040ae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040b0:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	0c1b      	lsrs	r3, r3, #16
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	3301      	adds	r3, #1
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ca:	e002      	b.n	80040d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ce:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3750      	adds	r7, #80	; 0x50
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	40023800 	.word	0x40023800
 80040e4:	00f42400 	.word	0x00f42400
 80040e8:	007a1200 	.word	0x007a1200

080040ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040f0:	4b03      	ldr	r3, [pc, #12]	; (8004100 <HAL_RCC_GetHCLKFreq+0x14>)
 80040f2:	681b      	ldr	r3, [r3, #0]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20000030 	.word	0x20000030

08004104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004108:	f7ff fff0 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b05      	ldr	r3, [pc, #20]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	0a9b      	lsrs	r3, r3, #10
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4903      	ldr	r1, [pc, #12]	; (8004128 <HAL_RCC_GetPCLK1Freq+0x24>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004120:	4618      	mov	r0, r3
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40023800 	.word	0x40023800
 8004128:	08008aa0 	.word	0x08008aa0

0800412c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004130:	f7ff ffdc 	bl	80040ec <HAL_RCC_GetHCLKFreq>
 8004134:	4602      	mov	r2, r0
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0b5b      	lsrs	r3, r3, #13
 800413c:	f003 0307 	and.w	r3, r3, #7
 8004140:	4903      	ldr	r1, [pc, #12]	; (8004150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004142:	5ccb      	ldrb	r3, [r1, r3]
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40023800 	.word	0x40023800
 8004150:	08008aa0 	.word	0x08008aa0

08004154 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004178:	2b00      	cmp	r3, #0
 800417a:	d038      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800417c:	4b68      	ldr	r3, [pc, #416]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004182:	f7fe fb61 	bl	8002848 <HAL_GetTick>
 8004186:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004188:	e008      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418a:	f7fe fb5d 	bl	8002848 <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d901      	bls.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e0bd      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800419c:	4b61      	ldr	r3, [pc, #388]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f0      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	431a      	orrs	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	071b      	lsls	r3, r3, #28
 80041ba:	495a      	ldr	r1, [pc, #360]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041c2:	4b57      	ldr	r3, [pc, #348]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80041c8:	f7fe fb3e 	bl	8002848 <HAL_GetTick>
 80041cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80041d0:	f7fe fb3a 	bl	8002848 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e09a      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041e2:	4b50      	ldr	r3, [pc, #320]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8083 	beq.w	8004302 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	4b48      	ldr	r3, [pc, #288]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	4a47      	ldr	r2, [pc, #284]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004206:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800420a:	6413      	str	r3, [r2, #64]	; 0x40
 800420c:	4b45      	ldr	r3, [pc, #276]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800420e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004218:	4b43      	ldr	r3, [pc, #268]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a42      	ldr	r2, [pc, #264]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800421e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004222:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004224:	f7fe fb10 	bl	8002848 <HAL_GetTick>
 8004228:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800422c:	f7fe fb0c 	bl	8002848 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e06c      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800423e:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800424a:	4b36      	ldr	r3, [pc, #216]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004252:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d02f      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x166>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	429a      	cmp	r2, r3
 8004266:	d028      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004268:	4b2e      	ldr	r3, [pc, #184]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004270:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b2e      	ldr	r3, [pc, #184]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004278:	4b2c      	ldr	r3, [pc, #176]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800427e:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004284:	4b27      	ldr	r3, [pc, #156]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b01      	cmp	r3, #1
 800428e:	d114      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004290:	f7fe fada 	bl	8002848 <HAL_GetTick>
 8004294:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	e00a      	b.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004298:	f7fe fad6 	bl	8002848 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e034      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ae:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d0ee      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80042c8:	4b16      	ldr	r3, [pc, #88]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	4911      	ldr	r1, [pc, #68]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	608b      	str	r3, [r1, #8]
 80042e2:	e005      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ee:	6093      	str	r3, [r2, #8]
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fc:	4909      	ldr	r1, [pc, #36]	; (8004324 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	7d1a      	ldrb	r2, [r3, #20]
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004314:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}
 8004320:	42470068 	.word	0x42470068
 8004324:	40023800 	.word	0x40023800
 8004328:	40007000 	.word	0x40007000
 800432c:	42470e40 	.word	0x42470e40
 8004330:	424711e0 	.word	0x424711e0

08004334 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e066      	b.n	8004418 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	7f5b      	ldrb	r3, [r3, #29]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d105      	bne.n	8004360 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fd fe9a 	bl	8002094 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	22ca      	movs	r2, #202	; 0xca
 800436c:	625a      	str	r2, [r3, #36]	; 0x24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2253      	movs	r2, #83	; 0x53
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fa45 	bl	8004806 <RTC_EnterInitMode>
 800437c:	4603      	mov	r3, r0
 800437e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d12c      	bne.n	80043e0 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004398:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6899      	ldr	r1, [r3, #8]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	691b      	ldr	r3, [r3, #16]
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	68d2      	ldr	r2, [r2, #12]
 80043c0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6919      	ldr	r1, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	041a      	lsls	r2, r3, #16
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	430a      	orrs	r2, r1
 80043d4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fa4c 	bl	8004874 <RTC_ExitInitMode>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d113      	bne.n	800440e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	699a      	ldr	r2, [r3, #24]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	7f1b      	ldrb	r3, [r3, #28]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_RTC_SetTime+0x1c>
 8004438:	2302      	movs	r3, #2
 800443a:	e087      	b.n	800454c <HAL_RTC_SetTime+0x12c>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2201      	movs	r2, #1
 8004440:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2202      	movs	r2, #2
 8004446:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d126      	bne.n	800449c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	2200      	movs	r2, #0
 8004460:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fa29 	bl	80048be <RTC_ByteToBcd2>
 800446c:	4603      	mov	r3, r0
 800446e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	785b      	ldrb	r3, [r3, #1]
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fa22 	bl	80048be <RTC_ByteToBcd2>
 800447a:	4603      	mov	r3, r0
 800447c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800447e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	789b      	ldrb	r3, [r3, #2]
 8004484:	4618      	mov	r0, r3
 8004486:	f000 fa1a 	bl	80048be <RTC_ByteToBcd2>
 800448a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800448c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	78db      	ldrb	r3, [r3, #3]
 8004494:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004496:	4313      	orrs	r3, r2
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	e018      	b.n	80044ce <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2200      	movs	r2, #0
 80044ae:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	785b      	ldrb	r3, [r3, #1]
 80044ba:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044bc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80044c2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	78db      	ldrb	r3, [r3, #3]
 80044c8:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80044ca:	4313      	orrs	r3, r2
 80044cc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	22ca      	movs	r2, #202	; 0xca
 80044d4:	625a      	str	r2, [r3, #36]	; 0x24
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2253      	movs	r2, #83	; 0x53
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f991 	bl	8004806 <RTC_EnterInitMode>
 80044e4:	4603      	mov	r3, r0
 80044e6:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d120      	bne.n	8004530 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80044f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80044fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800450c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	431a      	orrs	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f9a4 	bl	8004874 <RTC_ExitInitMode>
 800452c:	4603      	mov	r3, r0
 800452e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004530:	7cfb      	ldrb	r3, [r7, #19]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	22ff      	movs	r2, #255	; 0xff
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	771a      	strb	r2, [r3, #28]

  return status;
 800454a:	7cfb      	ldrb	r3, [r7, #19]
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}

08004554 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004586:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800458a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	0c1b      	lsrs	r3, r3, #16
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004596:	b2da      	uxtb	r2, r3
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	0d9b      	lsrs	r3, r3, #22
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d11a      	bne.n	8004606 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	4618      	mov	r0, r3
 80045d6:	f000 f98f 	bl	80048f8 <RTC_Bcd2ToByte>
 80045da:	4603      	mov	r3, r0
 80045dc:	461a      	mov	r2, r3
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 f986 	bl	80048f8 <RTC_Bcd2ToByte>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	789b      	ldrb	r3, [r3, #2]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 f97d 	bl	80048f8 <RTC_Bcd2ToByte>
 80045fe:	4603      	mov	r3, r0
 8004600:	461a      	mov	r2, r3
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004610:	b590      	push	{r4, r7, lr}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	7f1b      	ldrb	r3, [r3, #28]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_RTC_SetDate+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e071      	b.n	8004710 <HAL_RTC_SetDate+0x100>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2202      	movs	r2, #2
 8004636:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10e      	bne.n	800465c <HAL_RTC_SetDate+0x4c>
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	785b      	ldrb	r3, [r3, #1]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	785b      	ldrb	r3, [r3, #1]
 800464e:	f023 0310 	bic.w	r3, r3, #16
 8004652:	b2db      	uxtb	r3, r3
 8004654:	330a      	adds	r3, #10
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d11c      	bne.n	800469c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	78db      	ldrb	r3, [r3, #3]
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f929 	bl	80048be <RTC_ByteToBcd2>
 800466c:	4603      	mov	r3, r0
 800466e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f922 	bl	80048be <RTC_ByteToBcd2>
 800467a:	4603      	mov	r3, r0
 800467c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800467e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	789b      	ldrb	r3, [r3, #2]
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f91a 	bl	80048be <RTC_ByteToBcd2>
 800468a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800468c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e00e      	b.n	80046ba <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	78db      	ldrb	r3, [r3, #3]
 80046a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	785b      	ldrb	r3, [r3, #1]
 80046a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046a8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80046ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80046b6:	4313      	orrs	r3, r2
 80046b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	22ca      	movs	r2, #202	; 0xca
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2253      	movs	r2, #83	; 0x53
 80046c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f89b 	bl	8004806 <RTC_EnterInitMode>
 80046d0:	4603      	mov	r3, r0
 80046d2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80046e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80046e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f8c2 	bl	8004874 <RTC_ExitInitMode>
 80046f0:	4603      	mov	r3, r0
 80046f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80046f4:	7cfb      	ldrb	r3, [r7, #19]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d102      	bne.n	8004700 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	771a      	strb	r2, [r3, #28]

  return status;
 800470e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004710:	4618      	mov	r0, r3
 8004712:	371c      	adds	r7, #28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd90      	pop	{r4, r7, pc}

08004718 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004732:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004736:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	0c1b      	lsrs	r3, r3, #16
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	0a1b      	lsrs	r3, r3, #8
 8004746:	b2db      	uxtb	r3, r3
 8004748:	f003 031f 	and.w	r3, r3, #31
 800474c:	b2da      	uxtb	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800475a:	b2da      	uxtb	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	0b5b      	lsrs	r3, r3, #13
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d11a      	bne.n	80047ac <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	78db      	ldrb	r3, [r3, #3]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 f8bc 	bl	80048f8 <RTC_Bcd2ToByte>
 8004780:	4603      	mov	r3, r0
 8004782:	461a      	mov	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	4618      	mov	r0, r3
 800478e:	f000 f8b3 	bl	80048f8 <RTC_Bcd2ToByte>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	789b      	ldrb	r3, [r3, #2]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 f8aa 	bl	80048f8 <RTC_Bcd2ToByte>
 80047a4:	4603      	mov	r3, r0
 80047a6:	461a      	mov	r2, r3
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80047be:	2300      	movs	r3, #0
 80047c0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d0:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d2:	f7fe f839 	bl	8002848 <HAL_GetTick>
 80047d6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047d8:	e009      	b.n	80047ee <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047da:	f7fe f835 	bl	8002848 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047e8:	d901      	bls.n	80047ee <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e007      	b.n	80047fe <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ee      	beq.n	80047da <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d122      	bne.n	800486a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004832:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004834:	f7fe f808 	bl	8002848 <HAL_GetTick>
 8004838:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800483a:	e00c      	b.n	8004856 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800483c:	f7fe f804 	bl	8002848 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800484a:	d904      	bls.n	8004856 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2204      	movs	r2, #4
 8004850:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d102      	bne.n	800486a <RTC_EnterInitMode+0x64>
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d1e8      	bne.n	800483c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800486a:	7bfb      	ldrb	r3, [r7, #15]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800488e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0320 	and.w	r3, r3, #32
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7ff ff89 	bl	80047b6 <HAL_RTC_WaitForSynchro>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d004      	beq.n	80048b4 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80048b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80048be:	b480      	push	{r7}
 80048c0:	b085      	sub	sp, #20
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	4603      	mov	r3, r0
 80048c6:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80048cc:	e005      	b.n	80048da <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	3301      	adds	r3, #1
 80048d2:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	3b0a      	subs	r3, #10
 80048d8:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b09      	cmp	r3, #9
 80048de:	d8f6      	bhi.n	80048ce <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	b2db      	uxtb	r3, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	4603      	mov	r3, r0
 8004900:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004906:	79fb      	ldrb	r3, [r7, #7]
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	0092      	lsls	r2, r2, #2
 8004910:	4413      	add	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	b2da      	uxtb	r2, r3
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	4413      	add	r3, r2
 8004922:	b2db      	uxtb	r3, r3
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e041      	b.n	80049c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d106      	bne.n	800495c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7fd fbc8 	bl	80020ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4610      	mov	r0, r2
 8004970:	f001 f844 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
	...

080049d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d001      	beq.n	80049e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e044      	b.n	8004a72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2202      	movs	r2, #2
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1e      	ldr	r2, [pc, #120]	; (8004a80 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d018      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d013      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00e      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a17      	ldr	r2, [pc, #92]	; (8004a8c <HAL_TIM_Base_Start_IT+0xbc>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d004      	beq.n	8004a3c <HAL_TIM_Base_Start_IT+0x6c>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a16      	ldr	r2, [pc, #88]	; (8004a90 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d111      	bne.n	8004a60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b06      	cmp	r3, #6
 8004a4c:	d010      	beq.n	8004a70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f042 0201 	orr.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a5e:	e007      	b.n	8004a70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0201 	orr.w	r2, r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40014000 	.word	0x40014000

08004a94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e041      	b.n	8004b2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fd fba8 	bl	8002210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f000 ff92 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d109      	bne.n	8004b58 <HAL_TIM_PWM_Start+0x24>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e022      	b.n	8004b9e <HAL_TIM_PWM_Start+0x6a>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	2b04      	cmp	r3, #4
 8004b5c:	d109      	bne.n	8004b72 <HAL_TIM_PWM_Start+0x3e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	bf14      	ite	ne
 8004b6a:	2301      	movne	r3, #1
 8004b6c:	2300      	moveq	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	e015      	b.n	8004b9e <HAL_TIM_PWM_Start+0x6a>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d109      	bne.n	8004b8c <HAL_TIM_PWM_Start+0x58>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	e008      	b.n	8004b9e <HAL_TIM_PWM_Start+0x6a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e068      	b.n	8004c78 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d104      	bne.n	8004bb6 <HAL_TIM_PWM_Start+0x82>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb4:	e013      	b.n	8004bde <HAL_TIM_PWM_Start+0xaa>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d104      	bne.n	8004bc6 <HAL_TIM_PWM_Start+0x92>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc4:	e00b      	b.n	8004bde <HAL_TIM_PWM_Start+0xaa>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d104      	bne.n	8004bd6 <HAL_TIM_PWM_Start+0xa2>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bd4:	e003      	b.n	8004bde <HAL_TIM_PWM_Start+0xaa>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2201      	movs	r2, #1
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 facc 	bl	8006184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a23      	ldr	r2, [pc, #140]	; (8004c80 <HAL_TIM_PWM_Start+0x14c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	; (8004c80 <HAL_TIM_PWM_Start+0x14c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d018      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x10e>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d013      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x10e>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_TIM_PWM_Start+0x150>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00e      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x10e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a17      	ldr	r2, [pc, #92]	; (8004c88 <HAL_TIM_PWM_Start+0x154>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x10e>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a16      	ldr	r2, [pc, #88]	; (8004c8c <HAL_TIM_PWM_Start+0x158>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d004      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x10e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <HAL_TIM_PWM_Start+0x15c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d111      	bne.n	8004c66 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 0307 	and.w	r3, r3, #7
 8004c4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d010      	beq.n	8004c76 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f042 0201 	orr.w	r2, r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c64:	e007      	b.n	8004c76 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f042 0201 	orr.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40014000 	.word	0x40014000

08004c94 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d109      	bne.n	8004cbc <HAL_TIM_PWM_Start_IT+0x28>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf14      	ite	ne
 8004cb4:	2301      	movne	r3, #1
 8004cb6:	2300      	moveq	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e022      	b.n	8004d02 <HAL_TIM_PWM_Start_IT+0x6e>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d109      	bne.n	8004cd6 <HAL_TIM_PWM_Start_IT+0x42>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	e015      	b.n	8004d02 <HAL_TIM_PWM_Start_IT+0x6e>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d109      	bne.n	8004cf0 <HAL_TIM_PWM_Start_IT+0x5c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	bf14      	ite	ne
 8004ce8:	2301      	movne	r3, #1
 8004cea:	2300      	moveq	r3, #0
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	e008      	b.n	8004d02 <HAL_TIM_PWM_Start_IT+0x6e>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	bf14      	ite	ne
 8004cfc:	2301      	movne	r3, #1
 8004cfe:	2300      	moveq	r3, #0
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e0b3      	b.n	8004e72 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_PWM_Start_IT+0x86>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d18:	e013      	b.n	8004d42 <HAL_TIM_PWM_Start_IT+0xae>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b04      	cmp	r3, #4
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_PWM_Start_IT+0x96>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d28:	e00b      	b.n	8004d42 <HAL_TIM_PWM_Start_IT+0xae>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_PWM_Start_IT+0xa6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d38:	e003      	b.n	8004d42 <HAL_TIM_PWM_Start_IT+0xae>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2202      	movs	r2, #2
 8004d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d841      	bhi.n	8004dcc <HAL_TIM_PWM_Start_IT+0x138>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <HAL_TIM_PWM_Start_IT+0xbc>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004dcd 	.word	0x08004dcd
 8004d58:	08004dcd 	.word	0x08004dcd
 8004d5c:	08004dcd 	.word	0x08004dcd
 8004d60:	08004d97 	.word	0x08004d97
 8004d64:	08004dcd 	.word	0x08004dcd
 8004d68:	08004dcd 	.word	0x08004dcd
 8004d6c:	08004dcd 	.word	0x08004dcd
 8004d70:	08004da9 	.word	0x08004da9
 8004d74:	08004dcd 	.word	0x08004dcd
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004dcd 	.word	0x08004dcd
 8004d80:	08004dbb 	.word	0x08004dbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f042 0202 	orr.w	r2, r2, #2
 8004d92:	60da      	str	r2, [r3, #12]
      break;
 8004d94:	e01d      	b.n	8004dd2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0204 	orr.w	r2, r2, #4
 8004da4:	60da      	str	r2, [r3, #12]
      break;
 8004da6:	e014      	b.n	8004dd2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0208 	orr.w	r2, r2, #8
 8004db6:	60da      	str	r2, [r3, #12]
      break;
 8004db8:	e00b      	b.n	8004dd2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0210 	orr.w	r2, r2, #16
 8004dc8:	60da      	str	r2, [r3, #12]
      break;
 8004dca:	e002      	b.n	8004dd2 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d14b      	bne.n	8004e70 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	6839      	ldr	r1, [r7, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f001 f9cf 	bl	8006184 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d107      	bne.n	8004e00 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d018      	beq.n	8004e3c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e12:	d013      	beq.n	8004e3c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a19      	ldr	r2, [pc, #100]	; (8004e80 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00e      	beq.n	8004e3c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a18      	ldr	r2, [pc, #96]	; (8004e84 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d009      	beq.n	8004e3c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d004      	beq.n	8004e3c <HAL_TIM_PWM_Start_IT+0x1a8>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a15      	ldr	r2, [pc, #84]	; (8004e8c <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d111      	bne.n	8004e60 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2b06      	cmp	r3, #6
 8004e4c:	d010      	beq.n	8004e70 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0201 	orr.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e5e:	e007      	b.n	8004e70 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0201 	orr.w	r2, r2, #1
 8004e6e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40010000 	.word	0x40010000
 8004e80:	40000400 	.word	0x40000400
 8004e84:	40000800 	.word	0x40000800
 8004e88:	40000c00 	.word	0x40000c00
 8004e8c:	40014000 	.word	0x40014000

08004e90 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b0c      	cmp	r3, #12
 8004ea2:	d841      	bhi.n	8004f28 <HAL_TIM_PWM_Stop_IT+0x98>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ee1 	.word	0x08004ee1
 8004eb0:	08004f29 	.word	0x08004f29
 8004eb4:	08004f29 	.word	0x08004f29
 8004eb8:	08004f29 	.word	0x08004f29
 8004ebc:	08004ef3 	.word	0x08004ef3
 8004ec0:	08004f29 	.word	0x08004f29
 8004ec4:	08004f29 	.word	0x08004f29
 8004ec8:	08004f29 	.word	0x08004f29
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	08004f29 	.word	0x08004f29
 8004ed8:	08004f29 	.word	0x08004f29
 8004edc:	08004f17 	.word	0x08004f17
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0202 	bic.w	r2, r2, #2
 8004eee:	60da      	str	r2, [r3, #12]
      break;
 8004ef0:	e01d      	b.n	8004f2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0204 	bic.w	r2, r2, #4
 8004f00:	60da      	str	r2, [r3, #12]
      break;
 8004f02:	e014      	b.n	8004f2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0208 	bic.w	r2, r2, #8
 8004f12:	60da      	str	r2, [r3, #12]
      break;
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0210 	bic.w	r2, r2, #16
 8004f24:	60da      	str	r2, [r3, #12]
      break;
 8004f26:	e002      	b.n	8004f2e <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d157      	bne.n	8004fe4 <HAL_TIM_PWM_Stop_IT+0x154>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	6839      	ldr	r1, [r7, #0]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f001 f921 	bl	8006184 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <HAL_TIM_PWM_Stop_IT+0x160>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d117      	bne.n	8004f7c <HAL_TIM_PWM_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f56:	4013      	ands	r3, r2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10f      	bne.n	8004f7c <HAL_TIM_PWM_Stop_IT+0xec>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	f240 4344 	movw	r3, #1092	; 0x444
 8004f66:	4013      	ands	r3, r2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_TIM_PWM_Stop_IT+0xec>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a1a      	ldr	r2, [r3, #32]
 8004f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10f      	bne.n	8004fac <HAL_TIM_PWM_Stop_IT+0x11c>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	6a1a      	ldr	r2, [r3, #32]
 8004f92:	f240 4344 	movw	r3, #1092	; 0x444
 8004f96:	4013      	ands	r3, r2
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d107      	bne.n	8004fac <HAL_TIM_PWM_Stop_IT+0x11c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0201 	bic.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <HAL_TIM_PWM_Stop_IT+0x12c>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fba:	e013      	b.n	8004fe4 <HAL_TIM_PWM_Stop_IT+0x154>
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d104      	bne.n	8004fcc <HAL_TIM_PWM_Stop_IT+0x13c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fca:	e00b      	b.n	8004fe4 <HAL_TIM_PWM_Stop_IT+0x154>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d104      	bne.n	8004fdc <HAL_TIM_PWM_Stop_IT+0x14c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fda:	e003      	b.n	8004fe4 <HAL_TIM_PWM_Stop_IT+0x154>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40010000 	.word	0x40010000

08004ff4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e041      	b.n	800508a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d106      	bne.n	8005020 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f839 	bl	8005092 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f000 fce2 	bl	80059fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}

08005092 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d104      	bne.n	80050c6 <HAL_TIM_IC_Start_IT+0x1e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e013      	b.n	80050ee <HAL_TIM_IC_Start_IT+0x46>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2b04      	cmp	r3, #4
 80050ca:	d104      	bne.n	80050d6 <HAL_TIM_IC_Start_IT+0x2e>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	e00b      	b.n	80050ee <HAL_TIM_IC_Start_IT+0x46>
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d104      	bne.n	80050e6 <HAL_TIM_IC_Start_IT+0x3e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	e003      	b.n	80050ee <HAL_TIM_IC_Start_IT+0x46>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d104      	bne.n	8005100 <HAL_TIM_IC_Start_IT+0x58>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	e013      	b.n	8005128 <HAL_TIM_IC_Start_IT+0x80>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	2b04      	cmp	r3, #4
 8005104:	d104      	bne.n	8005110 <HAL_TIM_IC_Start_IT+0x68>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e00b      	b.n	8005128 <HAL_TIM_IC_Start_IT+0x80>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	2b08      	cmp	r3, #8
 8005114:	d104      	bne.n	8005120 <HAL_TIM_IC_Start_IT+0x78>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800511c:	b2db      	uxtb	r3, r3
 800511e:	e003      	b.n	8005128 <HAL_TIM_IC_Start_IT+0x80>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005126:	b2db      	uxtb	r3, r3
 8005128:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800512a:	7bbb      	ldrb	r3, [r7, #14]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d102      	bne.n	8005136 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005130:	7b7b      	ldrb	r3, [r7, #13]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d001      	beq.n	800513a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e0c2      	b.n	80052c0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d104      	bne.n	800514a <HAL_TIM_IC_Start_IT+0xa2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005148:	e013      	b.n	8005172 <HAL_TIM_IC_Start_IT+0xca>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b04      	cmp	r3, #4
 800514e:	d104      	bne.n	800515a <HAL_TIM_IC_Start_IT+0xb2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005158:	e00b      	b.n	8005172 <HAL_TIM_IC_Start_IT+0xca>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b08      	cmp	r3, #8
 800515e:	d104      	bne.n	800516a <HAL_TIM_IC_Start_IT+0xc2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005168:	e003      	b.n	8005172 <HAL_TIM_IC_Start_IT+0xca>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_TIM_IC_Start_IT+0xda>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005180:	e013      	b.n	80051aa <HAL_TIM_IC_Start_IT+0x102>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d104      	bne.n	8005192 <HAL_TIM_IC_Start_IT+0xea>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005190:	e00b      	b.n	80051aa <HAL_TIM_IC_Start_IT+0x102>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b08      	cmp	r3, #8
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_IC_Start_IT+0xfa>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a0:	e003      	b.n	80051aa <HAL_TIM_IC_Start_IT+0x102>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d841      	bhi.n	8005234 <HAL_TIM_IC_Start_IT+0x18c>
 80051b0:	a201      	add	r2, pc, #4	; (adr r2, 80051b8 <HAL_TIM_IC_Start_IT+0x110>)
 80051b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b6:	bf00      	nop
 80051b8:	080051ed 	.word	0x080051ed
 80051bc:	08005235 	.word	0x08005235
 80051c0:	08005235 	.word	0x08005235
 80051c4:	08005235 	.word	0x08005235
 80051c8:	080051ff 	.word	0x080051ff
 80051cc:	08005235 	.word	0x08005235
 80051d0:	08005235 	.word	0x08005235
 80051d4:	08005235 	.word	0x08005235
 80051d8:	08005211 	.word	0x08005211
 80051dc:	08005235 	.word	0x08005235
 80051e0:	08005235 	.word	0x08005235
 80051e4:	08005235 	.word	0x08005235
 80051e8:	08005223 	.word	0x08005223
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68da      	ldr	r2, [r3, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0202 	orr.w	r2, r2, #2
 80051fa:	60da      	str	r2, [r3, #12]
      break;
 80051fc:	e01d      	b.n	800523a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 0204 	orr.w	r2, r2, #4
 800520c:	60da      	str	r2, [r3, #12]
      break;
 800520e:	e014      	b.n	800523a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0208 	orr.w	r2, r2, #8
 800521e:	60da      	str	r2, [r3, #12]
      break;
 8005220:	e00b      	b.n	800523a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68da      	ldr	r2, [r3, #12]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0210 	orr.w	r2, r2, #16
 8005230:	60da      	str	r2, [r3, #12]
      break;
 8005232:	e002      	b.n	800523a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
      break;
 8005238:	bf00      	nop
  }

  if (status == HAL_OK)
 800523a:	7bfb      	ldrb	r3, [r7, #15]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d13e      	bne.n	80052be <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f000 ff9b 	bl	8006184 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <HAL_TIM_IC_Start_IT+0x220>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d018      	beq.n	800528a <HAL_TIM_IC_Start_IT+0x1e2>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005260:	d013      	beq.n	800528a <HAL_TIM_IC_Start_IT+0x1e2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a19      	ldr	r2, [pc, #100]	; (80052cc <HAL_TIM_IC_Start_IT+0x224>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d00e      	beq.n	800528a <HAL_TIM_IC_Start_IT+0x1e2>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <HAL_TIM_IC_Start_IT+0x228>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d009      	beq.n	800528a <HAL_TIM_IC_Start_IT+0x1e2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a16      	ldr	r2, [pc, #88]	; (80052d4 <HAL_TIM_IC_Start_IT+0x22c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d004      	beq.n	800528a <HAL_TIM_IC_Start_IT+0x1e2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <HAL_TIM_IC_Start_IT+0x230>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d111      	bne.n	80052ae <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b06      	cmp	r3, #6
 800529a:	d010      	beq.n	80052be <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ac:	e007      	b.n	80052be <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40000c00 	.word	0x40000c00
 80052d8:	40014000 	.word	0x40014000

080052dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0202 	mvn.w	r2, #2
 8005308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7fd f9ce 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fb4a 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fb51 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	2b04      	cmp	r3, #4
 8005344:	d122      	bne.n	800538c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b04      	cmp	r3, #4
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0204 	mvn.w	r2, #4
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2202      	movs	r2, #2
 8005362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7fd f9a4 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fb20 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fb27 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	2b08      	cmp	r3, #8
 8005398:	d122      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d11b      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0208 	mvn.w	r2, #8
 80053b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2204      	movs	r2, #4
 80053b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7fd f97a 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 80053cc:	e005      	b.n	80053da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 faf6 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f000 fafd 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0310 	and.w	r3, r3, #16
 80053ea:	2b10      	cmp	r3, #16
 80053ec:	d122      	bne.n	8005434 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0310 	and.w	r3, r3, #16
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d11b      	bne.n	8005434 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0210 	mvn.w	r2, #16
 8005404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2208      	movs	r2, #8
 800540a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f7fd f950 	bl	80026c0 <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 facc 	bl	80059c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 fad3 	bl	80059d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b01      	cmp	r3, #1
 8005440:	d10e      	bne.n	8005460 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b01      	cmp	r3, #1
 800544e:	d107      	bne.n	8005460 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0201 	mvn.w	r2, #1
 8005458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fb fdfa 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b80      	cmp	r3, #128	; 0x80
 800546c:	d10e      	bne.n	800548c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d107      	bne.n	800548c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 ff1a 	bl	80062c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d10e      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a4:	2b40      	cmp	r3, #64	; 0x40
 80054a6:	d107      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa98 	bl	80059e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b20      	cmp	r3, #32
 80054c4:	d10e      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d107      	bne.n	80054e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f06f 0220 	mvn.w	r2, #32
 80054dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fee4 	bl	80062ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_TIM_IC_ConfigChannel+0x1e>
 8005506:	2302      	movs	r3, #2
 8005508:	e088      	b.n	800561c <HAL_TIM_IC_ConfigChannel+0x130>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d11b      	bne.n	8005550 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6818      	ldr	r0, [r3, #0]
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6819      	ldr	r1, [r3, #0]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	f000 fc74 	bl	8005e14 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699a      	ldr	r2, [r3, #24]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 020c 	bic.w	r2, r2, #12
 800553a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6999      	ldr	r1, [r3, #24]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	430a      	orrs	r2, r1
 800554c:	619a      	str	r2, [r3, #24]
 800554e:	e060      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d11c      	bne.n	8005590 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6818      	ldr	r0, [r3, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6819      	ldr	r1, [r3, #0]
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f000 fcec 	bl	8005f42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	699a      	ldr	r2, [r3, #24]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005578:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6999      	ldr	r1, [r3, #24]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	021a      	lsls	r2, r3, #8
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	430a      	orrs	r2, r1
 800558c:	619a      	str	r2, [r3, #24]
 800558e:	e040      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b08      	cmp	r3, #8
 8005594:	d11b      	bne.n	80055ce <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6818      	ldr	r0, [r3, #0]
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	6819      	ldr	r1, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f000 fd39 	bl	800601c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 020c 	bic.w	r2, r2, #12
 80055b8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69d9      	ldr	r1, [r3, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	61da      	str	r2, [r3, #28]
 80055cc:	e021      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2b0c      	cmp	r3, #12
 80055d2:	d11c      	bne.n	800560e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f000 fd56 	bl	8006094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69da      	ldr	r2, [r3, #28]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80055f6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69d9      	ldr	r1, [r3, #28]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	021a      	lsls	r2, r3, #8
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	61da      	str	r2, [r3, #28]
 800560c:	e001      	b.n	8005612 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ae      	b.n	80057a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f200 809f 	bhi.w	8005790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800568d 	.word	0x0800568d
 800565c:	08005791 	.word	0x08005791
 8005660:	08005791 	.word	0x08005791
 8005664:	08005791 	.word	0x08005791
 8005668:	080056cd 	.word	0x080056cd
 800566c:	08005791 	.word	0x08005791
 8005670:	08005791 	.word	0x08005791
 8005674:	08005791 	.word	0x08005791
 8005678:	0800570f 	.word	0x0800570f
 800567c:	08005791 	.word	0x08005791
 8005680:	08005791 	.word	0x08005791
 8005684:	08005791 	.word	0x08005791
 8005688:	0800574f 	.word	0x0800574f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fa32 	bl	8005afc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0204 	bic.w	r2, r2, #4
 80056b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]
      break;
 80056ca:	e064      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fa78 	bl	8005bc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
      break;
 800570c:	e043      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fac3 	bl	8005ca0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0208 	orr.w	r2, r2, #8
 8005728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0204 	bic.w	r2, r2, #4
 8005738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69d9      	ldr	r1, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	61da      	str	r2, [r3, #28]
      break;
 800574c:	e023      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 fb0d 	bl	8005d74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	021a      	lsls	r2, r3, #8
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	61da      	str	r2, [r3, #28]
      break;
 800578e:	e002      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_ConfigClockSource+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0b4      	b.n	800592e <HAL_TIM_ConfigClockSource+0x186>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fc:	d03e      	beq.n	800587c <HAL_TIM_ConfigClockSource+0xd4>
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005802:	f200 8087 	bhi.w	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	f000 8086 	beq.w	800591a <HAL_TIM_ConfigClockSource+0x172>
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005812:	d87f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b70      	cmp	r3, #112	; 0x70
 8005816:	d01a      	beq.n	800584e <HAL_TIM_ConfigClockSource+0xa6>
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d87b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b60      	cmp	r3, #96	; 0x60
 800581e:	d050      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005820:	2b60      	cmp	r3, #96	; 0x60
 8005822:	d877      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d03c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005828:	2b50      	cmp	r3, #80	; 0x50
 800582a:	d873      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d058      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d86f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d064      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d86b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d060      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d867      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d05a      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	e062      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f000 fc71 	bl	8006144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
      break;
 800587a:	e04f      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f000 fc5a 	bl	8006144 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589e:	609a      	str	r2, [r3, #8]
      break;
 80058a0:	e03c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 fb18 	bl	8005ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2150      	movs	r1, #80	; 0x50
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fc27 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 80058c0:	e02c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fb74 	bl	8005fbc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2160      	movs	r1, #96	; 0x60
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fc17 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 80058e0:	e01c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 faf8 	bl	8005ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2140      	movs	r1, #64	; 0x40
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fc07 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005900:	e00c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 fbfe 	bl	800610e <TIM_ITRx_SetConfig>
      break;
 8005912:	e003      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      break;
 8005918:	e000      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b0c      	cmp	r3, #12
 800594a:	d831      	bhi.n	80059b0 <HAL_TIM_ReadCapturedValue+0x78>
 800594c:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <HAL_TIM_ReadCapturedValue+0x1c>)
 800594e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005952:	bf00      	nop
 8005954:	08005989 	.word	0x08005989
 8005958:	080059b1 	.word	0x080059b1
 800595c:	080059b1 	.word	0x080059b1
 8005960:	080059b1 	.word	0x080059b1
 8005964:	08005993 	.word	0x08005993
 8005968:	080059b1 	.word	0x080059b1
 800596c:	080059b1 	.word	0x080059b1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059b1 	.word	0x080059b1
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059b1 	.word	0x080059b1
 8005984:	080059a7 	.word	0x080059a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598e:	60fb      	str	r3, [r7, #12]

      break;
 8005990:	e00f      	b.n	80059b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	60fb      	str	r3, [r7, #12]

      break;
 800599a:	e00a      	b.n	80059b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059a2:	60fb      	str	r3, [r7, #12]

      break;
 80059a4:	e005      	b.n	80059b2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ac:	60fb      	str	r3, [r7, #12]

      break;
 80059ae:	e000      	b.n	80059b2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059b0:	bf00      	nop
  }

  return tmpreg;
 80059b2:	68fb      	ldr	r3, [r7, #12]
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3714      	adds	r7, #20
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a34      	ldr	r2, [pc, #208]	; (8005ae0 <TIM_Base_SetConfig+0xe4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00f      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a1a:	d00b      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a31      	ldr	r2, [pc, #196]	; (8005ae4 <TIM_Base_SetConfig+0xe8>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d007      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a30      	ldr	r2, [pc, #192]	; (8005ae8 <TIM_Base_SetConfig+0xec>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_Base_SetConfig+0x38>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a2f      	ldr	r2, [pc, #188]	; (8005aec <TIM_Base_SetConfig+0xf0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a25      	ldr	r2, [pc, #148]	; (8005ae0 <TIM_Base_SetConfig+0xe4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d01b      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a54:	d017      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a22      	ldr	r2, [pc, #136]	; (8005ae4 <TIM_Base_SetConfig+0xe8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d013      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a21      	ldr	r2, [pc, #132]	; (8005ae8 <TIM_Base_SetConfig+0xec>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00f      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a20      	ldr	r2, [pc, #128]	; (8005aec <TIM_Base_SetConfig+0xf0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00b      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a1f      	ldr	r2, [pc, #124]	; (8005af0 <TIM_Base_SetConfig+0xf4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a1e      	ldr	r2, [pc, #120]	; (8005af4 <TIM_Base_SetConfig+0xf8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_Base_SetConfig+0x8a>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a1d      	ldr	r2, [pc, #116]	; (8005af8 <TIM_Base_SetConfig+0xfc>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d108      	bne.n	8005a98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a08      	ldr	r2, [pc, #32]	; (8005ae0 <TIM_Base_SetConfig+0xe4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d103      	bne.n	8005acc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	615a      	str	r2, [r3, #20]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40010000 	.word	0x40010000
 8005ae4:	40000400 	.word	0x40000400
 8005ae8:	40000800 	.word	0x40000800
 8005aec:	40000c00 	.word	0x40000c00
 8005af0:	40014000 	.word	0x40014000
 8005af4:	40014400 	.word	0x40014400
 8005af8:	40014800 	.word	0x40014800

08005afc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b087      	sub	sp, #28
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	f023 0201 	bic.w	r2, r3, #1
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a1b      	ldr	r3, [r3, #32]
 8005b16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f023 0302 	bic.w	r3, r3, #2
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <TIM_OC1_SetConfig+0xc8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d10c      	bne.n	8005b72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f023 0308 	bic.w	r3, r3, #8
 8005b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 0304 	bic.w	r3, r3, #4
 8005b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a13      	ldr	r2, [pc, #76]	; (8005bc4 <TIM_OC1_SetConfig+0xc8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d111      	bne.n	8005b9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685a      	ldr	r2, [r3, #4]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	621a      	str	r2, [r3, #32]
}
 8005bb8:	bf00      	nop
 8005bba:	371c      	adds	r7, #28
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40010000 	.word	0x40010000

08005bc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0210 	bic.w	r2, r3, #16
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	021b      	lsls	r3, r3, #8
 8005c06:	68fa      	ldr	r2, [r7, #12]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f023 0320 	bic.w	r3, r3, #32
 8005c12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	697a      	ldr	r2, [r7, #20]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a1e      	ldr	r2, [pc, #120]	; (8005c9c <TIM_OC2_SetConfig+0xd4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d10d      	bne.n	8005c44 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	011b      	lsls	r3, r3, #4
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a15      	ldr	r2, [pc, #84]	; (8005c9c <TIM_OC2_SetConfig+0xd4>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d113      	bne.n	8005c74 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	693a      	ldr	r2, [r7, #16]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	685a      	ldr	r2, [r3, #4]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	621a      	str	r2, [r3, #32]
}
 8005c8e:	bf00      	nop
 8005c90:	371c      	adds	r7, #28
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000

08005ca0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a1b      	ldr	r3, [r3, #32]
 8005cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f023 0303 	bic.w	r3, r3, #3
 8005cd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ce8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	021b      	lsls	r3, r3, #8
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <TIM_OC3_SetConfig+0xd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d10d      	bne.n	8005d1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <TIM_OC3_SetConfig+0xd0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d113      	bne.n	8005d4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	011b      	lsls	r3, r3, #4
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	621a      	str	r2, [r3, #32]
}
 8005d64:	bf00      	nop
 8005d66:	371c      	adds	r7, #28
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	40010000 	.word	0x40010000

08005d74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a1b      	ldr	r3, [r3, #32]
 8005d82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a1b      	ldr	r3, [r3, #32]
 8005d8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	69db      	ldr	r3, [r3, #28]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	693a      	ldr	r2, [r7, #16]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a10      	ldr	r2, [pc, #64]	; (8005e10 <TIM_OC4_SetConfig+0x9c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d109      	bne.n	8005de8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	019b      	lsls	r3, r3, #6
 8005de2:	697a      	ldr	r2, [r7, #20]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000

08005e14 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
 8005e20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	f023 0201 	bic.w	r2, r3, #1
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6a1b      	ldr	r3, [r3, #32]
 8005e38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	4a24      	ldr	r2, [pc, #144]	; (8005ed0 <TIM_TI1_SetConfig+0xbc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <TIM_TI1_SetConfig+0x56>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d00f      	beq.n	8005e6a <TIM_TI1_SetConfig+0x56>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4a21      	ldr	r2, [pc, #132]	; (8005ed4 <TIM_TI1_SetConfig+0xc0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00b      	beq.n	8005e6a <TIM_TI1_SetConfig+0x56>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4a20      	ldr	r2, [pc, #128]	; (8005ed8 <TIM_TI1_SetConfig+0xc4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_TI1_SetConfig+0x56>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	4a1f      	ldr	r2, [pc, #124]	; (8005edc <TIM_TI1_SetConfig+0xc8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_TI1_SetConfig+0x56>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4a1e      	ldr	r2, [pc, #120]	; (8005ee0 <TIM_TI1_SetConfig+0xcc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d101      	bne.n	8005e6e <TIM_TI1_SetConfig+0x5a>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <TIM_TI1_SetConfig+0x5c>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f023 0303 	bic.w	r3, r3, #3
 8005e7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e003      	b.n	8005e8e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f043 0301 	orr.w	r3, r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 030a 	bic.w	r3, r3, #10
 8005ea8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	f003 030a 	and.w	r3, r3, #10
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop
 8005ed0:	40010000 	.word	0x40010000
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	40014000 	.word	0x40014000

08005ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 030a 	bic.w	r3, r3, #10
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
 8005f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	f023 0210 	bic.w	r2, r3, #16
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	011b      	lsls	r3, r3, #4
 8005f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	621a      	str	r2, [r3, #32]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f023 0210 	bic.w	r2, r3, #16
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	031b      	lsls	r3, r3, #12
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	011b      	lsls	r3, r3, #4
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0303 	bic.w	r3, r3, #3
 8006048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4313      	orrs	r3, r2
 8006050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006052:	697b      	ldr	r3, [r7, #20]
 8006054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	b2db      	uxtb	r3, r3
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800606c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	021b      	lsls	r3, r3, #8
 8006072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006076:	693a      	ldr	r2, [r7, #16]
 8006078:	4313      	orrs	r3, r2
 800607a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	693a      	ldr	r2, [r7, #16]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006094:	b480      	push	{r7}
 8006096:	b087      	sub	sp, #28
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
 80060a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	031b      	lsls	r3, r3, #12
 80060d8:	b29b      	uxth	r3, r3
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80060e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	031b      	lsls	r3, r3, #12
 80060ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006126:	683a      	ldr	r2, [r7, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	4313      	orrs	r3, r2
 800612c:	f043 0307 	orr.w	r3, r3, #7
 8006130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	609a      	str	r2, [r3, #8]
}
 8006138:	bf00      	nop
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800615e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	021a      	lsls	r2, r3, #8
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	431a      	orrs	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	4313      	orrs	r3, r2
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	4313      	orrs	r3, r2
 8006170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f003 031f 	and.w	r3, r3, #31
 8006196:	2201      	movs	r2, #1
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6a1a      	ldr	r2, [r3, #32]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	401a      	ands	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1a      	ldr	r2, [r3, #32]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	f003 031f 	and.w	r3, r3, #31
 80061b6:	6879      	ldr	r1, [r7, #4]
 80061b8:	fa01 f303 	lsl.w	r3, r1, r3
 80061bc:	431a      	orrs	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	621a      	str	r2, [r3, #32]
}
 80061c2:	bf00      	nop
 80061c4:	371c      	adds	r7, #28
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
	...

080061d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e050      	b.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2202      	movs	r2, #2
 80061f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1c      	ldr	r2, [pc, #112]	; (8006298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d018      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006234:	d013      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a18      	ldr	r2, [pc, #96]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d00e      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d009      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d004      	beq.n	800625e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10c      	bne.n	8006278 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	4313      	orrs	r3, r2
 800626e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40010000 	.word	0x40010000
 800629c:	40000400 	.word	0x40000400
 80062a0:	40000800 	.word	0x40000800
 80062a4:	40000c00 	.word	0x40000c00
 80062a8:	40014000 	.word	0x40014000

080062ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e03f      	b.n	8006366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fc f810 	bl	8002320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2224      	movs	r2, #36	; 0x24
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68da      	ldr	r2, [r3, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fddf 	bl	8006edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800634c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}

0800636e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b08a      	sub	sp, #40	; 0x28
 8006372:	af02      	add	r7, sp, #8
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	603b      	str	r3, [r7, #0]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b20      	cmp	r3, #32
 800638c:	d17c      	bne.n	8006488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_Transmit+0x2c>
 8006394:	88fb      	ldrh	r3, [r7, #6]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e075      	b.n	800648a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_UART_Transmit+0x3e>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e06e      	b.n	800648a <HAL_UART_Transmit+0x11c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2221      	movs	r2, #33	; 0x21
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063c2:	f7fc fa41 	bl	8002848 <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	88fa      	ldrh	r2, [r7, #6]
 80063cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063dc:	d108      	bne.n	80063f0 <HAL_UART_Transmit+0x82>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61bb      	str	r3, [r7, #24]
 80063ee:	e003      	b.n	80063f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063f4:	2300      	movs	r3, #0
 80063f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006400:	e02a      	b.n	8006458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	2180      	movs	r1, #128	; 0x80
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 fb1f 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e036      	b.n	800648a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d10b      	bne.n	800643a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006422:	69bb      	ldr	r3, [r7, #24]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	3302      	adds	r3, #2
 8006436:	61bb      	str	r3, [r7, #24]
 8006438:	e007      	b.n	800644a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	3301      	adds	r3, #1
 8006448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1cf      	bne.n	8006402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 faef 	bl	8006a50 <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}

08006492 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b084      	sub	sp, #16
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d11d      	bne.n	80064e8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_UART_Receive_IT+0x26>
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e016      	b.n	80064ea <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Receive_IT+0x38>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e00f      	b.n	80064ea <HAL_UART_Receive_IT+0x58>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80064d8:	88fb      	ldrh	r3, [r7, #6]
 80064da:	461a      	mov	r2, r3
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fb24 	bl	8006b2c <UART_Start_Receive_IT>
 80064e4:	4603      	mov	r3, r0
 80064e6:	e000      	b.n	80064ea <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80064e8:	2302      	movs	r3, #2
  }
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b0ba      	sub	sp, #232	; 0xe8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800651a:	2300      	movs	r3, #0
 800651c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006520:	2300      	movs	r3, #0
 8006522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d009      	beq.n	800655a <HAL_UART_IRQHandler+0x66>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d003      	beq.n	800655a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fc07 	bl	8006d66 <UART_Receive_IT>
      return;
 8006558:	e256      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800655a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80de 	beq.w	8006720 <HAL_UART_IRQHandler+0x22c>
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006568:	f003 0301 	and.w	r3, r3, #1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d106      	bne.n	800657e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006574:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 80d1 	beq.w	8006720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800657e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_UART_IRQHandler+0xae>
 800658a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d005      	beq.n	80065a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	f043 0201 	orr.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	f003 0304 	and.w	r3, r3, #4
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <HAL_UART_IRQHandler+0xd2>
 80065ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d005      	beq.n	80065c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065be:	f043 0202 	orr.w	r2, r3, #2
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80065c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ca:	f003 0302 	and.w	r3, r3, #2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <HAL_UART_IRQHandler+0xf6>
 80065d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065d6:	f003 0301 	and.w	r3, r3, #1
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d005      	beq.n	80065ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f043 0204 	orr.w	r2, r3, #4
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80065ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <HAL_UART_IRQHandler+0x126>
 80065f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065fa:	f003 0320 	and.w	r3, r3, #32
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d105      	bne.n	800660e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006612:	f043 0208 	orr.w	r2, r3, #8
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 81ed 	beq.w	80069fe <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d008      	beq.n	8006642 <HAL_UART_IRQHandler+0x14e>
 8006630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb92 	bl	8006d66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664c:	2b40      	cmp	r3, #64	; 0x40
 800664e:	bf0c      	ite	eq
 8006650:	2301      	moveq	r3, #1
 8006652:	2300      	movne	r3, #0
 8006654:	b2db      	uxtb	r3, r3
 8006656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d103      	bne.n	800666e <HAL_UART_IRQHandler+0x17a>
 8006666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666a:	2b00      	cmp	r3, #0
 800666c:	d04f      	beq.n	800670e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa9a 	bl	8006ba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d141      	bne.n	8006706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	3314      	adds	r3, #20
 8006688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006690:	e853 3f00 	ldrex	r3, [r3]
 8006694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800669c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066be:	e841 2300 	strex	r3, r2, [r1]
 80066c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1d9      	bne.n	8006682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d013      	beq.n	80066fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066da:	4a7d      	ldr	r2, [pc, #500]	; (80068d0 <HAL_UART_IRQHandler+0x3dc>)
 80066dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fc fa61 	bl	8002baa <HAL_DMA_Abort_IT>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d016      	beq.n	800671c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80066f8:	4610      	mov	r0, r2
 80066fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066fc:	e00e      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f000 f990 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006704:	e00a      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f000 f98c 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670c:	e006      	b.n	800671c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f988 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800671a:	e170      	b.n	80069fe <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671c:	bf00      	nop
    return;
 800671e:	e16e      	b.n	80069fe <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006724:	2b01      	cmp	r3, #1
 8006726:	f040 814a 	bne.w	80069be <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 8143 	beq.w	80069be <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 813c 	beq.w	80069be <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006746:	2300      	movs	r3, #0
 8006748:	60bb      	str	r3, [r7, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	60bb      	str	r3, [r7, #8]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	60bb      	str	r3, [r7, #8]
 800675a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006766:	2b40      	cmp	r3, #64	; 0x40
 8006768:	f040 80b4 	bne.w	80068d4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8140 	beq.w	8006a02 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800678a:	429a      	cmp	r2, r3
 800678c:	f080 8139 	bcs.w	8006a02 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006796:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067a2:	f000 8088 	beq.w	80068b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	330c      	adds	r3, #12
 80067ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80067d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80067d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80067de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80067ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1d9      	bne.n	80067a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3314      	adds	r3, #20
 80067f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3314      	adds	r3, #20
 8006812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006816:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800681a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800681e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e1      	bne.n	80067f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3314      	adds	r3, #20
 8006834:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800683e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	3314      	adds	r3, #20
 800684e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006852:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e3      	bne.n	800682e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2220      	movs	r2, #32
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	330c      	adds	r3, #12
 800687a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006886:	f023 0310 	bic.w	r3, r3, #16
 800688a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	330c      	adds	r3, #12
 8006894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006898:	65ba      	str	r2, [r7, #88]	; 0x58
 800689a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800689e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e3      	bne.n	8006874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fc f90a 	bl	8002aca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068be:	b29b      	uxth	r3, r3
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	4619      	mov	r1, r3
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 f8b6 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068cc:	e099      	b.n	8006a02 <HAL_UART_IRQHandler+0x50e>
 80068ce:	bf00      	nop
 80068d0:	08006c6f 	.word	0x08006c6f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 808b 	beq.w	8006a06 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80068f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 8086 	beq.w	8006a06 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	330c      	adds	r3, #12
 8006900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	e853 3f00 	ldrex	r3, [r3]
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800690a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800690c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	330c      	adds	r3, #12
 800691a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800691e:	647a      	str	r2, [r7, #68]	; 0x44
 8006920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800692c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e3      	bne.n	80068fa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	3314      	adds	r3, #20
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	623b      	str	r3, [r7, #32]
   return(result);
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f023 0301 	bic.w	r3, r3, #1
 8006948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	3314      	adds	r3, #20
 8006952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006956:	633a      	str	r2, [r7, #48]	; 0x30
 8006958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e3      	bne.n	8006932 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2220      	movs	r2, #32
 800696e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	330c      	adds	r3, #12
 800697e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	e853 3f00 	ldrex	r3, [r3]
 8006986:	60fb      	str	r3, [r7, #12]
   return(result);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f023 0310 	bic.w	r3, r3, #16
 800698e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800699c:	61fa      	str	r2, [r7, #28]
 800699e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	69b9      	ldr	r1, [r7, #24]
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	617b      	str	r3, [r7, #20]
   return(result);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e3      	bne.n	8006978 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f83e 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80069bc:	e023      	b.n	8006a06 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80069be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <HAL_UART_IRQHandler+0x4ea>
 80069ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 f95d 	bl	8006c96 <UART_Transmit_IT>
    return;
 80069dc:	e014      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00e      	beq.n	8006a08 <HAL_UART_IRQHandler+0x514>
 80069ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d008      	beq.n	8006a08 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f99d 	bl	8006d36 <UART_EndTransmit_IT>
    return;
 80069fc:	e004      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
    return;
 80069fe:	bf00      	nop
 8006a00:	e002      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
      return;
 8006a02:	bf00      	nop
 8006a04:	e000      	b.n	8006a08 <HAL_UART_IRQHandler+0x514>
      return;
 8006a06:	bf00      	nop
  }
}
 8006a08:	37e8      	adds	r7, #232	; 0xe8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop

08006a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b090      	sub	sp, #64	; 0x40
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	4613      	mov	r3, r2
 8006a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a60:	e050      	b.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a68:	d04c      	beq.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d007      	beq.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a70:	f7fb feea 	bl	8002848 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d241      	bcs.n	8006b04 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	330c      	adds	r3, #12
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006aa0:	637a      	str	r2, [r7, #52]	; 0x34
 8006aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e5      	bne.n	8006a80 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ad4:	623a      	str	r2, [r7, #32]
 8006ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	6a3a      	ldr	r2, [r7, #32]
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006b00:	2303      	movs	r3, #3
 8006b02:	e00f      	b.n	8006b24 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	4013      	ands	r3, r2
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	bf0c      	ite	eq
 8006b14:	2301      	moveq	r3, #1
 8006b16:	2300      	movne	r3, #0
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d09f      	beq.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3740      	adds	r7, #64	; 0x40
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	88fa      	ldrh	r2, [r7, #6]
 8006b44:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	88fa      	ldrh	r2, [r7, #6]
 8006b4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2222      	movs	r2, #34	; 0x22
 8006b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d007      	beq.n	8006b7a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b78:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695a      	ldr	r2, [r3, #20]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f042 0201 	orr.w	r2, r2, #1
 8006b88:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0220 	orr.w	r2, r2, #32
 8006b98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b095      	sub	sp, #84	; 0x54
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	330c      	adds	r3, #12
 8006bb6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	330c      	adds	r3, #12
 8006bce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bd0:	643a      	str	r2, [r7, #64]	; 0x40
 8006bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bd6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e5      	bne.n	8006bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3314      	adds	r3, #20
 8006bea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	e853 3f00 	ldrex	r3, [r3]
 8006bf2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f023 0301 	bic.w	r3, r3, #1
 8006bfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3314      	adds	r3, #20
 8006c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c0c:	e841 2300 	strex	r3, r2, [r1]
 8006c10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1e5      	bne.n	8006be4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d119      	bne.n	8006c54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f023 0310 	bic.w	r3, r3, #16
 8006c36:	647b      	str	r3, [r7, #68]	; 0x44
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	330c      	adds	r3, #12
 8006c3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c40:	61ba      	str	r2, [r7, #24]
 8006c42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6979      	ldr	r1, [r7, #20]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e5      	bne.n	8006c20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c62:	bf00      	nop
 8006c64:	3754      	adds	r7, #84	; 0x54
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr

08006c6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f7ff fecb 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c8e:	bf00      	nop
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b21      	cmp	r3, #33	; 0x21
 8006ca8:	d13e      	bne.n	8006d28 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb2:	d114      	bne.n	8006cde <UART_Transmit_IT+0x48>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d110      	bne.n	8006cde <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	1c9a      	adds	r2, r3, #2
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	621a      	str	r2, [r3, #32]
 8006cdc:	e008      	b.n	8006cf0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6211      	str	r1, [r2, #32]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d10f      	bne.n	8006d24 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d12:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d22:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	e000      	b.n	8006d2a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d28:	2302      	movs	r3, #2
  }
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr

08006d36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68da      	ldr	r2, [r3, #12]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fe5a 	bl	8006a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b08c      	sub	sp, #48	; 0x30
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b22      	cmp	r3, #34	; 0x22
 8006d78:	f040 80ab 	bne.w	8006ed2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d84:	d117      	bne.n	8006db6 <UART_Receive_IT+0x50>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d113      	bne.n	8006db6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dae:	1c9a      	adds	r2, r3, #2
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	629a      	str	r2, [r3, #40]	; 0x28
 8006db4:	e026      	b.n	8006e04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dc8:	d007      	beq.n	8006dda <UART_Receive_IT+0x74>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <UART_Receive_IT+0x82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d106      	bne.n	8006de8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de4:	701a      	strb	r2, [r3, #0]
 8006de6:	e008      	b.n	8006dfa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006df4:	b2da      	uxtb	r2, r3
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4619      	mov	r1, r3
 8006e12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d15a      	bne.n	8006ece <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68da      	ldr	r2, [r3, #12]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0220 	bic.w	r2, r2, #32
 8006e26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695a      	ldr	r2, [r3, #20]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0201 	bic.w	r2, r2, #1
 8006e46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2220      	movs	r2, #32
 8006e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d135      	bne.n	8006ec4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f023 0310 	bic.w	r3, r3, #16
 8006e74:	627b      	str	r3, [r7, #36]	; 0x24
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e7e:	623a      	str	r2, [r7, #32]
 8006e80:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	69f9      	ldr	r1, [r7, #28]
 8006e84:	6a3a      	ldr	r2, [r7, #32]
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b10      	cmp	r3, #16
 8006e9e:	d10a      	bne.n	8006eb6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f7ff fdbb 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
 8006ec2:	e002      	b.n	8006eca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7f9 fb5d 	bl	8000584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	e002      	b.n	8006ed4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e000      	b.n	8006ed4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006ed2:	2302      	movs	r3, #2
  }
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3730      	adds	r7, #48	; 0x30
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}

08006edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ee0:	b0c0      	sub	sp, #256	; 0x100
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	ea40 0301 	orr.w	r3, r0, r1
 8006f04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006f34:	f021 010c 	bic.w	r1, r1, #12
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006f42:	430b      	orrs	r3, r1
 8006f44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f56:	6999      	ldr	r1, [r3, #24]
 8006f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5c:	681a      	ldr	r2, [r3, #0]
 8006f5e:	ea40 0301 	orr.w	r3, r0, r1
 8006f62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	4b8f      	ldr	r3, [pc, #572]	; (80071a8 <UART_SetConfig+0x2cc>)
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d005      	beq.n	8006f7c <UART_SetConfig+0xa0>
 8006f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	4b8d      	ldr	r3, [pc, #564]	; (80071ac <UART_SetConfig+0x2d0>)
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d104      	bne.n	8006f86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f7c:	f7fd f8d6 	bl	800412c <HAL_RCC_GetPCLK2Freq>
 8006f80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f84:	e003      	b.n	8006f8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f86:	f7fd f8bd 	bl	8004104 <HAL_RCC_GetPCLK1Freq>
 8006f8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f98:	f040 810c 	bne.w	80071b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006fa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006faa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	1891      	adds	r1, r2, r2
 8006fb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006fb6:	415b      	adcs	r3, r3
 8006fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006fba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	eb12 0801 	adds.w	r8, r2, r1
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	eb43 0901 	adc.w	r9, r3, r1
 8006fca:	f04f 0200 	mov.w	r2, #0
 8006fce:	f04f 0300 	mov.w	r3, #0
 8006fd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006fd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006fda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006fde:	4690      	mov	r8, r2
 8006fe0:	4699      	mov	r9, r3
 8006fe2:	4623      	mov	r3, r4
 8006fe4:	eb18 0303 	adds.w	r3, r8, r3
 8006fe8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006fec:	462b      	mov	r3, r5
 8006fee:	eb49 0303 	adc.w	r3, r9, r3
 8006ff2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007002:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007006:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800700a:	460b      	mov	r3, r1
 800700c:	18db      	adds	r3, r3, r3
 800700e:	653b      	str	r3, [r7, #80]	; 0x50
 8007010:	4613      	mov	r3, r2
 8007012:	eb42 0303 	adc.w	r3, r2, r3
 8007016:	657b      	str	r3, [r7, #84]	; 0x54
 8007018:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800701c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007020:	f7f9 f92e 	bl	8000280 <__aeabi_uldivmod>
 8007024:	4602      	mov	r2, r0
 8007026:	460b      	mov	r3, r1
 8007028:	4b61      	ldr	r3, [pc, #388]	; (80071b0 <UART_SetConfig+0x2d4>)
 800702a:	fba3 2302 	umull	r2, r3, r3, r2
 800702e:	095b      	lsrs	r3, r3, #5
 8007030:	011c      	lsls	r4, r3, #4
 8007032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007036:	2200      	movs	r2, #0
 8007038:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800703c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007040:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007044:	4642      	mov	r2, r8
 8007046:	464b      	mov	r3, r9
 8007048:	1891      	adds	r1, r2, r2
 800704a:	64b9      	str	r1, [r7, #72]	; 0x48
 800704c:	415b      	adcs	r3, r3
 800704e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007050:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007054:	4641      	mov	r1, r8
 8007056:	eb12 0a01 	adds.w	sl, r2, r1
 800705a:	4649      	mov	r1, r9
 800705c:	eb43 0b01 	adc.w	fp, r3, r1
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800706c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007070:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007074:	4692      	mov	sl, r2
 8007076:	469b      	mov	fp, r3
 8007078:	4643      	mov	r3, r8
 800707a:	eb1a 0303 	adds.w	r3, sl, r3
 800707e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007082:	464b      	mov	r3, r9
 8007084:	eb4b 0303 	adc.w	r3, fp, r3
 8007088:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007098:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800709c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80070a0:	460b      	mov	r3, r1
 80070a2:	18db      	adds	r3, r3, r3
 80070a4:	643b      	str	r3, [r7, #64]	; 0x40
 80070a6:	4613      	mov	r3, r2
 80070a8:	eb42 0303 	adc.w	r3, r2, r3
 80070ac:	647b      	str	r3, [r7, #68]	; 0x44
 80070ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80070b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80070b6:	f7f9 f8e3 	bl	8000280 <__aeabi_uldivmod>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	4b3b      	ldr	r3, [pc, #236]	; (80071b0 <UART_SetConfig+0x2d4>)
 80070c2:	fba3 2301 	umull	r2, r3, r3, r1
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2264      	movs	r2, #100	; 0x64
 80070ca:	fb02 f303 	mul.w	r3, r2, r3
 80070ce:	1acb      	subs	r3, r1, r3
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80070d6:	4b36      	ldr	r3, [pc, #216]	; (80071b0 <UART_SetConfig+0x2d4>)
 80070d8:	fba3 2302 	umull	r2, r3, r3, r2
 80070dc:	095b      	lsrs	r3, r3, #5
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070e4:	441c      	add	r4, r3
 80070e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80070f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80070f8:	4642      	mov	r2, r8
 80070fa:	464b      	mov	r3, r9
 80070fc:	1891      	adds	r1, r2, r2
 80070fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8007100:	415b      	adcs	r3, r3
 8007102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007108:	4641      	mov	r1, r8
 800710a:	1851      	adds	r1, r2, r1
 800710c:	6339      	str	r1, [r7, #48]	; 0x30
 800710e:	4649      	mov	r1, r9
 8007110:	414b      	adcs	r3, r1
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007120:	4659      	mov	r1, fp
 8007122:	00cb      	lsls	r3, r1, #3
 8007124:	4651      	mov	r1, sl
 8007126:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800712a:	4651      	mov	r1, sl
 800712c:	00ca      	lsls	r2, r1, #3
 800712e:	4610      	mov	r0, r2
 8007130:	4619      	mov	r1, r3
 8007132:	4603      	mov	r3, r0
 8007134:	4642      	mov	r2, r8
 8007136:	189b      	adds	r3, r3, r2
 8007138:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800713c:	464b      	mov	r3, r9
 800713e:	460a      	mov	r2, r1
 8007140:	eb42 0303 	adc.w	r3, r2, r3
 8007144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007154:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007158:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800715c:	460b      	mov	r3, r1
 800715e:	18db      	adds	r3, r3, r3
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
 8007162:	4613      	mov	r3, r2
 8007164:	eb42 0303 	adc.w	r3, r2, r3
 8007168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800716a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800716e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007172:	f7f9 f885 	bl	8000280 <__aeabi_uldivmod>
 8007176:	4602      	mov	r2, r0
 8007178:	460b      	mov	r3, r1
 800717a:	4b0d      	ldr	r3, [pc, #52]	; (80071b0 <UART_SetConfig+0x2d4>)
 800717c:	fba3 1302 	umull	r1, r3, r3, r2
 8007180:	095b      	lsrs	r3, r3, #5
 8007182:	2164      	movs	r1, #100	; 0x64
 8007184:	fb01 f303 	mul.w	r3, r1, r3
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	3332      	adds	r3, #50	; 0x32
 800718e:	4a08      	ldr	r2, [pc, #32]	; (80071b0 <UART_SetConfig+0x2d4>)
 8007190:	fba2 2303 	umull	r2, r3, r2, r3
 8007194:	095b      	lsrs	r3, r3, #5
 8007196:	f003 0207 	and.w	r2, r3, #7
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4422      	add	r2, r4
 80071a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80071a4:	e105      	b.n	80073b2 <UART_SetConfig+0x4d6>
 80071a6:	bf00      	nop
 80071a8:	40011000 	.word	0x40011000
 80071ac:	40011400 	.word	0x40011400
 80071b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80071b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80071be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80071c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	1891      	adds	r1, r2, r2
 80071cc:	6239      	str	r1, [r7, #32]
 80071ce:	415b      	adcs	r3, r3
 80071d0:	627b      	str	r3, [r7, #36]	; 0x24
 80071d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80071d6:	4641      	mov	r1, r8
 80071d8:	1854      	adds	r4, r2, r1
 80071da:	4649      	mov	r1, r9
 80071dc:	eb43 0501 	adc.w	r5, r3, r1
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	f04f 0300 	mov.w	r3, #0
 80071e8:	00eb      	lsls	r3, r5, #3
 80071ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80071ee:	00e2      	lsls	r2, r4, #3
 80071f0:	4614      	mov	r4, r2
 80071f2:	461d      	mov	r5, r3
 80071f4:	4643      	mov	r3, r8
 80071f6:	18e3      	adds	r3, r4, r3
 80071f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80071fc:	464b      	mov	r3, r9
 80071fe:	eb45 0303 	adc.w	r3, r5, r3
 8007202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007212:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007216:	f04f 0200 	mov.w	r2, #0
 800721a:	f04f 0300 	mov.w	r3, #0
 800721e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007222:	4629      	mov	r1, r5
 8007224:	008b      	lsls	r3, r1, #2
 8007226:	4621      	mov	r1, r4
 8007228:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800722c:	4621      	mov	r1, r4
 800722e:	008a      	lsls	r2, r1, #2
 8007230:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007234:	f7f9 f824 	bl	8000280 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4b60      	ldr	r3, [pc, #384]	; (80073c0 <UART_SetConfig+0x4e4>)
 800723e:	fba3 2302 	umull	r2, r3, r3, r2
 8007242:	095b      	lsrs	r3, r3, #5
 8007244:	011c      	lsls	r4, r3, #4
 8007246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800724a:	2200      	movs	r2, #0
 800724c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007250:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007254:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007258:	4642      	mov	r2, r8
 800725a:	464b      	mov	r3, r9
 800725c:	1891      	adds	r1, r2, r2
 800725e:	61b9      	str	r1, [r7, #24]
 8007260:	415b      	adcs	r3, r3
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007268:	4641      	mov	r1, r8
 800726a:	1851      	adds	r1, r2, r1
 800726c:	6139      	str	r1, [r7, #16]
 800726e:	4649      	mov	r1, r9
 8007270:	414b      	adcs	r3, r1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	f04f 0300 	mov.w	r3, #0
 800727c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007280:	4659      	mov	r1, fp
 8007282:	00cb      	lsls	r3, r1, #3
 8007284:	4651      	mov	r1, sl
 8007286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800728a:	4651      	mov	r1, sl
 800728c:	00ca      	lsls	r2, r1, #3
 800728e:	4610      	mov	r0, r2
 8007290:	4619      	mov	r1, r3
 8007292:	4603      	mov	r3, r0
 8007294:	4642      	mov	r2, r8
 8007296:	189b      	adds	r3, r3, r2
 8007298:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800729c:	464b      	mov	r3, r9
 800729e:	460a      	mov	r2, r1
 80072a0:	eb42 0303 	adc.w	r3, r2, r3
 80072a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80072b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80072c0:	4649      	mov	r1, r9
 80072c2:	008b      	lsls	r3, r1, #2
 80072c4:	4641      	mov	r1, r8
 80072c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80072ca:	4641      	mov	r1, r8
 80072cc:	008a      	lsls	r2, r1, #2
 80072ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80072d2:	f7f8 ffd5 	bl	8000280 <__aeabi_uldivmod>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4b39      	ldr	r3, [pc, #228]	; (80073c0 <UART_SetConfig+0x4e4>)
 80072dc:	fba3 1302 	umull	r1, r3, r3, r2
 80072e0:	095b      	lsrs	r3, r3, #5
 80072e2:	2164      	movs	r1, #100	; 0x64
 80072e4:	fb01 f303 	mul.w	r3, r1, r3
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	3332      	adds	r3, #50	; 0x32
 80072ee:	4a34      	ldr	r2, [pc, #208]	; (80073c0 <UART_SetConfig+0x4e4>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	095b      	lsrs	r3, r3, #5
 80072f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072fa:	441c      	add	r4, r3
 80072fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007300:	2200      	movs	r2, #0
 8007302:	673b      	str	r3, [r7, #112]	; 0x70
 8007304:	677a      	str	r2, [r7, #116]	; 0x74
 8007306:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800730a:	4642      	mov	r2, r8
 800730c:	464b      	mov	r3, r9
 800730e:	1891      	adds	r1, r2, r2
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	415b      	adcs	r3, r3
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800731a:	4641      	mov	r1, r8
 800731c:	1851      	adds	r1, r2, r1
 800731e:	6039      	str	r1, [r7, #0]
 8007320:	4649      	mov	r1, r9
 8007322:	414b      	adcs	r3, r1
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007332:	4659      	mov	r1, fp
 8007334:	00cb      	lsls	r3, r1, #3
 8007336:	4651      	mov	r1, sl
 8007338:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800733c:	4651      	mov	r1, sl
 800733e:	00ca      	lsls	r2, r1, #3
 8007340:	4610      	mov	r0, r2
 8007342:	4619      	mov	r1, r3
 8007344:	4603      	mov	r3, r0
 8007346:	4642      	mov	r2, r8
 8007348:	189b      	adds	r3, r3, r2
 800734a:	66bb      	str	r3, [r7, #104]	; 0x68
 800734c:	464b      	mov	r3, r9
 800734e:	460a      	mov	r2, r1
 8007350:	eb42 0303 	adc.w	r3, r2, r3
 8007354:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	663b      	str	r3, [r7, #96]	; 0x60
 8007360:	667a      	str	r2, [r7, #100]	; 0x64
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	f04f 0300 	mov.w	r3, #0
 800736a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800736e:	4649      	mov	r1, r9
 8007370:	008b      	lsls	r3, r1, #2
 8007372:	4641      	mov	r1, r8
 8007374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007378:	4641      	mov	r1, r8
 800737a:	008a      	lsls	r2, r1, #2
 800737c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007380:	f7f8 ff7e 	bl	8000280 <__aeabi_uldivmod>
 8007384:	4602      	mov	r2, r0
 8007386:	460b      	mov	r3, r1
 8007388:	4b0d      	ldr	r3, [pc, #52]	; (80073c0 <UART_SetConfig+0x4e4>)
 800738a:	fba3 1302 	umull	r1, r3, r3, r2
 800738e:	095b      	lsrs	r3, r3, #5
 8007390:	2164      	movs	r1, #100	; 0x64
 8007392:	fb01 f303 	mul.w	r3, r1, r3
 8007396:	1ad3      	subs	r3, r2, r3
 8007398:	011b      	lsls	r3, r3, #4
 800739a:	3332      	adds	r3, #50	; 0x32
 800739c:	4a08      	ldr	r2, [pc, #32]	; (80073c0 <UART_SetConfig+0x4e4>)
 800739e:	fba2 2303 	umull	r2, r3, r2, r3
 80073a2:	095b      	lsrs	r3, r3, #5
 80073a4:	f003 020f 	and.w	r2, r3, #15
 80073a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4422      	add	r2, r4
 80073b0:	609a      	str	r2, [r3, #8]
}
 80073b2:	bf00      	nop
 80073b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80073b8:	46bd      	mov	sp, r7
 80073ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073be:	bf00      	nop
 80073c0:	51eb851f 	.word	0x51eb851f

080073c4 <atoi>:
 80073c4:	220a      	movs	r2, #10
 80073c6:	2100      	movs	r1, #0
 80073c8:	f000 b98a 	b.w	80076e0 <strtol>

080073cc <__errno>:
 80073cc:	4b01      	ldr	r3, [pc, #4]	; (80073d4 <__errno+0x8>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	2000003c 	.word	0x2000003c

080073d8 <__libc_init_array>:
 80073d8:	b570      	push	{r4, r5, r6, lr}
 80073da:	4d0d      	ldr	r5, [pc, #52]	; (8007410 <__libc_init_array+0x38>)
 80073dc:	4c0d      	ldr	r4, [pc, #52]	; (8007414 <__libc_init_array+0x3c>)
 80073de:	1b64      	subs	r4, r4, r5
 80073e0:	10a4      	asrs	r4, r4, #2
 80073e2:	2600      	movs	r6, #0
 80073e4:	42a6      	cmp	r6, r4
 80073e6:	d109      	bne.n	80073fc <__libc_init_array+0x24>
 80073e8:	4d0b      	ldr	r5, [pc, #44]	; (8007418 <__libc_init_array+0x40>)
 80073ea:	4c0c      	ldr	r4, [pc, #48]	; (800741c <__libc_init_array+0x44>)
 80073ec:	f001 fab4 	bl	8008958 <_init>
 80073f0:	1b64      	subs	r4, r4, r5
 80073f2:	10a4      	asrs	r4, r4, #2
 80073f4:	2600      	movs	r6, #0
 80073f6:	42a6      	cmp	r6, r4
 80073f8:	d105      	bne.n	8007406 <__libc_init_array+0x2e>
 80073fa:	bd70      	pop	{r4, r5, r6, pc}
 80073fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007400:	4798      	blx	r3
 8007402:	3601      	adds	r6, #1
 8007404:	e7ee      	b.n	80073e4 <__libc_init_array+0xc>
 8007406:	f855 3b04 	ldr.w	r3, [r5], #4
 800740a:	4798      	blx	r3
 800740c:	3601      	adds	r6, #1
 800740e:	e7f2      	b.n	80073f6 <__libc_init_array+0x1e>
 8007410:	08008c4c 	.word	0x08008c4c
 8007414:	08008c4c 	.word	0x08008c4c
 8007418:	08008c4c 	.word	0x08008c4c
 800741c:	08008c50 	.word	0x08008c50

08007420 <memset>:
 8007420:	4402      	add	r2, r0
 8007422:	4603      	mov	r3, r0
 8007424:	4293      	cmp	r3, r2
 8007426:	d100      	bne.n	800742a <memset+0xa>
 8007428:	4770      	bx	lr
 800742a:	f803 1b01 	strb.w	r1, [r3], #1
 800742e:	e7f9      	b.n	8007424 <memset+0x4>

08007430 <iprintf>:
 8007430:	b40f      	push	{r0, r1, r2, r3}
 8007432:	4b0a      	ldr	r3, [pc, #40]	; (800745c <iprintf+0x2c>)
 8007434:	b513      	push	{r0, r1, r4, lr}
 8007436:	681c      	ldr	r4, [r3, #0]
 8007438:	b124      	cbz	r4, 8007444 <iprintf+0x14>
 800743a:	69a3      	ldr	r3, [r4, #24]
 800743c:	b913      	cbnz	r3, 8007444 <iprintf+0x14>
 800743e:	4620      	mov	r0, r4
 8007440:	f000 fb32 	bl	8007aa8 <__sinit>
 8007444:	ab05      	add	r3, sp, #20
 8007446:	9a04      	ldr	r2, [sp, #16]
 8007448:	68a1      	ldr	r1, [r4, #8]
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	4620      	mov	r0, r4
 800744e:	f000 fe97 	bl	8008180 <_vfiprintf_r>
 8007452:	b002      	add	sp, #8
 8007454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007458:	b004      	add	sp, #16
 800745a:	4770      	bx	lr
 800745c:	2000003c 	.word	0x2000003c

08007460 <_puts_r>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	460e      	mov	r6, r1
 8007464:	4605      	mov	r5, r0
 8007466:	b118      	cbz	r0, 8007470 <_puts_r+0x10>
 8007468:	6983      	ldr	r3, [r0, #24]
 800746a:	b90b      	cbnz	r3, 8007470 <_puts_r+0x10>
 800746c:	f000 fb1c 	bl	8007aa8 <__sinit>
 8007470:	69ab      	ldr	r3, [r5, #24]
 8007472:	68ac      	ldr	r4, [r5, #8]
 8007474:	b913      	cbnz	r3, 800747c <_puts_r+0x1c>
 8007476:	4628      	mov	r0, r5
 8007478:	f000 fb16 	bl	8007aa8 <__sinit>
 800747c:	4b2c      	ldr	r3, [pc, #176]	; (8007530 <_puts_r+0xd0>)
 800747e:	429c      	cmp	r4, r3
 8007480:	d120      	bne.n	80074c4 <_puts_r+0x64>
 8007482:	686c      	ldr	r4, [r5, #4]
 8007484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007486:	07db      	lsls	r3, r3, #31
 8007488:	d405      	bmi.n	8007496 <_puts_r+0x36>
 800748a:	89a3      	ldrh	r3, [r4, #12]
 800748c:	0598      	lsls	r0, r3, #22
 800748e:	d402      	bmi.n	8007496 <_puts_r+0x36>
 8007490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007492:	f000 fba7 	bl	8007be4 <__retarget_lock_acquire_recursive>
 8007496:	89a3      	ldrh	r3, [r4, #12]
 8007498:	0719      	lsls	r1, r3, #28
 800749a:	d51d      	bpl.n	80074d8 <_puts_r+0x78>
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	b1db      	cbz	r3, 80074d8 <_puts_r+0x78>
 80074a0:	3e01      	subs	r6, #1
 80074a2:	68a3      	ldr	r3, [r4, #8]
 80074a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074a8:	3b01      	subs	r3, #1
 80074aa:	60a3      	str	r3, [r4, #8]
 80074ac:	bb39      	cbnz	r1, 80074fe <_puts_r+0x9e>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da38      	bge.n	8007524 <_puts_r+0xc4>
 80074b2:	4622      	mov	r2, r4
 80074b4:	210a      	movs	r1, #10
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f91c 	bl	80076f4 <__swbuf_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d011      	beq.n	80074e4 <_puts_r+0x84>
 80074c0:	250a      	movs	r5, #10
 80074c2:	e011      	b.n	80074e8 <_puts_r+0x88>
 80074c4:	4b1b      	ldr	r3, [pc, #108]	; (8007534 <_puts_r+0xd4>)
 80074c6:	429c      	cmp	r4, r3
 80074c8:	d101      	bne.n	80074ce <_puts_r+0x6e>
 80074ca:	68ac      	ldr	r4, [r5, #8]
 80074cc:	e7da      	b.n	8007484 <_puts_r+0x24>
 80074ce:	4b1a      	ldr	r3, [pc, #104]	; (8007538 <_puts_r+0xd8>)
 80074d0:	429c      	cmp	r4, r3
 80074d2:	bf08      	it	eq
 80074d4:	68ec      	ldreq	r4, [r5, #12]
 80074d6:	e7d5      	b.n	8007484 <_puts_r+0x24>
 80074d8:	4621      	mov	r1, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 f95c 	bl	8007798 <__swsetup_r>
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d0dd      	beq.n	80074a0 <_puts_r+0x40>
 80074e4:	f04f 35ff 	mov.w	r5, #4294967295
 80074e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074ea:	07da      	lsls	r2, r3, #31
 80074ec:	d405      	bmi.n	80074fa <_puts_r+0x9a>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	059b      	lsls	r3, r3, #22
 80074f2:	d402      	bmi.n	80074fa <_puts_r+0x9a>
 80074f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074f6:	f000 fb76 	bl	8007be6 <__retarget_lock_release_recursive>
 80074fa:	4628      	mov	r0, r5
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
 80074fe:	2b00      	cmp	r3, #0
 8007500:	da04      	bge.n	800750c <_puts_r+0xac>
 8007502:	69a2      	ldr	r2, [r4, #24]
 8007504:	429a      	cmp	r2, r3
 8007506:	dc06      	bgt.n	8007516 <_puts_r+0xb6>
 8007508:	290a      	cmp	r1, #10
 800750a:	d004      	beq.n	8007516 <_puts_r+0xb6>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	7019      	strb	r1, [r3, #0]
 8007514:	e7c5      	b.n	80074a2 <_puts_r+0x42>
 8007516:	4622      	mov	r2, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f000 f8eb 	bl	80076f4 <__swbuf_r>
 800751e:	3001      	adds	r0, #1
 8007520:	d1bf      	bne.n	80074a2 <_puts_r+0x42>
 8007522:	e7df      	b.n	80074e4 <_puts_r+0x84>
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	250a      	movs	r5, #10
 8007528:	1c5a      	adds	r2, r3, #1
 800752a:	6022      	str	r2, [r4, #0]
 800752c:	701d      	strb	r5, [r3, #0]
 800752e:	e7db      	b.n	80074e8 <_puts_r+0x88>
 8007530:	08008bd0 	.word	0x08008bd0
 8007534:	08008bf0 	.word	0x08008bf0
 8007538:	08008bb0 	.word	0x08008bb0

0800753c <puts>:
 800753c:	4b02      	ldr	r3, [pc, #8]	; (8007548 <puts+0xc>)
 800753e:	4601      	mov	r1, r0
 8007540:	6818      	ldr	r0, [r3, #0]
 8007542:	f7ff bf8d 	b.w	8007460 <_puts_r>
 8007546:	bf00      	nop
 8007548:	2000003c 	.word	0x2000003c

0800754c <siprintf>:
 800754c:	b40e      	push	{r1, r2, r3}
 800754e:	b500      	push	{lr}
 8007550:	b09c      	sub	sp, #112	; 0x70
 8007552:	ab1d      	add	r3, sp, #116	; 0x74
 8007554:	9002      	str	r0, [sp, #8]
 8007556:	9006      	str	r0, [sp, #24]
 8007558:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800755c:	4809      	ldr	r0, [pc, #36]	; (8007584 <siprintf+0x38>)
 800755e:	9107      	str	r1, [sp, #28]
 8007560:	9104      	str	r1, [sp, #16]
 8007562:	4909      	ldr	r1, [pc, #36]	; (8007588 <siprintf+0x3c>)
 8007564:	f853 2b04 	ldr.w	r2, [r3], #4
 8007568:	9105      	str	r1, [sp, #20]
 800756a:	6800      	ldr	r0, [r0, #0]
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	a902      	add	r1, sp, #8
 8007570:	f000 fcdc 	bl	8007f2c <_svfiprintf_r>
 8007574:	9b02      	ldr	r3, [sp, #8]
 8007576:	2200      	movs	r2, #0
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	b01c      	add	sp, #112	; 0x70
 800757c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007580:	b003      	add	sp, #12
 8007582:	4770      	bx	lr
 8007584:	2000003c 	.word	0x2000003c
 8007588:	ffff0208 	.word	0xffff0208

0800758c <strncmp>:
 800758c:	b510      	push	{r4, lr}
 800758e:	b17a      	cbz	r2, 80075b0 <strncmp+0x24>
 8007590:	4603      	mov	r3, r0
 8007592:	3901      	subs	r1, #1
 8007594:	1884      	adds	r4, r0, r2
 8007596:	f813 0b01 	ldrb.w	r0, [r3], #1
 800759a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800759e:	4290      	cmp	r0, r2
 80075a0:	d101      	bne.n	80075a6 <strncmp+0x1a>
 80075a2:	42a3      	cmp	r3, r4
 80075a4:	d101      	bne.n	80075aa <strncmp+0x1e>
 80075a6:	1a80      	subs	r0, r0, r2
 80075a8:	bd10      	pop	{r4, pc}
 80075aa:	2800      	cmp	r0, #0
 80075ac:	d1f3      	bne.n	8007596 <strncmp+0xa>
 80075ae:	e7fa      	b.n	80075a6 <strncmp+0x1a>
 80075b0:	4610      	mov	r0, r2
 80075b2:	e7f9      	b.n	80075a8 <strncmp+0x1c>

080075b4 <strncpy>:
 80075b4:	b510      	push	{r4, lr}
 80075b6:	3901      	subs	r1, #1
 80075b8:	4603      	mov	r3, r0
 80075ba:	b132      	cbz	r2, 80075ca <strncpy+0x16>
 80075bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075c0:	f803 4b01 	strb.w	r4, [r3], #1
 80075c4:	3a01      	subs	r2, #1
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	d1f7      	bne.n	80075ba <strncpy+0x6>
 80075ca:	441a      	add	r2, r3
 80075cc:	2100      	movs	r1, #0
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d100      	bne.n	80075d4 <strncpy+0x20>
 80075d2:	bd10      	pop	{r4, pc}
 80075d4:	f803 1b01 	strb.w	r1, [r3], #1
 80075d8:	e7f9      	b.n	80075ce <strncpy+0x1a>
	...

080075dc <_strtol_l.constprop.0>:
 80075dc:	2b01      	cmp	r3, #1
 80075de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075e2:	d001      	beq.n	80075e8 <_strtol_l.constprop.0+0xc>
 80075e4:	2b24      	cmp	r3, #36	; 0x24
 80075e6:	d906      	bls.n	80075f6 <_strtol_l.constprop.0+0x1a>
 80075e8:	f7ff fef0 	bl	80073cc <__errno>
 80075ec:	2316      	movs	r3, #22
 80075ee:	6003      	str	r3, [r0, #0]
 80075f0:	2000      	movs	r0, #0
 80075f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80076dc <_strtol_l.constprop.0+0x100>
 80075fa:	460d      	mov	r5, r1
 80075fc:	462e      	mov	r6, r5
 80075fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007602:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007606:	f017 0708 	ands.w	r7, r7, #8
 800760a:	d1f7      	bne.n	80075fc <_strtol_l.constprop.0+0x20>
 800760c:	2c2d      	cmp	r4, #45	; 0x2d
 800760e:	d132      	bne.n	8007676 <_strtol_l.constprop.0+0x9a>
 8007610:	782c      	ldrb	r4, [r5, #0]
 8007612:	2701      	movs	r7, #1
 8007614:	1cb5      	adds	r5, r6, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d05b      	beq.n	80076d2 <_strtol_l.constprop.0+0xf6>
 800761a:	2b10      	cmp	r3, #16
 800761c:	d109      	bne.n	8007632 <_strtol_l.constprop.0+0x56>
 800761e:	2c30      	cmp	r4, #48	; 0x30
 8007620:	d107      	bne.n	8007632 <_strtol_l.constprop.0+0x56>
 8007622:	782c      	ldrb	r4, [r5, #0]
 8007624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007628:	2c58      	cmp	r4, #88	; 0x58
 800762a:	d14d      	bne.n	80076c8 <_strtol_l.constprop.0+0xec>
 800762c:	786c      	ldrb	r4, [r5, #1]
 800762e:	2310      	movs	r3, #16
 8007630:	3502      	adds	r5, #2
 8007632:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007636:	f108 38ff 	add.w	r8, r8, #4294967295
 800763a:	f04f 0c00 	mov.w	ip, #0
 800763e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007642:	4666      	mov	r6, ip
 8007644:	fb03 8a19 	mls	sl, r3, r9, r8
 8007648:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800764c:	f1be 0f09 	cmp.w	lr, #9
 8007650:	d816      	bhi.n	8007680 <_strtol_l.constprop.0+0xa4>
 8007652:	4674      	mov	r4, lr
 8007654:	42a3      	cmp	r3, r4
 8007656:	dd24      	ble.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007658:	f1bc 0f00 	cmp.w	ip, #0
 800765c:	db1e      	blt.n	800769c <_strtol_l.constprop.0+0xc0>
 800765e:	45b1      	cmp	r9, r6
 8007660:	d31c      	bcc.n	800769c <_strtol_l.constprop.0+0xc0>
 8007662:	d101      	bne.n	8007668 <_strtol_l.constprop.0+0x8c>
 8007664:	45a2      	cmp	sl, r4
 8007666:	db19      	blt.n	800769c <_strtol_l.constprop.0+0xc0>
 8007668:	fb06 4603 	mla	r6, r6, r3, r4
 800766c:	f04f 0c01 	mov.w	ip, #1
 8007670:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007674:	e7e8      	b.n	8007648 <_strtol_l.constprop.0+0x6c>
 8007676:	2c2b      	cmp	r4, #43	; 0x2b
 8007678:	bf04      	itt	eq
 800767a:	782c      	ldrbeq	r4, [r5, #0]
 800767c:	1cb5      	addeq	r5, r6, #2
 800767e:	e7ca      	b.n	8007616 <_strtol_l.constprop.0+0x3a>
 8007680:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007684:	f1be 0f19 	cmp.w	lr, #25
 8007688:	d801      	bhi.n	800768e <_strtol_l.constprop.0+0xb2>
 800768a:	3c37      	subs	r4, #55	; 0x37
 800768c:	e7e2      	b.n	8007654 <_strtol_l.constprop.0+0x78>
 800768e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007692:	f1be 0f19 	cmp.w	lr, #25
 8007696:	d804      	bhi.n	80076a2 <_strtol_l.constprop.0+0xc6>
 8007698:	3c57      	subs	r4, #87	; 0x57
 800769a:	e7db      	b.n	8007654 <_strtol_l.constprop.0+0x78>
 800769c:	f04f 3cff 	mov.w	ip, #4294967295
 80076a0:	e7e6      	b.n	8007670 <_strtol_l.constprop.0+0x94>
 80076a2:	f1bc 0f00 	cmp.w	ip, #0
 80076a6:	da05      	bge.n	80076b4 <_strtol_l.constprop.0+0xd8>
 80076a8:	2322      	movs	r3, #34	; 0x22
 80076aa:	6003      	str	r3, [r0, #0]
 80076ac:	4646      	mov	r6, r8
 80076ae:	b942      	cbnz	r2, 80076c2 <_strtol_l.constprop.0+0xe6>
 80076b0:	4630      	mov	r0, r6
 80076b2:	e79e      	b.n	80075f2 <_strtol_l.constprop.0+0x16>
 80076b4:	b107      	cbz	r7, 80076b8 <_strtol_l.constprop.0+0xdc>
 80076b6:	4276      	negs	r6, r6
 80076b8:	2a00      	cmp	r2, #0
 80076ba:	d0f9      	beq.n	80076b0 <_strtol_l.constprop.0+0xd4>
 80076bc:	f1bc 0f00 	cmp.w	ip, #0
 80076c0:	d000      	beq.n	80076c4 <_strtol_l.constprop.0+0xe8>
 80076c2:	1e69      	subs	r1, r5, #1
 80076c4:	6011      	str	r1, [r2, #0]
 80076c6:	e7f3      	b.n	80076b0 <_strtol_l.constprop.0+0xd4>
 80076c8:	2430      	movs	r4, #48	; 0x30
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1b1      	bne.n	8007632 <_strtol_l.constprop.0+0x56>
 80076ce:	2308      	movs	r3, #8
 80076d0:	e7af      	b.n	8007632 <_strtol_l.constprop.0+0x56>
 80076d2:	2c30      	cmp	r4, #48	; 0x30
 80076d4:	d0a5      	beq.n	8007622 <_strtol_l.constprop.0+0x46>
 80076d6:	230a      	movs	r3, #10
 80076d8:	e7ab      	b.n	8007632 <_strtol_l.constprop.0+0x56>
 80076da:	bf00      	nop
 80076dc:	08008aad 	.word	0x08008aad

080076e0 <strtol>:
 80076e0:	4613      	mov	r3, r2
 80076e2:	460a      	mov	r2, r1
 80076e4:	4601      	mov	r1, r0
 80076e6:	4802      	ldr	r0, [pc, #8]	; (80076f0 <strtol+0x10>)
 80076e8:	6800      	ldr	r0, [r0, #0]
 80076ea:	f7ff bf77 	b.w	80075dc <_strtol_l.constprop.0>
 80076ee:	bf00      	nop
 80076f0:	2000003c 	.word	0x2000003c

080076f4 <__swbuf_r>:
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f6:	460e      	mov	r6, r1
 80076f8:	4614      	mov	r4, r2
 80076fa:	4605      	mov	r5, r0
 80076fc:	b118      	cbz	r0, 8007706 <__swbuf_r+0x12>
 80076fe:	6983      	ldr	r3, [r0, #24]
 8007700:	b90b      	cbnz	r3, 8007706 <__swbuf_r+0x12>
 8007702:	f000 f9d1 	bl	8007aa8 <__sinit>
 8007706:	4b21      	ldr	r3, [pc, #132]	; (800778c <__swbuf_r+0x98>)
 8007708:	429c      	cmp	r4, r3
 800770a:	d12b      	bne.n	8007764 <__swbuf_r+0x70>
 800770c:	686c      	ldr	r4, [r5, #4]
 800770e:	69a3      	ldr	r3, [r4, #24]
 8007710:	60a3      	str	r3, [r4, #8]
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	071a      	lsls	r2, r3, #28
 8007716:	d52f      	bpl.n	8007778 <__swbuf_r+0x84>
 8007718:	6923      	ldr	r3, [r4, #16]
 800771a:	b36b      	cbz	r3, 8007778 <__swbuf_r+0x84>
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	6820      	ldr	r0, [r4, #0]
 8007720:	1ac0      	subs	r0, r0, r3
 8007722:	6963      	ldr	r3, [r4, #20]
 8007724:	b2f6      	uxtb	r6, r6
 8007726:	4283      	cmp	r3, r0
 8007728:	4637      	mov	r7, r6
 800772a:	dc04      	bgt.n	8007736 <__swbuf_r+0x42>
 800772c:	4621      	mov	r1, r4
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f926 	bl	8007980 <_fflush_r>
 8007734:	bb30      	cbnz	r0, 8007784 <__swbuf_r+0x90>
 8007736:	68a3      	ldr	r3, [r4, #8]
 8007738:	3b01      	subs	r3, #1
 800773a:	60a3      	str	r3, [r4, #8]
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	6022      	str	r2, [r4, #0]
 8007742:	701e      	strb	r6, [r3, #0]
 8007744:	6963      	ldr	r3, [r4, #20]
 8007746:	3001      	adds	r0, #1
 8007748:	4283      	cmp	r3, r0
 800774a:	d004      	beq.n	8007756 <__swbuf_r+0x62>
 800774c:	89a3      	ldrh	r3, [r4, #12]
 800774e:	07db      	lsls	r3, r3, #31
 8007750:	d506      	bpl.n	8007760 <__swbuf_r+0x6c>
 8007752:	2e0a      	cmp	r6, #10
 8007754:	d104      	bne.n	8007760 <__swbuf_r+0x6c>
 8007756:	4621      	mov	r1, r4
 8007758:	4628      	mov	r0, r5
 800775a:	f000 f911 	bl	8007980 <_fflush_r>
 800775e:	b988      	cbnz	r0, 8007784 <__swbuf_r+0x90>
 8007760:	4638      	mov	r0, r7
 8007762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007764:	4b0a      	ldr	r3, [pc, #40]	; (8007790 <__swbuf_r+0x9c>)
 8007766:	429c      	cmp	r4, r3
 8007768:	d101      	bne.n	800776e <__swbuf_r+0x7a>
 800776a:	68ac      	ldr	r4, [r5, #8]
 800776c:	e7cf      	b.n	800770e <__swbuf_r+0x1a>
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <__swbuf_r+0xa0>)
 8007770:	429c      	cmp	r4, r3
 8007772:	bf08      	it	eq
 8007774:	68ec      	ldreq	r4, [r5, #12]
 8007776:	e7ca      	b.n	800770e <__swbuf_r+0x1a>
 8007778:	4621      	mov	r1, r4
 800777a:	4628      	mov	r0, r5
 800777c:	f000 f80c 	bl	8007798 <__swsetup_r>
 8007780:	2800      	cmp	r0, #0
 8007782:	d0cb      	beq.n	800771c <__swbuf_r+0x28>
 8007784:	f04f 37ff 	mov.w	r7, #4294967295
 8007788:	e7ea      	b.n	8007760 <__swbuf_r+0x6c>
 800778a:	bf00      	nop
 800778c:	08008bd0 	.word	0x08008bd0
 8007790:	08008bf0 	.word	0x08008bf0
 8007794:	08008bb0 	.word	0x08008bb0

08007798 <__swsetup_r>:
 8007798:	4b32      	ldr	r3, [pc, #200]	; (8007864 <__swsetup_r+0xcc>)
 800779a:	b570      	push	{r4, r5, r6, lr}
 800779c:	681d      	ldr	r5, [r3, #0]
 800779e:	4606      	mov	r6, r0
 80077a0:	460c      	mov	r4, r1
 80077a2:	b125      	cbz	r5, 80077ae <__swsetup_r+0x16>
 80077a4:	69ab      	ldr	r3, [r5, #24]
 80077a6:	b913      	cbnz	r3, 80077ae <__swsetup_r+0x16>
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 f97d 	bl	8007aa8 <__sinit>
 80077ae:	4b2e      	ldr	r3, [pc, #184]	; (8007868 <__swsetup_r+0xd0>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d10f      	bne.n	80077d4 <__swsetup_r+0x3c>
 80077b4:	686c      	ldr	r4, [r5, #4]
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077bc:	0719      	lsls	r1, r3, #28
 80077be:	d42c      	bmi.n	800781a <__swsetup_r+0x82>
 80077c0:	06dd      	lsls	r5, r3, #27
 80077c2:	d411      	bmi.n	80077e8 <__swsetup_r+0x50>
 80077c4:	2309      	movs	r3, #9
 80077c6:	6033      	str	r3, [r6, #0]
 80077c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	f04f 30ff 	mov.w	r0, #4294967295
 80077d2:	e03e      	b.n	8007852 <__swsetup_r+0xba>
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <__swsetup_r+0xd4>)
 80077d6:	429c      	cmp	r4, r3
 80077d8:	d101      	bne.n	80077de <__swsetup_r+0x46>
 80077da:	68ac      	ldr	r4, [r5, #8]
 80077dc:	e7eb      	b.n	80077b6 <__swsetup_r+0x1e>
 80077de:	4b24      	ldr	r3, [pc, #144]	; (8007870 <__swsetup_r+0xd8>)
 80077e0:	429c      	cmp	r4, r3
 80077e2:	bf08      	it	eq
 80077e4:	68ec      	ldreq	r4, [r5, #12]
 80077e6:	e7e6      	b.n	80077b6 <__swsetup_r+0x1e>
 80077e8:	0758      	lsls	r0, r3, #29
 80077ea:	d512      	bpl.n	8007812 <__swsetup_r+0x7a>
 80077ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077ee:	b141      	cbz	r1, 8007802 <__swsetup_r+0x6a>
 80077f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077f4:	4299      	cmp	r1, r3
 80077f6:	d002      	beq.n	80077fe <__swsetup_r+0x66>
 80077f8:	4630      	mov	r0, r6
 80077fa:	f000 fa5b 	bl	8007cb4 <_free_r>
 80077fe:	2300      	movs	r3, #0
 8007800:	6363      	str	r3, [r4, #52]	; 0x34
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007808:	81a3      	strh	r3, [r4, #12]
 800780a:	2300      	movs	r3, #0
 800780c:	6063      	str	r3, [r4, #4]
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	89a3      	ldrh	r3, [r4, #12]
 8007814:	f043 0308 	orr.w	r3, r3, #8
 8007818:	81a3      	strh	r3, [r4, #12]
 800781a:	6923      	ldr	r3, [r4, #16]
 800781c:	b94b      	cbnz	r3, 8007832 <__swsetup_r+0x9a>
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007828:	d003      	beq.n	8007832 <__swsetup_r+0x9a>
 800782a:	4621      	mov	r1, r4
 800782c:	4630      	mov	r0, r6
 800782e:	f000 fa01 	bl	8007c34 <__smakebuf_r>
 8007832:	89a0      	ldrh	r0, [r4, #12]
 8007834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007838:	f010 0301 	ands.w	r3, r0, #1
 800783c:	d00a      	beq.n	8007854 <__swsetup_r+0xbc>
 800783e:	2300      	movs	r3, #0
 8007840:	60a3      	str	r3, [r4, #8]
 8007842:	6963      	ldr	r3, [r4, #20]
 8007844:	425b      	negs	r3, r3
 8007846:	61a3      	str	r3, [r4, #24]
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	b943      	cbnz	r3, 800785e <__swsetup_r+0xc6>
 800784c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007850:	d1ba      	bne.n	80077c8 <__swsetup_r+0x30>
 8007852:	bd70      	pop	{r4, r5, r6, pc}
 8007854:	0781      	lsls	r1, r0, #30
 8007856:	bf58      	it	pl
 8007858:	6963      	ldrpl	r3, [r4, #20]
 800785a:	60a3      	str	r3, [r4, #8]
 800785c:	e7f4      	b.n	8007848 <__swsetup_r+0xb0>
 800785e:	2000      	movs	r0, #0
 8007860:	e7f7      	b.n	8007852 <__swsetup_r+0xba>
 8007862:	bf00      	nop
 8007864:	2000003c 	.word	0x2000003c
 8007868:	08008bd0 	.word	0x08008bd0
 800786c:	08008bf0 	.word	0x08008bf0
 8007870:	08008bb0 	.word	0x08008bb0

08007874 <__sflush_r>:
 8007874:	898a      	ldrh	r2, [r1, #12]
 8007876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787a:	4605      	mov	r5, r0
 800787c:	0710      	lsls	r0, r2, #28
 800787e:	460c      	mov	r4, r1
 8007880:	d458      	bmi.n	8007934 <__sflush_r+0xc0>
 8007882:	684b      	ldr	r3, [r1, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	dc05      	bgt.n	8007894 <__sflush_r+0x20>
 8007888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	dc02      	bgt.n	8007894 <__sflush_r+0x20>
 800788e:	2000      	movs	r0, #0
 8007890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007896:	2e00      	cmp	r6, #0
 8007898:	d0f9      	beq.n	800788e <__sflush_r+0x1a>
 800789a:	2300      	movs	r3, #0
 800789c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80078a0:	682f      	ldr	r7, [r5, #0]
 80078a2:	602b      	str	r3, [r5, #0]
 80078a4:	d032      	beq.n	800790c <__sflush_r+0x98>
 80078a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	075a      	lsls	r2, r3, #29
 80078ac:	d505      	bpl.n	80078ba <__sflush_r+0x46>
 80078ae:	6863      	ldr	r3, [r4, #4]
 80078b0:	1ac0      	subs	r0, r0, r3
 80078b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80078b4:	b10b      	cbz	r3, 80078ba <__sflush_r+0x46>
 80078b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078b8:	1ac0      	subs	r0, r0, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	4602      	mov	r2, r0
 80078be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80078c0:	6a21      	ldr	r1, [r4, #32]
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b0      	blx	r6
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	d106      	bne.n	80078da <__sflush_r+0x66>
 80078cc:	6829      	ldr	r1, [r5, #0]
 80078ce:	291d      	cmp	r1, #29
 80078d0:	d82c      	bhi.n	800792c <__sflush_r+0xb8>
 80078d2:	4a2a      	ldr	r2, [pc, #168]	; (800797c <__sflush_r+0x108>)
 80078d4:	40ca      	lsrs	r2, r1
 80078d6:	07d6      	lsls	r6, r2, #31
 80078d8:	d528      	bpl.n	800792c <__sflush_r+0xb8>
 80078da:	2200      	movs	r2, #0
 80078dc:	6062      	str	r2, [r4, #4]
 80078de:	04d9      	lsls	r1, r3, #19
 80078e0:	6922      	ldr	r2, [r4, #16]
 80078e2:	6022      	str	r2, [r4, #0]
 80078e4:	d504      	bpl.n	80078f0 <__sflush_r+0x7c>
 80078e6:	1c42      	adds	r2, r0, #1
 80078e8:	d101      	bne.n	80078ee <__sflush_r+0x7a>
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	b903      	cbnz	r3, 80078f0 <__sflush_r+0x7c>
 80078ee:	6560      	str	r0, [r4, #84]	; 0x54
 80078f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078f2:	602f      	str	r7, [r5, #0]
 80078f4:	2900      	cmp	r1, #0
 80078f6:	d0ca      	beq.n	800788e <__sflush_r+0x1a>
 80078f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078fc:	4299      	cmp	r1, r3
 80078fe:	d002      	beq.n	8007906 <__sflush_r+0x92>
 8007900:	4628      	mov	r0, r5
 8007902:	f000 f9d7 	bl	8007cb4 <_free_r>
 8007906:	2000      	movs	r0, #0
 8007908:	6360      	str	r0, [r4, #52]	; 0x34
 800790a:	e7c1      	b.n	8007890 <__sflush_r+0x1c>
 800790c:	6a21      	ldr	r1, [r4, #32]
 800790e:	2301      	movs	r3, #1
 8007910:	4628      	mov	r0, r5
 8007912:	47b0      	blx	r6
 8007914:	1c41      	adds	r1, r0, #1
 8007916:	d1c7      	bne.n	80078a8 <__sflush_r+0x34>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0c4      	beq.n	80078a8 <__sflush_r+0x34>
 800791e:	2b1d      	cmp	r3, #29
 8007920:	d001      	beq.n	8007926 <__sflush_r+0xb2>
 8007922:	2b16      	cmp	r3, #22
 8007924:	d101      	bne.n	800792a <__sflush_r+0xb6>
 8007926:	602f      	str	r7, [r5, #0]
 8007928:	e7b1      	b.n	800788e <__sflush_r+0x1a>
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	e7ad      	b.n	8007890 <__sflush_r+0x1c>
 8007934:	690f      	ldr	r7, [r1, #16]
 8007936:	2f00      	cmp	r7, #0
 8007938:	d0a9      	beq.n	800788e <__sflush_r+0x1a>
 800793a:	0793      	lsls	r3, r2, #30
 800793c:	680e      	ldr	r6, [r1, #0]
 800793e:	bf08      	it	eq
 8007940:	694b      	ldreq	r3, [r1, #20]
 8007942:	600f      	str	r7, [r1, #0]
 8007944:	bf18      	it	ne
 8007946:	2300      	movne	r3, #0
 8007948:	eba6 0807 	sub.w	r8, r6, r7
 800794c:	608b      	str	r3, [r1, #8]
 800794e:	f1b8 0f00 	cmp.w	r8, #0
 8007952:	dd9c      	ble.n	800788e <__sflush_r+0x1a>
 8007954:	6a21      	ldr	r1, [r4, #32]
 8007956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007958:	4643      	mov	r3, r8
 800795a:	463a      	mov	r2, r7
 800795c:	4628      	mov	r0, r5
 800795e:	47b0      	blx	r6
 8007960:	2800      	cmp	r0, #0
 8007962:	dc06      	bgt.n	8007972 <__sflush_r+0xfe>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	e78e      	b.n	8007890 <__sflush_r+0x1c>
 8007972:	4407      	add	r7, r0
 8007974:	eba8 0800 	sub.w	r8, r8, r0
 8007978:	e7e9      	b.n	800794e <__sflush_r+0xda>
 800797a:	bf00      	nop
 800797c:	20400001 	.word	0x20400001

08007980 <_fflush_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	690b      	ldr	r3, [r1, #16]
 8007984:	4605      	mov	r5, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b913      	cbnz	r3, 8007990 <_fflush_r+0x10>
 800798a:	2500      	movs	r5, #0
 800798c:	4628      	mov	r0, r5
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	b118      	cbz	r0, 800799a <_fflush_r+0x1a>
 8007992:	6983      	ldr	r3, [r0, #24]
 8007994:	b90b      	cbnz	r3, 800799a <_fflush_r+0x1a>
 8007996:	f000 f887 	bl	8007aa8 <__sinit>
 800799a:	4b14      	ldr	r3, [pc, #80]	; (80079ec <_fflush_r+0x6c>)
 800799c:	429c      	cmp	r4, r3
 800799e:	d11b      	bne.n	80079d8 <_fflush_r+0x58>
 80079a0:	686c      	ldr	r4, [r5, #4]
 80079a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d0ef      	beq.n	800798a <_fflush_r+0xa>
 80079aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80079ac:	07d0      	lsls	r0, r2, #31
 80079ae:	d404      	bmi.n	80079ba <_fflush_r+0x3a>
 80079b0:	0599      	lsls	r1, r3, #22
 80079b2:	d402      	bmi.n	80079ba <_fflush_r+0x3a>
 80079b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079b6:	f000 f915 	bl	8007be4 <__retarget_lock_acquire_recursive>
 80079ba:	4628      	mov	r0, r5
 80079bc:	4621      	mov	r1, r4
 80079be:	f7ff ff59 	bl	8007874 <__sflush_r>
 80079c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079c4:	07da      	lsls	r2, r3, #31
 80079c6:	4605      	mov	r5, r0
 80079c8:	d4e0      	bmi.n	800798c <_fflush_r+0xc>
 80079ca:	89a3      	ldrh	r3, [r4, #12]
 80079cc:	059b      	lsls	r3, r3, #22
 80079ce:	d4dd      	bmi.n	800798c <_fflush_r+0xc>
 80079d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079d2:	f000 f908 	bl	8007be6 <__retarget_lock_release_recursive>
 80079d6:	e7d9      	b.n	800798c <_fflush_r+0xc>
 80079d8:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <_fflush_r+0x70>)
 80079da:	429c      	cmp	r4, r3
 80079dc:	d101      	bne.n	80079e2 <_fflush_r+0x62>
 80079de:	68ac      	ldr	r4, [r5, #8]
 80079e0:	e7df      	b.n	80079a2 <_fflush_r+0x22>
 80079e2:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <_fflush_r+0x74>)
 80079e4:	429c      	cmp	r4, r3
 80079e6:	bf08      	it	eq
 80079e8:	68ec      	ldreq	r4, [r5, #12]
 80079ea:	e7da      	b.n	80079a2 <_fflush_r+0x22>
 80079ec:	08008bd0 	.word	0x08008bd0
 80079f0:	08008bf0 	.word	0x08008bf0
 80079f4:	08008bb0 	.word	0x08008bb0

080079f8 <std>:
 80079f8:	2300      	movs	r3, #0
 80079fa:	b510      	push	{r4, lr}
 80079fc:	4604      	mov	r4, r0
 80079fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007a02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a06:	6083      	str	r3, [r0, #8]
 8007a08:	8181      	strh	r1, [r0, #12]
 8007a0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007a0c:	81c2      	strh	r2, [r0, #14]
 8007a0e:	6183      	str	r3, [r0, #24]
 8007a10:	4619      	mov	r1, r3
 8007a12:	2208      	movs	r2, #8
 8007a14:	305c      	adds	r0, #92	; 0x5c
 8007a16:	f7ff fd03 	bl	8007420 <memset>
 8007a1a:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <std+0x38>)
 8007a1c:	6263      	str	r3, [r4, #36]	; 0x24
 8007a1e:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <std+0x3c>)
 8007a20:	62a3      	str	r3, [r4, #40]	; 0x28
 8007a22:	4b05      	ldr	r3, [pc, #20]	; (8007a38 <std+0x40>)
 8007a24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007a26:	4b05      	ldr	r3, [pc, #20]	; (8007a3c <std+0x44>)
 8007a28:	6224      	str	r4, [r4, #32]
 8007a2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007a2c:	bd10      	pop	{r4, pc}
 8007a2e:	bf00      	nop
 8007a30:	08008729 	.word	0x08008729
 8007a34:	0800874b 	.word	0x0800874b
 8007a38:	08008783 	.word	0x08008783
 8007a3c:	080087a7 	.word	0x080087a7

08007a40 <_cleanup_r>:
 8007a40:	4901      	ldr	r1, [pc, #4]	; (8007a48 <_cleanup_r+0x8>)
 8007a42:	f000 b8af 	b.w	8007ba4 <_fwalk_reent>
 8007a46:	bf00      	nop
 8007a48:	08007981 	.word	0x08007981

08007a4c <__sfmoreglue>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	2268      	movs	r2, #104	; 0x68
 8007a50:	1e4d      	subs	r5, r1, #1
 8007a52:	4355      	muls	r5, r2
 8007a54:	460e      	mov	r6, r1
 8007a56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007a5a:	f000 f997 	bl	8007d8c <_malloc_r>
 8007a5e:	4604      	mov	r4, r0
 8007a60:	b140      	cbz	r0, 8007a74 <__sfmoreglue+0x28>
 8007a62:	2100      	movs	r1, #0
 8007a64:	e9c0 1600 	strd	r1, r6, [r0]
 8007a68:	300c      	adds	r0, #12
 8007a6a:	60a0      	str	r0, [r4, #8]
 8007a6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007a70:	f7ff fcd6 	bl	8007420 <memset>
 8007a74:	4620      	mov	r0, r4
 8007a76:	bd70      	pop	{r4, r5, r6, pc}

08007a78 <__sfp_lock_acquire>:
 8007a78:	4801      	ldr	r0, [pc, #4]	; (8007a80 <__sfp_lock_acquire+0x8>)
 8007a7a:	f000 b8b3 	b.w	8007be4 <__retarget_lock_acquire_recursive>
 8007a7e:	bf00      	nop
 8007a80:	2000093d 	.word	0x2000093d

08007a84 <__sfp_lock_release>:
 8007a84:	4801      	ldr	r0, [pc, #4]	; (8007a8c <__sfp_lock_release+0x8>)
 8007a86:	f000 b8ae 	b.w	8007be6 <__retarget_lock_release_recursive>
 8007a8a:	bf00      	nop
 8007a8c:	2000093d 	.word	0x2000093d

08007a90 <__sinit_lock_acquire>:
 8007a90:	4801      	ldr	r0, [pc, #4]	; (8007a98 <__sinit_lock_acquire+0x8>)
 8007a92:	f000 b8a7 	b.w	8007be4 <__retarget_lock_acquire_recursive>
 8007a96:	bf00      	nop
 8007a98:	2000093e 	.word	0x2000093e

08007a9c <__sinit_lock_release>:
 8007a9c:	4801      	ldr	r0, [pc, #4]	; (8007aa4 <__sinit_lock_release+0x8>)
 8007a9e:	f000 b8a2 	b.w	8007be6 <__retarget_lock_release_recursive>
 8007aa2:	bf00      	nop
 8007aa4:	2000093e 	.word	0x2000093e

08007aa8 <__sinit>:
 8007aa8:	b510      	push	{r4, lr}
 8007aaa:	4604      	mov	r4, r0
 8007aac:	f7ff fff0 	bl	8007a90 <__sinit_lock_acquire>
 8007ab0:	69a3      	ldr	r3, [r4, #24]
 8007ab2:	b11b      	cbz	r3, 8007abc <__sinit+0x14>
 8007ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ab8:	f7ff bff0 	b.w	8007a9c <__sinit_lock_release>
 8007abc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <__sinit+0x68>)
 8007ac4:	4a13      	ldr	r2, [pc, #76]	; (8007b14 <__sinit+0x6c>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007aca:	42a3      	cmp	r3, r4
 8007acc:	bf04      	itt	eq
 8007ace:	2301      	moveq	r3, #1
 8007ad0:	61a3      	streq	r3, [r4, #24]
 8007ad2:	4620      	mov	r0, r4
 8007ad4:	f000 f820 	bl	8007b18 <__sfp>
 8007ad8:	6060      	str	r0, [r4, #4]
 8007ada:	4620      	mov	r0, r4
 8007adc:	f000 f81c 	bl	8007b18 <__sfp>
 8007ae0:	60a0      	str	r0, [r4, #8]
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	f000 f818 	bl	8007b18 <__sfp>
 8007ae8:	2200      	movs	r2, #0
 8007aea:	60e0      	str	r0, [r4, #12]
 8007aec:	2104      	movs	r1, #4
 8007aee:	6860      	ldr	r0, [r4, #4]
 8007af0:	f7ff ff82 	bl	80079f8 <std>
 8007af4:	68a0      	ldr	r0, [r4, #8]
 8007af6:	2201      	movs	r2, #1
 8007af8:	2109      	movs	r1, #9
 8007afa:	f7ff ff7d 	bl	80079f8 <std>
 8007afe:	68e0      	ldr	r0, [r4, #12]
 8007b00:	2202      	movs	r2, #2
 8007b02:	2112      	movs	r1, #18
 8007b04:	f7ff ff78 	bl	80079f8 <std>
 8007b08:	2301      	movs	r3, #1
 8007b0a:	61a3      	str	r3, [r4, #24]
 8007b0c:	e7d2      	b.n	8007ab4 <__sinit+0xc>
 8007b0e:	bf00      	nop
 8007b10:	08008aa8 	.word	0x08008aa8
 8007b14:	08007a41 	.word	0x08007a41

08007b18 <__sfp>:
 8007b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1a:	4607      	mov	r7, r0
 8007b1c:	f7ff ffac 	bl	8007a78 <__sfp_lock_acquire>
 8007b20:	4b1e      	ldr	r3, [pc, #120]	; (8007b9c <__sfp+0x84>)
 8007b22:	681e      	ldr	r6, [r3, #0]
 8007b24:	69b3      	ldr	r3, [r6, #24]
 8007b26:	b913      	cbnz	r3, 8007b2e <__sfp+0x16>
 8007b28:	4630      	mov	r0, r6
 8007b2a:	f7ff ffbd 	bl	8007aa8 <__sinit>
 8007b2e:	3648      	adds	r6, #72	; 0x48
 8007b30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	d503      	bpl.n	8007b40 <__sfp+0x28>
 8007b38:	6833      	ldr	r3, [r6, #0]
 8007b3a:	b30b      	cbz	r3, 8007b80 <__sfp+0x68>
 8007b3c:	6836      	ldr	r6, [r6, #0]
 8007b3e:	e7f7      	b.n	8007b30 <__sfp+0x18>
 8007b40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007b44:	b9d5      	cbnz	r5, 8007b7c <__sfp+0x64>
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <__sfp+0x88>)
 8007b48:	60e3      	str	r3, [r4, #12]
 8007b4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b4e:	6665      	str	r5, [r4, #100]	; 0x64
 8007b50:	f000 f847 	bl	8007be2 <__retarget_lock_init_recursive>
 8007b54:	f7ff ff96 	bl	8007a84 <__sfp_lock_release>
 8007b58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007b5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007b60:	6025      	str	r5, [r4, #0]
 8007b62:	61a5      	str	r5, [r4, #24]
 8007b64:	2208      	movs	r2, #8
 8007b66:	4629      	mov	r1, r5
 8007b68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007b6c:	f7ff fc58 	bl	8007420 <memset>
 8007b70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007b74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007b78:	4620      	mov	r0, r4
 8007b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b7c:	3468      	adds	r4, #104	; 0x68
 8007b7e:	e7d9      	b.n	8007b34 <__sfp+0x1c>
 8007b80:	2104      	movs	r1, #4
 8007b82:	4638      	mov	r0, r7
 8007b84:	f7ff ff62 	bl	8007a4c <__sfmoreglue>
 8007b88:	4604      	mov	r4, r0
 8007b8a:	6030      	str	r0, [r6, #0]
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	d1d5      	bne.n	8007b3c <__sfp+0x24>
 8007b90:	f7ff ff78 	bl	8007a84 <__sfp_lock_release>
 8007b94:	230c      	movs	r3, #12
 8007b96:	603b      	str	r3, [r7, #0]
 8007b98:	e7ee      	b.n	8007b78 <__sfp+0x60>
 8007b9a:	bf00      	nop
 8007b9c:	08008aa8 	.word	0x08008aa8
 8007ba0:	ffff0001 	.word	0xffff0001

08007ba4 <_fwalk_reent>:
 8007ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba8:	4606      	mov	r6, r0
 8007baa:	4688      	mov	r8, r1
 8007bac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007bb0:	2700      	movs	r7, #0
 8007bb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bb6:	f1b9 0901 	subs.w	r9, r9, #1
 8007bba:	d505      	bpl.n	8007bc8 <_fwalk_reent+0x24>
 8007bbc:	6824      	ldr	r4, [r4, #0]
 8007bbe:	2c00      	cmp	r4, #0
 8007bc0:	d1f7      	bne.n	8007bb2 <_fwalk_reent+0xe>
 8007bc2:	4638      	mov	r0, r7
 8007bc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc8:	89ab      	ldrh	r3, [r5, #12]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d907      	bls.n	8007bde <_fwalk_reent+0x3a>
 8007bce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	d003      	beq.n	8007bde <_fwalk_reent+0x3a>
 8007bd6:	4629      	mov	r1, r5
 8007bd8:	4630      	mov	r0, r6
 8007bda:	47c0      	blx	r8
 8007bdc:	4307      	orrs	r7, r0
 8007bde:	3568      	adds	r5, #104	; 0x68
 8007be0:	e7e9      	b.n	8007bb6 <_fwalk_reent+0x12>

08007be2 <__retarget_lock_init_recursive>:
 8007be2:	4770      	bx	lr

08007be4 <__retarget_lock_acquire_recursive>:
 8007be4:	4770      	bx	lr

08007be6 <__retarget_lock_release_recursive>:
 8007be6:	4770      	bx	lr

08007be8 <__swhatbuf_r>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	460e      	mov	r6, r1
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	b096      	sub	sp, #88	; 0x58
 8007bf4:	4614      	mov	r4, r2
 8007bf6:	461d      	mov	r5, r3
 8007bf8:	da08      	bge.n	8007c0c <__swhatbuf_r+0x24>
 8007bfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	602a      	str	r2, [r5, #0]
 8007c02:	061a      	lsls	r2, r3, #24
 8007c04:	d410      	bmi.n	8007c28 <__swhatbuf_r+0x40>
 8007c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c0a:	e00e      	b.n	8007c2a <__swhatbuf_r+0x42>
 8007c0c:	466a      	mov	r2, sp
 8007c0e:	f000 fdf1 	bl	80087f4 <_fstat_r>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	dbf1      	blt.n	8007bfa <__swhatbuf_r+0x12>
 8007c16:	9a01      	ldr	r2, [sp, #4]
 8007c18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007c1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007c20:	425a      	negs	r2, r3
 8007c22:	415a      	adcs	r2, r3
 8007c24:	602a      	str	r2, [r5, #0]
 8007c26:	e7ee      	b.n	8007c06 <__swhatbuf_r+0x1e>
 8007c28:	2340      	movs	r3, #64	; 0x40
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	b016      	add	sp, #88	; 0x58
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c34 <__smakebuf_r>:
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007c38:	079d      	lsls	r5, r3, #30
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	d507      	bpl.n	8007c50 <__smakebuf_r+0x1c>
 8007c40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2301      	movs	r3, #1
 8007c4a:	6163      	str	r3, [r4, #20]
 8007c4c:	b002      	add	sp, #8
 8007c4e:	bd70      	pop	{r4, r5, r6, pc}
 8007c50:	ab01      	add	r3, sp, #4
 8007c52:	466a      	mov	r2, sp
 8007c54:	f7ff ffc8 	bl	8007be8 <__swhatbuf_r>
 8007c58:	9900      	ldr	r1, [sp, #0]
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	f000 f895 	bl	8007d8c <_malloc_r>
 8007c62:	b948      	cbnz	r0, 8007c78 <__smakebuf_r+0x44>
 8007c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c68:	059a      	lsls	r2, r3, #22
 8007c6a:	d4ef      	bmi.n	8007c4c <__smakebuf_r+0x18>
 8007c6c:	f023 0303 	bic.w	r3, r3, #3
 8007c70:	f043 0302 	orr.w	r3, r3, #2
 8007c74:	81a3      	strh	r3, [r4, #12]
 8007c76:	e7e3      	b.n	8007c40 <__smakebuf_r+0xc>
 8007c78:	4b0d      	ldr	r3, [pc, #52]	; (8007cb0 <__smakebuf_r+0x7c>)
 8007c7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007c7c:	89a3      	ldrh	r3, [r4, #12]
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c84:	81a3      	strh	r3, [r4, #12]
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	6163      	str	r3, [r4, #20]
 8007c8a:	9b01      	ldr	r3, [sp, #4]
 8007c8c:	6120      	str	r0, [r4, #16]
 8007c8e:	b15b      	cbz	r3, 8007ca8 <__smakebuf_r+0x74>
 8007c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c94:	4630      	mov	r0, r6
 8007c96:	f000 fdbf 	bl	8008818 <_isatty_r>
 8007c9a:	b128      	cbz	r0, 8007ca8 <__smakebuf_r+0x74>
 8007c9c:	89a3      	ldrh	r3, [r4, #12]
 8007c9e:	f023 0303 	bic.w	r3, r3, #3
 8007ca2:	f043 0301 	orr.w	r3, r3, #1
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	89a0      	ldrh	r0, [r4, #12]
 8007caa:	4305      	orrs	r5, r0
 8007cac:	81a5      	strh	r5, [r4, #12]
 8007cae:	e7cd      	b.n	8007c4c <__smakebuf_r+0x18>
 8007cb0:	08007a41 	.word	0x08007a41

08007cb4 <_free_r>:
 8007cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	d044      	beq.n	8007d44 <_free_r+0x90>
 8007cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cbe:	9001      	str	r0, [sp, #4]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007cc6:	bfb8      	it	lt
 8007cc8:	18e4      	addlt	r4, r4, r3
 8007cca:	f000 fdef 	bl	80088ac <__malloc_lock>
 8007cce:	4a1e      	ldr	r2, [pc, #120]	; (8007d48 <_free_r+0x94>)
 8007cd0:	9801      	ldr	r0, [sp, #4]
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	b933      	cbnz	r3, 8007ce4 <_free_r+0x30>
 8007cd6:	6063      	str	r3, [r4, #4]
 8007cd8:	6014      	str	r4, [r2, #0]
 8007cda:	b003      	add	sp, #12
 8007cdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ce0:	f000 bdea 	b.w	80088b8 <__malloc_unlock>
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d908      	bls.n	8007cfa <_free_r+0x46>
 8007ce8:	6825      	ldr	r5, [r4, #0]
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	428b      	cmp	r3, r1
 8007cee:	bf01      	itttt	eq
 8007cf0:	6819      	ldreq	r1, [r3, #0]
 8007cf2:	685b      	ldreq	r3, [r3, #4]
 8007cf4:	1949      	addeq	r1, r1, r5
 8007cf6:	6021      	streq	r1, [r4, #0]
 8007cf8:	e7ed      	b.n	8007cd6 <_free_r+0x22>
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	b10b      	cbz	r3, 8007d04 <_free_r+0x50>
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	d9fa      	bls.n	8007cfa <_free_r+0x46>
 8007d04:	6811      	ldr	r1, [r2, #0]
 8007d06:	1855      	adds	r5, r2, r1
 8007d08:	42a5      	cmp	r5, r4
 8007d0a:	d10b      	bne.n	8007d24 <_free_r+0x70>
 8007d0c:	6824      	ldr	r4, [r4, #0]
 8007d0e:	4421      	add	r1, r4
 8007d10:	1854      	adds	r4, r2, r1
 8007d12:	42a3      	cmp	r3, r4
 8007d14:	6011      	str	r1, [r2, #0]
 8007d16:	d1e0      	bne.n	8007cda <_free_r+0x26>
 8007d18:	681c      	ldr	r4, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	6053      	str	r3, [r2, #4]
 8007d1e:	4421      	add	r1, r4
 8007d20:	6011      	str	r1, [r2, #0]
 8007d22:	e7da      	b.n	8007cda <_free_r+0x26>
 8007d24:	d902      	bls.n	8007d2c <_free_r+0x78>
 8007d26:	230c      	movs	r3, #12
 8007d28:	6003      	str	r3, [r0, #0]
 8007d2a:	e7d6      	b.n	8007cda <_free_r+0x26>
 8007d2c:	6825      	ldr	r5, [r4, #0]
 8007d2e:	1961      	adds	r1, r4, r5
 8007d30:	428b      	cmp	r3, r1
 8007d32:	bf04      	itt	eq
 8007d34:	6819      	ldreq	r1, [r3, #0]
 8007d36:	685b      	ldreq	r3, [r3, #4]
 8007d38:	6063      	str	r3, [r4, #4]
 8007d3a:	bf04      	itt	eq
 8007d3c:	1949      	addeq	r1, r1, r5
 8007d3e:	6021      	streq	r1, [r4, #0]
 8007d40:	6054      	str	r4, [r2, #4]
 8007d42:	e7ca      	b.n	8007cda <_free_r+0x26>
 8007d44:	b003      	add	sp, #12
 8007d46:	bd30      	pop	{r4, r5, pc}
 8007d48:	20000940 	.word	0x20000940

08007d4c <sbrk_aligned>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	4e0e      	ldr	r6, [pc, #56]	; (8007d88 <sbrk_aligned+0x3c>)
 8007d50:	460c      	mov	r4, r1
 8007d52:	6831      	ldr	r1, [r6, #0]
 8007d54:	4605      	mov	r5, r0
 8007d56:	b911      	cbnz	r1, 8007d5e <sbrk_aligned+0x12>
 8007d58:	f000 fcd6 	bl	8008708 <_sbrk_r>
 8007d5c:	6030      	str	r0, [r6, #0]
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	f000 fcd1 	bl	8008708 <_sbrk_r>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	d00a      	beq.n	8007d80 <sbrk_aligned+0x34>
 8007d6a:	1cc4      	adds	r4, r0, #3
 8007d6c:	f024 0403 	bic.w	r4, r4, #3
 8007d70:	42a0      	cmp	r0, r4
 8007d72:	d007      	beq.n	8007d84 <sbrk_aligned+0x38>
 8007d74:	1a21      	subs	r1, r4, r0
 8007d76:	4628      	mov	r0, r5
 8007d78:	f000 fcc6 	bl	8008708 <_sbrk_r>
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d101      	bne.n	8007d84 <sbrk_aligned+0x38>
 8007d80:	f04f 34ff 	mov.w	r4, #4294967295
 8007d84:	4620      	mov	r0, r4
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	20000944 	.word	0x20000944

08007d8c <_malloc_r>:
 8007d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d90:	1ccd      	adds	r5, r1, #3
 8007d92:	f025 0503 	bic.w	r5, r5, #3
 8007d96:	3508      	adds	r5, #8
 8007d98:	2d0c      	cmp	r5, #12
 8007d9a:	bf38      	it	cc
 8007d9c:	250c      	movcc	r5, #12
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	4607      	mov	r7, r0
 8007da2:	db01      	blt.n	8007da8 <_malloc_r+0x1c>
 8007da4:	42a9      	cmp	r1, r5
 8007da6:	d905      	bls.n	8007db4 <_malloc_r+0x28>
 8007da8:	230c      	movs	r3, #12
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	2600      	movs	r6, #0
 8007dae:	4630      	mov	r0, r6
 8007db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db4:	4e2e      	ldr	r6, [pc, #184]	; (8007e70 <_malloc_r+0xe4>)
 8007db6:	f000 fd79 	bl	80088ac <__malloc_lock>
 8007dba:	6833      	ldr	r3, [r6, #0]
 8007dbc:	461c      	mov	r4, r3
 8007dbe:	bb34      	cbnz	r4, 8007e0e <_malloc_r+0x82>
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	f7ff ffc2 	bl	8007d4c <sbrk_aligned>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	4604      	mov	r4, r0
 8007dcc:	d14d      	bne.n	8007e6a <_malloc_r+0xde>
 8007dce:	6834      	ldr	r4, [r6, #0]
 8007dd0:	4626      	mov	r6, r4
 8007dd2:	2e00      	cmp	r6, #0
 8007dd4:	d140      	bne.n	8007e58 <_malloc_r+0xcc>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4638      	mov	r0, r7
 8007ddc:	eb04 0803 	add.w	r8, r4, r3
 8007de0:	f000 fc92 	bl	8008708 <_sbrk_r>
 8007de4:	4580      	cmp	r8, r0
 8007de6:	d13a      	bne.n	8007e5e <_malloc_r+0xd2>
 8007de8:	6821      	ldr	r1, [r4, #0]
 8007dea:	3503      	adds	r5, #3
 8007dec:	1a6d      	subs	r5, r5, r1
 8007dee:	f025 0503 	bic.w	r5, r5, #3
 8007df2:	3508      	adds	r5, #8
 8007df4:	2d0c      	cmp	r5, #12
 8007df6:	bf38      	it	cc
 8007df8:	250c      	movcc	r5, #12
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff ffa5 	bl	8007d4c <sbrk_aligned>
 8007e02:	3001      	adds	r0, #1
 8007e04:	d02b      	beq.n	8007e5e <_malloc_r+0xd2>
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	442b      	add	r3, r5
 8007e0a:	6023      	str	r3, [r4, #0]
 8007e0c:	e00e      	b.n	8007e2c <_malloc_r+0xa0>
 8007e0e:	6822      	ldr	r2, [r4, #0]
 8007e10:	1b52      	subs	r2, r2, r5
 8007e12:	d41e      	bmi.n	8007e52 <_malloc_r+0xc6>
 8007e14:	2a0b      	cmp	r2, #11
 8007e16:	d916      	bls.n	8007e46 <_malloc_r+0xba>
 8007e18:	1961      	adds	r1, r4, r5
 8007e1a:	42a3      	cmp	r3, r4
 8007e1c:	6025      	str	r5, [r4, #0]
 8007e1e:	bf18      	it	ne
 8007e20:	6059      	strne	r1, [r3, #4]
 8007e22:	6863      	ldr	r3, [r4, #4]
 8007e24:	bf08      	it	eq
 8007e26:	6031      	streq	r1, [r6, #0]
 8007e28:	5162      	str	r2, [r4, r5]
 8007e2a:	604b      	str	r3, [r1, #4]
 8007e2c:	4638      	mov	r0, r7
 8007e2e:	f104 060b 	add.w	r6, r4, #11
 8007e32:	f000 fd41 	bl	80088b8 <__malloc_unlock>
 8007e36:	f026 0607 	bic.w	r6, r6, #7
 8007e3a:	1d23      	adds	r3, r4, #4
 8007e3c:	1af2      	subs	r2, r6, r3
 8007e3e:	d0b6      	beq.n	8007dae <_malloc_r+0x22>
 8007e40:	1b9b      	subs	r3, r3, r6
 8007e42:	50a3      	str	r3, [r4, r2]
 8007e44:	e7b3      	b.n	8007dae <_malloc_r+0x22>
 8007e46:	6862      	ldr	r2, [r4, #4]
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	bf0c      	ite	eq
 8007e4c:	6032      	streq	r2, [r6, #0]
 8007e4e:	605a      	strne	r2, [r3, #4]
 8007e50:	e7ec      	b.n	8007e2c <_malloc_r+0xa0>
 8007e52:	4623      	mov	r3, r4
 8007e54:	6864      	ldr	r4, [r4, #4]
 8007e56:	e7b2      	b.n	8007dbe <_malloc_r+0x32>
 8007e58:	4634      	mov	r4, r6
 8007e5a:	6876      	ldr	r6, [r6, #4]
 8007e5c:	e7b9      	b.n	8007dd2 <_malloc_r+0x46>
 8007e5e:	230c      	movs	r3, #12
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4638      	mov	r0, r7
 8007e64:	f000 fd28 	bl	80088b8 <__malloc_unlock>
 8007e68:	e7a1      	b.n	8007dae <_malloc_r+0x22>
 8007e6a:	6025      	str	r5, [r4, #0]
 8007e6c:	e7de      	b.n	8007e2c <_malloc_r+0xa0>
 8007e6e:	bf00      	nop
 8007e70:	20000940 	.word	0x20000940

08007e74 <__ssputs_r>:
 8007e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	688e      	ldr	r6, [r1, #8]
 8007e7a:	429e      	cmp	r6, r3
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	4690      	mov	r8, r2
 8007e82:	461f      	mov	r7, r3
 8007e84:	d838      	bhi.n	8007ef8 <__ssputs_r+0x84>
 8007e86:	898a      	ldrh	r2, [r1, #12]
 8007e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e8c:	d032      	beq.n	8007ef4 <__ssputs_r+0x80>
 8007e8e:	6825      	ldr	r5, [r4, #0]
 8007e90:	6909      	ldr	r1, [r1, #16]
 8007e92:	eba5 0901 	sub.w	r9, r5, r1
 8007e96:	6965      	ldr	r5, [r4, #20]
 8007e98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	444b      	add	r3, r9
 8007ea4:	106d      	asrs	r5, r5, #1
 8007ea6:	429d      	cmp	r5, r3
 8007ea8:	bf38      	it	cc
 8007eaa:	461d      	movcc	r5, r3
 8007eac:	0553      	lsls	r3, r2, #21
 8007eae:	d531      	bpl.n	8007f14 <__ssputs_r+0xa0>
 8007eb0:	4629      	mov	r1, r5
 8007eb2:	f7ff ff6b 	bl	8007d8c <_malloc_r>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	b950      	cbnz	r0, 8007ed0 <__ssputs_r+0x5c>
 8007eba:	230c      	movs	r3, #12
 8007ebc:	f8ca 3000 	str.w	r3, [sl]
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ec6:	81a3      	strh	r3, [r4, #12]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	6921      	ldr	r1, [r4, #16]
 8007ed2:	464a      	mov	r2, r9
 8007ed4:	f000 fcc2 	bl	800885c <memcpy>
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee2:	81a3      	strh	r3, [r4, #12]
 8007ee4:	6126      	str	r6, [r4, #16]
 8007ee6:	6165      	str	r5, [r4, #20]
 8007ee8:	444e      	add	r6, r9
 8007eea:	eba5 0509 	sub.w	r5, r5, r9
 8007eee:	6026      	str	r6, [r4, #0]
 8007ef0:	60a5      	str	r5, [r4, #8]
 8007ef2:	463e      	mov	r6, r7
 8007ef4:	42be      	cmp	r6, r7
 8007ef6:	d900      	bls.n	8007efa <__ssputs_r+0x86>
 8007ef8:	463e      	mov	r6, r7
 8007efa:	6820      	ldr	r0, [r4, #0]
 8007efc:	4632      	mov	r2, r6
 8007efe:	4641      	mov	r1, r8
 8007f00:	f000 fcba 	bl	8008878 <memmove>
 8007f04:	68a3      	ldr	r3, [r4, #8]
 8007f06:	1b9b      	subs	r3, r3, r6
 8007f08:	60a3      	str	r3, [r4, #8]
 8007f0a:	6823      	ldr	r3, [r4, #0]
 8007f0c:	4433      	add	r3, r6
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	2000      	movs	r0, #0
 8007f12:	e7db      	b.n	8007ecc <__ssputs_r+0x58>
 8007f14:	462a      	mov	r2, r5
 8007f16:	f000 fcd5 	bl	80088c4 <_realloc_r>
 8007f1a:	4606      	mov	r6, r0
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	d1e1      	bne.n	8007ee4 <__ssputs_r+0x70>
 8007f20:	6921      	ldr	r1, [r4, #16]
 8007f22:	4650      	mov	r0, sl
 8007f24:	f7ff fec6 	bl	8007cb4 <_free_r>
 8007f28:	e7c7      	b.n	8007eba <__ssputs_r+0x46>
	...

08007f2c <_svfiprintf_r>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	4698      	mov	r8, r3
 8007f32:	898b      	ldrh	r3, [r1, #12]
 8007f34:	061b      	lsls	r3, r3, #24
 8007f36:	b09d      	sub	sp, #116	; 0x74
 8007f38:	4607      	mov	r7, r0
 8007f3a:	460d      	mov	r5, r1
 8007f3c:	4614      	mov	r4, r2
 8007f3e:	d50e      	bpl.n	8007f5e <_svfiprintf_r+0x32>
 8007f40:	690b      	ldr	r3, [r1, #16]
 8007f42:	b963      	cbnz	r3, 8007f5e <_svfiprintf_r+0x32>
 8007f44:	2140      	movs	r1, #64	; 0x40
 8007f46:	f7ff ff21 	bl	8007d8c <_malloc_r>
 8007f4a:	6028      	str	r0, [r5, #0]
 8007f4c:	6128      	str	r0, [r5, #16]
 8007f4e:	b920      	cbnz	r0, 8007f5a <_svfiprintf_r+0x2e>
 8007f50:	230c      	movs	r3, #12
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	f04f 30ff 	mov.w	r0, #4294967295
 8007f58:	e0d1      	b.n	80080fe <_svfiprintf_r+0x1d2>
 8007f5a:	2340      	movs	r3, #64	; 0x40
 8007f5c:	616b      	str	r3, [r5, #20]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9309      	str	r3, [sp, #36]	; 0x24
 8007f62:	2320      	movs	r3, #32
 8007f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f6c:	2330      	movs	r3, #48	; 0x30
 8007f6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008118 <_svfiprintf_r+0x1ec>
 8007f72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f76:	f04f 0901 	mov.w	r9, #1
 8007f7a:	4623      	mov	r3, r4
 8007f7c:	469a      	mov	sl, r3
 8007f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f82:	b10a      	cbz	r2, 8007f88 <_svfiprintf_r+0x5c>
 8007f84:	2a25      	cmp	r2, #37	; 0x25
 8007f86:	d1f9      	bne.n	8007f7c <_svfiprintf_r+0x50>
 8007f88:	ebba 0b04 	subs.w	fp, sl, r4
 8007f8c:	d00b      	beq.n	8007fa6 <_svfiprintf_r+0x7a>
 8007f8e:	465b      	mov	r3, fp
 8007f90:	4622      	mov	r2, r4
 8007f92:	4629      	mov	r1, r5
 8007f94:	4638      	mov	r0, r7
 8007f96:	f7ff ff6d 	bl	8007e74 <__ssputs_r>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f000 80aa 	beq.w	80080f4 <_svfiprintf_r+0x1c8>
 8007fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa2:	445a      	add	r2, fp
 8007fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 80a2 	beq.w	80080f4 <_svfiprintf_r+0x1c8>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fba:	f10a 0a01 	add.w	sl, sl, #1
 8007fbe:	9304      	str	r3, [sp, #16]
 8007fc0:	9307      	str	r3, [sp, #28]
 8007fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8007fc8:	4654      	mov	r4, sl
 8007fca:	2205      	movs	r2, #5
 8007fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd0:	4851      	ldr	r0, [pc, #324]	; (8008118 <_svfiprintf_r+0x1ec>)
 8007fd2:	f7f8 f905 	bl	80001e0 <memchr>
 8007fd6:	9a04      	ldr	r2, [sp, #16]
 8007fd8:	b9d8      	cbnz	r0, 8008012 <_svfiprintf_r+0xe6>
 8007fda:	06d0      	lsls	r0, r2, #27
 8007fdc:	bf44      	itt	mi
 8007fde:	2320      	movmi	r3, #32
 8007fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fe4:	0711      	lsls	r1, r2, #28
 8007fe6:	bf44      	itt	mi
 8007fe8:	232b      	movmi	r3, #43	; 0x2b
 8007fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8007ff4:	d015      	beq.n	8008022 <_svfiprintf_r+0xf6>
 8007ff6:	9a07      	ldr	r2, [sp, #28]
 8007ff8:	4654      	mov	r4, sl
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f04f 0c0a 	mov.w	ip, #10
 8008000:	4621      	mov	r1, r4
 8008002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008006:	3b30      	subs	r3, #48	; 0x30
 8008008:	2b09      	cmp	r3, #9
 800800a:	d94e      	bls.n	80080aa <_svfiprintf_r+0x17e>
 800800c:	b1b0      	cbz	r0, 800803c <_svfiprintf_r+0x110>
 800800e:	9207      	str	r2, [sp, #28]
 8008010:	e014      	b.n	800803c <_svfiprintf_r+0x110>
 8008012:	eba0 0308 	sub.w	r3, r0, r8
 8008016:	fa09 f303 	lsl.w	r3, r9, r3
 800801a:	4313      	orrs	r3, r2
 800801c:	9304      	str	r3, [sp, #16]
 800801e:	46a2      	mov	sl, r4
 8008020:	e7d2      	b.n	8007fc8 <_svfiprintf_r+0x9c>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	1d19      	adds	r1, r3, #4
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	9103      	str	r1, [sp, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	bfbb      	ittet	lt
 800802e:	425b      	neglt	r3, r3
 8008030:	f042 0202 	orrlt.w	r2, r2, #2
 8008034:	9307      	strge	r3, [sp, #28]
 8008036:	9307      	strlt	r3, [sp, #28]
 8008038:	bfb8      	it	lt
 800803a:	9204      	strlt	r2, [sp, #16]
 800803c:	7823      	ldrb	r3, [r4, #0]
 800803e:	2b2e      	cmp	r3, #46	; 0x2e
 8008040:	d10c      	bne.n	800805c <_svfiprintf_r+0x130>
 8008042:	7863      	ldrb	r3, [r4, #1]
 8008044:	2b2a      	cmp	r3, #42	; 0x2a
 8008046:	d135      	bne.n	80080b4 <_svfiprintf_r+0x188>
 8008048:	9b03      	ldr	r3, [sp, #12]
 800804a:	1d1a      	adds	r2, r3, #4
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	9203      	str	r2, [sp, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	bfb8      	it	lt
 8008054:	f04f 33ff 	movlt.w	r3, #4294967295
 8008058:	3402      	adds	r4, #2
 800805a:	9305      	str	r3, [sp, #20]
 800805c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008128 <_svfiprintf_r+0x1fc>
 8008060:	7821      	ldrb	r1, [r4, #0]
 8008062:	2203      	movs	r2, #3
 8008064:	4650      	mov	r0, sl
 8008066:	f7f8 f8bb 	bl	80001e0 <memchr>
 800806a:	b140      	cbz	r0, 800807e <_svfiprintf_r+0x152>
 800806c:	2340      	movs	r3, #64	; 0x40
 800806e:	eba0 000a 	sub.w	r0, r0, sl
 8008072:	fa03 f000 	lsl.w	r0, r3, r0
 8008076:	9b04      	ldr	r3, [sp, #16]
 8008078:	4303      	orrs	r3, r0
 800807a:	3401      	adds	r4, #1
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008082:	4826      	ldr	r0, [pc, #152]	; (800811c <_svfiprintf_r+0x1f0>)
 8008084:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008088:	2206      	movs	r2, #6
 800808a:	f7f8 f8a9 	bl	80001e0 <memchr>
 800808e:	2800      	cmp	r0, #0
 8008090:	d038      	beq.n	8008104 <_svfiprintf_r+0x1d8>
 8008092:	4b23      	ldr	r3, [pc, #140]	; (8008120 <_svfiprintf_r+0x1f4>)
 8008094:	bb1b      	cbnz	r3, 80080de <_svfiprintf_r+0x1b2>
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	3307      	adds	r3, #7
 800809a:	f023 0307 	bic.w	r3, r3, #7
 800809e:	3308      	adds	r3, #8
 80080a0:	9303      	str	r3, [sp, #12]
 80080a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a4:	4433      	add	r3, r6
 80080a6:	9309      	str	r3, [sp, #36]	; 0x24
 80080a8:	e767      	b.n	8007f7a <_svfiprintf_r+0x4e>
 80080aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80080ae:	460c      	mov	r4, r1
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7a5      	b.n	8008000 <_svfiprintf_r+0xd4>
 80080b4:	2300      	movs	r3, #0
 80080b6:	3401      	adds	r4, #1
 80080b8:	9305      	str	r3, [sp, #20]
 80080ba:	4619      	mov	r1, r3
 80080bc:	f04f 0c0a 	mov.w	ip, #10
 80080c0:	4620      	mov	r0, r4
 80080c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080c6:	3a30      	subs	r2, #48	; 0x30
 80080c8:	2a09      	cmp	r2, #9
 80080ca:	d903      	bls.n	80080d4 <_svfiprintf_r+0x1a8>
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0c5      	beq.n	800805c <_svfiprintf_r+0x130>
 80080d0:	9105      	str	r1, [sp, #20]
 80080d2:	e7c3      	b.n	800805c <_svfiprintf_r+0x130>
 80080d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80080d8:	4604      	mov	r4, r0
 80080da:	2301      	movs	r3, #1
 80080dc:	e7f0      	b.n	80080c0 <_svfiprintf_r+0x194>
 80080de:	ab03      	add	r3, sp, #12
 80080e0:	9300      	str	r3, [sp, #0]
 80080e2:	462a      	mov	r2, r5
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <_svfiprintf_r+0x1f8>)
 80080e6:	a904      	add	r1, sp, #16
 80080e8:	4638      	mov	r0, r7
 80080ea:	f3af 8000 	nop.w
 80080ee:	1c42      	adds	r2, r0, #1
 80080f0:	4606      	mov	r6, r0
 80080f2:	d1d6      	bne.n	80080a2 <_svfiprintf_r+0x176>
 80080f4:	89ab      	ldrh	r3, [r5, #12]
 80080f6:	065b      	lsls	r3, r3, #25
 80080f8:	f53f af2c 	bmi.w	8007f54 <_svfiprintf_r+0x28>
 80080fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080fe:	b01d      	add	sp, #116	; 0x74
 8008100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008104:	ab03      	add	r3, sp, #12
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	462a      	mov	r2, r5
 800810a:	4b06      	ldr	r3, [pc, #24]	; (8008124 <_svfiprintf_r+0x1f8>)
 800810c:	a904      	add	r1, sp, #16
 800810e:	4638      	mov	r0, r7
 8008110:	f000 f9d4 	bl	80084bc <_printf_i>
 8008114:	e7eb      	b.n	80080ee <_svfiprintf_r+0x1c2>
 8008116:	bf00      	nop
 8008118:	08008c10 	.word	0x08008c10
 800811c:	08008c1a 	.word	0x08008c1a
 8008120:	00000000 	.word	0x00000000
 8008124:	08007e75 	.word	0x08007e75
 8008128:	08008c16 	.word	0x08008c16

0800812c <__sfputc_r>:
 800812c:	6893      	ldr	r3, [r2, #8]
 800812e:	3b01      	subs	r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	b410      	push	{r4}
 8008134:	6093      	str	r3, [r2, #8]
 8008136:	da08      	bge.n	800814a <__sfputc_r+0x1e>
 8008138:	6994      	ldr	r4, [r2, #24]
 800813a:	42a3      	cmp	r3, r4
 800813c:	db01      	blt.n	8008142 <__sfputc_r+0x16>
 800813e:	290a      	cmp	r1, #10
 8008140:	d103      	bne.n	800814a <__sfputc_r+0x1e>
 8008142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008146:	f7ff bad5 	b.w	80076f4 <__swbuf_r>
 800814a:	6813      	ldr	r3, [r2, #0]
 800814c:	1c58      	adds	r0, r3, #1
 800814e:	6010      	str	r0, [r2, #0]
 8008150:	7019      	strb	r1, [r3, #0]
 8008152:	4608      	mov	r0, r1
 8008154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008158:	4770      	bx	lr

0800815a <__sfputs_r>:
 800815a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	4614      	mov	r4, r2
 8008162:	18d5      	adds	r5, r2, r3
 8008164:	42ac      	cmp	r4, r5
 8008166:	d101      	bne.n	800816c <__sfputs_r+0x12>
 8008168:	2000      	movs	r0, #0
 800816a:	e007      	b.n	800817c <__sfputs_r+0x22>
 800816c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008170:	463a      	mov	r2, r7
 8008172:	4630      	mov	r0, r6
 8008174:	f7ff ffda 	bl	800812c <__sfputc_r>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d1f3      	bne.n	8008164 <__sfputs_r+0xa>
 800817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008180 <_vfiprintf_r>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	460d      	mov	r5, r1
 8008186:	b09d      	sub	sp, #116	; 0x74
 8008188:	4614      	mov	r4, r2
 800818a:	4698      	mov	r8, r3
 800818c:	4606      	mov	r6, r0
 800818e:	b118      	cbz	r0, 8008198 <_vfiprintf_r+0x18>
 8008190:	6983      	ldr	r3, [r0, #24]
 8008192:	b90b      	cbnz	r3, 8008198 <_vfiprintf_r+0x18>
 8008194:	f7ff fc88 	bl	8007aa8 <__sinit>
 8008198:	4b89      	ldr	r3, [pc, #548]	; (80083c0 <_vfiprintf_r+0x240>)
 800819a:	429d      	cmp	r5, r3
 800819c:	d11b      	bne.n	80081d6 <_vfiprintf_r+0x56>
 800819e:	6875      	ldr	r5, [r6, #4]
 80081a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a2:	07d9      	lsls	r1, r3, #31
 80081a4:	d405      	bmi.n	80081b2 <_vfiprintf_r+0x32>
 80081a6:	89ab      	ldrh	r3, [r5, #12]
 80081a8:	059a      	lsls	r2, r3, #22
 80081aa:	d402      	bmi.n	80081b2 <_vfiprintf_r+0x32>
 80081ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081ae:	f7ff fd19 	bl	8007be4 <__retarget_lock_acquire_recursive>
 80081b2:	89ab      	ldrh	r3, [r5, #12]
 80081b4:	071b      	lsls	r3, r3, #28
 80081b6:	d501      	bpl.n	80081bc <_vfiprintf_r+0x3c>
 80081b8:	692b      	ldr	r3, [r5, #16]
 80081ba:	b9eb      	cbnz	r3, 80081f8 <_vfiprintf_r+0x78>
 80081bc:	4629      	mov	r1, r5
 80081be:	4630      	mov	r0, r6
 80081c0:	f7ff faea 	bl	8007798 <__swsetup_r>
 80081c4:	b1c0      	cbz	r0, 80081f8 <_vfiprintf_r+0x78>
 80081c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081c8:	07dc      	lsls	r4, r3, #31
 80081ca:	d50e      	bpl.n	80081ea <_vfiprintf_r+0x6a>
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	b01d      	add	sp, #116	; 0x74
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d6:	4b7b      	ldr	r3, [pc, #492]	; (80083c4 <_vfiprintf_r+0x244>)
 80081d8:	429d      	cmp	r5, r3
 80081da:	d101      	bne.n	80081e0 <_vfiprintf_r+0x60>
 80081dc:	68b5      	ldr	r5, [r6, #8]
 80081de:	e7df      	b.n	80081a0 <_vfiprintf_r+0x20>
 80081e0:	4b79      	ldr	r3, [pc, #484]	; (80083c8 <_vfiprintf_r+0x248>)
 80081e2:	429d      	cmp	r5, r3
 80081e4:	bf08      	it	eq
 80081e6:	68f5      	ldreq	r5, [r6, #12]
 80081e8:	e7da      	b.n	80081a0 <_vfiprintf_r+0x20>
 80081ea:	89ab      	ldrh	r3, [r5, #12]
 80081ec:	0598      	lsls	r0, r3, #22
 80081ee:	d4ed      	bmi.n	80081cc <_vfiprintf_r+0x4c>
 80081f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081f2:	f7ff fcf8 	bl	8007be6 <__retarget_lock_release_recursive>
 80081f6:	e7e9      	b.n	80081cc <_vfiprintf_r+0x4c>
 80081f8:	2300      	movs	r3, #0
 80081fa:	9309      	str	r3, [sp, #36]	; 0x24
 80081fc:	2320      	movs	r3, #32
 80081fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008202:	f8cd 800c 	str.w	r8, [sp, #12]
 8008206:	2330      	movs	r3, #48	; 0x30
 8008208:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80083cc <_vfiprintf_r+0x24c>
 800820c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008210:	f04f 0901 	mov.w	r9, #1
 8008214:	4623      	mov	r3, r4
 8008216:	469a      	mov	sl, r3
 8008218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800821c:	b10a      	cbz	r2, 8008222 <_vfiprintf_r+0xa2>
 800821e:	2a25      	cmp	r2, #37	; 0x25
 8008220:	d1f9      	bne.n	8008216 <_vfiprintf_r+0x96>
 8008222:	ebba 0b04 	subs.w	fp, sl, r4
 8008226:	d00b      	beq.n	8008240 <_vfiprintf_r+0xc0>
 8008228:	465b      	mov	r3, fp
 800822a:	4622      	mov	r2, r4
 800822c:	4629      	mov	r1, r5
 800822e:	4630      	mov	r0, r6
 8008230:	f7ff ff93 	bl	800815a <__sfputs_r>
 8008234:	3001      	adds	r0, #1
 8008236:	f000 80aa 	beq.w	800838e <_vfiprintf_r+0x20e>
 800823a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800823c:	445a      	add	r2, fp
 800823e:	9209      	str	r2, [sp, #36]	; 0x24
 8008240:	f89a 3000 	ldrb.w	r3, [sl]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 80a2 	beq.w	800838e <_vfiprintf_r+0x20e>
 800824a:	2300      	movs	r3, #0
 800824c:	f04f 32ff 	mov.w	r2, #4294967295
 8008250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008254:	f10a 0a01 	add.w	sl, sl, #1
 8008258:	9304      	str	r3, [sp, #16]
 800825a:	9307      	str	r3, [sp, #28]
 800825c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008260:	931a      	str	r3, [sp, #104]	; 0x68
 8008262:	4654      	mov	r4, sl
 8008264:	2205      	movs	r2, #5
 8008266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800826a:	4858      	ldr	r0, [pc, #352]	; (80083cc <_vfiprintf_r+0x24c>)
 800826c:	f7f7 ffb8 	bl	80001e0 <memchr>
 8008270:	9a04      	ldr	r2, [sp, #16]
 8008272:	b9d8      	cbnz	r0, 80082ac <_vfiprintf_r+0x12c>
 8008274:	06d1      	lsls	r1, r2, #27
 8008276:	bf44      	itt	mi
 8008278:	2320      	movmi	r3, #32
 800827a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800827e:	0713      	lsls	r3, r2, #28
 8008280:	bf44      	itt	mi
 8008282:	232b      	movmi	r3, #43	; 0x2b
 8008284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008288:	f89a 3000 	ldrb.w	r3, [sl]
 800828c:	2b2a      	cmp	r3, #42	; 0x2a
 800828e:	d015      	beq.n	80082bc <_vfiprintf_r+0x13c>
 8008290:	9a07      	ldr	r2, [sp, #28]
 8008292:	4654      	mov	r4, sl
 8008294:	2000      	movs	r0, #0
 8008296:	f04f 0c0a 	mov.w	ip, #10
 800829a:	4621      	mov	r1, r4
 800829c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082a0:	3b30      	subs	r3, #48	; 0x30
 80082a2:	2b09      	cmp	r3, #9
 80082a4:	d94e      	bls.n	8008344 <_vfiprintf_r+0x1c4>
 80082a6:	b1b0      	cbz	r0, 80082d6 <_vfiprintf_r+0x156>
 80082a8:	9207      	str	r2, [sp, #28]
 80082aa:	e014      	b.n	80082d6 <_vfiprintf_r+0x156>
 80082ac:	eba0 0308 	sub.w	r3, r0, r8
 80082b0:	fa09 f303 	lsl.w	r3, r9, r3
 80082b4:	4313      	orrs	r3, r2
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	46a2      	mov	sl, r4
 80082ba:	e7d2      	b.n	8008262 <_vfiprintf_r+0xe2>
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	1d19      	adds	r1, r3, #4
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	9103      	str	r1, [sp, #12]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	bfbb      	ittet	lt
 80082c8:	425b      	neglt	r3, r3
 80082ca:	f042 0202 	orrlt.w	r2, r2, #2
 80082ce:	9307      	strge	r3, [sp, #28]
 80082d0:	9307      	strlt	r3, [sp, #28]
 80082d2:	bfb8      	it	lt
 80082d4:	9204      	strlt	r2, [sp, #16]
 80082d6:	7823      	ldrb	r3, [r4, #0]
 80082d8:	2b2e      	cmp	r3, #46	; 0x2e
 80082da:	d10c      	bne.n	80082f6 <_vfiprintf_r+0x176>
 80082dc:	7863      	ldrb	r3, [r4, #1]
 80082de:	2b2a      	cmp	r3, #42	; 0x2a
 80082e0:	d135      	bne.n	800834e <_vfiprintf_r+0x1ce>
 80082e2:	9b03      	ldr	r3, [sp, #12]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	9203      	str	r2, [sp, #12]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	bfb8      	it	lt
 80082ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80082f2:	3402      	adds	r4, #2
 80082f4:	9305      	str	r3, [sp, #20]
 80082f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80083dc <_vfiprintf_r+0x25c>
 80082fa:	7821      	ldrb	r1, [r4, #0]
 80082fc:	2203      	movs	r2, #3
 80082fe:	4650      	mov	r0, sl
 8008300:	f7f7 ff6e 	bl	80001e0 <memchr>
 8008304:	b140      	cbz	r0, 8008318 <_vfiprintf_r+0x198>
 8008306:	2340      	movs	r3, #64	; 0x40
 8008308:	eba0 000a 	sub.w	r0, r0, sl
 800830c:	fa03 f000 	lsl.w	r0, r3, r0
 8008310:	9b04      	ldr	r3, [sp, #16]
 8008312:	4303      	orrs	r3, r0
 8008314:	3401      	adds	r4, #1
 8008316:	9304      	str	r3, [sp, #16]
 8008318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800831c:	482c      	ldr	r0, [pc, #176]	; (80083d0 <_vfiprintf_r+0x250>)
 800831e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008322:	2206      	movs	r2, #6
 8008324:	f7f7 ff5c 	bl	80001e0 <memchr>
 8008328:	2800      	cmp	r0, #0
 800832a:	d03f      	beq.n	80083ac <_vfiprintf_r+0x22c>
 800832c:	4b29      	ldr	r3, [pc, #164]	; (80083d4 <_vfiprintf_r+0x254>)
 800832e:	bb1b      	cbnz	r3, 8008378 <_vfiprintf_r+0x1f8>
 8008330:	9b03      	ldr	r3, [sp, #12]
 8008332:	3307      	adds	r3, #7
 8008334:	f023 0307 	bic.w	r3, r3, #7
 8008338:	3308      	adds	r3, #8
 800833a:	9303      	str	r3, [sp, #12]
 800833c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800833e:	443b      	add	r3, r7
 8008340:	9309      	str	r3, [sp, #36]	; 0x24
 8008342:	e767      	b.n	8008214 <_vfiprintf_r+0x94>
 8008344:	fb0c 3202 	mla	r2, ip, r2, r3
 8008348:	460c      	mov	r4, r1
 800834a:	2001      	movs	r0, #1
 800834c:	e7a5      	b.n	800829a <_vfiprintf_r+0x11a>
 800834e:	2300      	movs	r3, #0
 8008350:	3401      	adds	r4, #1
 8008352:	9305      	str	r3, [sp, #20]
 8008354:	4619      	mov	r1, r3
 8008356:	f04f 0c0a 	mov.w	ip, #10
 800835a:	4620      	mov	r0, r4
 800835c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008360:	3a30      	subs	r2, #48	; 0x30
 8008362:	2a09      	cmp	r2, #9
 8008364:	d903      	bls.n	800836e <_vfiprintf_r+0x1ee>
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0c5      	beq.n	80082f6 <_vfiprintf_r+0x176>
 800836a:	9105      	str	r1, [sp, #20]
 800836c:	e7c3      	b.n	80082f6 <_vfiprintf_r+0x176>
 800836e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008372:	4604      	mov	r4, r0
 8008374:	2301      	movs	r3, #1
 8008376:	e7f0      	b.n	800835a <_vfiprintf_r+0x1da>
 8008378:	ab03      	add	r3, sp, #12
 800837a:	9300      	str	r3, [sp, #0]
 800837c:	462a      	mov	r2, r5
 800837e:	4b16      	ldr	r3, [pc, #88]	; (80083d8 <_vfiprintf_r+0x258>)
 8008380:	a904      	add	r1, sp, #16
 8008382:	4630      	mov	r0, r6
 8008384:	f3af 8000 	nop.w
 8008388:	4607      	mov	r7, r0
 800838a:	1c78      	adds	r0, r7, #1
 800838c:	d1d6      	bne.n	800833c <_vfiprintf_r+0x1bc>
 800838e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008390:	07d9      	lsls	r1, r3, #31
 8008392:	d405      	bmi.n	80083a0 <_vfiprintf_r+0x220>
 8008394:	89ab      	ldrh	r3, [r5, #12]
 8008396:	059a      	lsls	r2, r3, #22
 8008398:	d402      	bmi.n	80083a0 <_vfiprintf_r+0x220>
 800839a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800839c:	f7ff fc23 	bl	8007be6 <__retarget_lock_release_recursive>
 80083a0:	89ab      	ldrh	r3, [r5, #12]
 80083a2:	065b      	lsls	r3, r3, #25
 80083a4:	f53f af12 	bmi.w	80081cc <_vfiprintf_r+0x4c>
 80083a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083aa:	e711      	b.n	80081d0 <_vfiprintf_r+0x50>
 80083ac:	ab03      	add	r3, sp, #12
 80083ae:	9300      	str	r3, [sp, #0]
 80083b0:	462a      	mov	r2, r5
 80083b2:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <_vfiprintf_r+0x258>)
 80083b4:	a904      	add	r1, sp, #16
 80083b6:	4630      	mov	r0, r6
 80083b8:	f000 f880 	bl	80084bc <_printf_i>
 80083bc:	e7e4      	b.n	8008388 <_vfiprintf_r+0x208>
 80083be:	bf00      	nop
 80083c0:	08008bd0 	.word	0x08008bd0
 80083c4:	08008bf0 	.word	0x08008bf0
 80083c8:	08008bb0 	.word	0x08008bb0
 80083cc:	08008c10 	.word	0x08008c10
 80083d0:	08008c1a 	.word	0x08008c1a
 80083d4:	00000000 	.word	0x00000000
 80083d8:	0800815b 	.word	0x0800815b
 80083dc:	08008c16 	.word	0x08008c16

080083e0 <_printf_common>:
 80083e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e4:	4616      	mov	r6, r2
 80083e6:	4699      	mov	r9, r3
 80083e8:	688a      	ldr	r2, [r1, #8]
 80083ea:	690b      	ldr	r3, [r1, #16]
 80083ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083f0:	4293      	cmp	r3, r2
 80083f2:	bfb8      	it	lt
 80083f4:	4613      	movlt	r3, r2
 80083f6:	6033      	str	r3, [r6, #0]
 80083f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083fc:	4607      	mov	r7, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	b10a      	cbz	r2, 8008406 <_printf_common+0x26>
 8008402:	3301      	adds	r3, #1
 8008404:	6033      	str	r3, [r6, #0]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	0699      	lsls	r1, r3, #26
 800840a:	bf42      	ittt	mi
 800840c:	6833      	ldrmi	r3, [r6, #0]
 800840e:	3302      	addmi	r3, #2
 8008410:	6033      	strmi	r3, [r6, #0]
 8008412:	6825      	ldr	r5, [r4, #0]
 8008414:	f015 0506 	ands.w	r5, r5, #6
 8008418:	d106      	bne.n	8008428 <_printf_common+0x48>
 800841a:	f104 0a19 	add.w	sl, r4, #25
 800841e:	68e3      	ldr	r3, [r4, #12]
 8008420:	6832      	ldr	r2, [r6, #0]
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	42ab      	cmp	r3, r5
 8008426:	dc26      	bgt.n	8008476 <_printf_common+0x96>
 8008428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800842c:	1e13      	subs	r3, r2, #0
 800842e:	6822      	ldr	r2, [r4, #0]
 8008430:	bf18      	it	ne
 8008432:	2301      	movne	r3, #1
 8008434:	0692      	lsls	r2, r2, #26
 8008436:	d42b      	bmi.n	8008490 <_printf_common+0xb0>
 8008438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800843c:	4649      	mov	r1, r9
 800843e:	4638      	mov	r0, r7
 8008440:	47c0      	blx	r8
 8008442:	3001      	adds	r0, #1
 8008444:	d01e      	beq.n	8008484 <_printf_common+0xa4>
 8008446:	6823      	ldr	r3, [r4, #0]
 8008448:	68e5      	ldr	r5, [r4, #12]
 800844a:	6832      	ldr	r2, [r6, #0]
 800844c:	f003 0306 	and.w	r3, r3, #6
 8008450:	2b04      	cmp	r3, #4
 8008452:	bf08      	it	eq
 8008454:	1aad      	subeq	r5, r5, r2
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	6922      	ldr	r2, [r4, #16]
 800845a:	bf0c      	ite	eq
 800845c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008460:	2500      	movne	r5, #0
 8008462:	4293      	cmp	r3, r2
 8008464:	bfc4      	itt	gt
 8008466:	1a9b      	subgt	r3, r3, r2
 8008468:	18ed      	addgt	r5, r5, r3
 800846a:	2600      	movs	r6, #0
 800846c:	341a      	adds	r4, #26
 800846e:	42b5      	cmp	r5, r6
 8008470:	d11a      	bne.n	80084a8 <_printf_common+0xc8>
 8008472:	2000      	movs	r0, #0
 8008474:	e008      	b.n	8008488 <_printf_common+0xa8>
 8008476:	2301      	movs	r3, #1
 8008478:	4652      	mov	r2, sl
 800847a:	4649      	mov	r1, r9
 800847c:	4638      	mov	r0, r7
 800847e:	47c0      	blx	r8
 8008480:	3001      	adds	r0, #1
 8008482:	d103      	bne.n	800848c <_printf_common+0xac>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295
 8008488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848c:	3501      	adds	r5, #1
 800848e:	e7c6      	b.n	800841e <_printf_common+0x3e>
 8008490:	18e1      	adds	r1, r4, r3
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	2030      	movs	r0, #48	; 0x30
 8008496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800849a:	4422      	add	r2, r4
 800849c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084a4:	3302      	adds	r3, #2
 80084a6:	e7c7      	b.n	8008438 <_printf_common+0x58>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4622      	mov	r2, r4
 80084ac:	4649      	mov	r1, r9
 80084ae:	4638      	mov	r0, r7
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d0e6      	beq.n	8008484 <_printf_common+0xa4>
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7d9      	b.n	800846e <_printf_common+0x8e>
	...

080084bc <_printf_i>:
 80084bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	7e0f      	ldrb	r7, [r1, #24]
 80084c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084c4:	2f78      	cmp	r7, #120	; 0x78
 80084c6:	4691      	mov	r9, r2
 80084c8:	4680      	mov	r8, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	469a      	mov	sl, r3
 80084ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084d2:	d807      	bhi.n	80084e4 <_printf_i+0x28>
 80084d4:	2f62      	cmp	r7, #98	; 0x62
 80084d6:	d80a      	bhi.n	80084ee <_printf_i+0x32>
 80084d8:	2f00      	cmp	r7, #0
 80084da:	f000 80d8 	beq.w	800868e <_printf_i+0x1d2>
 80084de:	2f58      	cmp	r7, #88	; 0x58
 80084e0:	f000 80a3 	beq.w	800862a <_printf_i+0x16e>
 80084e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084ec:	e03a      	b.n	8008564 <_printf_i+0xa8>
 80084ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084f2:	2b15      	cmp	r3, #21
 80084f4:	d8f6      	bhi.n	80084e4 <_printf_i+0x28>
 80084f6:	a101      	add	r1, pc, #4	; (adr r1, 80084fc <_printf_i+0x40>)
 80084f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008569 	.word	0x08008569
 8008504:	080084e5 	.word	0x080084e5
 8008508:	080084e5 	.word	0x080084e5
 800850c:	080084e5 	.word	0x080084e5
 8008510:	080084e5 	.word	0x080084e5
 8008514:	08008569 	.word	0x08008569
 8008518:	080084e5 	.word	0x080084e5
 800851c:	080084e5 	.word	0x080084e5
 8008520:	080084e5 	.word	0x080084e5
 8008524:	080084e5 	.word	0x080084e5
 8008528:	08008675 	.word	0x08008675
 800852c:	08008599 	.word	0x08008599
 8008530:	08008657 	.word	0x08008657
 8008534:	080084e5 	.word	0x080084e5
 8008538:	080084e5 	.word	0x080084e5
 800853c:	08008697 	.word	0x08008697
 8008540:	080084e5 	.word	0x080084e5
 8008544:	08008599 	.word	0x08008599
 8008548:	080084e5 	.word	0x080084e5
 800854c:	080084e5 	.word	0x080084e5
 8008550:	0800865f 	.word	0x0800865f
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008564:	2301      	movs	r3, #1
 8008566:	e0a3      	b.n	80086b0 <_printf_i+0x1f4>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	6829      	ldr	r1, [r5, #0]
 800856c:	0606      	lsls	r6, r0, #24
 800856e:	f101 0304 	add.w	r3, r1, #4
 8008572:	d50a      	bpl.n	800858a <_printf_i+0xce>
 8008574:	680e      	ldr	r6, [r1, #0]
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	2e00      	cmp	r6, #0
 800857a:	da03      	bge.n	8008584 <_printf_i+0xc8>
 800857c:	232d      	movs	r3, #45	; 0x2d
 800857e:	4276      	negs	r6, r6
 8008580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008584:	485e      	ldr	r0, [pc, #376]	; (8008700 <_printf_i+0x244>)
 8008586:	230a      	movs	r3, #10
 8008588:	e019      	b.n	80085be <_printf_i+0x102>
 800858a:	680e      	ldr	r6, [r1, #0]
 800858c:	602b      	str	r3, [r5, #0]
 800858e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008592:	bf18      	it	ne
 8008594:	b236      	sxthne	r6, r6
 8008596:	e7ef      	b.n	8008578 <_printf_i+0xbc>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	6820      	ldr	r0, [r4, #0]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	6029      	str	r1, [r5, #0]
 80085a0:	0601      	lsls	r1, r0, #24
 80085a2:	d501      	bpl.n	80085a8 <_printf_i+0xec>
 80085a4:	681e      	ldr	r6, [r3, #0]
 80085a6:	e002      	b.n	80085ae <_printf_i+0xf2>
 80085a8:	0646      	lsls	r6, r0, #25
 80085aa:	d5fb      	bpl.n	80085a4 <_printf_i+0xe8>
 80085ac:	881e      	ldrh	r6, [r3, #0]
 80085ae:	4854      	ldr	r0, [pc, #336]	; (8008700 <_printf_i+0x244>)
 80085b0:	2f6f      	cmp	r7, #111	; 0x6f
 80085b2:	bf0c      	ite	eq
 80085b4:	2308      	moveq	r3, #8
 80085b6:	230a      	movne	r3, #10
 80085b8:	2100      	movs	r1, #0
 80085ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085be:	6865      	ldr	r5, [r4, #4]
 80085c0:	60a5      	str	r5, [r4, #8]
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	bfa2      	ittt	ge
 80085c6:	6821      	ldrge	r1, [r4, #0]
 80085c8:	f021 0104 	bicge.w	r1, r1, #4
 80085cc:	6021      	strge	r1, [r4, #0]
 80085ce:	b90e      	cbnz	r6, 80085d4 <_printf_i+0x118>
 80085d0:	2d00      	cmp	r5, #0
 80085d2:	d04d      	beq.n	8008670 <_printf_i+0x1b4>
 80085d4:	4615      	mov	r5, r2
 80085d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80085da:	fb03 6711 	mls	r7, r3, r1, r6
 80085de:	5dc7      	ldrb	r7, [r0, r7]
 80085e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085e4:	4637      	mov	r7, r6
 80085e6:	42bb      	cmp	r3, r7
 80085e8:	460e      	mov	r6, r1
 80085ea:	d9f4      	bls.n	80085d6 <_printf_i+0x11a>
 80085ec:	2b08      	cmp	r3, #8
 80085ee:	d10b      	bne.n	8008608 <_printf_i+0x14c>
 80085f0:	6823      	ldr	r3, [r4, #0]
 80085f2:	07de      	lsls	r6, r3, #31
 80085f4:	d508      	bpl.n	8008608 <_printf_i+0x14c>
 80085f6:	6923      	ldr	r3, [r4, #16]
 80085f8:	6861      	ldr	r1, [r4, #4]
 80085fa:	4299      	cmp	r1, r3
 80085fc:	bfde      	ittt	le
 80085fe:	2330      	movle	r3, #48	; 0x30
 8008600:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008604:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008608:	1b52      	subs	r2, r2, r5
 800860a:	6122      	str	r2, [r4, #16]
 800860c:	f8cd a000 	str.w	sl, [sp]
 8008610:	464b      	mov	r3, r9
 8008612:	aa03      	add	r2, sp, #12
 8008614:	4621      	mov	r1, r4
 8008616:	4640      	mov	r0, r8
 8008618:	f7ff fee2 	bl	80083e0 <_printf_common>
 800861c:	3001      	adds	r0, #1
 800861e:	d14c      	bne.n	80086ba <_printf_i+0x1fe>
 8008620:	f04f 30ff 	mov.w	r0, #4294967295
 8008624:	b004      	add	sp, #16
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	4835      	ldr	r0, [pc, #212]	; (8008700 <_printf_i+0x244>)
 800862c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008630:	6829      	ldr	r1, [r5, #0]
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	f851 6b04 	ldr.w	r6, [r1], #4
 8008638:	6029      	str	r1, [r5, #0]
 800863a:	061d      	lsls	r5, r3, #24
 800863c:	d514      	bpl.n	8008668 <_printf_i+0x1ac>
 800863e:	07df      	lsls	r7, r3, #31
 8008640:	bf44      	itt	mi
 8008642:	f043 0320 	orrmi.w	r3, r3, #32
 8008646:	6023      	strmi	r3, [r4, #0]
 8008648:	b91e      	cbnz	r6, 8008652 <_printf_i+0x196>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	f023 0320 	bic.w	r3, r3, #32
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	2310      	movs	r3, #16
 8008654:	e7b0      	b.n	80085b8 <_printf_i+0xfc>
 8008656:	6823      	ldr	r3, [r4, #0]
 8008658:	f043 0320 	orr.w	r3, r3, #32
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	2378      	movs	r3, #120	; 0x78
 8008660:	4828      	ldr	r0, [pc, #160]	; (8008704 <_printf_i+0x248>)
 8008662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008666:	e7e3      	b.n	8008630 <_printf_i+0x174>
 8008668:	0659      	lsls	r1, r3, #25
 800866a:	bf48      	it	mi
 800866c:	b2b6      	uxthmi	r6, r6
 800866e:	e7e6      	b.n	800863e <_printf_i+0x182>
 8008670:	4615      	mov	r5, r2
 8008672:	e7bb      	b.n	80085ec <_printf_i+0x130>
 8008674:	682b      	ldr	r3, [r5, #0]
 8008676:	6826      	ldr	r6, [r4, #0]
 8008678:	6961      	ldr	r1, [r4, #20]
 800867a:	1d18      	adds	r0, r3, #4
 800867c:	6028      	str	r0, [r5, #0]
 800867e:	0635      	lsls	r5, r6, #24
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	d501      	bpl.n	8008688 <_printf_i+0x1cc>
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	e002      	b.n	800868e <_printf_i+0x1d2>
 8008688:	0670      	lsls	r0, r6, #25
 800868a:	d5fb      	bpl.n	8008684 <_printf_i+0x1c8>
 800868c:	8019      	strh	r1, [r3, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	4615      	mov	r5, r2
 8008694:	e7ba      	b.n	800860c <_printf_i+0x150>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	1d1a      	adds	r2, r3, #4
 800869a:	602a      	str	r2, [r5, #0]
 800869c:	681d      	ldr	r5, [r3, #0]
 800869e:	6862      	ldr	r2, [r4, #4]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4628      	mov	r0, r5
 80086a4:	f7f7 fd9c 	bl	80001e0 <memchr>
 80086a8:	b108      	cbz	r0, 80086ae <_printf_i+0x1f2>
 80086aa:	1b40      	subs	r0, r0, r5
 80086ac:	6060      	str	r0, [r4, #4]
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	2300      	movs	r3, #0
 80086b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086b8:	e7a8      	b.n	800860c <_printf_i+0x150>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	462a      	mov	r2, r5
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	47d0      	blx	sl
 80086c4:	3001      	adds	r0, #1
 80086c6:	d0ab      	beq.n	8008620 <_printf_i+0x164>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	079b      	lsls	r3, r3, #30
 80086cc:	d413      	bmi.n	80086f6 <_printf_i+0x23a>
 80086ce:	68e0      	ldr	r0, [r4, #12]
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	4298      	cmp	r0, r3
 80086d4:	bfb8      	it	lt
 80086d6:	4618      	movlt	r0, r3
 80086d8:	e7a4      	b.n	8008624 <_printf_i+0x168>
 80086da:	2301      	movs	r3, #1
 80086dc:	4632      	mov	r2, r6
 80086de:	4649      	mov	r1, r9
 80086e0:	4640      	mov	r0, r8
 80086e2:	47d0      	blx	sl
 80086e4:	3001      	adds	r0, #1
 80086e6:	d09b      	beq.n	8008620 <_printf_i+0x164>
 80086e8:	3501      	adds	r5, #1
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	9903      	ldr	r1, [sp, #12]
 80086ee:	1a5b      	subs	r3, r3, r1
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dcf2      	bgt.n	80086da <_printf_i+0x21e>
 80086f4:	e7eb      	b.n	80086ce <_printf_i+0x212>
 80086f6:	2500      	movs	r5, #0
 80086f8:	f104 0619 	add.w	r6, r4, #25
 80086fc:	e7f5      	b.n	80086ea <_printf_i+0x22e>
 80086fe:	bf00      	nop
 8008700:	08008c21 	.word	0x08008c21
 8008704:	08008c32 	.word	0x08008c32

08008708 <_sbrk_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	4d06      	ldr	r5, [pc, #24]	; (8008724 <_sbrk_r+0x1c>)
 800870c:	2300      	movs	r3, #0
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7f9 ff8c 	bl	8002630 <_sbrk>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_sbrk_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_sbrk_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20000948 	.word	0x20000948

08008728 <__sread>:
 8008728:	b510      	push	{r4, lr}
 800872a:	460c      	mov	r4, r1
 800872c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008730:	f000 f8f8 	bl	8008924 <_read_r>
 8008734:	2800      	cmp	r0, #0
 8008736:	bfab      	itete	ge
 8008738:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800873a:	89a3      	ldrhlt	r3, [r4, #12]
 800873c:	181b      	addge	r3, r3, r0
 800873e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008742:	bfac      	ite	ge
 8008744:	6563      	strge	r3, [r4, #84]	; 0x54
 8008746:	81a3      	strhlt	r3, [r4, #12]
 8008748:	bd10      	pop	{r4, pc}

0800874a <__swrite>:
 800874a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800874e:	461f      	mov	r7, r3
 8008750:	898b      	ldrh	r3, [r1, #12]
 8008752:	05db      	lsls	r3, r3, #23
 8008754:	4605      	mov	r5, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4616      	mov	r6, r2
 800875a:	d505      	bpl.n	8008768 <__swrite+0x1e>
 800875c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008760:	2302      	movs	r3, #2
 8008762:	2200      	movs	r2, #0
 8008764:	f000 f868 	bl	8008838 <_lseek_r>
 8008768:	89a3      	ldrh	r3, [r4, #12]
 800876a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008772:	81a3      	strh	r3, [r4, #12]
 8008774:	4632      	mov	r2, r6
 8008776:	463b      	mov	r3, r7
 8008778:	4628      	mov	r0, r5
 800877a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800877e:	f000 b817 	b.w	80087b0 <_write_r>

08008782 <__sseek>:
 8008782:	b510      	push	{r4, lr}
 8008784:	460c      	mov	r4, r1
 8008786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878a:	f000 f855 	bl	8008838 <_lseek_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	89a3      	ldrh	r3, [r4, #12]
 8008792:	bf15      	itete	ne
 8008794:	6560      	strne	r0, [r4, #84]	; 0x54
 8008796:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800879a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800879e:	81a3      	strheq	r3, [r4, #12]
 80087a0:	bf18      	it	ne
 80087a2:	81a3      	strhne	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__sclose>:
 80087a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087aa:	f000 b813 	b.w	80087d4 <_close_r>
	...

080087b0 <_write_r>:
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4d07      	ldr	r5, [pc, #28]	; (80087d0 <_write_r+0x20>)
 80087b4:	4604      	mov	r4, r0
 80087b6:	4608      	mov	r0, r1
 80087b8:	4611      	mov	r1, r2
 80087ba:	2200      	movs	r2, #0
 80087bc:	602a      	str	r2, [r5, #0]
 80087be:	461a      	mov	r2, r3
 80087c0:	f7f9 fee5 	bl	800258e <_write>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d102      	bne.n	80087ce <_write_r+0x1e>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	b103      	cbz	r3, 80087ce <_write_r+0x1e>
 80087cc:	6023      	str	r3, [r4, #0]
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	20000948 	.word	0x20000948

080087d4 <_close_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4d06      	ldr	r5, [pc, #24]	; (80087f0 <_close_r+0x1c>)
 80087d8:	2300      	movs	r3, #0
 80087da:	4604      	mov	r4, r0
 80087dc:	4608      	mov	r0, r1
 80087de:	602b      	str	r3, [r5, #0]
 80087e0:	f7f9 fef1 	bl	80025c6 <_close>
 80087e4:	1c43      	adds	r3, r0, #1
 80087e6:	d102      	bne.n	80087ee <_close_r+0x1a>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	b103      	cbz	r3, 80087ee <_close_r+0x1a>
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	bd38      	pop	{r3, r4, r5, pc}
 80087f0:	20000948 	.word	0x20000948

080087f4 <_fstat_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	4d07      	ldr	r5, [pc, #28]	; (8008814 <_fstat_r+0x20>)
 80087f8:	2300      	movs	r3, #0
 80087fa:	4604      	mov	r4, r0
 80087fc:	4608      	mov	r0, r1
 80087fe:	4611      	mov	r1, r2
 8008800:	602b      	str	r3, [r5, #0]
 8008802:	f7f9 feec 	bl	80025de <_fstat>
 8008806:	1c43      	adds	r3, r0, #1
 8008808:	d102      	bne.n	8008810 <_fstat_r+0x1c>
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	b103      	cbz	r3, 8008810 <_fstat_r+0x1c>
 800880e:	6023      	str	r3, [r4, #0]
 8008810:	bd38      	pop	{r3, r4, r5, pc}
 8008812:	bf00      	nop
 8008814:	20000948 	.word	0x20000948

08008818 <_isatty_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d06      	ldr	r5, [pc, #24]	; (8008834 <_isatty_r+0x1c>)
 800881c:	2300      	movs	r3, #0
 800881e:	4604      	mov	r4, r0
 8008820:	4608      	mov	r0, r1
 8008822:	602b      	str	r3, [r5, #0]
 8008824:	f7f9 feeb 	bl	80025fe <_isatty>
 8008828:	1c43      	adds	r3, r0, #1
 800882a:	d102      	bne.n	8008832 <_isatty_r+0x1a>
 800882c:	682b      	ldr	r3, [r5, #0]
 800882e:	b103      	cbz	r3, 8008832 <_isatty_r+0x1a>
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	bd38      	pop	{r3, r4, r5, pc}
 8008834:	20000948 	.word	0x20000948

08008838 <_lseek_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d07      	ldr	r5, [pc, #28]	; (8008858 <_lseek_r+0x20>)
 800883c:	4604      	mov	r4, r0
 800883e:	4608      	mov	r0, r1
 8008840:	4611      	mov	r1, r2
 8008842:	2200      	movs	r2, #0
 8008844:	602a      	str	r2, [r5, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	f7f9 fee4 	bl	8002614 <_lseek>
 800884c:	1c43      	adds	r3, r0, #1
 800884e:	d102      	bne.n	8008856 <_lseek_r+0x1e>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	b103      	cbz	r3, 8008856 <_lseek_r+0x1e>
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	bd38      	pop	{r3, r4, r5, pc}
 8008858:	20000948 	.word	0x20000948

0800885c <memcpy>:
 800885c:	440a      	add	r2, r1
 800885e:	4291      	cmp	r1, r2
 8008860:	f100 33ff 	add.w	r3, r0, #4294967295
 8008864:	d100      	bne.n	8008868 <memcpy+0xc>
 8008866:	4770      	bx	lr
 8008868:	b510      	push	{r4, lr}
 800886a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800886e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008872:	4291      	cmp	r1, r2
 8008874:	d1f9      	bne.n	800886a <memcpy+0xe>
 8008876:	bd10      	pop	{r4, pc}

08008878 <memmove>:
 8008878:	4288      	cmp	r0, r1
 800887a:	b510      	push	{r4, lr}
 800887c:	eb01 0402 	add.w	r4, r1, r2
 8008880:	d902      	bls.n	8008888 <memmove+0x10>
 8008882:	4284      	cmp	r4, r0
 8008884:	4623      	mov	r3, r4
 8008886:	d807      	bhi.n	8008898 <memmove+0x20>
 8008888:	1e43      	subs	r3, r0, #1
 800888a:	42a1      	cmp	r1, r4
 800888c:	d008      	beq.n	80088a0 <memmove+0x28>
 800888e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008896:	e7f8      	b.n	800888a <memmove+0x12>
 8008898:	4402      	add	r2, r0
 800889a:	4601      	mov	r1, r0
 800889c:	428a      	cmp	r2, r1
 800889e:	d100      	bne.n	80088a2 <memmove+0x2a>
 80088a0:	bd10      	pop	{r4, pc}
 80088a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088aa:	e7f7      	b.n	800889c <memmove+0x24>

080088ac <__malloc_lock>:
 80088ac:	4801      	ldr	r0, [pc, #4]	; (80088b4 <__malloc_lock+0x8>)
 80088ae:	f7ff b999 	b.w	8007be4 <__retarget_lock_acquire_recursive>
 80088b2:	bf00      	nop
 80088b4:	2000093c 	.word	0x2000093c

080088b8 <__malloc_unlock>:
 80088b8:	4801      	ldr	r0, [pc, #4]	; (80088c0 <__malloc_unlock+0x8>)
 80088ba:	f7ff b994 	b.w	8007be6 <__retarget_lock_release_recursive>
 80088be:	bf00      	nop
 80088c0:	2000093c 	.word	0x2000093c

080088c4 <_realloc_r>:
 80088c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c8:	4680      	mov	r8, r0
 80088ca:	4614      	mov	r4, r2
 80088cc:	460e      	mov	r6, r1
 80088ce:	b921      	cbnz	r1, 80088da <_realloc_r+0x16>
 80088d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088d4:	4611      	mov	r1, r2
 80088d6:	f7ff ba59 	b.w	8007d8c <_malloc_r>
 80088da:	b92a      	cbnz	r2, 80088e8 <_realloc_r+0x24>
 80088dc:	f7ff f9ea 	bl	8007cb4 <_free_r>
 80088e0:	4625      	mov	r5, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e8:	f000 f82e 	bl	8008948 <_malloc_usable_size_r>
 80088ec:	4284      	cmp	r4, r0
 80088ee:	4607      	mov	r7, r0
 80088f0:	d802      	bhi.n	80088f8 <_realloc_r+0x34>
 80088f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088f6:	d812      	bhi.n	800891e <_realloc_r+0x5a>
 80088f8:	4621      	mov	r1, r4
 80088fa:	4640      	mov	r0, r8
 80088fc:	f7ff fa46 	bl	8007d8c <_malloc_r>
 8008900:	4605      	mov	r5, r0
 8008902:	2800      	cmp	r0, #0
 8008904:	d0ed      	beq.n	80088e2 <_realloc_r+0x1e>
 8008906:	42bc      	cmp	r4, r7
 8008908:	4622      	mov	r2, r4
 800890a:	4631      	mov	r1, r6
 800890c:	bf28      	it	cs
 800890e:	463a      	movcs	r2, r7
 8008910:	f7ff ffa4 	bl	800885c <memcpy>
 8008914:	4631      	mov	r1, r6
 8008916:	4640      	mov	r0, r8
 8008918:	f7ff f9cc 	bl	8007cb4 <_free_r>
 800891c:	e7e1      	b.n	80088e2 <_realloc_r+0x1e>
 800891e:	4635      	mov	r5, r6
 8008920:	e7df      	b.n	80088e2 <_realloc_r+0x1e>
	...

08008924 <_read_r>:
 8008924:	b538      	push	{r3, r4, r5, lr}
 8008926:	4d07      	ldr	r5, [pc, #28]	; (8008944 <_read_r+0x20>)
 8008928:	4604      	mov	r4, r0
 800892a:	4608      	mov	r0, r1
 800892c:	4611      	mov	r1, r2
 800892e:	2200      	movs	r2, #0
 8008930:	602a      	str	r2, [r5, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	f7f9 fe0e 	bl	8002554 <_read>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_read_r+0x1e>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	b103      	cbz	r3, 8008942 <_read_r+0x1e>
 8008940:	6023      	str	r3, [r4, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	20000948 	.word	0x20000948

08008948 <_malloc_usable_size_r>:
 8008948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894c:	1f18      	subs	r0, r3, #4
 800894e:	2b00      	cmp	r3, #0
 8008950:	bfbc      	itt	lt
 8008952:	580b      	ldrlt	r3, [r1, r0]
 8008954:	18c0      	addlt	r0, r0, r3
 8008956:	4770      	bx	lr

08008958 <_init>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

08008964 <_fini>:
 8008964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008966:	bf00      	nop
 8008968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800896a:	bc08      	pop	{r3}
 800896c:	469e      	mov	lr, r3
 800896e:	4770      	bx	lr
