
06.BUZZER_BT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006924  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006abc  08006abc  00016abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b48  08006b48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b50  08006b50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000880  20000078  08006bd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f8  08006bd0  000208f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b4b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee3  00000000  00000000  00034bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  00037ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  00038d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003716  00000000  00000000  00039f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b3d  00000000  00000000  0003d64e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009848d  00000000  00000000  0005418b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ec618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ac  00000000  00000000  000ec668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006aa4 	.word	0x08006aa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08006aa4 	.word	0x08006aa4

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	4a4e      	ldr	r2, [pc, #312]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 80004e8:	4293      	cmp	r3, r2
 80004ea:	d148      	bne.n	800057e <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 80004ec:	f000 f8a6 	bl	800063c <is_full>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d13e      	bne.n	8000574 <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 80004f6:	4b4b      	ldr	r3, [pc, #300]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	2b0a      	cmp	r3, #10
 8000500:	d002      	beq.n	8000508 <HAL_UART_RxCpltCallback+0x2c>
 8000502:	7bfb      	ldrb	r3, [r7, #15]
 8000504:	2b0d      	cmp	r3, #13
 8000506:	d123      	bne.n	8000550 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 8000508:	4b47      	ldr	r3, [pc, #284]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b47      	ldr	r3, [pc, #284]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800050e:	6819      	ldr	r1, [r3, #0]
 8000510:	4847      	ldr	r0, [pc, #284]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 8000512:	4613      	mov	r3, r2
 8000514:	011b      	lsls	r3, r3, #4
 8000516:	1a9b      	subs	r3, r3, r2
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	4403      	add	r3, r0
 800051c:	440b      	add	r3, r1
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000522:	4b42      	ldr	r3, [pc, #264]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 8000528:	4b3f      	ldr	r3, [pc, #252]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a3e      	ldr	r2, [pc, #248]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000530:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000532:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 8000538:	fb83 1302 	smull	r1, r3, r3, r2
 800053c:	1119      	asrs	r1, r3, #4
 800053e:	17d3      	asrs	r3, r2, #31
 8000540:	1acb      	subs	r3, r1, r3
 8000542:	2132      	movs	r1, #50	; 0x32
 8000544:	fb01 f303 	mul.w	r3, r1, r3
 8000548:	1ad3      	subs	r3, r2, r3
 800054a:	4a37      	ldr	r2, [pc, #220]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 800054c:	6013      	str	r3, [r2, #0]
 800054e:	e011      	b.n	8000574 <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000550:	4b35      	ldr	r3, [pc, #212]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b35      	ldr	r3, [pc, #212]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000556:	6819      	ldr	r1, [r3, #0]
 8000558:	4835      	ldr	r0, [pc, #212]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 800055a:	4613      	mov	r3, r2
 800055c:	011b      	lsls	r3, r3, #4
 800055e:	1a9b      	subs	r3, r3, r2
 8000560:	005b      	lsls	r3, r3, #1
 8000562:	4403      	add	r3, r0
 8000564:	440b      	add	r3, r1
 8000566:	7bfa      	ldrb	r2, [r7, #15]
 8000568:	701a      	strb	r2, [r3, #0]
				rx_index++;
 800056a:	4b30      	ldr	r3, [pc, #192]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	4a2e      	ldr	r2, [pc, #184]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000572:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	492b      	ldr	r1, [pc, #172]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000578:	4829      	ldr	r0, [pc, #164]	; (8000620 <HAL_UART_RxCpltCallback+0x144>)
 800057a:	f004 fdca 	bl	8005112 <HAL_UART_Receive_IT>
	}
///////////////////////////////////////////////////////////////////////////
	if (huart == &huart1)   // BT
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d148      	bne.n	8000618 <HAL_UART_RxCpltCallback+0x13c>
	{
		if(is_full())
 8000586:	f000 f859 	bl	800063c <is_full>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d13e      	bne.n	800060e <HAL_UART_RxCpltCallback+0x132>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	73bb      	strb	r3, [r7, #14]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	2b0a      	cmp	r3, #10
 800059a:	d002      	beq.n	80005a2 <HAL_UART_RxCpltCallback+0xc6>
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	2b0d      	cmp	r3, #13
 80005a0:	d123      	bne.n	80005ea <HAL_UART_RxCpltCallback+0x10e>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	4b21      	ldr	r3, [pc, #132]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005a8:	6819      	ldr	r1, [r3, #0]
 80005aa:	4821      	ldr	r0, [pc, #132]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005ac:	4613      	mov	r3, r2
 80005ae:	011b      	lsls	r3, r3, #4
 80005b0:	1a9b      	subs	r3, r3, r2
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	4403      	add	r3, r0
 80005b6:	440b      	add	r3, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 80005c2:	4b19      	ldr	r3, [pc, #100]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3301      	adds	r3, #1
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ca:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <HAL_UART_RxCpltCallback+0x158>)
 80005d2:	fb83 1302 	smull	r1, r3, r3, r2
 80005d6:	1119      	asrs	r1, r3, #4
 80005d8:	17d3      	asrs	r3, r2, #31
 80005da:	1acb      	subs	r3, r1, r3
 80005dc:	2132      	movs	r1, #50	; 0x32
 80005de:	fb01 f303 	mul.w	r3, r1, r3
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e011      	b.n	800060e <HAL_UART_RxCpltCallback+0x132>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_UART_RxCpltCallback+0x14c>)
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b0f      	ldr	r3, [pc, #60]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 80005f0:	6819      	ldr	r1, [r3, #0]
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <HAL_UART_RxCpltCallback+0x154>)
 80005f4:	4613      	mov	r3, r2
 80005f6:	011b      	lsls	r3, r3, #4
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4403      	add	r3, r0
 80005fe:	440b      	add	r3, r1
 8000600:	7bba      	ldrb	r2, [r7, #14]
 8000602:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3301      	adds	r3, #1
 800060a:	4a08      	ldr	r2, [pc, #32]	; (800062c <HAL_UART_RxCpltCallback+0x150>)
 800060c:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	4904      	ldr	r1, [pc, #16]	; (8000624 <HAL_UART_RxCpltCallback+0x148>)
 8000612:	4809      	ldr	r0, [pc, #36]	; (8000638 <HAL_UART_RxCpltCallback+0x15c>)
 8000614:	f004 fd7d 	bl	8005112 <HAL_UART_Receive_IT>
	}
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	2000085c 	.word	0x2000085c
 8000624:	20000678 	.word	0x20000678
 8000628:	20000094 	.word	0x20000094
 800062c:	2000067c 	.word	0x2000067c
 8000630:	2000009c 	.word	0x2000009c
 8000634:	51eb851f 	.word	0x51eb851f
 8000638:	20000818 	.word	0x20000818

0800063c <is_full>:
	else
		return 0;
}

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <is_full+0x40>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a0d      	ldr	r2, [pc, #52]	; (8000680 <is_full+0x44>)
 800064a:	fb82 1203 	smull	r1, r2, r2, r3
 800064e:	1111      	asrs	r1, r2, #4
 8000650:	17da      	asrs	r2, r3, #31
 8000652:	1a8a      	subs	r2, r1, r2
 8000654:	2132      	movs	r1, #50	; 0x32
 8000656:	fb01 f202 	mul.w	r2, r1, r2
 800065a:	1a9b      	subs	r3, r3, r2
 800065c:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <is_full+0x48>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	687a      	ldr	r2, [r7, #4]
 8000664:	429a      	cmp	r2, r3
 8000666:	d101      	bne.n	800066c <is_full+0x30>
		return 1;
 8000668:	2301      	movs	r3, #1
 800066a:	e000      	b.n	800066e <is_full+0x32>
	else
		return 0;
 800066c:	2300      	movs	r3, #0
}
 800066e:	4618      	mov	r0, r3
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000094 	.word	0x20000094
 8000680:	51eb851f 	.word	0x51eb851f
 8000684:	20000098 	.word	0x20000098

08000688 <get_button>:
uint8_t prev_button3_state=BUTTON_RELEASE;
uint8_t prev_button4_state=BUTTON_RELEASE;

// 1. GPIO 2. GPIO PIN 3. 이전의 버튼
int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *prev_button_state)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	460b      	mov	r3, r1
 8000692:	607a      	str	r2, [r7, #4]
 8000694:	817b      	strh	r3, [r7, #10]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000696:	897b      	ldrh	r3, [r7, #10]
 8000698:	4619      	mov	r1, r3
 800069a:	68f8      	ldr	r0, [r7, #12]
 800069c:	f001 fef0 	bl	8002480 <HAL_GPIO_ReadPin>
 80006a0:	4603      	mov	r3, r0
 80006a2:	75fb      	strb	r3, [r7, #23]

	if ((current_state == BUTTON_PRESS) && (*prev_button_state == BUTTON_RELEASE))  // 처음 누른상태
 80006a4:	7dfb      	ldrb	r3, [r7, #23]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10b      	bne.n	80006c2 <get_button+0x3a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d107      	bne.n	80006c2 <get_button+0x3a>
	{
		*prev_button_state = current_state;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	7dfa      	ldrb	r2, [r7, #23]
 80006b6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(30);   // noise가 지나가기를 기다린다.
 80006b8:	201e      	movs	r0, #30
 80006ba:	f001 fb95 	bl	8001de8 <HAL_Delay>
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 80006be:	2301      	movs	r3, #1
 80006c0:	e00c      	b.n	80006dc <get_button+0x54>
	}
	else if ((current_state == BUTTON_RELEASE) && (*prev_button_state == BUTTON_PRESS))
 80006c2:	7dfb      	ldrb	r3, [r7, #23]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d108      	bne.n	80006da <get_button+0x52>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d104      	bne.n	80006da <get_button+0x52>
	{
		*prev_button_state = current_state;   // 릴리즈 상태
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7dfa      	ldrb	r2, [r7, #23]
 80006d4:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 80006d6:	2300      	movs	r3, #0
 80006d8:	e000      	b.n	80006dc <get_button+0x54>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 80006da:	2301      	movs	r3, #1
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <led_re_shift>:
void led_all_off()
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
}
void led_re_shift()
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(GPIOB, 0x80 >> led_shift, GPIO_PIN_SET);
 80006e8:	4b12      	ldr	r3, [pc, #72]	; (8000734 <led_re_shift+0x50>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2280      	movs	r2, #128	; 0x80
 80006ee:	fa42 f303 	asr.w	r3, r2, r3
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	2201      	movs	r2, #1
 80006f6:	4619      	mov	r1, r3
 80006f8:	480f      	ldr	r0, [pc, #60]	; (8000738 <led_re_shift+0x54>)
 80006fa:	f001 fed9 	bl	80024b0 <HAL_GPIO_WritePin>
		if(led_timer == 500)
 80006fe:	4b0f      	ldr	r3, [pc, #60]	; (800073c <led_re_shift+0x58>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000706:	d113      	bne.n	8000730 <led_re_shift+0x4c>
		{
			led_timer = 0;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <led_re_shift+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
			led_shift++;
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <led_re_shift+0x50>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	3301      	adds	r3, #1
 8000714:	4a07      	ldr	r2, [pc, #28]	; (8000734 <led_re_shift+0x50>)
 8000716:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOB, 0xff , GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	21ff      	movs	r1, #255	; 0xff
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <led_re_shift+0x54>)
 800071e:	f001 fec7 	bl	80024b0 <HAL_GPIO_WritePin>
			if(led_shift > 8)
 8000722:	4b04      	ldr	r3, [pc, #16]	; (8000734 <led_re_shift+0x50>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b08      	cmp	r3, #8
 8000728:	dd02      	ble.n	8000730 <led_re_shift+0x4c>
			{
				led_shift = 0;
 800072a:	4b02      	ldr	r3, [pc, #8]	; (8000734 <led_re_shift+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
			}
		}



}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000680 	.word	0x20000680
 8000738:	40020400 	.word	0x40020400
 800073c:	200008a8 	.word	0x200008a8

08000740 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000748:	1d39      	adds	r1, r7, #4
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	2201      	movs	r2, #1
 8000750:	4803      	ldr	r0, [pc, #12]	; (8000760 <__io_putchar+0x20>)
 8000752:	f004 fc4c 	bl	8004fee <HAL_UART_Transmit>

  return ch;
 8000756:	687b      	ldr	r3, [r7, #4]
}
 8000758:	4618      	mov	r0, r3
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	2000085c 	.word	0x2000085c

08000764 <HAL_SYSTICK_Callback>:
volatile int led_timer = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
	t1ms_count++;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_SYSTICK_Callback+0x2c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	4a08      	ldr	r2, [pc, #32]	; (8000790 <HAL_SYSTICK_Callback+0x2c>)
 8000770:	6013      	str	r3, [r2, #0]
	t2ms_count ++;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_SYSTICK_Callback+0x30>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	3301      	adds	r3, #1
 8000778:	4a06      	ldr	r2, [pc, #24]	; (8000794 <HAL_SYSTICK_Callback+0x30>)
 800077a:	6013      	str	r3, [r2, #0]
	led_timer++;
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_SYSTICK_Callback+0x34>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	3301      	adds	r3, #1
 8000782:	4a05      	ldr	r2, [pc, #20]	; (8000798 <HAL_SYSTICK_Callback+0x34>)
 8000784:	6013      	str	r3, [r2, #0]
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	200008a0 	.word	0x200008a0
 8000794:	200008a4 	.word	0x200008a4
 8000798:	200008a8 	.word	0x200008a8

0800079c <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM11_10ms_counter=0;
volatile int TIM11_10ms_ultrasonic_counter = 0;
volatile int TIM11_10ms_servomotor_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d10e      	bne.n	80007cc <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM11_10ms_counter++;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	3301      	adds	r3, #1
 80007b4:	4a09      	ldr	r2, [pc, #36]	; (80007dc <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007b6:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	3301      	adds	r3, #1
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007c0:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80007ca:	6013      	str	r3, [r2, #0]
	}
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr
 80007d8:	40014800 	.word	0x40014800
 80007dc:	200008ac 	.word	0x200008ac
 80007e0:	200008b0 	.word	0x200008b0
 80007e4:	200008b4 	.word	0x200008b4

080007e8 <HAL_GPIO_EXTI_Callback>:
// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every GPIO_EXTI_Callback function : enter here every 10ms
volatile int exint_signal = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80007f2:	88fb      	ldrh	r3, [r7, #6]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d002      	beq.n	80007fe <HAL_GPIO_EXTI_Callback+0x16>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	d00f      	beq.n	800081c <HAL_GPIO_EXTI_Callback+0x34>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

  		exint_signal = 1;
  	  break;
  }
}
 80007fc:	e01d      	b.n	800083a <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_0, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000804:	480f      	ldr	r0, [pc, #60]	; (8000844 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000806:	f001 fe53 	bl	80024b0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2101      	movs	r1, #1
 800080e:	480d      	ldr	r0, [pc, #52]	; (8000844 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000810:	f001 fe4e 	bl	80024b0 <HAL_GPIO_WritePin>
  		exint_signal = 0;
 8000814:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_GPIO_EXTI_Callback+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
  	  break;
 800081a:	e00e      	b.n	800083a <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_1, GPIO_PIN_RESET);
 800081c:	2200      	movs	r2, #0
 800081e:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8000822:	4808      	ldr	r0, [pc, #32]	; (8000844 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000824:	f001 fe44 	bl	80024b0 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2102      	movs	r1, #2
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <HAL_GPIO_EXTI_Callback+0x5c>)
 800082e:	f001 fe3f 	bl	80024b0 <HAL_GPIO_WritePin>
  		exint_signal = 1;
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_GPIO_EXTI_Callback+0x60>)
 8000834:	2201      	movs	r2, #1
 8000836:	601a      	str	r2, [r3, #0]
  	  break;
 8000838:	bf00      	nop
}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40020400 	.word	0x40020400
 8000848:	20000004 	.word	0x20000004

0800084c <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 8000854:	4b08      	ldr	r3, [pc, #32]	; (8000878 <delay_us+0x2c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 800085c:	bf00      	nop
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <delay_us+0x2c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	429a      	cmp	r2, r3
 8000868:	d8f9      	bhi.n	800085e <delay_us+0x12>
	;
}
 800086a:	bf00      	nop
 800086c:	bf00      	nop
 800086e:	370c      	adds	r7, #12
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	200006f8 	.word	0x200006f8

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000880:	f001 fa40 	bl	8001d04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000884:	f000 f844 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000888:	f000 fafe 	bl	8000e88 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088c:	f000 fad2 	bl	8000e34 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000890:	f000 fa82 	bl	8000d98 <MX_TIM11_Init>
  MX_TIM1_Init();
 8000894:	f000 f93c 	bl	8000b10 <MX_TIM1_Init>
  MX_RTC_Init();
 8000898:	f000 f8e0 	bl	8000a5c <MX_RTC_Init>
  MX_I2C1_Init();
 800089c:	f000 f8b0 	bl	8000a00 <MX_I2C1_Init>
  MX_TIM2_Init();
 80008a0:	f000 f9aa 	bl	8000bf8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008a4:	f000 fa1e 	bl	8000ce4 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80008a8:	f000 fa9a 	bl	8000de0 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80008ac:	f000 f89c 	bl	80009e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 80008b0:	480f      	ldr	r0, [pc, #60]	; (80008f0 <main+0x74>)
 80008b2:	f002 ff7f 	bl	80037b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 80008b6:	2100      	movs	r1, #0
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <main+0x78>)
 80008ba:	f003 fa35 	bl	8003d28 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 80008be:	2201      	movs	r2, #1
 80008c0:	490d      	ldr	r1, [pc, #52]	; (80008f8 <main+0x7c>)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <main+0x80>)
 80008c4:	f004 fc25 	bl	8005112 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);	// BT UART Enable rx_interrupt
 80008c8:	2201      	movs	r2, #1
 80008ca:	490b      	ldr	r1, [pc, #44]	; (80008f8 <main+0x7c>)
 80008cc:	480c      	ldr	r0, [pc, #48]	; (8000900 <main+0x84>)
 80008ce:	f004 fc20 	bl	8005112 <HAL_UART_Receive_IT>
  // PC, BT
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PWM Control for Servo motor
 80008d2:	2108      	movs	r1, #8
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <main+0x88>)
 80008d6:	f003 f8cf 	bl	8003a78 <HAL_TIM_PWM_Start_IT>
  // TIM3 CH1 : PIEZO BUZZER
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80008da:	2100      	movs	r1, #0
 80008dc:	480a      	ldr	r0, [pc, #40]	; (8000908 <main+0x8c>)
 80008de:	f003 f81b 	bl	8003918 <HAL_TIM_PWM_Start>
  //  i2c_lcd_init();
  printf("Hello STM32!!!\n");
 80008e2:	480a      	ldr	r0, [pc, #40]	; (800090c <main+0x90>)
 80008e4:	f005 fc4e 	bl	8006184 <puts>

    /* USER CODE BEGIN 3 */
	 // pc_command_processing();
	 // ultrasonic_processing();
	  //get_rtc_time();
	  flow_button_move();
 80008e8:	f000 fcc0 	bl	800126c <flow_button_move>
  {
 80008ec:	e7fc      	b.n	80008e8 <main+0x6c>
 80008ee:	bf00      	nop
 80008f0:	200007d0 	.word	0x200007d0
 80008f4:	200006f8 	.word	0x200006f8
 80008f8:	20000678 	.word	0x20000678
 80008fc:	2000085c 	.word	0x2000085c
 8000900:	20000818 	.word	0x20000818
 8000904:	20000740 	.word	0x20000740
 8000908:	20000788 	.word	0x20000788
 800090c:	08006abc 	.word	0x08006abc

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f005 fbba 	bl	8006098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <SystemClock_Config+0xd0>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a28      	ldr	r2, [pc, #160]	; (80009e0 <SystemClock_Config+0xd0>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <SystemClock_Config+0xd0>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <SystemClock_Config+0xd4>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <SystemClock_Config+0xd4>)
 800095a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <SystemClock_Config+0xd4>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800096c:	230a      	movs	r3, #10
 800096e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000974:	2310      	movs	r3, #16
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000978:	2301      	movs	r3, #1
 800097a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000984:	2310      	movs	r3, #16
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000988:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800098c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800098e:	2304      	movs	r3, #4
 8000990:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000992:	2304      	movs	r3, #4
 8000994:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000996:	f107 0320 	add.w	r3, r7, #32
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fefe 	bl	800279c <HAL_RCC_OscConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009a6:	f000 fb0f 	bl	8000fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009aa:	230f      	movs	r3, #15
 80009ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ae:	2302      	movs	r3, #2
 80009b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c0:	f107 030c 	add.w	r3, r7, #12
 80009c4:	2102      	movs	r1, #2
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 f960 	bl	8002c8c <HAL_RCC_ClockConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009d2:	f000 faf9 	bl	8000fc8 <Error_Handler>
  }
}
 80009d6:	bf00      	nop
 80009d8:	3750      	adds	r7, #80	; 0x50
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40007000 	.word	0x40007000

080009e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	201a      	movs	r0, #26
 80009f2:	f001 faf8 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80009f6:	201a      	movs	r0, #26
 80009f8:	f001 fb11 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}

08000a00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a06:	4a13      	ldr	r2, [pc, #76]	; (8000a54 <MX_I2C1_Init+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a0c:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_I2C1_Init+0x58>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_I2C1_Init+0x50>)
 8000a3e:	f001 fd69 	bl	8002514 <HAL_I2C_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 fabe 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000684 	.word	0x20000684
 8000a54:	40005400 	.word	0x40005400
 8000a58:	000186a0 	.word	0x000186a0

08000a5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a70:	2300      	movs	r3, #0
 8000a72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a76:	4a25      	ldr	r2, [pc, #148]	; (8000b0c <MX_RTC_Init+0xb0>)
 8000a78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a82:	227f      	movs	r2, #127	; 0x7f
 8000a84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a88:	22ff      	movs	r2, #255	; 0xff
 8000a8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_RTC_Init+0xac>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a9e:	481a      	ldr	r0, [pc, #104]	; (8000b08 <MX_RTC_Init+0xac>)
 8000aa0:	f002 fc04 	bl	80032ac <HAL_RTC_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f000 fa8d 	bl	8000fc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8000aae:	2311      	movs	r3, #17
 8000ab0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000ab2:	2310      	movs	r3, #16
 8000ab4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480f      	ldr	r0, [pc, #60]	; (8000b08 <MX_RTC_Init+0xac>)
 8000aca:	f002 fc65 	bl	8003398 <HAL_RTC_SetTime>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000ad4:	f000 fa78 	bl	8000fc8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000adc:	2308      	movs	r3, #8
 8000ade:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8000ae0:	2330      	movs	r3, #48	; 0x30
 8000ae2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000ae4:	2322      	movs	r3, #34	; 0x22
 8000ae6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2201      	movs	r2, #1
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_RTC_Init+0xac>)
 8000af0:	f002 fcec 	bl	80034cc <HAL_RTC_SetDate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000afa:	f000 fa65 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200006d8 	.word	0x200006d8
 8000b0c:	40002800 	.word	0x40002800

08000b10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0318 	add.w	r3, r7, #24
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b2e:	463b      	mov	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3a:	4b2d      	ldr	r3, [pc, #180]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b3c:	4a2d      	ldr	r2, [pc, #180]	; (8000bf4 <MX_TIM1_Init+0xe4>)
 8000b3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000b40:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b42:	2253      	movs	r2, #83	; 0x53
 8000b44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b46:	4b2a      	ldr	r3, [pc, #168]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b54:	4b26      	ldr	r3, [pc, #152]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b5a:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b66:	4822      	ldr	r0, [pc, #136]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b68:	f002 fdd5 	bl	8003716 <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000b72:	f000 fa29 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b7a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0318 	add.w	r3, r7, #24
 8000b80:	4619      	mov	r1, r3
 8000b82:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b84:	f003 fc50 	bl	8004428 <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000b8e:	f000 fa1b 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000b94:	f003 f86e 	bl	8003c74 <HAL_TIM_IC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b9e:	f000 fa13 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480f      	ldr	r0, [pc, #60]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000bb2:	f004 f94d 	bl	8004e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000bbc:	f000 fa04 	bl	8000fc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000bc0:	230a      	movs	r3, #10
 8000bc2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4806      	ldr	r0, [pc, #24]	; (8000bf0 <MX_TIM1_Init+0xe0>)
 8000bd8:	f003 fac8 	bl	800416c <HAL_TIM_IC_ConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000be2:	f000 f9f1 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200006f8 	.word	0x200006f8
 8000bf4:	40010000 	.word	0x40010000

08000bf8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c0c:	f107 0320 	add.w	r3, r7, #32
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]
 8000c26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c28:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8000c30:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c32:	f240 628f 	movw	r2, #1679	; 0x68f
 8000c36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c38:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b24      	ldr	r3, [pc, #144]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c52:	4823      	ldr	r0, [pc, #140]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c54:	f002 fd5f 	bl	8003716 <HAL_TIM_Base_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c5e:	f000 f9b3 	bl	8000fc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	481c      	ldr	r0, [pc, #112]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c70:	f003 fbda 	bl	8004428 <HAL_TIM_ConfigClockSource>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c7a:	f000 f9a5 	bl	8000fc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c80:	f002 fdfa 	bl	8003878 <HAL_TIM_PWM_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c8a:	f000 f99d 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000c9e:	f004 f8d7 	bl	8004e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ca8:	f000 f98e 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cac:	2360      	movs	r3, #96	; 0x60
 8000cae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2208      	movs	r2, #8
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000cc4:	f003 faee 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000cce:	f000 f97b 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cd2:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM2_Init+0xe8>)
 8000cd4:	f000 fd88 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000740 	.word	0x20000740

08000ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08a      	sub	sp, #40	; 0x28
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d06:	4b22      	ldr	r3, [pc, #136]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d08:	4a22      	ldr	r2, [pc, #136]	; (8000d94 <MX_TIM3_Init+0xb0>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 52.5-1;
 8000d0c:	4b20      	ldr	r3, [pc, #128]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d0e:	2233      	movs	r2, #51	; 0x33
 8000d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400-1;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d1a:	f240 128f 	movw	r2, #399	; 0x18f
 8000d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d2c:	4818      	ldr	r0, [pc, #96]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d2e:	f002 fda3 	bl	8003878 <HAL_TIM_PWM_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d38:	f000 f946 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d44:	f107 0320 	add.w	r3, r7, #32
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d4c:	f004 f880 	bl	8004e50 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d56:	f000 f937 	bl	8000fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5a:	2360      	movs	r3, #96	; 0x60
 8000d5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 200-1;
 8000d5e:	23c7      	movs	r3, #199	; 0xc7
 8000d60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4807      	ldr	r0, [pc, #28]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d72:	f003 fa97 	bl	80042a4 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d7c:	f000 f924 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <MX_TIM3_Init+0xac>)
 8000d82:	f000 fd31 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000788 	.word	0x20000788
 8000d94:	40000400 	.word	0x40000400

08000d98 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d9c:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <MX_TIM11_Init+0x44>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8000da2:	4b0d      	ldr	r3, [pc, #52]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000da4:	2253      	movs	r2, #83	; 0x53
 8000da6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000db0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000db4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_TIM11_Init+0x40>)
 8000dc4:	f002 fca7 	bl	8003716 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000dce:	f000 f8fb 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200007d0 	.word	0x200007d0
 8000ddc:	40014800 	.word	0x40014800

08000de0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de4:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <MX_USART1_UART_Init+0x50>)
 8000de8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000dea:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000df0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART1_UART_Init+0x4c>)
 8000e18:	f004 f89c 	bl	8004f54 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e22:	f000 f8d1 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000818 	.word	0x20000818
 8000e30:	40011000 	.word	0x40011000

08000e34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <MX_USART2_UART_Init+0x50>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e40:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART2_UART_Init+0x4c>)
 8000e6c:	f004 f872 	bl	8004f54 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e76:	f000 f8a7 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000085c 	.word	0x2000085c
 8000e84:	40004400 	.word	0x40004400

08000e88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]
 8000e98:	609a      	str	r2, [r3, #8]
 8000e9a:	60da      	str	r2, [r3, #12]
 8000e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a44      	ldr	r2, [pc, #272]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b42      	ldr	r3, [pc, #264]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	4b3e      	ldr	r3, [pc, #248]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a3d      	ldr	r2, [pc, #244]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	4b37      	ldr	r3, [pc, #220]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a36      	ldr	r2, [pc, #216]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b34      	ldr	r3, [pc, #208]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a2f      	ldr	r2, [pc, #188]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000efc:	f043 0302 	orr.w	r3, r3, #2
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_GPIO_Init+0x130>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ULTRASONIC_TRIG_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000f14:	4829      	ldr	r0, [pc, #164]	; (8000fbc <MX_GPIO_Init+0x134>)
 8000f16:	f001 facb 	bl	80024b0 <HAL_GPIO_WritePin>
                          |INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	21ff      	movs	r1, #255	; 0xff
 8000f1e:	4828      	ldr	r0, [pc, #160]	; (8000fc0 <MX_GPIO_Init+0x138>)
 8000f20:	f001 fac6 	bl	80024b0 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8000f24:	230f      	movs	r3, #15
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	4821      	ldr	r0, [pc, #132]	; (8000fbc <MX_GPIO_Init+0x134>)
 8000f38:	f001 f91e 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	4619      	mov	r1, r3
 8000f50:	481c      	ldr	r0, [pc, #112]	; (8000fc4 <MX_GPIO_Init+0x13c>)
 8000f52:	f001 f911 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIG_Pin INT1_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8000f56:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f5a:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_GPIO_Init+0x134>)
 8000f70:	f001 f902 	bl	8002178 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8000f74:	23ff      	movs	r3, #255	; 0xff
 8000f76:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <MX_GPIO_Init+0x138>)
 8000f8c:	f001 f8f4 	bl	8002178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2100      	movs	r1, #0
 8000f94:	2006      	movs	r0, #6
 8000f96:	f001 f826 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f9a:	2006      	movs	r0, #6
 8000f9c:	f001 f83f 	bl	800201e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2007      	movs	r0, #7
 8000fa6:	f001 f81e 	bl	8001fe6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f001 f837 	bl	800201e <HAL_NVIC_EnableIRQ>

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020800 	.word	0x40020800
 8000fc0:	40020400 	.word	0x40020400
 8000fc4:	40020000 	.word	0x40020000

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>

08000fd2 <set_rpm>:

extern volatile int exint_signal;


void set_rpm(int rpm)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
	delay_us(60000000/ STEPS_PER_REV/rpm);
 8000fda:	f643 1238 	movw	r2, #14648	; 0x3938
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fc31 	bl	800084c <delay_us>
	// 최대 speed 기준 (13) ==> _delay_us(1126)
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <stepmotor_driver2>:


void stepmotor_driver2(int direction, int step_limit)	// direction ==> Forward or Backward
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]



			switch(temp)
 8000ffe:	4b97      	ldr	r3, [pc, #604]	; (800125c <stepmotor_driver2+0x268>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b07      	cmp	r3, #7
 8001004:	f200 80cc 	bhi.w	80011a0 <stepmotor_driver2+0x1ac>
 8001008:	a201      	add	r2, pc, #4	; (adr r2, 8001010 <stepmotor_driver2+0x1c>)
 800100a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100e:	bf00      	nop
 8001010:	08001031 	.word	0x08001031
 8001014:	0800105f 	.word	0x0800105f
 8001018:	0800108d 	.word	0x0800108d
 800101c:	080010bb 	.word	0x080010bb
 8001020:	080010e9 	.word	0x080010e9
 8001024:	08001117 	.word	0x08001117
 8001028:	08001145 	.word	0x08001145
 800102c:	08001173 	.word	0x08001173
			{
				case 0:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2140      	movs	r1, #64	; 0x40
 8001034:	488a      	ldr	r0, [pc, #552]	; (8001260 <stepmotor_driver2+0x26c>)
 8001036:	f001 fa3b 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	4888      	ldr	r0, [pc, #544]	; (8001260 <stepmotor_driver2+0x26c>)
 8001040:	f001 fa36 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 7180 	mov.w	r1, #256	; 0x100
 800104a:	4885      	ldr	r0, [pc, #532]	; (8001260 <stepmotor_driver2+0x26c>)
 800104c:	f001 fa30 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001056:	4882      	ldr	r0, [pc, #520]	; (8001260 <stepmotor_driver2+0x26c>)
 8001058:	f001 fa2a 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 800105c:	e0a0      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 1:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2140      	movs	r1, #64	; 0x40
 8001062:	487f      	ldr	r0, [pc, #508]	; (8001260 <stepmotor_driver2+0x26c>)
 8001064:	f001 fa24 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2180      	movs	r1, #128	; 0x80
 800106c:	487c      	ldr	r0, [pc, #496]	; (8001260 <stepmotor_driver2+0x26c>)
 800106e:	f001 fa1f 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001078:	4879      	ldr	r0, [pc, #484]	; (8001260 <stepmotor_driver2+0x26c>)
 800107a:	f001 fa19 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001084:	4876      	ldr	r0, [pc, #472]	; (8001260 <stepmotor_driver2+0x26c>)
 8001086:	f001 fa13 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 800108a:	e089      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 2:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2140      	movs	r1, #64	; 0x40
 8001090:	4873      	ldr	r0, [pc, #460]	; (8001260 <stepmotor_driver2+0x26c>)
 8001092:	f001 fa0d 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001096:	2201      	movs	r2, #1
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	4871      	ldr	r0, [pc, #452]	; (8001260 <stepmotor_driver2+0x26c>)
 800109c:	f001 fa08 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a6:	486e      	ldr	r0, [pc, #440]	; (8001260 <stepmotor_driver2+0x26c>)
 80010a8:	f001 fa02 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010b2:	486b      	ldr	r0, [pc, #428]	; (8001260 <stepmotor_driver2+0x26c>)
 80010b4:	f001 f9fc 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 80010b8:	e072      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 3:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2140      	movs	r1, #64	; 0x40
 80010be:	4868      	ldr	r0, [pc, #416]	; (8001260 <stepmotor_driver2+0x26c>)
 80010c0:	f001 f9f6 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	2180      	movs	r1, #128	; 0x80
 80010c8:	4865      	ldr	r0, [pc, #404]	; (8001260 <stepmotor_driver2+0x26c>)
 80010ca:	f001 f9f1 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d4:	4862      	ldr	r0, [pc, #392]	; (8001260 <stepmotor_driver2+0x26c>)
 80010d6:	f001 f9eb 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e0:	485f      	ldr	r0, [pc, #380]	; (8001260 <stepmotor_driver2+0x26c>)
 80010e2:	f001 f9e5 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 80010e6:	e05b      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 4:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2140      	movs	r1, #64	; 0x40
 80010ec:	485c      	ldr	r0, [pc, #368]	; (8001260 <stepmotor_driver2+0x26c>)
 80010ee:	f001 f9df 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	485a      	ldr	r0, [pc, #360]	; (8001260 <stepmotor_driver2+0x26c>)
 80010f8:	f001 f9da 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001102:	4857      	ldr	r0, [pc, #348]	; (8001260 <stepmotor_driver2+0x26c>)
 8001104:	f001 f9d4 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110e:	4854      	ldr	r0, [pc, #336]	; (8001260 <stepmotor_driver2+0x26c>)
 8001110:	f001 f9ce 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 8001114:	e044      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 5:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	4851      	ldr	r0, [pc, #324]	; (8001260 <stepmotor_driver2+0x26c>)
 800111c:	f001 f9c8 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	484e      	ldr	r0, [pc, #312]	; (8001260 <stepmotor_driver2+0x26c>)
 8001126:	f001 f9c3 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800112a:	2201      	movs	r2, #1
 800112c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001130:	484b      	ldr	r0, [pc, #300]	; (8001260 <stepmotor_driver2+0x26c>)
 8001132:	f001 f9bd 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <stepmotor_driver2+0x26c>)
 800113e:	f001 f9b7 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 8001142:	e02d      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 6:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001144:	2200      	movs	r2, #0
 8001146:	2140      	movs	r1, #64	; 0x40
 8001148:	4845      	ldr	r0, [pc, #276]	; (8001260 <stepmotor_driver2+0x26c>)
 800114a:	f001 f9b1 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	4843      	ldr	r0, [pc, #268]	; (8001260 <stepmotor_driver2+0x26c>)
 8001154:	f001 f9ac 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115e:	4840      	ldr	r0, [pc, #256]	; (8001260 <stepmotor_driver2+0x26c>)
 8001160:	f001 f9a6 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 7100 	mov.w	r1, #512	; 0x200
 800116a:	483d      	ldr	r0, [pc, #244]	; (8001260 <stepmotor_driver2+0x26c>)
 800116c:	f001 f9a0 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 8001170:	e016      	b.n	80011a0 <stepmotor_driver2+0x1ac>

				case 7:
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001172:	2201      	movs	r2, #1
 8001174:	2140      	movs	r1, #64	; 0x40
 8001176:	483a      	ldr	r0, [pc, #232]	; (8001260 <stepmotor_driver2+0x26c>)
 8001178:	f001 f99a 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2180      	movs	r1, #128	; 0x80
 8001180:	4837      	ldr	r0, [pc, #220]	; (8001260 <stepmotor_driver2+0x26c>)
 8001182:	f001 f995 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	f44f 7180 	mov.w	r1, #256	; 0x100
 800118c:	4834      	ldr	r0, [pc, #208]	; (8001260 <stepmotor_driver2+0x26c>)
 800118e:	f001 f98f 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001198:	4831      	ldr	r0, [pc, #196]	; (8001260 <stepmotor_driver2+0x26c>)
 800119a:	f001 f989 	bl	80024b0 <HAL_GPIO_WritePin>
				break;
 800119e:	bf00      	nop
			}
			if(direction == FORWARD)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d123      	bne.n	80011ee <stepmotor_driver2+0x1fa>
			{
				if(temp_count <= step_limit)
 80011a6:	4b2f      	ldr	r3, [pc, #188]	; (8001264 <stepmotor_driver2+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	db15      	blt.n	80011dc <stepmotor_driver2+0x1e8>
				{
					temp++;
 80011b0:	4b2a      	ldr	r3, [pc, #168]	; (800125c <stepmotor_driver2+0x268>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3301      	adds	r3, #1
 80011b6:	4a29      	ldr	r2, [pc, #164]	; (800125c <stepmotor_driver2+0x268>)
 80011b8:	6013      	str	r3, [r2, #0]
					temp_count++;
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <stepmotor_driver2+0x270>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	4a28      	ldr	r2, [pc, #160]	; (8001264 <stepmotor_driver2+0x270>)
 80011c2:	6013      	str	r3, [r2, #0]
					temp %= 8;
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <stepmotor_driver2+0x268>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	425a      	negs	r2, r3
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	f002 0207 	and.w	r2, r2, #7
 80011d2:	bf58      	it	pl
 80011d4:	4253      	negpl	r3, r2
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <stepmotor_driver2+0x268>)
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	e008      	b.n	80011ee <stepmotor_driver2+0x1fa>
				}
				else
				{
					temp = 0;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <stepmotor_driver2+0x268>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
					temp_count = 0;
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <stepmotor_driver2+0x270>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
					elevator_mode_state = 0;
 80011e8:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <stepmotor_driver2+0x274>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
				}
			}

			if(direction == BACKWARD)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d12e      	bne.n	8001252 <stepmotor_driver2+0x25e>
			{

				if(temp_count <= step_limit)
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <stepmotor_driver2+0x270>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	db20      	blt.n	8001240 <stepmotor_driver2+0x24c>
				{
					temp_count++;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <stepmotor_driver2+0x270>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	4a17      	ldr	r2, [pc, #92]	; (8001264 <stepmotor_driver2+0x270>)
 8001206:	6013      	str	r3, [r2, #0]

					if(temp >= 0)
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <stepmotor_driver2+0x268>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0f      	blt.n	8001230 <stepmotor_driver2+0x23c>
					{
						temp--;
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <stepmotor_driver2+0x268>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3b01      	subs	r3, #1
 8001216:	4a11      	ldr	r2, [pc, #68]	; (800125c <stepmotor_driver2+0x268>)
 8001218:	6013      	str	r3, [r2, #0]
						temp %= 8;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <stepmotor_driver2+0x268>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	425a      	negs	r2, r3
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	f002 0207 	and.w	r2, r2, #7
 8001228:	bf58      	it	pl
 800122a:	4253      	negpl	r3, r2
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <stepmotor_driver2+0x268>)
 800122e:	6013      	str	r3, [r2, #0]
					}

					if(temp < 0)
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <stepmotor_driver2+0x268>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	da0c      	bge.n	8001252 <stepmotor_driver2+0x25e>
					{
						temp = 7;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <stepmotor_driver2+0x268>)
 800123a:	2207      	movs	r2, #7
 800123c:	601a      	str	r2, [r3, #0]
				}


			}

}
 800123e:	e008      	b.n	8001252 <stepmotor_driver2+0x25e>
					temp = 0;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <stepmotor_driver2+0x268>)
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
					temp_count = 0;
 8001246:	4b07      	ldr	r3, [pc, #28]	; (8001264 <stepmotor_driver2+0x270>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
					elevator_mode_state = 0;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <stepmotor_driver2+0x274>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200008cc 	.word	0x200008cc
 8001260:	40020800 	.word	0x40020800
 8001264:	200008d0 	.word	0x200008d0
 8001268:	200008bc 	.word	0x200008bc

0800126c <flow_button_move>:

	}
}

void flow_button_move()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

	switch(elevator_mode_state)
 8001270:	4b99      	ldr	r3, [pc, #612]	; (80014d8 <flow_button_move+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b03      	cmp	r3, #3
 8001276:	f200 8156 	bhi.w	8001526 <flow_button_move+0x2ba>
 800127a:	a201      	add	r2, pc, #4	; (adr r2, 8001280 <flow_button_move+0x14>)
 800127c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001280:	08001291 	.word	0x08001291
 8001284:	0800147b 	.word	0x0800147b
 8001288:	080014a9 	.word	0x080014a9
 800128c:	08001501 	.word	0x08001501
		{
			case 0:
				if(pre_elevator_state == 1)
 8001290:	4b92      	ldr	r3, [pc, #584]	; (80014dc <flow_button_move+0x270>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10a      	bne.n	80012ae <flow_button_move+0x42>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	21ff      	movs	r1, #255	; 0xff
 800129c:	4890      	ldr	r0, [pc, #576]	; (80014e0 <flow_button_move+0x274>)
 800129e:	f001 f907 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x01, GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2101      	movs	r1, #1
 80012a6:	488e      	ldr	r0, [pc, #568]	; (80014e0 <flow_button_move+0x274>)
 80012a8:	f001 f902 	bl	80024b0 <HAL_GPIO_WritePin>
 80012ac:	e02b      	b.n	8001306 <flow_button_move+0x9a>
				}
				else if(pre_elevator_state == 2)
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <flow_button_move+0x270>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d10a      	bne.n	80012cc <flow_button_move+0x60>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	21ff      	movs	r1, #255	; 0xff
 80012ba:	4889      	ldr	r0, [pc, #548]	; (80014e0 <flow_button_move+0x274>)
 80012bc:	f001 f8f8 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x03, GPIO_PIN_SET);
 80012c0:	2201      	movs	r2, #1
 80012c2:	2103      	movs	r1, #3
 80012c4:	4886      	ldr	r0, [pc, #536]	; (80014e0 <flow_button_move+0x274>)
 80012c6:	f001 f8f3 	bl	80024b0 <HAL_GPIO_WritePin>
 80012ca:	e01c      	b.n	8001306 <flow_button_move+0x9a>
				}
				else if(pre_elevator_state == 3)
 80012cc:	4b83      	ldr	r3, [pc, #524]	; (80014dc <flow_button_move+0x270>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b03      	cmp	r3, #3
 80012d2:	d10a      	bne.n	80012ea <flow_button_move+0x7e>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80012d4:	2200      	movs	r2, #0
 80012d6:	21ff      	movs	r1, #255	; 0xff
 80012d8:	4881      	ldr	r0, [pc, #516]	; (80014e0 <flow_button_move+0x274>)
 80012da:	f001 f8e9 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	2107      	movs	r1, #7
 80012e2:	487f      	ldr	r0, [pc, #508]	; (80014e0 <flow_button_move+0x274>)
 80012e4:	f001 f8e4 	bl	80024b0 <HAL_GPIO_WritePin>
 80012e8:	e00d      	b.n	8001306 <flow_button_move+0x9a>
				}
				else if(pre_elevator_state == 4)
 80012ea:	4b7c      	ldr	r3, [pc, #496]	; (80014dc <flow_button_move+0x270>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d109      	bne.n	8001306 <flow_button_move+0x9a>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	21ff      	movs	r1, #255	; 0xff
 80012f6:	487a      	ldr	r0, [pc, #488]	; (80014e0 <flow_button_move+0x274>)
 80012f8:	f001 f8da 	bl	80024b0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x0f, GPIO_PIN_SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	210f      	movs	r1, #15
 8001300:	4877      	ldr	r0, [pc, #476]	; (80014e0 <flow_button_move+0x274>)
 8001302:	f001 f8d5 	bl	80024b0 <HAL_GPIO_WritePin>
				}


				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001306:	4a77      	ldr	r2, [pc, #476]	; (80014e4 <flow_button_move+0x278>)
 8001308:	2101      	movs	r1, #1
 800130a:	4877      	ldr	r0, [pc, #476]	; (80014e8 <flow_button_move+0x27c>)
 800130c:	f7ff f9bc 	bl	8000688 <get_button>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d120      	bne.n	8001358 <flow_button_move+0xec>
				{
					if(pre_elevator_state > 1)
 8001316:	4b71      	ldr	r3, [pc, #452]	; (80014dc <flow_button_move+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	dd0f      	ble.n	800133e <flow_button_move+0xd2>
					{
						floor_gap = pre_elevator_state - 1;
 800131e:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <flow_button_move+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a71      	ldr	r2, [pc, #452]	; (80014ec <flow_button_move+0x280>)
 8001326:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8001328:	4b70      	ldr	r3, [pc, #448]	; (80014ec <flow_button_move+0x280>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a70      	ldr	r2, [pc, #448]	; (80014f0 <flow_button_move+0x284>)
 800132e:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 1;
 8001330:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <flow_button_move+0x270>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2; // BACKWARD
 8001336:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <flow_button_move+0x26c>)
 8001338:	2202      	movs	r2, #2
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e00c      	b.n	8001358 <flow_button_move+0xec>
					}
					else if(pre_elevator_state < 1)
 800133e:	4b67      	ldr	r3, [pc, #412]	; (80014dc <flow_button_move+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	dc08      	bgt.n	8001358 <flow_button_move+0xec>
					{
						elevator_state = 1;
 8001346:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <flow_button_move+0x284>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
						pre_elevator_state = 1;
 800134c:	4b63      	ldr	r3, [pc, #396]	; (80014dc <flow_button_move+0x270>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1;
 8001352:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <flow_button_move+0x26c>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
					}

				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 8001358:	4a66      	ldr	r2, [pc, #408]	; (80014f4 <flow_button_move+0x288>)
 800135a:	2102      	movs	r1, #2
 800135c:	4862      	ldr	r0, [pc, #392]	; (80014e8 <flow_button_move+0x27c>)
 800135e:	f7ff f993 	bl	8000688 <get_button>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d127      	bne.n	80013b8 <flow_button_move+0x14c>
				{
					if(pre_elevator_state > 2)
 8001368:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <flow_button_move+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b02      	cmp	r3, #2
 800136e:	dd0f      	ble.n	8001390 <flow_button_move+0x124>
					{
						floor_gap = pre_elevator_state - 2;
 8001370:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <flow_button_move+0x270>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3b02      	subs	r3, #2
 8001376:	4a5d      	ldr	r2, [pc, #372]	; (80014ec <flow_button_move+0x280>)
 8001378:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 800137a:	4b5c      	ldr	r3, [pc, #368]	; (80014ec <flow_button_move+0x280>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a5c      	ldr	r2, [pc, #368]	; (80014f0 <flow_button_move+0x284>)
 8001380:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 2;
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <flow_button_move+0x270>)
 8001384:	2202      	movs	r2, #2
 8001386:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 8001388:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <flow_button_move+0x26c>)
 800138a:	2202      	movs	r2, #2
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	e013      	b.n	80013b8 <flow_button_move+0x14c>
					}
					else if(pre_elevator_state < 2)
 8001390:	4b52      	ldr	r3, [pc, #328]	; (80014dc <flow_button_move+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	dc0f      	bgt.n	80013b8 <flow_button_move+0x14c>
					{
						floor_gap = 2 - pre_elevator_state;
 8001398:	4b50      	ldr	r3, [pc, #320]	; (80014dc <flow_button_move+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1c3 0302 	rsb	r3, r3, #2
 80013a0:	4a52      	ldr	r2, [pc, #328]	; (80014ec <flow_button_move+0x280>)
 80013a2:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80013a4:	4b51      	ldr	r3, [pc, #324]	; (80014ec <flow_button_move+0x280>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a51      	ldr	r2, [pc, #324]	; (80014f0 <flow_button_move+0x284>)
 80013aa:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 2;
 80013ac:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <flow_button_move+0x270>)
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <flow_button_move+0x26c>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON3_Pin, &prev_button3_state) == BUTTON_PRESS)
 80013b8:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <flow_button_move+0x28c>)
 80013ba:	2104      	movs	r1, #4
 80013bc:	484a      	ldr	r0, [pc, #296]	; (80014e8 <flow_button_move+0x27c>)
 80013be:	f7ff f963 	bl	8000688 <get_button>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d127      	bne.n	8001418 <flow_button_move+0x1ac>
				{
					if(pre_elevator_state > 3)
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <flow_button_move+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	dd0f      	ble.n	80013f0 <flow_button_move+0x184>
					{
						floor_gap = pre_elevator_state - 3;
 80013d0:	4b42      	ldr	r3, [pc, #264]	; (80014dc <flow_button_move+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	4a45      	ldr	r2, [pc, #276]	; (80014ec <flow_button_move+0x280>)
 80013d8:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 80013da:	4b44      	ldr	r3, [pc, #272]	; (80014ec <flow_button_move+0x280>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a44      	ldr	r2, [pc, #272]	; (80014f0 <flow_button_move+0x284>)
 80013e0:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 3;
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <flow_button_move+0x270>)
 80013e4:	2203      	movs	r2, #3
 80013e6:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <flow_button_move+0x26c>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	e013      	b.n	8001418 <flow_button_move+0x1ac>
					}
					else if(pre_elevator_state < 3)
 80013f0:	4b3a      	ldr	r3, [pc, #232]	; (80014dc <flow_button_move+0x270>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	dc0f      	bgt.n	8001418 <flow_button_move+0x1ac>
					{
						floor_gap = 3 - pre_elevator_state;
 80013f8:	4b38      	ldr	r3, [pc, #224]	; (80014dc <flow_button_move+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1c3 0303 	rsb	r3, r3, #3
 8001400:	4a3a      	ldr	r2, [pc, #232]	; (80014ec <flow_button_move+0x280>)
 8001402:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <flow_button_move+0x280>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a39      	ldr	r2, [pc, #228]	; (80014f0 <flow_button_move+0x284>)
 800140a:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 3;
 800140c:	4b33      	ldr	r3, [pc, #204]	; (80014dc <flow_button_move+0x270>)
 800140e:	2203      	movs	r2, #3
 8001410:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <flow_button_move+0x26c>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON4_Pin, &prev_button4_state) == BUTTON_PRESS)
 8001418:	4a38      	ldr	r2, [pc, #224]	; (80014fc <flow_button_move+0x290>)
 800141a:	2108      	movs	r1, #8
 800141c:	4832      	ldr	r0, [pc, #200]	; (80014e8 <flow_button_move+0x27c>)
 800141e:	f7ff f933 	bl	8000688 <get_button>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d17d      	bne.n	8001524 <flow_button_move+0x2b8>
				{
					// 최상층

					if(pre_elevator_state > 4)
 8001428:	4b2c      	ldr	r3, [pc, #176]	; (80014dc <flow_button_move+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b04      	cmp	r3, #4
 800142e:	dd0f      	ble.n	8001450 <flow_button_move+0x1e4>
					{
						floor_gap = pre_elevator_state - 4;
 8001430:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <flow_button_move+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	3b04      	subs	r3, #4
 8001436:	4a2d      	ldr	r2, [pc, #180]	; (80014ec <flow_button_move+0x280>)
 8001438:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 800143a:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <flow_button_move+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a2c      	ldr	r2, [pc, #176]	; (80014f0 <flow_button_move+0x284>)
 8001440:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 4;
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <flow_button_move+0x270>)
 8001444:	2204      	movs	r2, #4
 8001446:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 8001448:	4b23      	ldr	r3, [pc, #140]	; (80014d8 <flow_button_move+0x26c>)
 800144a:	2202      	movs	r2, #2
 800144c:	601a      	str	r2, [r3, #0]
						pre_elevator_state = 4;
						elevator_mode_state = 1; // FORWARD
					}
				}

			break;
 800144e:	e069      	b.n	8001524 <flow_button_move+0x2b8>
					else if(pre_elevator_state < 4)
 8001450:	4b22      	ldr	r3, [pc, #136]	; (80014dc <flow_button_move+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b03      	cmp	r3, #3
 8001456:	dc65      	bgt.n	8001524 <flow_button_move+0x2b8>
						floor_gap = 4 - pre_elevator_state;
 8001458:	4b20      	ldr	r3, [pc, #128]	; (80014dc <flow_button_move+0x270>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1c3 0304 	rsb	r3, r3, #4
 8001460:	4a22      	ldr	r2, [pc, #136]	; (80014ec <flow_button_move+0x280>)
 8001462:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 8001464:	4b21      	ldr	r3, [pc, #132]	; (80014ec <flow_button_move+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a21      	ldr	r2, [pc, #132]	; (80014f0 <flow_button_move+0x284>)
 800146a:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 4;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <flow_button_move+0x270>)
 800146e:	2204      	movs	r2, #4
 8001470:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 8001472:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <flow_button_move+0x26c>)
 8001474:	2201      	movs	r2, #1
 8001476:	601a      	str	r2, [r3, #0]
			break;
 8001478:	e054      	b.n	8001524 <flow_button_move+0x2b8>

			case 1:

			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 800147a:	4a1a      	ldr	r2, [pc, #104]	; (80014e4 <flow_button_move+0x278>)
 800147c:	2101      	movs	r1, #1
 800147e:	481a      	ldr	r0, [pc, #104]	; (80014e8 <flow_button_move+0x27c>)
 8001480:	f7ff f902 	bl	8000688 <get_button>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d103      	bne.n	8001492 <flow_button_move+0x226>
			{
				elevator_mode_state = 0;
 800148a:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <flow_button_move+0x26c>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
//			}




			break;
 8001490:	e049      	b.n	8001526 <flow_button_move+0x2ba>
				stepmotor_driver2(FORWARD, elevator_state * 4096);
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <flow_button_move+0x284>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	031b      	lsls	r3, r3, #12
 8001498:	4619      	mov	r1, r3
 800149a:	2001      	movs	r0, #1
 800149c:	f7ff fdaa 	bl	8000ff4 <stepmotor_driver2>
				set_rpm(13);
 80014a0:	200d      	movs	r0, #13
 80014a2:	f7ff fd96 	bl	8000fd2 <set_rpm>
			break;
 80014a6:	e03e      	b.n	8001526 <flow_button_move+0x2ba>
//				{
//					elevator_mode_state = 3;
//				}


				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <flow_button_move+0x278>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	480e      	ldr	r0, [pc, #56]	; (80014e8 <flow_button_move+0x27c>)
 80014ae:	f7ff f8eb 	bl	8000688 <get_button>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <flow_button_move+0x254>
				{
					elevator_mode_state = 0;
 80014b8:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <flow_button_move+0x26c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
//					temp = 0;
//					temp_count = 0;
//					elevator_mode_state = 0;
//				}
//
			break;
 80014be:	e032      	b.n	8001526 <flow_button_move+0x2ba>
					stepmotor_driver2(BACKWARD, elevator_state * 4096);
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <flow_button_move+0x284>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	031b      	lsls	r3, r3, #12
 80014c6:	4619      	mov	r1, r3
 80014c8:	2002      	movs	r0, #2
 80014ca:	f7ff fd93 	bl	8000ff4 <stepmotor_driver2>
					set_rpm(13);
 80014ce:	200d      	movs	r0, #13
 80014d0:	f7ff fd7f 	bl	8000fd2 <set_rpm>
			break;
 80014d4:	e027      	b.n	8001526 <flow_button_move+0x2ba>
 80014d6:	bf00      	nop
 80014d8:	200008bc 	.word	0x200008bc
 80014dc:	200008c0 	.word	0x200008c0
 80014e0:	40020400 	.word	0x40020400
 80014e4:	20000000 	.word	0x20000000
 80014e8:	40020800 	.word	0x40020800
 80014ec:	200008c4 	.word	0x200008c4
 80014f0:	200008b8 	.word	0x200008b8
 80014f4:	20000001 	.word	0x20000001
 80014f8:	20000002 	.word	0x20000002
 80014fc:	20000003 	.word	0x20000003

			case 3:
				cancel_mode = 0;
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <flow_button_move+0x2c0>)
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]

					if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <flow_button_move+0x2c4>)
 8001508:	2101      	movs	r1, #1
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <flow_button_move+0x2c8>)
 800150c:	f7ff f8bc 	bl	8000688 <get_button>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d103      	bne.n	800151e <flow_button_move+0x2b2>
					{
						elevator_mode_state = 0;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <flow_button_move+0x2cc>)
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
					else
					{
						led_re_shift();

					}
			break;
 800151c:	e003      	b.n	8001526 <flow_button_move+0x2ba>
						led_re_shift();
 800151e:	f7ff f8e1 	bl	80006e4 <led_re_shift>
			break;
 8001522:	e000      	b.n	8001526 <flow_button_move+0x2ba>
			break;
 8001524:	bf00      	nop
		}
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200008c8 	.word	0x200008c8
 8001530:	20000000 	.word	0x20000000
 8001534:	40020800 	.word	0x40020800
 8001538:	200008bc 	.word	0x200008bc

0800153c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001550:	6453      	str	r3, [r2, #68]	; 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	; (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800157a:	2007      	movs	r0, #7
 800157c:	f000 fd28 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08a      	sub	sp, #40	; 0x28
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a19      	ldr	r2, [pc, #100]	; (8001610 <HAL_I2C_MspInit+0x84>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d12c      	bne.n	8001608 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_I2C_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_I2C_MspInit+0x88>)
 80015b8:	f043 0302 	orr.w	r3, r3, #2
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_I2C_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015d0:	2312      	movs	r3, #18
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015dc:	2304      	movs	r3, #4
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	480c      	ldr	r0, [pc, #48]	; (8001618 <HAL_I2C_MspInit+0x8c>)
 80015e8:	f000 fdc6 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	4b08      	ldr	r3, [pc, #32]	; (8001614 <HAL_I2C_MspInit+0x88>)
 80015f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f4:	4a07      	ldr	r2, [pc, #28]	; (8001614 <HAL_I2C_MspInit+0x88>)
 80015f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015fa:	6413      	str	r3, [r2, #64]	; 0x40
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_I2C_MspInit+0x88>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40005400 	.word	0x40005400
 8001614:	40023800 	.word	0x40023800
 8001618:	40020400 	.word	0x40020400

0800161c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]
 8001634:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a0c      	ldr	r2, [pc, #48]	; (800166c <HAL_RTC_MspInit+0x50>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001640:	2302      	movs	r3, #2
 8001642:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001644:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001648:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	4618      	mov	r0, r3
 8001650:	f001 fd3c 	bl	80030cc <HAL_RCCEx_PeriphCLKConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800165a:	f7ff fcb5 	bl	8000fc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <HAL_RTC_MspInit+0x54>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40002800 	.word	0x40002800
 8001670:	42470e3c 	.word	0x42470e3c

08001674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3d      	ldr	r2, [pc, #244]	; (8001788 <HAL_TIM_Base_MspInit+0x114>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d145      	bne.n	8001722 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	4b3c      	ldr	r3, [pc, #240]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a3b      	ldr	r2, [pc, #236]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	4b35      	ldr	r3, [pc, #212]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a34      	ldr	r2, [pc, #208]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b32      	ldr	r3, [pc, #200]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	2302      	movs	r3, #2
 80016d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016e0:	2301      	movs	r3, #1
 80016e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4829      	ldr	r0, [pc, #164]	; (8001790 <HAL_TIM_Base_MspInit+0x11c>)
 80016ec:	f000 fd44 	bl	8002178 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2018      	movs	r0, #24
 80016f6:	f000 fc76 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80016fa:	2018      	movs	r0, #24
 80016fc:	f000 fc8f 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2019      	movs	r0, #25
 8001706:	f000 fc6e 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800170a:	2019      	movs	r0, #25
 800170c:	f000 fc87 	bl	800201e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2100      	movs	r1, #0
 8001714:	201b      	movs	r0, #27
 8001716:	f000 fc66 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800171a:	201b      	movs	r0, #27
 800171c:	f000 fc7f 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001720:	e02e      	b.n	8001780 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800172a:	d116      	bne.n	800175a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6413      	str	r3, [r2, #64]	; 0x40
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	201c      	movs	r0, #28
 800174e:	f000 fc4a 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001752:	201c      	movs	r0, #28
 8001754:	f000 fc63 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 8001758:	e012      	b.n	8001780 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0d      	ldr	r2, [pc, #52]	; (8001794 <HAL_TIM_Base_MspInit+0x120>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d10d      	bne.n	8001780 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 800176a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 800176e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001772:	6453      	str	r3, [r2, #68]	; 0x44
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_TIM_Base_MspInit+0x118>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	bf00      	nop
 8001782:	3730      	adds	r7, #48	; 0x30
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40020000 	.word	0x40020000
 8001794:	40014800 	.word	0x40014800

08001798 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <HAL_TIM_PWM_MspInit+0x48>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d115      	bne.n	80017d6 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a0c      	ldr	r2, [pc, #48]	; (80017e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <HAL_TIM_PWM_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	201d      	movs	r0, #29
 80017cc:	f000 fc0b 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017d0:	201d      	movs	r0, #29
 80017d2:	f000 fc24 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001808:	d11f      	bne.n	800184a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001838:	2301      	movs	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4816      	ldr	r0, [pc, #88]	; (800189c <HAL_TIM_MspPostInit+0xb4>)
 8001844:	f000 fc98 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001848:	e022      	b.n	8001890 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a14      	ldr	r2, [pc, #80]	; (80018a0 <HAL_TIM_MspPostInit+0xb8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d11d      	bne.n	8001890 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_TIM_MspPostInit+0xb0>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001870:	2340      	movs	r3, #64	; 0x40
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001880:	2302      	movs	r3, #2
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <HAL_TIM_MspPostInit+0xbc>)
 800188c:	f000 fc74 	bl	8002178 <HAL_GPIO_Init>
}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	; 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40023800 	.word	0x40023800
 800189c:	40020400 	.word	0x40020400
 80018a0:	40000400 	.word	0x40000400
 80018a4:	40020000 	.word	0x40020000

080018a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08c      	sub	sp, #48	; 0x30
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b0:	f107 031c 	add.w	r3, r7, #28
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]
 80018be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a3a      	ldr	r2, [pc, #232]	; (80019b0 <HAL_UART_MspInit+0x108>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d135      	bne.n	8001936 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
 80018ce:	4b39      	ldr	r3, [pc, #228]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a38      	ldr	r2, [pc, #224]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 80018d4:	f043 0310 	orr.w	r3, r3, #16
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b36      	ldr	r3, [pc, #216]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a31      	ldr	r2, [pc, #196]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
 8001900:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001902:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001910:	2303      	movs	r3, #3
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001914:	2307      	movs	r3, #7
 8001916:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4826      	ldr	r0, [pc, #152]	; (80019b8 <HAL_UART_MspInit+0x110>)
 8001920:	f000 fc2a 	bl	8002178 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	2025      	movs	r0, #37	; 0x25
 800192a:	f000 fb5c 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800192e:	2025      	movs	r0, #37	; 0x25
 8001930:	f000 fb75 	bl	800201e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001934:	e038      	b.n	80019a8 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a20      	ldr	r2, [pc, #128]	; (80019bc <HAL_UART_MspInit+0x114>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d133      	bne.n	80019a8 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001940:	2300      	movs	r3, #0
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	4a1a      	ldr	r2, [pc, #104]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 800194a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800194e:	6413      	str	r3, [r2, #64]	; 0x40
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	4a13      	ldr	r2, [pc, #76]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6313      	str	r3, [r2, #48]	; 0x30
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_UART_MspInit+0x10c>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001978:	230c      	movs	r3, #12
 800197a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001988:	2307      	movs	r3, #7
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <HAL_UART_MspInit+0x110>)
 8001994:	f000 fbf0 	bl	8002178 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001998:	2200      	movs	r2, #0
 800199a:	2100      	movs	r1, #0
 800199c:	2026      	movs	r0, #38	; 0x26
 800199e:	f000 fb22 	bl	8001fe6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019a2:	2026      	movs	r0, #38	; 0x26
 80019a4:	f000 fb3b 	bl	800201e <HAL_NVIC_EnableIRQ>
}
 80019a8:	bf00      	nop
 80019aa:	3730      	adds	r7, #48	; 0x30
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40011000 	.word	0x40011000
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020000 	.word	0x40020000
 80019bc:	40004400 	.word	0x40004400

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0c:	f000 f9cc 	bl	8001da8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 8001a10:	f7fe fea8 	bl	8000764 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f000 fd61 	bl	80024e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a2a:	2002      	movs	r0, #2
 8001a2c:	f000 fd5a 	bl	80024e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001a3a:	f002 fa8f 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200006f8 	.word	0x200006f8

08001a48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a4e:	f002 fa85 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200006f8 	.word	0x200006f8

08001a5c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a60:	4803      	ldr	r0, [pc, #12]	; (8001a70 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001a62:	f002 fa7b 	bl	8003f5c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001a68:	f002 fa78 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200006f8 	.word	0x200006f8
 8001a74:	200007d0 	.word	0x200007d0

08001a78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM1_CC_IRQHandler+0x10>)
 8001a7e:	f002 fa6d 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200006f8 	.word	0x200006f8

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f002 fa63 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000740 	.word	0x20000740

08001aa0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM3_IRQHandler+0x10>)
 8001aa6:	f002 fa59 	bl	8003f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000788 	.word	0x20000788

08001ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <USART1_IRQHandler+0x10>)
 8001aba:	f003 fb5b 	bl	8005174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000818 	.word	0x20000818

08001ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001acc:	4802      	ldr	r0, [pc, #8]	; (8001ad8 <USART2_IRQHandler+0x10>)
 8001ace:	f003 fb51 	bl	8005174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000085c 	.word	0x2000085c

08001adc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e00a      	b.n	8001b04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001aee:	f3af 8000 	nop.w
 8001af2:	4601      	mov	r1, r0
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf0      	blt.n	8001aee <_read+0x12>
	}

return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e009      	b.n	8001b3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	60ba      	str	r2, [r7, #8]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fe05 	bl	8000740 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	dbf1      	blt.n	8001b28 <_write+0x12>
	}
	return len;
 8001b44:	687b      	ldr	r3, [r7, #4]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <_close>:

int _close(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	return -1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b76:	605a      	str	r2, [r3, #4]
	return 0;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <_isatty>:

int _isatty(int file)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
	return 1;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <_sbrk+0x5c>)
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <_sbrk+0x60>)
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bcc:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <_sbrk+0x64>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d102      	bne.n	8001bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bd4:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <_sbrk+0x64>)
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <_sbrk+0x68>)
 8001bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bda:	4b10      	ldr	r3, [pc, #64]	; (8001c1c <_sbrk+0x64>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d207      	bcs.n	8001bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001be8:	f004 fa2c 	bl	8006044 <__errno>
 8001bec:	4603      	mov	r3, r0
 8001bee:	220c      	movs	r2, #12
 8001bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf6:	e009      	b.n	8001c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bf8:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <_sbrk+0x64>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <_sbrk+0x64>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	4a05      	ldr	r2, [pc, #20]	; (8001c1c <_sbrk+0x64>)
 8001c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20020000 	.word	0x20020000
 8001c18:	00000400 	.word	0x00000400
 8001c1c:	200008d4 	.word	0x200008d4
 8001c20:	200008f8 	.word	0x200008f8

08001c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <SystemInit+0x20>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <SystemInit+0x20>)
 8001c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <HAL_TIM_IC_CaptureCallback>:
int distance, distance_chk; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d11d      	bne.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d107      	bne.n	8001c72 <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 8001c6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 8001c70:	e011      	b.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 8001c72:	4b0c      	ldr	r3, [pc, #48]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d10d      	bne.n	8001c96 <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 8001c7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 8001c80:	2100      	movs	r1, #0
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f002 fc98 	bl	80045b8 <HAL_TIM_ReadCapturedValue>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c8e:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <HAL_TIM_IC_CaptureCallback+0x64>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	200008e0 	.word	0x200008e0
 8001ca8:	200008d8 	.word	0x200008d8
 8001cac:	200008dc 	.word	0x200008dc

08001cb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb4:	480d      	ldr	r0, [pc, #52]	; (8001cec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cb6:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cb8:	4a0e      	ldr	r2, [pc, #56]	; (8001cf4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0b      	ldr	r2, [pc, #44]	; (8001cf8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ccc:	4c0b      	ldr	r4, [pc, #44]	; (8001cfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cda:	f7ff ffa3 	bl	8001c24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cde:	f004 f9b7 	bl	8006050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ce2:	f7fe fdcb 	bl	800087c <main>
  bx  lr    
 8001ce6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001cf4:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8001cf8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001cfc:	200008f8 	.word	0x200008f8

08001d00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d00:	e7fe      	b.n	8001d00 <ADC_IRQHandler>
	...

08001d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d08:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <HAL_Init+0x40>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	; (8001d44 <HAL_Init+0x40>)
 8001d0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <HAL_Init+0x40>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a0a      	ldr	r2, [pc, #40]	; (8001d44 <HAL_Init+0x40>)
 8001d1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <HAL_Init+0x40>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <HAL_Init+0x40>)
 8001d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2c:	2003      	movs	r0, #3
 8001d2e:	f000 f94f 	bl	8001fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f000 f808 	bl	8001d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d38:	f7ff fc00 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40023c00 	.word	0x40023c00

08001d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_InitTick+0x54>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_InitTick+0x58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f967 	bl	800203a <HAL_SYSTICK_Config>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e00e      	b.n	8001d94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b0f      	cmp	r3, #15
 8001d7a:	d80a      	bhi.n	8001d92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	f04f 30ff 	mov.w	r0, #4294967295
 8001d84:	f000 f92f 	bl	8001fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d88:	4a06      	ldr	r2, [pc, #24]	; (8001da4 <HAL_InitTick+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000008 	.word	0x20000008
 8001da0:	20000010 	.word	0x20000010
 8001da4:	2000000c 	.word	0x2000000c

08001da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_IncTick+0x20>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_IncTick+0x24>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4413      	add	r3, r2
 8001db8:	4a04      	ldr	r2, [pc, #16]	; (8001dcc <HAL_IncTick+0x24>)
 8001dba:	6013      	str	r3, [r2, #0]
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000010 	.word	0x20000010
 8001dcc:	200008e4 	.word	0x200008e4

08001dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd4:	4b03      	ldr	r3, [pc, #12]	; (8001de4 <HAL_GetTick+0x14>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	200008e4 	.word	0x200008e4

08001de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7ff ffee 	bl	8001dd0 <HAL_GetTick>
 8001df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e00:	d005      	beq.n	8001e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_Delay+0x44>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e0e:	bf00      	nop
 8001e10:	f7ff ffde 	bl	8001dd0 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d8f7      	bhi.n	8001e10 <HAL_Delay+0x28>
  {
  }
}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000010 	.word	0x20000010

08001e30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <__NVIC_SetPriorityGrouping+0x44>)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	60d3      	str	r3, [r2, #12]
}
 8001e68:	bf00      	nop
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <__NVIC_GetPriorityGrouping+0x18>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	f003 0307 	and.w	r3, r3, #7
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	db0b      	blt.n	8001ebe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	4907      	ldr	r1, [pc, #28]	; (8001ecc <__NVIC_EnableIRQ+0x38>)
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	095b      	lsrs	r3, r3, #5
 8001eb4:	2001      	movs	r0, #1
 8001eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	6039      	str	r1, [r7, #0]
 8001eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	db0a      	blt.n	8001efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	490c      	ldr	r1, [pc, #48]	; (8001f1c <__NVIC_SetPriority+0x4c>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	0112      	lsls	r2, r2, #4
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef8:	e00a      	b.n	8001f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	4908      	ldr	r1, [pc, #32]	; (8001f20 <__NVIC_SetPriority+0x50>)
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	3b04      	subs	r3, #4
 8001f08:	0112      	lsls	r2, r2, #4
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	761a      	strb	r2, [r3, #24]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000e100 	.word	0xe000e100
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	f1c3 0307 	rsb	r3, r3, #7
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	bf28      	it	cs
 8001f42:	2304      	movcs	r3, #4
 8001f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3304      	adds	r3, #4
 8001f4a:	2b06      	cmp	r3, #6
 8001f4c:	d902      	bls.n	8001f54 <NVIC_EncodePriority+0x30>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3b03      	subs	r3, #3
 8001f52:	e000      	b.n	8001f56 <NVIC_EncodePriority+0x32>
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43da      	mvns	r2, r3
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	401a      	ands	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	43d9      	mvns	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	4313      	orrs	r3, r2
         );
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3b01      	subs	r3, #1
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d301      	bcc.n	8001fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e00f      	b.n	8001fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <SysTick_Config+0x40>)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001faa:	210f      	movs	r1, #15
 8001fac:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb0:	f7ff ff8e 	bl	8001ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <SysTick_Config+0x40>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fba:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <SysTick_Config+0x40>)
 8001fbc:	2207      	movs	r2, #7
 8001fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	e000e010 	.word	0xe000e010

08001fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff29 	bl	8001e30 <__NVIC_SetPriorityGrouping>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b086      	sub	sp, #24
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
 8001ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff8:	f7ff ff3e 	bl	8001e78 <__NVIC_GetPriorityGrouping>
 8001ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	68b9      	ldr	r1, [r7, #8]
 8002002:	6978      	ldr	r0, [r7, #20]
 8002004:	f7ff ff8e 	bl	8001f24 <NVIC_EncodePriority>
 8002008:	4602      	mov	r2, r0
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	4611      	mov	r1, r2
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff5d 	bl	8001ed0 <__NVIC_SetPriority>
}
 8002016:	bf00      	nop
 8002018:	3718      	adds	r7, #24
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	4603      	mov	r3, r0
 8002026:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff ff31 	bl	8001e94 <__NVIC_EnableIRQ>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff ffa2 	bl	8001f8c <SysTick_Config>
 8002048:	4603      	mov	r3, r0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3708      	adds	r7, #8
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b084      	sub	sp, #16
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff feb6 	bl	8001dd0 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d008      	beq.n	8002084 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2280      	movs	r2, #128	; 0x80
 8002076:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e052      	b.n	800212a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0216 	bic.w	r2, r2, #22
 8002092:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695a      	ldr	r2, [r3, #20]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d103      	bne.n	80020b4 <HAL_DMA_Abort+0x62>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 0208 	bic.w	r2, r2, #8
 80020c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0201 	bic.w	r2, r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020d4:	e013      	b.n	80020fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d6:	f7ff fe7b 	bl	8001dd0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d90c      	bls.n	80020fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2203      	movs	r2, #3
 80020ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e015      	b.n	800212a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e4      	bne.n	80020d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002110:	223f      	movs	r2, #63	; 0x3f
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d004      	beq.n	8002150 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2280      	movs	r2, #128	; 0x80
 800214a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e00c      	b.n	800216a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2205      	movs	r2, #5
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800218a:	2300      	movs	r3, #0
 800218c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	e159      	b.n	8002448 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002194:	2201      	movs	r2, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	697a      	ldr	r2, [r7, #20]
 80021a4:	4013      	ands	r3, r2
 80021a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 8148 	bne.w	8002442 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d005      	beq.n	80021ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d130      	bne.n	800222c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	2203      	movs	r2, #3
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002200:	2201      	movs	r2, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	091b      	lsrs	r3, r3, #4
 8002216:	f003 0201 	and.w	r2, r3, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4313      	orrs	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b03      	cmp	r3, #3
 8002236:	d017      	beq.n	8002268 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f003 0303 	and.w	r3, r3, #3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d123      	bne.n	80022bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	08da      	lsrs	r2, r3, #3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3208      	adds	r2, #8
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	220f      	movs	r2, #15
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0307 	and.w	r3, r3, #7
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	08da      	lsrs	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3208      	adds	r2, #8
 80022b6:	69b9      	ldr	r1, [r7, #24]
 80022b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	005b      	lsls	r3, r3, #1
 80022c6:	2203      	movs	r2, #3
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 0203 	and.w	r2, r3, #3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80a2 	beq.w	8002442 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800230c:	6453      	str	r3, [r2, #68]	; 0x44
 800230e:	4b54      	ldr	r3, [pc, #336]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800231a:	4a52      	ldr	r2, [pc, #328]	; (8002464 <HAL_GPIO_Init+0x2ec>)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	089b      	lsrs	r3, r3, #2
 8002320:	3302      	adds	r3, #2
 8002322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	220f      	movs	r2, #15
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a49      	ldr	r2, [pc, #292]	; (8002468 <HAL_GPIO_Init+0x2f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x202>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a48      	ldr	r2, [pc, #288]	; (800246c <HAL_GPIO_Init+0x2f4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x1fe>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_GPIO_Init+0x2f8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x1fa>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a46      	ldr	r2, [pc, #280]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x1f6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a45      	ldr	r2, [pc, #276]	; (8002478 <HAL_GPIO_Init+0x300>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x1f2>
 8002366:	2304      	movs	r3, #4
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x204>
 800236a:	2307      	movs	r3, #7
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x204>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x204>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x204>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x204>
 800237a:	2300      	movs	r3, #0
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238c:	4935      	ldr	r1, [pc, #212]	; (8002464 <HAL_GPIO_Init+0x2ec>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239a:	4b38      	ldr	r3, [pc, #224]	; (800247c <HAL_GPIO_Init+0x304>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023be:	4a2f      	ldr	r2, [pc, #188]	; (800247c <HAL_GPIO_Init+0x304>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_GPIO_Init+0x304>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e8:	4a24      	ldr	r2, [pc, #144]	; (800247c <HAL_GPIO_Init+0x304>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ee:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_GPIO_Init+0x304>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002412:	4a1a      	ldr	r2, [pc, #104]	; (800247c <HAL_GPIO_Init+0x304>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_GPIO_Init+0x304>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800243c:	4a0f      	ldr	r2, [pc, #60]	; (800247c <HAL_GPIO_Init+0x304>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f aea2 	bls.w	8002194 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40013800 	.word	0x40013800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40013c00 	.word	0x40013c00

08002480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691a      	ldr	r2, [r3, #16]
 8002490:	887b      	ldrh	r3, [r7, #2]
 8002492:	4013      	ands	r3, r2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002498:	2301      	movs	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e001      	b.n	80024a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249e:	2300      	movs	r3, #0
 80024a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	807b      	strh	r3, [r7, #2]
 80024bc:	4613      	mov	r3, r2
 80024be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c0:	787b      	ldrb	r3, [r7, #1]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024c6:	887a      	ldrh	r2, [r7, #2]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024cc:	e003      	b.n	80024d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ce:	887b      	ldrh	r3, [r7, #2]
 80024d0:	041a      	lsls	r2, r3, #16
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	619a      	str	r2, [r3, #24]
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
	...

080024e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f0:	695a      	ldr	r2, [r3, #20]
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d006      	beq.n	8002508 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024fa:	4a05      	ldr	r2, [pc, #20]	; (8002510 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f970 	bl	80007e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40013c00 	.word	0x40013c00

08002514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e12b      	b.n	800277e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d106      	bne.n	8002540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff f826 	bl	800158c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2224      	movs	r2, #36	; 0x24
 8002544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 0201 	bic.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002566:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002576:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002578:	f000 fd80 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 800257c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_I2C_Init+0x274>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d807      	bhi.n	8002598 <HAL_I2C_Init+0x84>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4a80      	ldr	r2, [pc, #512]	; (800278c <HAL_I2C_Init+0x278>)
 800258c:	4293      	cmp	r3, r2
 800258e:	bf94      	ite	ls
 8002590:	2301      	movls	r3, #1
 8002592:	2300      	movhi	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e006      	b.n	80025a6 <HAL_I2C_Init+0x92>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4a7d      	ldr	r2, [pc, #500]	; (8002790 <HAL_I2C_Init+0x27c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	bf94      	ite	ls
 80025a0:	2301      	movls	r3, #1
 80025a2:	2300      	movhi	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0e7      	b.n	800277e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4a78      	ldr	r2, [pc, #480]	; (8002794 <HAL_I2C_Init+0x280>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0c9b      	lsrs	r3, r3, #18
 80025b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a6a      	ldr	r2, [pc, #424]	; (8002788 <HAL_I2C_Init+0x274>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d802      	bhi.n	80025e8 <HAL_I2C_Init+0xd4>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	3301      	adds	r3, #1
 80025e6:	e009      	b.n	80025fc <HAL_I2C_Init+0xe8>
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	4a69      	ldr	r2, [pc, #420]	; (8002798 <HAL_I2C_Init+0x284>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	3301      	adds	r3, #1
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	430b      	orrs	r3, r1
 8002602:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800260e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	495c      	ldr	r1, [pc, #368]	; (8002788 <HAL_I2C_Init+0x274>)
 8002618:	428b      	cmp	r3, r1
 800261a:	d819      	bhi.n	8002650 <HAL_I2C_Init+0x13c>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e59      	subs	r1, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fbb1 f3f3 	udiv	r3, r1, r3
 800262a:	1c59      	adds	r1, r3, #1
 800262c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002630:	400b      	ands	r3, r1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00a      	beq.n	800264c <HAL_I2C_Init+0x138>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1e59      	subs	r1, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	fbb1 f3f3 	udiv	r3, r1, r3
 8002644:	3301      	adds	r3, #1
 8002646:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264a:	e051      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 800264c:	2304      	movs	r3, #4
 800264e:	e04f      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_I2C_Init+0x168>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	440b      	add	r3, r1
 8002666:	fbb0 f3f3 	udiv	r3, r0, r3
 800266a:	3301      	adds	r3, #1
 800266c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002670:	2b00      	cmp	r3, #0
 8002672:	bf0c      	ite	eq
 8002674:	2301      	moveq	r3, #1
 8002676:	2300      	movne	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e012      	b.n	80026a2 <HAL_I2C_Init+0x18e>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1e58      	subs	r0, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6859      	ldr	r1, [r3, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	0099      	lsls	r1, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002692:	3301      	adds	r3, #1
 8002694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002698:	2b00      	cmp	r3, #0
 800269a:	bf0c      	ite	eq
 800269c:	2301      	moveq	r3, #1
 800269e:	2300      	movne	r3, #0
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Init+0x196>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e022      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10e      	bne.n	80026d0 <HAL_I2C_Init+0x1bc>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1e58      	subs	r0, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	460b      	mov	r3, r1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	440b      	add	r3, r1
 80026c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ce:	e00f      	b.n	80026f0 <HAL_I2C_Init+0x1dc>
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	1e58      	subs	r0, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6859      	ldr	r1, [r3, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	0099      	lsls	r1, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6809      	ldr	r1, [r1, #0]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69da      	ldr	r2, [r3, #28]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800271e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6911      	ldr	r1, [r2, #16]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68d2      	ldr	r2, [r2, #12]
 800272a:	4311      	orrs	r1, r2
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6812      	ldr	r2, [r2, #0]
 8002730:	430b      	orrs	r3, r1
 8002732:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0201 	orr.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	000186a0 	.word	0x000186a0
 800278c:	001e847f 	.word	0x001e847f
 8002790:	003d08ff 	.word	0x003d08ff
 8002794:	431bde83 	.word	0x431bde83
 8002798:	10624dd3 	.word	0x10624dd3

0800279c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e267      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d075      	beq.n	80028a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ba:	4b88      	ldr	r3, [pc, #544]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d00c      	beq.n	80027e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c6:	4b85      	ldr	r3, [pc, #532]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d112      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d2:	4b82      	ldr	r3, [pc, #520]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027de:	d10b      	bne.n	80027f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e0:	4b7e      	ldr	r3, [pc, #504]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d05b      	beq.n	80028a4 <HAL_RCC_OscConfig+0x108>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d157      	bne.n	80028a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e242      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002800:	d106      	bne.n	8002810 <HAL_RCC_OscConfig+0x74>
 8002802:	4b76      	ldr	r3, [pc, #472]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	e01d      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002818:	d10c      	bne.n	8002834 <HAL_RCC_OscConfig+0x98>
 800281a:	4b70      	ldr	r3, [pc, #448]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a6f      	ldr	r2, [pc, #444]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	4b6d      	ldr	r3, [pc, #436]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a6c      	ldr	r2, [pc, #432]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0xb0>
 8002834:	4b69      	ldr	r3, [pc, #420]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a68      	ldr	r2, [pc, #416]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800283a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283e:	6013      	str	r3, [r2, #0]
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7ff fabc 	bl	8001dd0 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800285c:	f7ff fab8 	bl	8001dd0 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b64      	cmp	r3, #100	; 0x64
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e207      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b5b      	ldr	r3, [pc, #364]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0xc0>
 800287a:	e014      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff faa8 	bl	8001dd0 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff faa4 	bl	8001dd0 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	; 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e1f3      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0xe8>
 80028a2:	e000      	b.n	80028a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d063      	beq.n	800297a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028be:	4b47      	ldr	r3, [pc, #284]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d11c      	bne.n	8002904 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b44      	ldr	r3, [pc, #272]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d116      	bne.n	8002904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	4b41      	ldr	r3, [pc, #260]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d005      	beq.n	80028ee <HAL_RCC_OscConfig+0x152>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d001      	beq.n	80028ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e1c7      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ee:	4b3b      	ldr	r3, [pc, #236]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4937      	ldr	r1, [pc, #220]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002902:	e03a      	b.n	800297a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800290c:	4b34      	ldr	r3, [pc, #208]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7ff fa5d 	bl	8001dd0 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291a:	f7ff fa59 	bl	8001dd0 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1a8      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292c:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	4925      	ldr	r1, [pc, #148]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002948:	4313      	orrs	r3, r2
 800294a:	600b      	str	r3, [r1, #0]
 800294c:	e015      	b.n	800297a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x244>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002954:	f7ff fa3c 	bl	8001dd0 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800295c:	f7ff fa38 	bl	8001dd0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e187      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d036      	beq.n	80029f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_RCC_OscConfig+0x248>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7ff fa1c 	bl	8001dd0 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299c:	f7ff fa18 	bl	8001dd0 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e167      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_RCC_OscConfig+0x240>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x200>
 80029ba:	e01b      	b.n	80029f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_OscConfig+0x248>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c2:	f7ff fa05 	bl	8001dd0 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c8:	e00e      	b.n	80029e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ca:	f7ff fa01 	bl	8001dd0 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d907      	bls.n	80029e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e150      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
 80029dc:	40023800 	.word	0x40023800
 80029e0:	42470000 	.word	0x42470000
 80029e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e8:	4b88      	ldr	r3, [pc, #544]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 80029ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1ea      	bne.n	80029ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 8097 	beq.w	8002b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a06:	4b81      	ldr	r3, [pc, #516]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10f      	bne.n	8002a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b7d      	ldr	r3, [pc, #500]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a7c      	ldr	r2, [pc, #496]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b7a      	ldr	r3, [pc, #488]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b77      	ldr	r3, [pc, #476]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3e:	4b74      	ldr	r3, [pc, #464]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a73      	ldr	r2, [pc, #460]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4a:	f7ff f9c1 	bl	8001dd0 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a52:	f7ff f9bd 	bl	8001dd0 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e10c      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a64:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_OscConfig+0x474>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x2ea>
 8002a78:	4b64      	ldr	r3, [pc, #400]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a7c:	4a63      	ldr	r2, [pc, #396]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6713      	str	r3, [r2, #112]	; 0x70
 8002a84:	e01c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x324>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b05      	cmp	r3, #5
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x30c>
 8002a8e:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a92:	4a5e      	ldr	r2, [pc, #376]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a94:	f043 0304 	orr.w	r3, r3, #4
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	4a5b      	ldr	r2, [pc, #364]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002aa6:	e00b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x324>
 8002aa8:	4b58      	ldr	r3, [pc, #352]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aac:	4a57      	ldr	r2, [pc, #348]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab4:	4b55      	ldr	r3, [pc, #340]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a54      	ldr	r2, [pc, #336]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002aba:	f023 0304 	bic.w	r3, r3, #4
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7ff f982 	bl	8001dd0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7ff f97e 	bl	8001dd0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0cb      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d0ee      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x334>
 8002af2:	e014      	b.n	8002b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af4:	f7ff f96c 	bl	8001dd0 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afa:	e00a      	b.n	8002b12 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002afc:	f7ff f968 	bl	8001dd0 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e0b5      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ee      	bne.n	8002afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d105      	bne.n	8002b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b24:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	4a38      	ldr	r2, [pc, #224]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a1 	beq.w	8002c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3a:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d05c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d141      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_OscConfig+0x478>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b54:	f7ff f93c 	bl	8001dd0 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b5c:	f7ff f938 	bl	8001dd0 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e087      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6e:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69da      	ldr	r2, [r3, #28]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	431a      	orrs	r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	3b01      	subs	r3, #1
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	061b      	lsls	r3, r3, #24
 8002b9e:	491b      	ldr	r1, [pc, #108]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x478>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7ff f911 	bl	8001dd0 <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7ff f90d 	bl	8001dd0 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e05c      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc4:	4b11      	ldr	r3, [pc, #68]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x416>
 8002bd0:	e054      	b.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x478>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f8fa 	bl	8001dd0 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7ff f8f6 	bl	8001dd0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e045      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b06      	ldr	r3, [pc, #24]	; (8002c0c <HAL_RCC_OscConfig+0x470>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x444>
 8002bfe:	e03d      	b.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e038      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40007000 	.word	0x40007000
 8002c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <HAL_RCC_OscConfig+0x4ec>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d028      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d121      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d11a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d111      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	085b      	lsrs	r3, r3, #1
 8002c60:	3b01      	subs	r3, #1
 8002c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d107      	bne.n	8002c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d101      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0cc      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca0:	4b68      	ldr	r3, [pc, #416]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d90c      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cae:	4b65      	ldr	r3, [pc, #404]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b63      	ldr	r3, [pc, #396]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0b8      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d020      	beq.n	8002d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce0:	4b59      	ldr	r3, [pc, #356]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a58      	ldr	r2, [pc, #352]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d005      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cf8:	4b53      	ldr	r3, [pc, #332]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a52      	ldr	r2, [pc, #328]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d04:	4b50      	ldr	r3, [pc, #320]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d044      	beq.n	8002dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d107      	bne.n	8002d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2a:	4b47      	ldr	r3, [pc, #284]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d119      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d107      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	4b3f      	ldr	r3, [pc, #252]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d109      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e067      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6a:	4b37      	ldr	r3, [pc, #220]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f023 0203 	bic.w	r2, r3, #3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4934      	ldr	r1, [pc, #208]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d7c:	f7ff f828 	bl	8001dd0 <HAL_GetTick>
 8002d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	e00a      	b.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d84:	f7ff f824 	bl	8001dd0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e04f      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9a:	4b2b      	ldr	r3, [pc, #172]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 020c 	and.w	r2, r3, #12
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d1eb      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d20c      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc2:	4b20      	ldr	r3, [pc, #128]	; (8002e44 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d001      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e032      	b.n	8002e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d008      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dfe:	4b12      	ldr	r3, [pc, #72]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	490e      	ldr	r1, [pc, #56]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e12:	f000 f821 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002e16:	4602      	mov	r2, r0
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	091b      	lsrs	r3, r3, #4
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	490a      	ldr	r1, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1c0>)
 8002e24:	5ccb      	ldrb	r3, [r1, r3]
 8002e26:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1c8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe ff88 	bl	8001d48 <HAL_InitTick>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023c00 	.word	0x40023c00
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	08006acc 	.word	0x08006acc
 8002e50:	20000008 	.word	0x20000008
 8002e54:	2000000c 	.word	0x2000000c

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e5c:	b094      	sub	sp, #80	; 0x50
 8002e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	647b      	str	r3, [r7, #68]	; 0x44
 8002e64:	2300      	movs	r3, #0
 8002e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e68:	2300      	movs	r3, #0
 8002e6a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e70:	4b79      	ldr	r3, [pc, #484]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 030c 	and.w	r3, r3, #12
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d00d      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x40>
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	f200 80e1 	bhi.w	8003044 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_RCC_GetSysClockFreq+0x34>
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d003      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8a:	e0db      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b73      	ldr	r3, [pc, #460]	; (800305c <HAL_RCC_GetSysClockFreq+0x204>)
 8002e8e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e90:	e0db      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e92:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e96:	e0d8      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e98:	4b6f      	ldr	r3, [pc, #444]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea2:	4b6d      	ldr	r3, [pc, #436]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d063      	beq.n	8002f76 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002eca:	4622      	mov	r2, r4
 8002ecc:	462b      	mov	r3, r5
 8002ece:	f04f 0000 	mov.w	r0, #0
 8002ed2:	f04f 0100 	mov.w	r1, #0
 8002ed6:	0159      	lsls	r1, r3, #5
 8002ed8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002edc:	0150      	lsls	r0, r2, #5
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	1a51      	subs	r1, r2, r1
 8002ee6:	6139      	str	r1, [r7, #16]
 8002ee8:	4629      	mov	r1, r5
 8002eea:	eb63 0301 	sbc.w	r3, r3, r1
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	f04f 0300 	mov.w	r3, #0
 8002ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002efc:	4659      	mov	r1, fp
 8002efe:	018b      	lsls	r3, r1, #6
 8002f00:	4651      	mov	r1, sl
 8002f02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f06:	4651      	mov	r1, sl
 8002f08:	018a      	lsls	r2, r1, #6
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	ebb2 0801 	subs.w	r8, r2, r1
 8002f10:	4659      	mov	r1, fp
 8002f12:	eb63 0901 	sbc.w	r9, r3, r1
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	f04f 0300 	mov.w	r3, #0
 8002f1e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f22:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f26:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2a:	4690      	mov	r8, r2
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	4623      	mov	r3, r4
 8002f30:	eb18 0303 	adds.w	r3, r8, r3
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	462b      	mov	r3, r5
 8002f38:	eb49 0303 	adc.w	r3, r9, r3
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	024b      	lsls	r3, r1, #9
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f54:	4621      	mov	r1, r4
 8002f56:	024a      	lsls	r2, r1, #9
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5e:	2200      	movs	r2, #0
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f64:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f68:	f7fd f936 	bl	80001d8 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f74:	e058      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f76:	4b38      	ldr	r3, [pc, #224]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	099b      	lsrs	r3, r3, #6
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4611      	mov	r1, r2
 8002f82:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f86:	623b      	str	r3, [r7, #32]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f90:	4642      	mov	r2, r8
 8002f92:	464b      	mov	r3, r9
 8002f94:	f04f 0000 	mov.w	r0, #0
 8002f98:	f04f 0100 	mov.w	r1, #0
 8002f9c:	0159      	lsls	r1, r3, #5
 8002f9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa2:	0150      	lsls	r0, r2, #5
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4641      	mov	r1, r8
 8002faa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fae:	4649      	mov	r1, r9
 8002fb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	f04f 0300 	mov.w	r3, #0
 8002fbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fc8:	ebb2 040a 	subs.w	r4, r2, sl
 8002fcc:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	00eb      	lsls	r3, r5, #3
 8002fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fde:	00e2      	lsls	r2, r4, #3
 8002fe0:	4614      	mov	r4, r2
 8002fe2:	461d      	mov	r5, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	18e3      	adds	r3, r4, r3
 8002fe8:	603b      	str	r3, [r7, #0]
 8002fea:	464b      	mov	r3, r9
 8002fec:	eb45 0303 	adc.w	r3, r5, r3
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	f04f 0200 	mov.w	r2, #0
 8002ff6:	f04f 0300 	mov.w	r3, #0
 8002ffa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ffe:	4629      	mov	r1, r5
 8003000:	028b      	lsls	r3, r1, #10
 8003002:	4621      	mov	r1, r4
 8003004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003008:	4621      	mov	r1, r4
 800300a:	028a      	lsls	r2, r1, #10
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003012:	2200      	movs	r2, #0
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	61fa      	str	r2, [r7, #28]
 8003018:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800301c:	f7fd f8dc 	bl	80001d8 <__aeabi_uldivmod>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	4613      	mov	r3, r2
 8003026:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <HAL_RCC_GetSysClockFreq+0x200>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	3301      	adds	r3, #1
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003038:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800303a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003042:	e002      	b.n	800304a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003044:	4b05      	ldr	r3, [pc, #20]	; (800305c <HAL_RCC_GetSysClockFreq+0x204>)
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800304c:	4618      	mov	r0, r3
 800304e:	3750      	adds	r7, #80	; 0x50
 8003050:	46bd      	mov	sp, r7
 8003052:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	00f42400 	.word	0x00f42400
 8003060:	007a1200 	.word	0x007a1200

08003064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HAL_RCC_GetHCLKFreq+0x14>)
 800306a:	681b      	ldr	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000008 	.word	0x20000008

0800307c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003080:	f7ff fff0 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 8003084:	4602      	mov	r2, r0
 8003086:	4b05      	ldr	r3, [pc, #20]	; (800309c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	0a9b      	lsrs	r3, r3, #10
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	4903      	ldr	r1, [pc, #12]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003092:	5ccb      	ldrb	r3, [r1, r3]
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003098:	4618      	mov	r0, r3
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40023800 	.word	0x40023800
 80030a0:	08006adc 	.word	0x08006adc

080030a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030a8:	f7ff ffdc 	bl	8003064 <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0b5b      	lsrs	r3, r3, #13
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08006adc 	.word	0x08006adc

080030cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d105      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d038      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030f4:	4b68      	ldr	r3, [pc, #416]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030fa:	f7fe fe69 	bl	8001dd0 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003102:	f7fe fe65 	bl	8001dd0 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e0bd      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003114:	4b61      	ldr	r3, [pc, #388]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f0      	bne.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	019b      	lsls	r3, r3, #6
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	071b      	lsls	r3, r3, #28
 8003132:	495a      	ldr	r1, [pc, #360]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800313a:	4b57      	ldr	r3, [pc, #348]	; (8003298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800313c:	2201      	movs	r2, #1
 800313e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003140:	f7fe fe46 	bl	8001dd0 <HAL_GetTick>
 8003144:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003148:	f7fe fe42 	bl	8001dd0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e09a      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800315a:	4b50      	ldr	r3, [pc, #320]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8083 	beq.w	800327a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	4b48      	ldr	r3, [pc, #288]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	4a47      	ldr	r2, [pc, #284]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	6413      	str	r3, [r2, #64]	; 0x40
 8003184:	4b45      	ldr	r3, [pc, #276]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a42      	ldr	r2, [pc, #264]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800319c:	f7fe fe18 	bl	8001dd0 <HAL_GetTick>
 80031a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80031a4:	f7fe fe14 	bl	8001dd0 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e06c      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80031b6:	4b3a      	ldr	r3, [pc, #232]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02f      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d028      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031e0:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ea:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031f0:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031f6:	4a29      	ldr	r2, [pc, #164]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031fc:	4b27      	ldr	r3, [pc, #156]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d114      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003208:	f7fe fde2 	bl	8001dd0 <HAL_GetTick>
 800320c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	e00a      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003210:	f7fe fdde 	bl	8001dd0 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e034      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	4b1d      	ldr	r3, [pc, #116]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800323a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800323e:	d10d      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003240:	4b16      	ldr	r3, [pc, #88]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	4911      	ldr	r1, [pc, #68]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
 800325a:	e005      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800325c:	4b0f      	ldr	r3, [pc, #60]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a0e      	ldr	r2, [pc, #56]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003262:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003266:	6093      	str	r3, [r2, #8]
 8003268:	4b0c      	ldr	r3, [pc, #48]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003274:	4909      	ldr	r1, [pc, #36]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0308 	and.w	r3, r3, #8
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7d1a      	ldrb	r2, [r3, #20]
 800328a:	4b07      	ldr	r3, [pc, #28]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800328c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	42470068 	.word	0x42470068
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000
 80032a4:	42470e40 	.word	0x42470e40
 80032a8:	424711e0 	.word	0x424711e0

080032ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e066      	b.n	8003390 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	7f5b      	ldrb	r3, [r3, #29]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fe f9a2 	bl	800161c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	22ca      	movs	r2, #202	; 0xca
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2253      	movs	r2, #83	; 0x53
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f998 	bl	8003624 <RTC_EnterInitMode>
 80032f4:	4603      	mov	r3, r0
 80032f6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d12c      	bne.n	8003358 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6812      	ldr	r2, [r2, #0]
 8003308:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800330c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003310:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6899      	ldr	r1, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68d2      	ldr	r2, [r2, #12]
 8003338:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6919      	ldr	r1, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	041a      	lsls	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f99f 	bl	8003692 <RTC_ExitInitMode>
 8003354:	4603      	mov	r3, r0
 8003356:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d113      	bne.n	8003386 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800336c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699a      	ldr	r2, [r3, #24]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	22ff      	movs	r2, #255	; 0xff
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800338e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003398:	b590      	push	{r4, r7, lr}
 800339a:	b087      	sub	sp, #28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	7f1b      	ldrb	r3, [r3, #28]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_RTC_SetTime+0x1c>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e087      	b.n	80034c4 <HAL_RTC_SetTime+0x12c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2202      	movs	r2, #2
 80033be:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d126      	bne.n	8003414 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d102      	bne.n	80033da <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 f97c 	bl	80036dc <RTC_ByteToBcd2>
 80033e4:	4603      	mov	r3, r0
 80033e6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	785b      	ldrb	r3, [r3, #1]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 f975 	bl	80036dc <RTC_ByteToBcd2>
 80033f2:	4603      	mov	r3, r0
 80033f4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80033f6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	789b      	ldrb	r3, [r3, #2]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f96d 	bl	80036dc <RTC_ByteToBcd2>
 8003402:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003404:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	78db      	ldrb	r3, [r3, #3]
 800340c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]
 8003412:	e018      	b.n	8003446 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2200      	movs	r2, #0
 8003426:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	785b      	ldrb	r3, [r3, #1]
 8003432:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003434:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800343a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	78db      	ldrb	r3, [r3, #3]
 8003440:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	22ca      	movs	r2, #202	; 0xca
 800344c:	625a      	str	r2, [r3, #36]	; 0x24
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2253      	movs	r2, #83	; 0x53
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8e4 	bl	8003624 <RTC_EnterInitMode>
 800345c:	4603      	mov	r3, r0
 800345e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d120      	bne.n	80034a8 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003470:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003474:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689a      	ldr	r2, [r3, #8]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003484:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6899      	ldr	r1, [r3, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f000 f8f7 	bl	8003692 <RTC_ExitInitMode>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80034a8:	7cfb      	ldrb	r3, [r7, #19]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d102      	bne.n	80034b4 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2201      	movs	r2, #1
 80034b2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	22ff      	movs	r2, #255	; 0xff
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	771a      	strb	r2, [r3, #28]

  return status;
 80034c2:	7cfb      	ldrb	r3, [r7, #19]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	371c      	adds	r7, #28
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd90      	pop	{r4, r7, pc}

080034cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	7f1b      	ldrb	r3, [r3, #28]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_RTC_SetDate+0x1c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e071      	b.n	80035cc <HAL_RTC_SetDate+0x100>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2201      	movs	r2, #1
 80034ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2202      	movs	r2, #2
 80034f2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10e      	bne.n	8003518 <HAL_RTC_SetDate+0x4c>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	785b      	ldrb	r3, [r3, #1]
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b00      	cmp	r3, #0
 8003504:	d008      	beq.n	8003518 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	785b      	ldrb	r3, [r3, #1]
 800350a:	f023 0310 	bic.w	r3, r3, #16
 800350e:	b2db      	uxtb	r3, r3
 8003510:	330a      	adds	r3, #10
 8003512:	b2da      	uxtb	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11c      	bne.n	8003558 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	78db      	ldrb	r3, [r3, #3]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 f8da 	bl	80036dc <RTC_ByteToBcd2>
 8003528:	4603      	mov	r3, r0
 800352a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f8d3 	bl	80036dc <RTC_ByteToBcd2>
 8003536:	4603      	mov	r3, r0
 8003538:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800353a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	789b      	ldrb	r3, [r3, #2]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f8cb 	bl	80036dc <RTC_ByteToBcd2>
 8003546:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003548:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	e00e      	b.n	8003576 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	785b      	ldrb	r3, [r3, #1]
 8003562:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003564:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800356a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	22ca      	movs	r2, #202	; 0xca
 800357c:	625a      	str	r2, [r3, #36]	; 0x24
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2253      	movs	r2, #83	; 0x53
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f84c 	bl	8003624 <RTC_EnterInitMode>
 800358c:	4603      	mov	r3, r0
 800358e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80035a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80035a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 f873 	bl	8003692 <RTC_ExitInitMode>
 80035ac:	4603      	mov	r3, r0
 80035ae:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80035b0:	7cfb      	ldrb	r3, [r7, #19]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2201      	movs	r2, #1
 80035ba:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	22ff      	movs	r2, #255	; 0xff
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	771a      	strb	r2, [r3, #28]

  return status;
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd90      	pop	{r4, r7, pc}

080035d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68da      	ldr	r2, [r3, #12]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035f0:	f7fe fbee 	bl	8001dd0 <HAL_GetTick>
 80035f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80035f6:	e009      	b.n	800360c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80035f8:	f7fe fbea 	bl	8001dd0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003606:	d901      	bls.n	800360c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e007      	b.n	800361c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d0ee      	beq.n	80035f8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d122      	bne.n	8003688 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003650:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003652:	f7fe fbbd 	bl	8001dd0 <HAL_GetTick>
 8003656:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003658:	e00c      	b.n	8003674 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800365a:	f7fe fbb9 	bl	8001dd0 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003668:	d904      	bls.n	8003674 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2204      	movs	r2, #4
 800366e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d102      	bne.n	8003688 <RTC_EnterInitMode+0x64>
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d1e8      	bne.n	800365a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003688:	7bfb      	ldrb	r3, [r7, #15]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ac:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff89 	bl	80035d4 <HAL_RTC_WaitForSynchro>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2204      	movs	r2, #4
 80036cc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 80036ea:	e005      	b.n	80036f8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80036ec:	7bfb      	ldrb	r3, [r7, #15]
 80036ee:	3301      	adds	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	3b0a      	subs	r3, #10
 80036f6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b09      	cmp	r3, #9
 80036fc:	d8f6      	bhi.n	80036ec <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	b2da      	uxtb	r2, r3
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	4313      	orrs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
}
 800370a:	4618      	mov	r0, r3
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e041      	b.n	80037ac <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d106      	bne.n	8003742 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7fd ff99 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	4619      	mov	r1, r3
 8003754:	4610      	mov	r0, r2
 8003756:	f000 ff91 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d001      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e044      	b.n	8003856 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1e      	ldr	r2, [pc, #120]	; (8003864 <HAL_TIM_Base_Start_IT+0xb0>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d018      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d013      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <HAL_TIM_Base_Start_IT+0xb4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d00e      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_TIM_Base_Start_IT+0xb8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d009      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a17      	ldr	r2, [pc, #92]	; (8003870 <HAL_TIM_Base_Start_IT+0xbc>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d004      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x6c>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <HAL_TIM_Base_Start_IT+0xc0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d111      	bne.n	8003844 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d010      	beq.n	8003854 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003842:	e007      	b.n	8003854 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 0201 	orr.w	r2, r2, #1
 8003852:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40010000 	.word	0x40010000
 8003868:	40000400 	.word	0x40000400
 800386c:	40000800 	.word	0x40000800
 8003870:	40000c00 	.word	0x40000c00
 8003874:	40014000 	.word	0x40014000

08003878 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e041      	b.n	800390e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fd ff7a 	bl	8001798 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	4619      	mov	r1, r3
 80038b6:	4610      	mov	r0, r2
 80038b8:	f000 fee0 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3708      	adds	r7, #8
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
	...

08003918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_TIM_PWM_Start+0x24>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b01      	cmp	r3, #1
 8003932:	bf14      	ite	ne
 8003934:	2301      	movne	r3, #1
 8003936:	2300      	moveq	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e022      	b.n	8003982 <HAL_TIM_PWM_Start+0x6a>
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	2b04      	cmp	r3, #4
 8003940:	d109      	bne.n	8003956 <HAL_TIM_PWM_Start+0x3e>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b01      	cmp	r3, #1
 800394c:	bf14      	ite	ne
 800394e:	2301      	movne	r3, #1
 8003950:	2300      	moveq	r3, #0
 8003952:	b2db      	uxtb	r3, r3
 8003954:	e015      	b.n	8003982 <HAL_TIM_PWM_Start+0x6a>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b08      	cmp	r3, #8
 800395a:	d109      	bne.n	8003970 <HAL_TIM_PWM_Start+0x58>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b01      	cmp	r3, #1
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	e008      	b.n	8003982 <HAL_TIM_PWM_Start+0x6a>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	bf14      	ite	ne
 800397c:	2301      	movne	r3, #1
 800397e:	2300      	moveq	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e068      	b.n	8003a5c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0x82>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003998:	e013      	b.n	80039c2 <HAL_TIM_PWM_Start+0xaa>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start+0x92>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039a8:	e00b      	b.n	80039c2 <HAL_TIM_PWM_Start+0xaa>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d104      	bne.n	80039ba <HAL_TIM_PWM_Start+0xa2>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039b8:	e003      	b.n	80039c2 <HAL_TIM_PWM_Start+0xaa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2202      	movs	r2, #2
 80039be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2201      	movs	r2, #1
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f001 fa1a 	bl	8004e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a23      	ldr	r2, [pc, #140]	; (8003a64 <HAL_TIM_PWM_Start+0x14c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d107      	bne.n	80039ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1d      	ldr	r2, [pc, #116]	; (8003a64 <HAL_TIM_PWM_Start+0x14c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d018      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x10e>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039fc:	d013      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x10e>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_TIM_PWM_Start+0x150>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00e      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x10e>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <HAL_TIM_PWM_Start+0x154>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d009      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x10e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a16      	ldr	r2, [pc, #88]	; (8003a70 <HAL_TIM_PWM_Start+0x158>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d004      	beq.n	8003a26 <HAL_TIM_PWM_Start+0x10e>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a14      	ldr	r2, [pc, #80]	; (8003a74 <HAL_TIM_PWM_Start+0x15c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d111      	bne.n	8003a4a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b06      	cmp	r3, #6
 8003a36:	d010      	beq.n	8003a5a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a48:	e007      	b.n	8003a5a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40010000 	.word	0x40010000
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800
 8003a70:	40000c00 	.word	0x40000c00
 8003a74:	40014000 	.word	0x40014000

08003a78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_TIM_PWM_Start_IT+0x28>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	bf14      	ite	ne
 8003a98:	2301      	movne	r3, #1
 8003a9a:	2300      	moveq	r3, #0
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	e022      	b.n	8003ae6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2b04      	cmp	r3, #4
 8003aa4:	d109      	bne.n	8003aba <HAL_TIM_PWM_Start_IT+0x42>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	bf14      	ite	ne
 8003ab2:	2301      	movne	r3, #1
 8003ab4:	2300      	moveq	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	e015      	b.n	8003ae6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b08      	cmp	r3, #8
 8003abe:	d109      	bne.n	8003ad4 <HAL_TIM_PWM_Start_IT+0x5c>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	bf14      	ite	ne
 8003acc:	2301      	movne	r3, #1
 8003ace:	2300      	moveq	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	e008      	b.n	8003ae6 <HAL_TIM_PWM_Start_IT+0x6e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0b3      	b.n	8003c56 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_PWM_Start_IT+0x86>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	e013      	b.n	8003b26 <HAL_TIM_PWM_Start_IT+0xae>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_PWM_Start_IT+0x96>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b0c:	e00b      	b.n	8003b26 <HAL_TIM_PWM_Start_IT+0xae>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d104      	bne.n	8003b1e <HAL_TIM_PWM_Start_IT+0xa6>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b1c:	e003      	b.n	8003b26 <HAL_TIM_PWM_Start_IT+0xae>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b0c      	cmp	r3, #12
 8003b2a:	d841      	bhi.n	8003bb0 <HAL_TIM_PWM_Start_IT+0x138>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <HAL_TIM_PWM_Start_IT+0xbc>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b69 	.word	0x08003b69
 8003b38:	08003bb1 	.word	0x08003bb1
 8003b3c:	08003bb1 	.word	0x08003bb1
 8003b40:	08003bb1 	.word	0x08003bb1
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003bb1 	.word	0x08003bb1
 8003b4c:	08003bb1 	.word	0x08003bb1
 8003b50:	08003bb1 	.word	0x08003bb1
 8003b54:	08003b8d 	.word	0x08003b8d
 8003b58:	08003bb1 	.word	0x08003bb1
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003bb1 	.word	0x08003bb1
 8003b64:	08003b9f 	.word	0x08003b9f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0202 	orr.w	r2, r2, #2
 8003b76:	60da      	str	r2, [r3, #12]
      break;
 8003b78:	e01d      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f042 0204 	orr.w	r2, r2, #4
 8003b88:	60da      	str	r2, [r3, #12]
      break;
 8003b8a:	e014      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	60da      	str	r2, [r3, #12]
      break;
 8003b9c:	e00b      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0210 	orr.w	r2, r2, #16
 8003bac:	60da      	str	r2, [r3, #12]
      break;
 8003bae:	e002      	b.n	8003bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bb6:	7bfb      	ldrb	r3, [r7, #15]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d14b      	bne.n	8003c54 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	6839      	ldr	r1, [r7, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f001 f91d 	bl	8004e04 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a24      	ldr	r2, [pc, #144]	; (8003c60 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d107      	bne.n	8003be4 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003be2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a1d      	ldr	r2, [pc, #116]	; (8003c60 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d018      	beq.n	8003c20 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf6:	d013      	beq.n	8003c20 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00e      	beq.n	8003c20 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a18      	ldr	r2, [pc, #96]	; (8003c68 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d009      	beq.n	8003c20 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIM_PWM_Start_IT+0x1a8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a15      	ldr	r2, [pc, #84]	; (8003c70 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d111      	bne.n	8003c44 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b06      	cmp	r3, #6
 8003c30:	d010      	beq.n	8003c54 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f042 0201 	orr.w	r2, r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c42:	e007      	b.n	8003c54 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40014000 	.word	0x40014000

08003c74 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b082      	sub	sp, #8
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e041      	b.n	8003d0a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f839 	bl	8003d12 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	4610      	mov	r0, r2
 8003cb4:	f000 fce2 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
	...

08003d28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d104      	bne.n	8003d46 <HAL_TIM_IC_Start_IT+0x1e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	e013      	b.n	8003d6e <HAL_TIM_IC_Start_IT+0x46>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b04      	cmp	r3, #4
 8003d4a:	d104      	bne.n	8003d56 <HAL_TIM_IC_Start_IT+0x2e>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e00b      	b.n	8003d6e <HAL_TIM_IC_Start_IT+0x46>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d104      	bne.n	8003d66 <HAL_TIM_IC_Start_IT+0x3e>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	e003      	b.n	8003d6e <HAL_TIM_IC_Start_IT+0x46>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <HAL_TIM_IC_Start_IT+0x58>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e013      	b.n	8003da8 <HAL_TIM_IC_Start_IT+0x80>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d104      	bne.n	8003d90 <HAL_TIM_IC_Start_IT+0x68>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	e00b      	b.n	8003da8 <HAL_TIM_IC_Start_IT+0x80>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d104      	bne.n	8003da0 <HAL_TIM_IC_Start_IT+0x78>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	e003      	b.n	8003da8 <HAL_TIM_IC_Start_IT+0x80>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003daa:	7bbb      	ldrb	r3, [r7, #14]
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d102      	bne.n	8003db6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003db0:	7b7b      	ldrb	r3, [r7, #13]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d001      	beq.n	8003dba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0c2      	b.n	8003f40 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Start_IT+0xa2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dc8:	e013      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0xca>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b04      	cmp	r3, #4
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_IC_Start_IT+0xb2>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dd8:	e00b      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0xca>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_IC_Start_IT+0xc2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de8:	e003      	b.n	8003df2 <HAL_TIM_IC_Start_IT+0xca>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2202      	movs	r2, #2
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_IC_Start_IT+0xda>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e00:	e013      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x102>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_IC_Start_IT+0xea>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e10:	e00b      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x102>
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d104      	bne.n	8003e22 <HAL_TIM_IC_Start_IT+0xfa>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e20:	e003      	b.n	8003e2a <HAL_TIM_IC_Start_IT+0x102>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2202      	movs	r2, #2
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b0c      	cmp	r3, #12
 8003e2e:	d841      	bhi.n	8003eb4 <HAL_TIM_IC_Start_IT+0x18c>
 8003e30:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <HAL_TIM_IC_Start_IT+0x110>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003eb5 	.word	0x08003eb5
 8003e40:	08003eb5 	.word	0x08003eb5
 8003e44:	08003eb5 	.word	0x08003eb5
 8003e48:	08003e7f 	.word	0x08003e7f
 8003e4c:	08003eb5 	.word	0x08003eb5
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	08003eb5 	.word	0x08003eb5
 8003e58:	08003e91 	.word	0x08003e91
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	08003eb5 	.word	0x08003eb5
 8003e64:	08003eb5 	.word	0x08003eb5
 8003e68:	08003ea3 	.word	0x08003ea3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0202 	orr.w	r2, r2, #2
 8003e7a:	60da      	str	r2, [r3, #12]
      break;
 8003e7c:	e01d      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0204 	orr.w	r2, r2, #4
 8003e8c:	60da      	str	r2, [r3, #12]
      break;
 8003e8e:	e014      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	60da      	str	r2, [r3, #12]
      break;
 8003ea0:	e00b      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68da      	ldr	r2, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0210 	orr.w	r2, r2, #16
 8003eb0:	60da      	str	r2, [r3, #12]
      break;
 8003eb2:	e002      	b.n	8003eba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d13e      	bne.n	8003f3e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 ff9b 	bl	8004e04 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <HAL_TIM_IC_Start_IT+0x220>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d018      	beq.n	8003f0a <HAL_TIM_IC_Start_IT+0x1e2>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d013      	beq.n	8003f0a <HAL_TIM_IC_Start_IT+0x1e2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a19      	ldr	r2, [pc, #100]	; (8003f4c <HAL_TIM_IC_Start_IT+0x224>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d00e      	beq.n	8003f0a <HAL_TIM_IC_Start_IT+0x1e2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a17      	ldr	r2, [pc, #92]	; (8003f50 <HAL_TIM_IC_Start_IT+0x228>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d009      	beq.n	8003f0a <HAL_TIM_IC_Start_IT+0x1e2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a16      	ldr	r2, [pc, #88]	; (8003f54 <HAL_TIM_IC_Start_IT+0x22c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d004      	beq.n	8003f0a <HAL_TIM_IC_Start_IT+0x1e2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <HAL_TIM_IC_Start_IT+0x230>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d111      	bne.n	8003f2e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b06      	cmp	r3, #6
 8003f1a:	d010      	beq.n	8003f3e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2c:	e007      	b.n	8003f3e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40014000 	.word	0x40014000

08003f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d122      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d11b      	bne.n	8003fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f06f 0202 	mvn.w	r2, #2
 8003f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fe52 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 8003fa4:	e005      	b.n	8003fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fb4a 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fb51 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d122      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d11b      	bne.n	800400c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f06f 0204 	mvn.w	r2, #4
 8003fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fe28 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 8003ff8:	e005      	b.n	8004006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fb20 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f000 fb27 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b08      	cmp	r3, #8
 8004018:	d122      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b08      	cmp	r3, #8
 8004026:	d11b      	bne.n	8004060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0208 	mvn.w	r2, #8
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fdfe 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 faf6 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 fafd 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b10      	cmp	r3, #16
 800406c:	d122      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b10      	cmp	r3, #16
 800407a:	d11b      	bne.n	80040b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2208      	movs	r2, #8
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f7fd fdd4 	bl	8001c48 <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 facc 	bl	8004640 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fad3 	bl	8004654 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d10e      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f06f 0201 	mvn.w	r2, #1
 80040d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fb5e 	bl	800079c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b80      	cmp	r3, #128	; 0x80
 80040ec:	d10e      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040f8:	2b80      	cmp	r3, #128	; 0x80
 80040fa:	d107      	bne.n	800410c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 ff1a 	bl	8004f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004116:	2b40      	cmp	r3, #64	; 0x40
 8004118:	d10e      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d107      	bne.n	8004138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 fa98 	bl	8004668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0320 	and.w	r3, r3, #32
 8004142:	2b20      	cmp	r3, #32
 8004144:	d10e      	bne.n	8004164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b20      	cmp	r3, #32
 8004152:	d107      	bne.n	8004164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f06f 0220 	mvn.w	r2, #32
 800415c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fee4 	bl	8004f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <HAL_TIM_IC_ConfigChannel+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e088      	b.n	800429c <HAL_TIM_IC_ConfigChannel+0x130>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6819      	ldr	r1, [r3, #0]
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f000 fc74 	bl	8004a94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	699a      	ldr	r2, [r3, #24]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020c 	bic.w	r2, r2, #12
 80041ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6999      	ldr	r1, [r3, #24]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	619a      	str	r2, [r3, #24]
 80041ce:	e060      	b.n	8004292 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d11c      	bne.n	8004210 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f000 fcec 	bl	8004bc2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699a      	ldr	r2, [r3, #24]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80041f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	6999      	ldr	r1, [r3, #24]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	021a      	lsls	r2, r3, #8
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	619a      	str	r2, [r3, #24]
 800420e:	e040      	b.n	8004292 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b08      	cmp	r3, #8
 8004214:	d11b      	bne.n	800424e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f000 fd39 	bl	8004c9c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 020c 	bic.w	r2, r2, #12
 8004238:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69d9      	ldr	r1, [r3, #28]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	689a      	ldr	r2, [r3, #8]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	61da      	str	r2, [r3, #28]
 800424c:	e021      	b.n	8004292 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d11c      	bne.n	800428e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6819      	ldr	r1, [r3, #0]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f000 fd56 	bl	8004d14 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004276:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69d9      	ldr	r1, [r3, #28]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	021a      	lsls	r2, r3, #8
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	61da      	str	r2, [r3, #28]
 800428c:	e001      	b.n	8004292 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800429a:	7dfb      	ldrb	r3, [r7, #23]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d101      	bne.n	80042c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80042be:	2302      	movs	r3, #2
 80042c0:	e0ae      	b.n	8004420 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b0c      	cmp	r3, #12
 80042ce:	f200 809f 	bhi.w	8004410 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	0800430d 	.word	0x0800430d
 80042dc:	08004411 	.word	0x08004411
 80042e0:	08004411 	.word	0x08004411
 80042e4:	08004411 	.word	0x08004411
 80042e8:	0800434d 	.word	0x0800434d
 80042ec:	08004411 	.word	0x08004411
 80042f0:	08004411 	.word	0x08004411
 80042f4:	08004411 	.word	0x08004411
 80042f8:	0800438f 	.word	0x0800438f
 80042fc:	08004411 	.word	0x08004411
 8004300:	08004411 	.word	0x08004411
 8004304:	08004411 	.word	0x08004411
 8004308:	080043cf 	.word	0x080043cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa32 	bl	800477c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f042 0208 	orr.w	r2, r2, #8
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f022 0204 	bic.w	r2, r2, #4
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691a      	ldr	r2, [r3, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	430a      	orrs	r2, r1
 8004348:	619a      	str	r2, [r3, #24]
      break;
 800434a:	e064      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68b9      	ldr	r1, [r7, #8]
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fa78 	bl	8004848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	699a      	ldr	r2, [r3, #24]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	021a      	lsls	r2, r3, #8
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	619a      	str	r2, [r3, #24]
      break;
 800438c:	e043      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fac3 	bl	8004920 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0208 	orr.w	r2, r2, #8
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 0204 	bic.w	r2, r2, #4
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	61da      	str	r2, [r3, #28]
      break;
 80043cc:	e023      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68b9      	ldr	r1, [r7, #8]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fb0d 	bl	80049f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69da      	ldr	r2, [r3, #28]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69d9      	ldr	r1, [r3, #28]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	021a      	lsls	r2, r3, #8
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	61da      	str	r2, [r3, #28]
      break;
 800440e:	e002      	b.n	8004416 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	75fb      	strb	r3, [r7, #23]
      break;
 8004414:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800441e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_TIM_ConfigClockSource+0x1c>
 8004440:	2302      	movs	r3, #2
 8004442:	e0b4      	b.n	80045ae <HAL_TIM_ConfigClockSource+0x186>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800446a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68ba      	ldr	r2, [r7, #8]
 8004472:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800447c:	d03e      	beq.n	80044fc <HAL_TIM_ConfigClockSource+0xd4>
 800447e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004482:	f200 8087 	bhi.w	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448a:	f000 8086 	beq.w	800459a <HAL_TIM_ConfigClockSource+0x172>
 800448e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004492:	d87f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b70      	cmp	r3, #112	; 0x70
 8004496:	d01a      	beq.n	80044ce <HAL_TIM_ConfigClockSource+0xa6>
 8004498:	2b70      	cmp	r3, #112	; 0x70
 800449a:	d87b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b60      	cmp	r3, #96	; 0x60
 800449e:	d050      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x11a>
 80044a0:	2b60      	cmp	r3, #96	; 0x60
 80044a2:	d877      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b50      	cmp	r3, #80	; 0x50
 80044a6:	d03c      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0xfa>
 80044a8:	2b50      	cmp	r3, #80	; 0x50
 80044aa:	d873      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044ac:	2b40      	cmp	r3, #64	; 0x40
 80044ae:	d058      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x13a>
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d86f      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044b4:	2b30      	cmp	r3, #48	; 0x30
 80044b6:	d064      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044b8:	2b30      	cmp	r3, #48	; 0x30
 80044ba:	d86b      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044bc:	2b20      	cmp	r3, #32
 80044be:	d060      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d867      	bhi.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d05c      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d05a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0x15a>
 80044cc:	e062      	b.n	8004594 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6818      	ldr	r0, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	6899      	ldr	r1, [r3, #8]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f000 fc71 	bl	8004dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	609a      	str	r2, [r3, #8]
      break;
 80044fa:	e04f      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	6899      	ldr	r1, [r3, #8]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f000 fc5a 	bl	8004dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451e:	609a      	str	r2, [r3, #8]
      break;
 8004520:	e03c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 fb18 	bl	8004b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2150      	movs	r1, #80	; 0x50
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fc27 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004540:	e02c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	461a      	mov	r2, r3
 8004550:	f000 fb74 	bl	8004c3c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2160      	movs	r1, #96	; 0x60
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fc17 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004560:	e01c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	6859      	ldr	r1, [r3, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	461a      	mov	r2, r3
 8004570:	f000 faf8 	bl	8004b64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2140      	movs	r1, #64	; 0x40
 800457a:	4618      	mov	r0, r3
 800457c:	f000 fc07 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004580:	e00c      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4619      	mov	r1, r3
 800458c:	4610      	mov	r0, r2
 800458e:	f000 fbfe 	bl	8004d8e <TIM_ITRx_SetConfig>
      break;
 8004592:	e003      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
      break;
 8004598:	e000      	b.n	800459c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800459a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80045ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d831      	bhi.n	8004630 <HAL_TIM_ReadCapturedValue+0x78>
 80045cc:	a201      	add	r2, pc, #4	; (adr r2, 80045d4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80045ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d2:	bf00      	nop
 80045d4:	08004609 	.word	0x08004609
 80045d8:	08004631 	.word	0x08004631
 80045dc:	08004631 	.word	0x08004631
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004613 	.word	0x08004613
 80045e8:	08004631 	.word	0x08004631
 80045ec:	08004631 	.word	0x08004631
 80045f0:	08004631 	.word	0x08004631
 80045f4:	0800461d 	.word	0x0800461d
 80045f8:	08004631 	.word	0x08004631
 80045fc:	08004631 	.word	0x08004631
 8004600:	08004631 	.word	0x08004631
 8004604:	08004627 	.word	0x08004627
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	60fb      	str	r3, [r7, #12]

      break;
 8004610:	e00f      	b.n	8004632 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	60fb      	str	r3, [r7, #12]

      break;
 800461a:	e00a      	b.n	8004632 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	60fb      	str	r3, [r7, #12]

      break;
 8004624:	e005      	b.n	8004632 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462c:	60fb      	str	r3, [r7, #12]

      break;
 800462e:	e000      	b.n	8004632 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004630:	bf00      	nop
  }

  return tmpreg;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004670:	bf00      	nop
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a34      	ldr	r2, [pc, #208]	; (8004760 <TIM_Base_SetConfig+0xe4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00f      	beq.n	80046b4 <TIM_Base_SetConfig+0x38>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d00b      	beq.n	80046b4 <TIM_Base_SetConfig+0x38>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a31      	ldr	r2, [pc, #196]	; (8004764 <TIM_Base_SetConfig+0xe8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d007      	beq.n	80046b4 <TIM_Base_SetConfig+0x38>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a30      	ldr	r2, [pc, #192]	; (8004768 <TIM_Base_SetConfig+0xec>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0x38>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <TIM_Base_SetConfig+0xf0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a25      	ldr	r2, [pc, #148]	; (8004760 <TIM_Base_SetConfig+0xe4>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d01b      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d4:	d017      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a22      	ldr	r2, [pc, #136]	; (8004764 <TIM_Base_SetConfig+0xe8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a21      	ldr	r2, [pc, #132]	; (8004768 <TIM_Base_SetConfig+0xec>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d00f      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a20      	ldr	r2, [pc, #128]	; (800476c <TIM_Base_SetConfig+0xf0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d00b      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a1f      	ldr	r2, [pc, #124]	; (8004770 <TIM_Base_SetConfig+0xf4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d007      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <TIM_Base_SetConfig+0xf8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d003      	beq.n	8004706 <TIM_Base_SetConfig+0x8a>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <TIM_Base_SetConfig+0xfc>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d108      	bne.n	8004718 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800470c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a08      	ldr	r2, [pc, #32]	; (8004760 <TIM_Base_SetConfig+0xe4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d103      	bne.n	800474c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	615a      	str	r2, [r3, #20]
}
 8004752:	bf00      	nop
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000
 8004764:	40000400 	.word	0x40000400
 8004768:	40000800 	.word	0x40000800
 800476c:	40000c00 	.word	0x40000c00
 8004770:	40014000 	.word	0x40014000
 8004774:	40014400 	.word	0x40014400
 8004778:	40014800 	.word	0x40014800

0800477c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800477c:	b480      	push	{r7}
 800477e:	b087      	sub	sp, #28
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	f023 0201 	bic.w	r2, r3, #1
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a1b      	ldr	r3, [r3, #32]
 8004796:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f023 0303 	bic.w	r3, r3, #3
 80047b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 0302 	bic.w	r3, r3, #2
 80047c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	; (8004844 <TIM_OC1_SetConfig+0xc8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d10c      	bne.n	80047f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	f023 0308 	bic.w	r3, r3, #8
 80047de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0304 	bic.w	r3, r3, #4
 80047f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a13      	ldr	r2, [pc, #76]	; (8004844 <TIM_OC1_SetConfig+0xc8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	4313      	orrs	r3, r2
 8004812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	621a      	str	r2, [r3, #32]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	40010000 	.word	0x40010000

08004848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f023 0210 	bic.w	r2, r3, #16
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	021b      	lsls	r3, r3, #8
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f023 0320 	bic.w	r3, r3, #32
 8004892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a1e      	ldr	r2, [pc, #120]	; (800491c <TIM_OC2_SetConfig+0xd4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10d      	bne.n	80048c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	011b      	lsls	r3, r3, #4
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a15      	ldr	r2, [pc, #84]	; (800491c <TIM_OC2_SetConfig+0xd4>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d113      	bne.n	80048f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	621a      	str	r2, [r3, #32]
}
 800490e:	bf00      	nop
 8004910:	371c      	adds	r7, #28
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000

08004920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0303 	bic.w	r3, r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <TIM_OC3_SetConfig+0xd0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d10d      	bne.n	800499a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	021b      	lsls	r3, r3, #8
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	4313      	orrs	r3, r2
 8004990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a14      	ldr	r2, [pc, #80]	; (80049f0 <TIM_OC3_SetConfig+0xd0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d113      	bne.n	80049ca <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40010000 	.word	0x40010000

080049f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	031b      	lsls	r3, r3, #12
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <TIM_OC4_SetConfig+0x9c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d109      	bne.n	8004a68 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	019b      	lsls	r3, r3, #6
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685a      	ldr	r2, [r3, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	621a      	str	r2, [r3, #32]
}
 8004a82:	bf00      	nop
 8004a84:	371c      	adds	r7, #28
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	40010000 	.word	0x40010000

08004a94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4a24      	ldr	r2, [pc, #144]	; (8004b50 <TIM_TI1_SetConfig+0xbc>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <TIM_TI1_SetConfig+0x56>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac8:	d00f      	beq.n	8004aea <TIM_TI1_SetConfig+0x56>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a21      	ldr	r2, [pc, #132]	; (8004b54 <TIM_TI1_SetConfig+0xc0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00b      	beq.n	8004aea <TIM_TI1_SetConfig+0x56>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	4a20      	ldr	r2, [pc, #128]	; (8004b58 <TIM_TI1_SetConfig+0xc4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_TI1_SetConfig+0x56>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a1f      	ldr	r2, [pc, #124]	; (8004b5c <TIM_TI1_SetConfig+0xc8>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_TI1_SetConfig+0x56>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <TIM_TI1_SetConfig+0xcc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <TIM_TI1_SetConfig+0x5a>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <TIM_TI1_SetConfig+0x5c>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f023 0303 	bic.w	r3, r3, #3
 8004afa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004afc:	697a      	ldr	r2, [r7, #20]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e003      	b.n	8004b0e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f023 030a 	bic.w	r3, r3, #10
 8004b28:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f003 030a 	and.w	r3, r3, #10
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	621a      	str	r2, [r3, #32]
}
 8004b42:	bf00      	nop
 8004b44:	371c      	adds	r7, #28
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	40010000 	.word	0x40010000
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40014000 	.word	0x40014000

08004b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 030a 	bic.w	r3, r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b087      	sub	sp, #28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
 8004bce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f023 0210 	bic.w	r2, r3, #16
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	021b      	lsls	r3, r3, #8
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	031b      	lsls	r3, r3, #12
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	697a      	ldr	r2, [r7, #20]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c14:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	621a      	str	r2, [r3, #32]
}
 8004c30:	bf00      	nop
 8004c32:	371c      	adds	r7, #28
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	f023 0210 	bic.w	r2, r3, #16
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	031b      	lsls	r3, r3, #12
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	693a      	ldr	r2, [r7, #16]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f023 0303 	bic.w	r3, r3, #3
 8004cc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004cca:	697a      	ldr	r2, [r7, #20]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004cec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	621a      	str	r2, [r3, #32]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	021b      	lsls	r3, r3, #8
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d52:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	031b      	lsls	r3, r3, #12
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d66:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	031b      	lsls	r3, r3, #12
 8004d6c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	697a      	ldr	r2, [r7, #20]
 8004d7a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	621a      	str	r2, [r3, #32]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f043 0307 	orr.w	r3, r3, #7
 8004db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	609a      	str	r2, [r3, #8]
}
 8004db8:	bf00      	nop
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	021a      	lsls	r2, r3, #8
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	697a      	ldr	r2, [r7, #20]
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	371c      	adds	r7, #28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	f003 031f 	and.w	r3, r3, #31
 8004e16:	2201      	movs	r2, #1
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1a      	ldr	r2, [r3, #32]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	43db      	mvns	r3, r3
 8004e26:	401a      	ands	r2, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	6879      	ldr	r1, [r7, #4]
 8004e38:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	621a      	str	r2, [r3, #32]
}
 8004e42:	bf00      	nop
 8004e44:	371c      	adds	r7, #28
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e050      	b.n	8004f0a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1c      	ldr	r2, [pc, #112]	; (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d018      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb4:	d013      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a18      	ldr	r2, [pc, #96]	; (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d00e      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a13      	ldr	r2, [pc, #76]	; (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10c      	bne.n	8004ef8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40010000 	.word	0x40010000
 8004f1c:	40000400 	.word	0x40000400
 8004f20:	40000800 	.word	0x40000800
 8004f24:	40000c00 	.word	0x40000c00
 8004f28:	40014000 	.word	0x40014000

08004f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e03f      	b.n	8004fe6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d106      	bne.n	8004f80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fc fc94 	bl	80018a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2224      	movs	r2, #36	; 0x24
 8004f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 fddf 	bl	8005b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004fbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b08a      	sub	sp, #40	; 0x28
 8004ff2:	af02      	add	r7, sp, #8
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	d17c      	bne.n	8005108 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_UART_Transmit+0x2c>
 8005014:	88fb      	ldrh	r3, [r7, #6]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e075      	b.n	800510a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_UART_Transmit+0x3e>
 8005028:	2302      	movs	r3, #2
 800502a:	e06e      	b.n	800510a <HAL_UART_Transmit+0x11c>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2221      	movs	r2, #33	; 0x21
 800503e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005042:	f7fc fec5 	bl	8001dd0 <HAL_GetTick>
 8005046:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	88fa      	ldrh	r2, [r7, #6]
 800504c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	88fa      	ldrh	r2, [r7, #6]
 8005052:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505c:	d108      	bne.n	8005070 <HAL_UART_Transmit+0x82>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	e003      	b.n	8005078 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005074:	2300      	movs	r3, #0
 8005076:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005080:	e02a      	b.n	80050d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2200      	movs	r2, #0
 800508a:	2180      	movs	r1, #128	; 0x80
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fb1f 	bl	80056d0 <UART_WaitOnFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e036      	b.n	800510a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	881b      	ldrh	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	3302      	adds	r3, #2
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e007      	b.n	80050ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	781a      	ldrb	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	3301      	adds	r3, #1
 80050c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	3b01      	subs	r3, #1
 80050d2:	b29a      	uxth	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1cf      	bne.n	8005082 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2140      	movs	r1, #64	; 0x40
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 faef 	bl	80056d0 <UART_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e006      	b.n	800510a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005104:	2300      	movs	r3, #0
 8005106:	e000      	b.n	800510a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005108:	2302      	movs	r3, #2
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	4613      	mov	r3, r2
 800511e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b20      	cmp	r3, #32
 800512a:	d11d      	bne.n	8005168 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <HAL_UART_Receive_IT+0x26>
 8005132:	88fb      	ldrh	r3, [r7, #6]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e016      	b.n	800516a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_UART_Receive_IT+0x38>
 8005146:	2302      	movs	r3, #2
 8005148:	e00f      	b.n	800516a <HAL_UART_Receive_IT+0x58>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005158:	88fb      	ldrh	r3, [r7, #6]
 800515a:	461a      	mov	r2, r3
 800515c:	68b9      	ldr	r1, [r7, #8]
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 fb24 	bl	80057ac <UART_Start_Receive_IT>
 8005164:	4603      	mov	r3, r0
 8005166:	e000      	b.n	800516a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b0ba      	sub	sp, #232	; 0xe8
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800519a:	2300      	movs	r3, #0
 800519c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10f      	bne.n	80051da <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d009      	beq.n	80051da <HAL_UART_IRQHandler+0x66>
 80051c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d003      	beq.n	80051da <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fc07 	bl	80059e6 <UART_Receive_IT>
      return;
 80051d8:	e256      	b.n	8005688 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 80de 	beq.w	80053a0 <HAL_UART_IRQHandler+0x22c>
 80051e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80d1 	beq.w	80053a0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00b      	beq.n	8005222 <HAL_UART_IRQHandler+0xae>
 800520a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f043 0201 	orr.w	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <HAL_UART_IRQHandler+0xd2>
 800522e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b00      	cmp	r3, #0
 8005238:	d005      	beq.n	8005246 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f043 0202 	orr.w	r2, r3, #2
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00b      	beq.n	800526a <HAL_UART_IRQHandler+0xf6>
 8005252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d005      	beq.n	800526a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	f043 0204 	orr.w	r2, r3, #4
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800526a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d011      	beq.n	800529a <HAL_UART_IRQHandler+0x126>
 8005276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d005      	beq.n	800529a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	f043 0208 	orr.w	r2, r3, #8
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 81ed 	beq.w	800567e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d008      	beq.n	80052c2 <HAL_UART_IRQHandler+0x14e>
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d002      	beq.n	80052c2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f000 fb92 	bl	80059e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052cc:	2b40      	cmp	r3, #64	; 0x40
 80052ce:	bf0c      	ite	eq
 80052d0:	2301      	moveq	r3, #1
 80052d2:	2300      	movne	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f003 0308 	and.w	r3, r3, #8
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d103      	bne.n	80052ee <HAL_UART_IRQHandler+0x17a>
 80052e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d04f      	beq.n	800538e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fa9a 	bl	8005828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d141      	bne.n	8005386 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3314      	adds	r3, #20
 8005308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800531c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	3314      	adds	r3, #20
 800532a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800532e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800533a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1d9      	bne.n	8005302 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005352:	2b00      	cmp	r3, #0
 8005354:	d013      	beq.n	800537e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535a:	4a7d      	ldr	r2, [pc, #500]	; (8005550 <HAL_UART_IRQHandler+0x3dc>)
 800535c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	4618      	mov	r0, r3
 8005364:	f7fc fee5 	bl	8002132 <HAL_DMA_Abort_IT>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d016      	beq.n	800539c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005378:	4610      	mov	r0, r2
 800537a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	e00e      	b.n	800539c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f990 	bl	80056a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005384:	e00a      	b.n	800539c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f98c 	bl	80056a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800538c:	e006      	b.n	800539c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 f988 	bl	80056a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800539a:	e170      	b.n	800567e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	bf00      	nop
    return;
 800539e:	e16e      	b.n	800567e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 814a 	bne.w	800563e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0310 	and.w	r3, r3, #16
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8143 	beq.w	800563e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053bc:	f003 0310 	and.w	r3, r3, #16
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 813c 	beq.w	800563e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c6:	2300      	movs	r3, #0
 80053c8:	60bb      	str	r3, [r7, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60bb      	str	r3, [r7, #8]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	60bb      	str	r3, [r7, #8]
 80053da:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053e6:	2b40      	cmp	r3, #64	; 0x40
 80053e8:	f040 80b4 	bne.w	8005554 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053f8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8140 	beq.w	8005682 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800540a:	429a      	cmp	r2, r3
 800540c:	f080 8139 	bcs.w	8005682 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005416:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005422:	f000 8088 	beq.w	8005536 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	330c      	adds	r3, #12
 800542c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800543c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	330c      	adds	r3, #12
 800544e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005452:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800545e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1d9      	bne.n	8005426 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005484:	f023 0301 	bic.w	r3, r3, #1
 8005488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800549a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800549e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a2:	e841 2300 	strex	r3, r2, [r1]
 80054a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1e1      	bne.n	8005472 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3314      	adds	r3, #20
 80054b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	3314      	adds	r3, #20
 80054ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e3      	bne.n	80054ae <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005506:	f023 0310 	bic.w	r3, r3, #16
 800550a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005518:	65ba      	str	r2, [r7, #88]	; 0x58
 800551a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800551e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005520:	e841 2300 	strex	r3, r2, [r1]
 8005524:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1e3      	bne.n	80054f4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	4618      	mov	r0, r3
 8005532:	f7fc fd8e 	bl	8002052 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800553e:	b29b      	uxth	r3, r3
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	b29b      	uxth	r3, r3
 8005544:	4619      	mov	r1, r3
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8b6 	bl	80056b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800554c:	e099      	b.n	8005682 <HAL_UART_IRQHandler+0x50e>
 800554e:	bf00      	nop
 8005550:	080058ef 	.word	0x080058ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800555c:	b29b      	uxth	r3, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 808b 	beq.w	8005686 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 8086 	beq.w	8005686 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	330c      	adds	r3, #12
 8005580:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005584:	e853 3f00 	ldrex	r3, [r3]
 8005588:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005590:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	330c      	adds	r3, #12
 800559a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800559e:	647a      	str	r2, [r7, #68]	; 0x44
 80055a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055a6:	e841 2300 	strex	r3, r2, [r1]
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1e3      	bne.n	800557a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	623b      	str	r3, [r7, #32]
   return(result);
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f023 0301 	bic.w	r3, r3, #1
 80055c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3314      	adds	r3, #20
 80055d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055d6:	633a      	str	r2, [r7, #48]	; 0x30
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055de:	e841 2300 	strex	r3, r2, [r1]
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1e3      	bne.n	80055b2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	60fb      	str	r3, [r7, #12]
   return(result);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0310 	bic.w	r3, r3, #16
 800560e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	330c      	adds	r3, #12
 8005618:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800561c:	61fa      	str	r2, [r7, #28]
 800561e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	69b9      	ldr	r1, [r7, #24]
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	617b      	str	r3, [r7, #20]
   return(result);
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e3      	bne.n	80055f8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f83e 	bl	80056b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800563c:	e023      	b.n	8005686 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_UART_IRQHandler+0x4ea>
 800564a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f95d 	bl	8005916 <UART_Transmit_IT>
    return;
 800565c:	e014      	b.n	8005688 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00e      	beq.n	8005688 <HAL_UART_IRQHandler+0x514>
 800566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d008      	beq.n	8005688 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f99d 	bl	80059b6 <UART_EndTransmit_IT>
    return;
 800567c:	e004      	b.n	8005688 <HAL_UART_IRQHandler+0x514>
    return;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <HAL_UART_IRQHandler+0x514>
      return;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_UART_IRQHandler+0x514>
      return;
 8005686:	bf00      	nop
  }
}
 8005688:	37e8      	adds	r7, #232	; 0xe8
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop

08005690 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b090      	sub	sp, #64	; 0x40
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	4613      	mov	r3, r2
 80056de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056e0:	e050      	b.n	8005784 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d04c      	beq.n	8005784 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <UART_WaitOnFlagUntilTimeout+0x30>
 80056f0:	f7fc fb6e 	bl	8001dd0 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d241      	bcs.n	8005784 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	330c      	adds	r3, #12
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005716:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005720:	637a      	str	r2, [r7, #52]	; 0x34
 8005722:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005726:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3314      	adds	r3, #20
 800573a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	613b      	str	r3, [r7, #16]
   return(result);
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f023 0301 	bic.w	r3, r3, #1
 800574a:	63bb      	str	r3, [r7, #56]	; 0x38
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	3314      	adds	r3, #20
 8005752:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005754:	623a      	str	r2, [r7, #32]
 8005756:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005758:	69f9      	ldr	r1, [r7, #28]
 800575a:	6a3a      	ldr	r2, [r7, #32]
 800575c:	e841 2300 	strex	r3, r2, [r1]
 8005760:	61bb      	str	r3, [r7, #24]
   return(result);
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1e5      	bne.n	8005734 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2220      	movs	r2, #32
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e00f      	b.n	80057a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	4013      	ands	r3, r2
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	429a      	cmp	r2, r3
 8005792:	bf0c      	ite	eq
 8005794:	2301      	moveq	r3, #1
 8005796:	2300      	movne	r3, #0
 8005798:	b2db      	uxtb	r3, r3
 800579a:	461a      	mov	r2, r3
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d09f      	beq.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3740      	adds	r7, #64	; 0x40
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	88fa      	ldrh	r2, [r7, #6]
 80057c4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	88fa      	ldrh	r2, [r7, #6]
 80057ca:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2222      	movs	r2, #34	; 0x22
 80057d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0201 	orr.w	r2, r2, #1
 8005808:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0220 	orr.w	r2, r2, #32
 8005818:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005828:	b480      	push	{r7}
 800582a:	b095      	sub	sp, #84	; 0x54
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583a:	e853 3f00 	ldrex	r3, [r3]
 800583e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005850:	643a      	str	r2, [r7, #64]	; 0x40
 8005852:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005858:	e841 2300 	strex	r3, r2, [r1]
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1e5      	bne.n	8005830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3314      	adds	r3, #20
 800586a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	e853 3f00 	ldrex	r3, [r3]
 8005872:	61fb      	str	r3, [r7, #28]
   return(result);
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	64bb      	str	r3, [r7, #72]	; 0x48
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3314      	adds	r3, #20
 8005882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e5      	bne.n	8005864 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589c:	2b01      	cmp	r3, #1
 800589e:	d119      	bne.n	80058d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	647b      	str	r3, [r7, #68]	; 0x44
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058c0:	61ba      	str	r2, [r7, #24]
 80058c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	6979      	ldr	r1, [r7, #20]
 80058c6:	69ba      	ldr	r2, [r7, #24]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	613b      	str	r3, [r7, #16]
   return(result);
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80058e2:	bf00      	nop
 80058e4:	3754      	adds	r7, #84	; 0x54
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b084      	sub	sp, #16
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f7ff fecb 	bl	80056a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800590e:	bf00      	nop
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005916:	b480      	push	{r7}
 8005918:	b085      	sub	sp, #20
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b21      	cmp	r3, #33	; 0x21
 8005928:	d13e      	bne.n	80059a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d114      	bne.n	800595e <UART_Transmit_IT+0x48>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d110      	bne.n	800595e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	881b      	ldrh	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005950:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	1c9a      	adds	r2, r3, #2
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	621a      	str	r2, [r3, #32]
 800595c:	e008      	b.n	8005970 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6211      	str	r1, [r2, #32]
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29b      	uxth	r3, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4619      	mov	r1, r3
 800597e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10f      	bne.n	80059a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68da      	ldr	r2, [r3, #12]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005992:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b082      	sub	sp, #8
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7ff fe5a 	bl	8005690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b08c      	sub	sp, #48	; 0x30
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b22      	cmp	r3, #34	; 0x22
 80059f8:	f040 80ab 	bne.w	8005b52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d117      	bne.n	8005a36 <UART_Receive_IT+0x50>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d113      	bne.n	8005a36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	629a      	str	r2, [r3, #40]	; 0x28
 8005a34:	e026      	b.n	8005a84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a48:	d007      	beq.n	8005a5a <UART_Receive_IT+0x74>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	689b      	ldr	r3, [r3, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10a      	bne.n	8005a68 <UART_Receive_IT+0x82>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e008      	b.n	8005a7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4619      	mov	r1, r3
 8005a92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d15a      	bne.n	8005b4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0220 	bic.w	r2, r2, #32
 8005aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	695a      	ldr	r2, [r3, #20]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f022 0201 	bic.w	r2, r2, #1
 8005ac6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d135      	bne.n	8005b44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	613b      	str	r3, [r7, #16]
   return(result);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f023 0310 	bic.w	r3, r3, #16
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	330c      	adds	r3, #12
 8005afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afe:	623a      	str	r2, [r7, #32]
 8005b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	69f9      	ldr	r1, [r7, #28]
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0310 	and.w	r3, r3, #16
 8005b1c:	2b10      	cmp	r3, #16
 8005b1e:	d10a      	bne.n	8005b36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7ff fdbb 	bl	80056b8 <HAL_UARTEx_RxEventCallback>
 8005b42:	e002      	b.n	8005b4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fa fcc9 	bl	80004dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e002      	b.n	8005b54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	e000      	b.n	8005b54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
  }
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3730      	adds	r7, #48	; 0x30
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b60:	b0c0      	sub	sp, #256	; 0x100
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b78:	68d9      	ldr	r1, [r3, #12]
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	ea40 0301 	orr.w	r3, r0, r1
 8005b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	431a      	orrs	r2, r3
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005bb4:	f021 010c 	bic.w	r1, r1, #12
 8005bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd6:	6999      	ldr	r1, [r3, #24]
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	ea40 0301 	orr.w	r3, r0, r1
 8005be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	4b8f      	ldr	r3, [pc, #572]	; (8005e28 <UART_SetConfig+0x2cc>)
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d005      	beq.n	8005bfc <UART_SetConfig+0xa0>
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	4b8d      	ldr	r3, [pc, #564]	; (8005e2c <UART_SetConfig+0x2d0>)
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d104      	bne.n	8005c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fd fa52 	bl	80030a4 <HAL_RCC_GetPCLK2Freq>
 8005c00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c04:	e003      	b.n	8005c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c06:	f7fd fa39 	bl	800307c <HAL_RCC_GetPCLK1Freq>
 8005c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c18:	f040 810c 	bne.w	8005e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005c2e:	4622      	mov	r2, r4
 8005c30:	462b      	mov	r3, r5
 8005c32:	1891      	adds	r1, r2, r2
 8005c34:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c36:	415b      	adcs	r3, r3
 8005c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005c3e:	4621      	mov	r1, r4
 8005c40:	eb12 0801 	adds.w	r8, r2, r1
 8005c44:	4629      	mov	r1, r5
 8005c46:	eb43 0901 	adc.w	r9, r3, r1
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	f04f 0300 	mov.w	r3, #0
 8005c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c5e:	4690      	mov	r8, r2
 8005c60:	4699      	mov	r9, r3
 8005c62:	4623      	mov	r3, r4
 8005c64:	eb18 0303 	adds.w	r3, r8, r3
 8005c68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005c6c:	462b      	mov	r3, r5
 8005c6e:	eb49 0303 	adc.w	r3, r9, r3
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	18db      	adds	r3, r3, r3
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c90:	4613      	mov	r3, r2
 8005c92:	eb42 0303 	adc.w	r3, r2, r3
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54
 8005c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ca0:	f7fa fa9a 	bl	80001d8 <__aeabi_uldivmod>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4b61      	ldr	r3, [pc, #388]	; (8005e30 <UART_SetConfig+0x2d4>)
 8005caa:	fba3 2302 	umull	r2, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	011c      	lsls	r4, r3, #4
 8005cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005cc4:	4642      	mov	r2, r8
 8005cc6:	464b      	mov	r3, r9
 8005cc8:	1891      	adds	r1, r2, r2
 8005cca:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ccc:	415b      	adcs	r3, r3
 8005cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf4:	4692      	mov	sl, r2
 8005cf6:	469b      	mov	fp, r3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8005cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d02:	464b      	mov	r3, r9
 8005d04:	eb4b 0303 	adc.w	r3, fp, r3
 8005d08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005d20:	460b      	mov	r3, r1
 8005d22:	18db      	adds	r3, r3, r3
 8005d24:	643b      	str	r3, [r7, #64]	; 0x40
 8005d26:	4613      	mov	r3, r2
 8005d28:	eb42 0303 	adc.w	r3, r2, r3
 8005d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005d36:	f7fa fa4f 	bl	80001d8 <__aeabi_uldivmod>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4b3b      	ldr	r3, [pc, #236]	; (8005e30 <UART_SetConfig+0x2d4>)
 8005d42:	fba3 2301 	umull	r2, r3, r3, r1
 8005d46:	095b      	lsrs	r3, r3, #5
 8005d48:	2264      	movs	r2, #100	; 0x64
 8005d4a:	fb02 f303 	mul.w	r3, r2, r3
 8005d4e:	1acb      	subs	r3, r1, r3
 8005d50:	00db      	lsls	r3, r3, #3
 8005d52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005d56:	4b36      	ldr	r3, [pc, #216]	; (8005e30 <UART_SetConfig+0x2d4>)
 8005d58:	fba3 2302 	umull	r2, r3, r3, r2
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d64:	441c      	add	r4, r3
 8005d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005d78:	4642      	mov	r2, r8
 8005d7a:	464b      	mov	r3, r9
 8005d7c:	1891      	adds	r1, r2, r2
 8005d7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005d80:	415b      	adcs	r3, r3
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d88:	4641      	mov	r1, r8
 8005d8a:	1851      	adds	r1, r2, r1
 8005d8c:	6339      	str	r1, [r7, #48]	; 0x30
 8005d8e:	4649      	mov	r1, r9
 8005d90:	414b      	adcs	r3, r1
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005da0:	4659      	mov	r1, fp
 8005da2:	00cb      	lsls	r3, r1, #3
 8005da4:	4651      	mov	r1, sl
 8005da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005daa:	4651      	mov	r1, sl
 8005dac:	00ca      	lsls	r2, r1, #3
 8005dae:	4610      	mov	r0, r2
 8005db0:	4619      	mov	r1, r3
 8005db2:	4603      	mov	r3, r0
 8005db4:	4642      	mov	r2, r8
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	460a      	mov	r2, r1
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ddc:	460b      	mov	r3, r1
 8005dde:	18db      	adds	r3, r3, r3
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005de2:	4613      	mov	r3, r2
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005df2:	f7fa f9f1 	bl	80001d8 <__aeabi_uldivmod>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	; (8005e30 <UART_SetConfig+0x2d4>)
 8005dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8005e00:	095b      	lsrs	r3, r3, #5
 8005e02:	2164      	movs	r1, #100	; 0x64
 8005e04:	fb01 f303 	mul.w	r3, r1, r3
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	3332      	adds	r3, #50	; 0x32
 8005e0e:	4a08      	ldr	r2, [pc, #32]	; (8005e30 <UART_SetConfig+0x2d4>)
 8005e10:	fba2 2303 	umull	r2, r3, r2, r3
 8005e14:	095b      	lsrs	r3, r3, #5
 8005e16:	f003 0207 	and.w	r2, r3, #7
 8005e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4422      	add	r2, r4
 8005e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e24:	e105      	b.n	8006032 <UART_SetConfig+0x4d6>
 8005e26:	bf00      	nop
 8005e28:	40011000 	.word	0x40011000
 8005e2c:	40011400 	.word	0x40011400
 8005e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005e46:	4642      	mov	r2, r8
 8005e48:	464b      	mov	r3, r9
 8005e4a:	1891      	adds	r1, r2, r2
 8005e4c:	6239      	str	r1, [r7, #32]
 8005e4e:	415b      	adcs	r3, r3
 8005e50:	627b      	str	r3, [r7, #36]	; 0x24
 8005e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e56:	4641      	mov	r1, r8
 8005e58:	1854      	adds	r4, r2, r1
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	eb43 0501 	adc.w	r5, r3, r1
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	00eb      	lsls	r3, r5, #3
 8005e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e6e:	00e2      	lsls	r2, r4, #3
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4643      	mov	r3, r8
 8005e76:	18e3      	adds	r3, r4, r3
 8005e78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	eb45 0303 	adc.w	r3, r5, r3
 8005e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e96:	f04f 0200 	mov.w	r2, #0
 8005e9a:	f04f 0300 	mov.w	r3, #0
 8005e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	008b      	lsls	r3, r1, #2
 8005ea6:	4621      	mov	r1, r4
 8005ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eac:	4621      	mov	r1, r4
 8005eae:	008a      	lsls	r2, r1, #2
 8005eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005eb4:	f7fa f990 	bl	80001d8 <__aeabi_uldivmod>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	4b60      	ldr	r3, [pc, #384]	; (8006040 <UART_SetConfig+0x4e4>)
 8005ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8005ec2:	095b      	lsrs	r3, r3, #5
 8005ec4:	011c      	lsls	r4, r3, #4
 8005ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005ed0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	1891      	adds	r1, r2, r2
 8005ede:	61b9      	str	r1, [r7, #24]
 8005ee0:	415b      	adcs	r3, r3
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee8:	4641      	mov	r1, r8
 8005eea:	1851      	adds	r1, r2, r1
 8005eec:	6139      	str	r1, [r7, #16]
 8005eee:	4649      	mov	r1, r9
 8005ef0:	414b      	adcs	r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	00cb      	lsls	r3, r1, #3
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	00ca      	lsls	r2, r1, #3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	4642      	mov	r2, r8
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	460a      	mov	r2, r1
 8005f20:	eb42 0303 	adc.w	r3, r2, r3
 8005f24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005f40:	4649      	mov	r1, r9
 8005f42:	008b      	lsls	r3, r1, #2
 8005f44:	4641      	mov	r1, r8
 8005f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	008a      	lsls	r2, r1, #2
 8005f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005f52:	f7fa f941 	bl	80001d8 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4b39      	ldr	r3, [pc, #228]	; (8006040 <UART_SetConfig+0x4e4>)
 8005f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	2164      	movs	r1, #100	; 0x64
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	3332      	adds	r3, #50	; 0x32
 8005f6e:	4a34      	ldr	r2, [pc, #208]	; (8006040 <UART_SetConfig+0x4e4>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f7a:	441c      	add	r4, r3
 8005f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f80:	2200      	movs	r2, #0
 8005f82:	673b      	str	r3, [r7, #112]	; 0x70
 8005f84:	677a      	str	r2, [r7, #116]	; 0x74
 8005f86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	1891      	adds	r1, r2, r2
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	415b      	adcs	r3, r3
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	1851      	adds	r1, r2, r1
 8005f9e:	6039      	str	r1, [r7, #0]
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	414b      	adcs	r3, r1
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005fb2:	4659      	mov	r1, fp
 8005fb4:	00cb      	lsls	r3, r1, #3
 8005fb6:	4651      	mov	r1, sl
 8005fb8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fbc:	4651      	mov	r1, sl
 8005fbe:	00ca      	lsls	r2, r1, #3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4642      	mov	r2, r8
 8005fc8:	189b      	adds	r3, r3, r2
 8005fca:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fcc:	464b      	mov	r3, r9
 8005fce:	460a      	mov	r2, r1
 8005fd0:	eb42 0303 	adc.w	r3, r2, r3
 8005fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	663b      	str	r3, [r7, #96]	; 0x60
 8005fe0:	667a      	str	r2, [r7, #100]	; 0x64
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005fee:	4649      	mov	r1, r9
 8005ff0:	008b      	lsls	r3, r1, #2
 8005ff2:	4641      	mov	r1, r8
 8005ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	008a      	lsls	r2, r1, #2
 8005ffc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006000:	f7fa f8ea 	bl	80001d8 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <UART_SetConfig+0x4e4>)
 800600a:	fba3 1302 	umull	r1, r3, r3, r2
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	2164      	movs	r1, #100	; 0x64
 8006012:	fb01 f303 	mul.w	r3, r1, r3
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	3332      	adds	r3, #50	; 0x32
 800601c:	4a08      	ldr	r2, [pc, #32]	; (8006040 <UART_SetConfig+0x4e4>)
 800601e:	fba2 2303 	umull	r2, r3, r2, r3
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	f003 020f 	and.w	r2, r3, #15
 8006028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4422      	add	r2, r4
 8006030:	609a      	str	r2, [r3, #8]
}
 8006032:	bf00      	nop
 8006034:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006038:	46bd      	mov	sp, r7
 800603a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800603e:	bf00      	nop
 8006040:	51eb851f 	.word	0x51eb851f

08006044 <__errno>:
 8006044:	4b01      	ldr	r3, [pc, #4]	; (800604c <__errno+0x8>)
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	20000014 	.word	0x20000014

08006050 <__libc_init_array>:
 8006050:	b570      	push	{r4, r5, r6, lr}
 8006052:	4d0d      	ldr	r5, [pc, #52]	; (8006088 <__libc_init_array+0x38>)
 8006054:	4c0d      	ldr	r4, [pc, #52]	; (800608c <__libc_init_array+0x3c>)
 8006056:	1b64      	subs	r4, r4, r5
 8006058:	10a4      	asrs	r4, r4, #2
 800605a:	2600      	movs	r6, #0
 800605c:	42a6      	cmp	r6, r4
 800605e:	d109      	bne.n	8006074 <__libc_init_array+0x24>
 8006060:	4d0b      	ldr	r5, [pc, #44]	; (8006090 <__libc_init_array+0x40>)
 8006062:	4c0c      	ldr	r4, [pc, #48]	; (8006094 <__libc_init_array+0x44>)
 8006064:	f000 fd1e 	bl	8006aa4 <_init>
 8006068:	1b64      	subs	r4, r4, r5
 800606a:	10a4      	asrs	r4, r4, #2
 800606c:	2600      	movs	r6, #0
 800606e:	42a6      	cmp	r6, r4
 8006070:	d105      	bne.n	800607e <__libc_init_array+0x2e>
 8006072:	bd70      	pop	{r4, r5, r6, pc}
 8006074:	f855 3b04 	ldr.w	r3, [r5], #4
 8006078:	4798      	blx	r3
 800607a:	3601      	adds	r6, #1
 800607c:	e7ee      	b.n	800605c <__libc_init_array+0xc>
 800607e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006082:	4798      	blx	r3
 8006084:	3601      	adds	r6, #1
 8006086:	e7f2      	b.n	800606e <__libc_init_array+0x1e>
 8006088:	08006b50 	.word	0x08006b50
 800608c:	08006b50 	.word	0x08006b50
 8006090:	08006b50 	.word	0x08006b50
 8006094:	08006b54 	.word	0x08006b54

08006098 <memset>:
 8006098:	4402      	add	r2, r0
 800609a:	4603      	mov	r3, r0
 800609c:	4293      	cmp	r3, r2
 800609e:	d100      	bne.n	80060a2 <memset+0xa>
 80060a0:	4770      	bx	lr
 80060a2:	f803 1b01 	strb.w	r1, [r3], #1
 80060a6:	e7f9      	b.n	800609c <memset+0x4>

080060a8 <_puts_r>:
 80060a8:	b570      	push	{r4, r5, r6, lr}
 80060aa:	460e      	mov	r6, r1
 80060ac:	4605      	mov	r5, r0
 80060ae:	b118      	cbz	r0, 80060b8 <_puts_r+0x10>
 80060b0:	6983      	ldr	r3, [r0, #24]
 80060b2:	b90b      	cbnz	r3, 80060b8 <_puts_r+0x10>
 80060b4:	f000 fa48 	bl	8006548 <__sinit>
 80060b8:	69ab      	ldr	r3, [r5, #24]
 80060ba:	68ac      	ldr	r4, [r5, #8]
 80060bc:	b913      	cbnz	r3, 80060c4 <_puts_r+0x1c>
 80060be:	4628      	mov	r0, r5
 80060c0:	f000 fa42 	bl	8006548 <__sinit>
 80060c4:	4b2c      	ldr	r3, [pc, #176]	; (8006178 <_puts_r+0xd0>)
 80060c6:	429c      	cmp	r4, r3
 80060c8:	d120      	bne.n	800610c <_puts_r+0x64>
 80060ca:	686c      	ldr	r4, [r5, #4]
 80060cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ce:	07db      	lsls	r3, r3, #31
 80060d0:	d405      	bmi.n	80060de <_puts_r+0x36>
 80060d2:	89a3      	ldrh	r3, [r4, #12]
 80060d4:	0598      	lsls	r0, r3, #22
 80060d6:	d402      	bmi.n	80060de <_puts_r+0x36>
 80060d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060da:	f000 fad3 	bl	8006684 <__retarget_lock_acquire_recursive>
 80060de:	89a3      	ldrh	r3, [r4, #12]
 80060e0:	0719      	lsls	r1, r3, #28
 80060e2:	d51d      	bpl.n	8006120 <_puts_r+0x78>
 80060e4:	6923      	ldr	r3, [r4, #16]
 80060e6:	b1db      	cbz	r3, 8006120 <_puts_r+0x78>
 80060e8:	3e01      	subs	r6, #1
 80060ea:	68a3      	ldr	r3, [r4, #8]
 80060ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060f0:	3b01      	subs	r3, #1
 80060f2:	60a3      	str	r3, [r4, #8]
 80060f4:	bb39      	cbnz	r1, 8006146 <_puts_r+0x9e>
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	da38      	bge.n	800616c <_puts_r+0xc4>
 80060fa:	4622      	mov	r2, r4
 80060fc:	210a      	movs	r1, #10
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 f848 	bl	8006194 <__swbuf_r>
 8006104:	3001      	adds	r0, #1
 8006106:	d011      	beq.n	800612c <_puts_r+0x84>
 8006108:	250a      	movs	r5, #10
 800610a:	e011      	b.n	8006130 <_puts_r+0x88>
 800610c:	4b1b      	ldr	r3, [pc, #108]	; (800617c <_puts_r+0xd4>)
 800610e:	429c      	cmp	r4, r3
 8006110:	d101      	bne.n	8006116 <_puts_r+0x6e>
 8006112:	68ac      	ldr	r4, [r5, #8]
 8006114:	e7da      	b.n	80060cc <_puts_r+0x24>
 8006116:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <_puts_r+0xd8>)
 8006118:	429c      	cmp	r4, r3
 800611a:	bf08      	it	eq
 800611c:	68ec      	ldreq	r4, [r5, #12]
 800611e:	e7d5      	b.n	80060cc <_puts_r+0x24>
 8006120:	4621      	mov	r1, r4
 8006122:	4628      	mov	r0, r5
 8006124:	f000 f888 	bl	8006238 <__swsetup_r>
 8006128:	2800      	cmp	r0, #0
 800612a:	d0dd      	beq.n	80060e8 <_puts_r+0x40>
 800612c:	f04f 35ff 	mov.w	r5, #4294967295
 8006130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006132:	07da      	lsls	r2, r3, #31
 8006134:	d405      	bmi.n	8006142 <_puts_r+0x9a>
 8006136:	89a3      	ldrh	r3, [r4, #12]
 8006138:	059b      	lsls	r3, r3, #22
 800613a:	d402      	bmi.n	8006142 <_puts_r+0x9a>
 800613c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800613e:	f000 faa2 	bl	8006686 <__retarget_lock_release_recursive>
 8006142:	4628      	mov	r0, r5
 8006144:	bd70      	pop	{r4, r5, r6, pc}
 8006146:	2b00      	cmp	r3, #0
 8006148:	da04      	bge.n	8006154 <_puts_r+0xac>
 800614a:	69a2      	ldr	r2, [r4, #24]
 800614c:	429a      	cmp	r2, r3
 800614e:	dc06      	bgt.n	800615e <_puts_r+0xb6>
 8006150:	290a      	cmp	r1, #10
 8006152:	d004      	beq.n	800615e <_puts_r+0xb6>
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	6022      	str	r2, [r4, #0]
 800615a:	7019      	strb	r1, [r3, #0]
 800615c:	e7c5      	b.n	80060ea <_puts_r+0x42>
 800615e:	4622      	mov	r2, r4
 8006160:	4628      	mov	r0, r5
 8006162:	f000 f817 	bl	8006194 <__swbuf_r>
 8006166:	3001      	adds	r0, #1
 8006168:	d1bf      	bne.n	80060ea <_puts_r+0x42>
 800616a:	e7df      	b.n	800612c <_puts_r+0x84>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	250a      	movs	r5, #10
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	6022      	str	r2, [r4, #0]
 8006174:	701d      	strb	r5, [r3, #0]
 8006176:	e7db      	b.n	8006130 <_puts_r+0x88>
 8006178:	08006b08 	.word	0x08006b08
 800617c:	08006b28 	.word	0x08006b28
 8006180:	08006ae8 	.word	0x08006ae8

08006184 <puts>:
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <puts+0xc>)
 8006186:	4601      	mov	r1, r0
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f7ff bf8d 	b.w	80060a8 <_puts_r>
 800618e:	bf00      	nop
 8006190:	20000014 	.word	0x20000014

08006194 <__swbuf_r>:
 8006194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006196:	460e      	mov	r6, r1
 8006198:	4614      	mov	r4, r2
 800619a:	4605      	mov	r5, r0
 800619c:	b118      	cbz	r0, 80061a6 <__swbuf_r+0x12>
 800619e:	6983      	ldr	r3, [r0, #24]
 80061a0:	b90b      	cbnz	r3, 80061a6 <__swbuf_r+0x12>
 80061a2:	f000 f9d1 	bl	8006548 <__sinit>
 80061a6:	4b21      	ldr	r3, [pc, #132]	; (800622c <__swbuf_r+0x98>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	d12b      	bne.n	8006204 <__swbuf_r+0x70>
 80061ac:	686c      	ldr	r4, [r5, #4]
 80061ae:	69a3      	ldr	r3, [r4, #24]
 80061b0:	60a3      	str	r3, [r4, #8]
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	071a      	lsls	r2, r3, #28
 80061b6:	d52f      	bpl.n	8006218 <__swbuf_r+0x84>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	b36b      	cbz	r3, 8006218 <__swbuf_r+0x84>
 80061bc:	6923      	ldr	r3, [r4, #16]
 80061be:	6820      	ldr	r0, [r4, #0]
 80061c0:	1ac0      	subs	r0, r0, r3
 80061c2:	6963      	ldr	r3, [r4, #20]
 80061c4:	b2f6      	uxtb	r6, r6
 80061c6:	4283      	cmp	r3, r0
 80061c8:	4637      	mov	r7, r6
 80061ca:	dc04      	bgt.n	80061d6 <__swbuf_r+0x42>
 80061cc:	4621      	mov	r1, r4
 80061ce:	4628      	mov	r0, r5
 80061d0:	f000 f926 	bl	8006420 <_fflush_r>
 80061d4:	bb30      	cbnz	r0, 8006224 <__swbuf_r+0x90>
 80061d6:	68a3      	ldr	r3, [r4, #8]
 80061d8:	3b01      	subs	r3, #1
 80061da:	60a3      	str	r3, [r4, #8]
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	6022      	str	r2, [r4, #0]
 80061e2:	701e      	strb	r6, [r3, #0]
 80061e4:	6963      	ldr	r3, [r4, #20]
 80061e6:	3001      	adds	r0, #1
 80061e8:	4283      	cmp	r3, r0
 80061ea:	d004      	beq.n	80061f6 <__swbuf_r+0x62>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	07db      	lsls	r3, r3, #31
 80061f0:	d506      	bpl.n	8006200 <__swbuf_r+0x6c>
 80061f2:	2e0a      	cmp	r6, #10
 80061f4:	d104      	bne.n	8006200 <__swbuf_r+0x6c>
 80061f6:	4621      	mov	r1, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	f000 f911 	bl	8006420 <_fflush_r>
 80061fe:	b988      	cbnz	r0, 8006224 <__swbuf_r+0x90>
 8006200:	4638      	mov	r0, r7
 8006202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <__swbuf_r+0x9c>)
 8006206:	429c      	cmp	r4, r3
 8006208:	d101      	bne.n	800620e <__swbuf_r+0x7a>
 800620a:	68ac      	ldr	r4, [r5, #8]
 800620c:	e7cf      	b.n	80061ae <__swbuf_r+0x1a>
 800620e:	4b09      	ldr	r3, [pc, #36]	; (8006234 <__swbuf_r+0xa0>)
 8006210:	429c      	cmp	r4, r3
 8006212:	bf08      	it	eq
 8006214:	68ec      	ldreq	r4, [r5, #12]
 8006216:	e7ca      	b.n	80061ae <__swbuf_r+0x1a>
 8006218:	4621      	mov	r1, r4
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f80c 	bl	8006238 <__swsetup_r>
 8006220:	2800      	cmp	r0, #0
 8006222:	d0cb      	beq.n	80061bc <__swbuf_r+0x28>
 8006224:	f04f 37ff 	mov.w	r7, #4294967295
 8006228:	e7ea      	b.n	8006200 <__swbuf_r+0x6c>
 800622a:	bf00      	nop
 800622c:	08006b08 	.word	0x08006b08
 8006230:	08006b28 	.word	0x08006b28
 8006234:	08006ae8 	.word	0x08006ae8

08006238 <__swsetup_r>:
 8006238:	4b32      	ldr	r3, [pc, #200]	; (8006304 <__swsetup_r+0xcc>)
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	681d      	ldr	r5, [r3, #0]
 800623e:	4606      	mov	r6, r0
 8006240:	460c      	mov	r4, r1
 8006242:	b125      	cbz	r5, 800624e <__swsetup_r+0x16>
 8006244:	69ab      	ldr	r3, [r5, #24]
 8006246:	b913      	cbnz	r3, 800624e <__swsetup_r+0x16>
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f97d 	bl	8006548 <__sinit>
 800624e:	4b2e      	ldr	r3, [pc, #184]	; (8006308 <__swsetup_r+0xd0>)
 8006250:	429c      	cmp	r4, r3
 8006252:	d10f      	bne.n	8006274 <__swsetup_r+0x3c>
 8006254:	686c      	ldr	r4, [r5, #4]
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800625c:	0719      	lsls	r1, r3, #28
 800625e:	d42c      	bmi.n	80062ba <__swsetup_r+0x82>
 8006260:	06dd      	lsls	r5, r3, #27
 8006262:	d411      	bmi.n	8006288 <__swsetup_r+0x50>
 8006264:	2309      	movs	r3, #9
 8006266:	6033      	str	r3, [r6, #0]
 8006268:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800626c:	81a3      	strh	r3, [r4, #12]
 800626e:	f04f 30ff 	mov.w	r0, #4294967295
 8006272:	e03e      	b.n	80062f2 <__swsetup_r+0xba>
 8006274:	4b25      	ldr	r3, [pc, #148]	; (800630c <__swsetup_r+0xd4>)
 8006276:	429c      	cmp	r4, r3
 8006278:	d101      	bne.n	800627e <__swsetup_r+0x46>
 800627a:	68ac      	ldr	r4, [r5, #8]
 800627c:	e7eb      	b.n	8006256 <__swsetup_r+0x1e>
 800627e:	4b24      	ldr	r3, [pc, #144]	; (8006310 <__swsetup_r+0xd8>)
 8006280:	429c      	cmp	r4, r3
 8006282:	bf08      	it	eq
 8006284:	68ec      	ldreq	r4, [r5, #12]
 8006286:	e7e6      	b.n	8006256 <__swsetup_r+0x1e>
 8006288:	0758      	lsls	r0, r3, #29
 800628a:	d512      	bpl.n	80062b2 <__swsetup_r+0x7a>
 800628c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800628e:	b141      	cbz	r1, 80062a2 <__swsetup_r+0x6a>
 8006290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006294:	4299      	cmp	r1, r3
 8006296:	d002      	beq.n	800629e <__swsetup_r+0x66>
 8006298:	4630      	mov	r0, r6
 800629a:	f000 fa5b 	bl	8006754 <_free_r>
 800629e:	2300      	movs	r3, #0
 80062a0:	6363      	str	r3, [r4, #52]	; 0x34
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	2300      	movs	r3, #0
 80062ac:	6063      	str	r3, [r4, #4]
 80062ae:	6923      	ldr	r3, [r4, #16]
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	89a3      	ldrh	r3, [r4, #12]
 80062b4:	f043 0308 	orr.w	r3, r3, #8
 80062b8:	81a3      	strh	r3, [r4, #12]
 80062ba:	6923      	ldr	r3, [r4, #16]
 80062bc:	b94b      	cbnz	r3, 80062d2 <__swsetup_r+0x9a>
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c8:	d003      	beq.n	80062d2 <__swsetup_r+0x9a>
 80062ca:	4621      	mov	r1, r4
 80062cc:	4630      	mov	r0, r6
 80062ce:	f000 fa01 	bl	80066d4 <__smakebuf_r>
 80062d2:	89a0      	ldrh	r0, [r4, #12]
 80062d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062d8:	f010 0301 	ands.w	r3, r0, #1
 80062dc:	d00a      	beq.n	80062f4 <__swsetup_r+0xbc>
 80062de:	2300      	movs	r3, #0
 80062e0:	60a3      	str	r3, [r4, #8]
 80062e2:	6963      	ldr	r3, [r4, #20]
 80062e4:	425b      	negs	r3, r3
 80062e6:	61a3      	str	r3, [r4, #24]
 80062e8:	6923      	ldr	r3, [r4, #16]
 80062ea:	b943      	cbnz	r3, 80062fe <__swsetup_r+0xc6>
 80062ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80062f0:	d1ba      	bne.n	8006268 <__swsetup_r+0x30>
 80062f2:	bd70      	pop	{r4, r5, r6, pc}
 80062f4:	0781      	lsls	r1, r0, #30
 80062f6:	bf58      	it	pl
 80062f8:	6963      	ldrpl	r3, [r4, #20]
 80062fa:	60a3      	str	r3, [r4, #8]
 80062fc:	e7f4      	b.n	80062e8 <__swsetup_r+0xb0>
 80062fe:	2000      	movs	r0, #0
 8006300:	e7f7      	b.n	80062f2 <__swsetup_r+0xba>
 8006302:	bf00      	nop
 8006304:	20000014 	.word	0x20000014
 8006308:	08006b08 	.word	0x08006b08
 800630c:	08006b28 	.word	0x08006b28
 8006310:	08006ae8 	.word	0x08006ae8

08006314 <__sflush_r>:
 8006314:	898a      	ldrh	r2, [r1, #12]
 8006316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631a:	4605      	mov	r5, r0
 800631c:	0710      	lsls	r0, r2, #28
 800631e:	460c      	mov	r4, r1
 8006320:	d458      	bmi.n	80063d4 <__sflush_r+0xc0>
 8006322:	684b      	ldr	r3, [r1, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc05      	bgt.n	8006334 <__sflush_r+0x20>
 8006328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800632a:	2b00      	cmp	r3, #0
 800632c:	dc02      	bgt.n	8006334 <__sflush_r+0x20>
 800632e:	2000      	movs	r0, #0
 8006330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006336:	2e00      	cmp	r6, #0
 8006338:	d0f9      	beq.n	800632e <__sflush_r+0x1a>
 800633a:	2300      	movs	r3, #0
 800633c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006340:	682f      	ldr	r7, [r5, #0]
 8006342:	602b      	str	r3, [r5, #0]
 8006344:	d032      	beq.n	80063ac <__sflush_r+0x98>
 8006346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006348:	89a3      	ldrh	r3, [r4, #12]
 800634a:	075a      	lsls	r2, r3, #29
 800634c:	d505      	bpl.n	800635a <__sflush_r+0x46>
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	1ac0      	subs	r0, r0, r3
 8006352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006354:	b10b      	cbz	r3, 800635a <__sflush_r+0x46>
 8006356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006358:	1ac0      	subs	r0, r0, r3
 800635a:	2300      	movs	r3, #0
 800635c:	4602      	mov	r2, r0
 800635e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006360:	6a21      	ldr	r1, [r4, #32]
 8006362:	4628      	mov	r0, r5
 8006364:	47b0      	blx	r6
 8006366:	1c43      	adds	r3, r0, #1
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	d106      	bne.n	800637a <__sflush_r+0x66>
 800636c:	6829      	ldr	r1, [r5, #0]
 800636e:	291d      	cmp	r1, #29
 8006370:	d82c      	bhi.n	80063cc <__sflush_r+0xb8>
 8006372:	4a2a      	ldr	r2, [pc, #168]	; (800641c <__sflush_r+0x108>)
 8006374:	40ca      	lsrs	r2, r1
 8006376:	07d6      	lsls	r6, r2, #31
 8006378:	d528      	bpl.n	80063cc <__sflush_r+0xb8>
 800637a:	2200      	movs	r2, #0
 800637c:	6062      	str	r2, [r4, #4]
 800637e:	04d9      	lsls	r1, r3, #19
 8006380:	6922      	ldr	r2, [r4, #16]
 8006382:	6022      	str	r2, [r4, #0]
 8006384:	d504      	bpl.n	8006390 <__sflush_r+0x7c>
 8006386:	1c42      	adds	r2, r0, #1
 8006388:	d101      	bne.n	800638e <__sflush_r+0x7a>
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	b903      	cbnz	r3, 8006390 <__sflush_r+0x7c>
 800638e:	6560      	str	r0, [r4, #84]	; 0x54
 8006390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006392:	602f      	str	r7, [r5, #0]
 8006394:	2900      	cmp	r1, #0
 8006396:	d0ca      	beq.n	800632e <__sflush_r+0x1a>
 8006398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800639c:	4299      	cmp	r1, r3
 800639e:	d002      	beq.n	80063a6 <__sflush_r+0x92>
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f9d7 	bl	8006754 <_free_r>
 80063a6:	2000      	movs	r0, #0
 80063a8:	6360      	str	r0, [r4, #52]	; 0x34
 80063aa:	e7c1      	b.n	8006330 <__sflush_r+0x1c>
 80063ac:	6a21      	ldr	r1, [r4, #32]
 80063ae:	2301      	movs	r3, #1
 80063b0:	4628      	mov	r0, r5
 80063b2:	47b0      	blx	r6
 80063b4:	1c41      	adds	r1, r0, #1
 80063b6:	d1c7      	bne.n	8006348 <__sflush_r+0x34>
 80063b8:	682b      	ldr	r3, [r5, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d0c4      	beq.n	8006348 <__sflush_r+0x34>
 80063be:	2b1d      	cmp	r3, #29
 80063c0:	d001      	beq.n	80063c6 <__sflush_r+0xb2>
 80063c2:	2b16      	cmp	r3, #22
 80063c4:	d101      	bne.n	80063ca <__sflush_r+0xb6>
 80063c6:	602f      	str	r7, [r5, #0]
 80063c8:	e7b1      	b.n	800632e <__sflush_r+0x1a>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063d0:	81a3      	strh	r3, [r4, #12]
 80063d2:	e7ad      	b.n	8006330 <__sflush_r+0x1c>
 80063d4:	690f      	ldr	r7, [r1, #16]
 80063d6:	2f00      	cmp	r7, #0
 80063d8:	d0a9      	beq.n	800632e <__sflush_r+0x1a>
 80063da:	0793      	lsls	r3, r2, #30
 80063dc:	680e      	ldr	r6, [r1, #0]
 80063de:	bf08      	it	eq
 80063e0:	694b      	ldreq	r3, [r1, #20]
 80063e2:	600f      	str	r7, [r1, #0]
 80063e4:	bf18      	it	ne
 80063e6:	2300      	movne	r3, #0
 80063e8:	eba6 0807 	sub.w	r8, r6, r7
 80063ec:	608b      	str	r3, [r1, #8]
 80063ee:	f1b8 0f00 	cmp.w	r8, #0
 80063f2:	dd9c      	ble.n	800632e <__sflush_r+0x1a>
 80063f4:	6a21      	ldr	r1, [r4, #32]
 80063f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063f8:	4643      	mov	r3, r8
 80063fa:	463a      	mov	r2, r7
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b0      	blx	r6
 8006400:	2800      	cmp	r0, #0
 8006402:	dc06      	bgt.n	8006412 <__sflush_r+0xfe>
 8006404:	89a3      	ldrh	r3, [r4, #12]
 8006406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	f04f 30ff 	mov.w	r0, #4294967295
 8006410:	e78e      	b.n	8006330 <__sflush_r+0x1c>
 8006412:	4407      	add	r7, r0
 8006414:	eba8 0800 	sub.w	r8, r8, r0
 8006418:	e7e9      	b.n	80063ee <__sflush_r+0xda>
 800641a:	bf00      	nop
 800641c:	20400001 	.word	0x20400001

08006420 <_fflush_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	690b      	ldr	r3, [r1, #16]
 8006424:	4605      	mov	r5, r0
 8006426:	460c      	mov	r4, r1
 8006428:	b913      	cbnz	r3, 8006430 <_fflush_r+0x10>
 800642a:	2500      	movs	r5, #0
 800642c:	4628      	mov	r0, r5
 800642e:	bd38      	pop	{r3, r4, r5, pc}
 8006430:	b118      	cbz	r0, 800643a <_fflush_r+0x1a>
 8006432:	6983      	ldr	r3, [r0, #24]
 8006434:	b90b      	cbnz	r3, 800643a <_fflush_r+0x1a>
 8006436:	f000 f887 	bl	8006548 <__sinit>
 800643a:	4b14      	ldr	r3, [pc, #80]	; (800648c <_fflush_r+0x6c>)
 800643c:	429c      	cmp	r4, r3
 800643e:	d11b      	bne.n	8006478 <_fflush_r+0x58>
 8006440:	686c      	ldr	r4, [r5, #4]
 8006442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d0ef      	beq.n	800642a <_fflush_r+0xa>
 800644a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800644c:	07d0      	lsls	r0, r2, #31
 800644e:	d404      	bmi.n	800645a <_fflush_r+0x3a>
 8006450:	0599      	lsls	r1, r3, #22
 8006452:	d402      	bmi.n	800645a <_fflush_r+0x3a>
 8006454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006456:	f000 f915 	bl	8006684 <__retarget_lock_acquire_recursive>
 800645a:	4628      	mov	r0, r5
 800645c:	4621      	mov	r1, r4
 800645e:	f7ff ff59 	bl	8006314 <__sflush_r>
 8006462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006464:	07da      	lsls	r2, r3, #31
 8006466:	4605      	mov	r5, r0
 8006468:	d4e0      	bmi.n	800642c <_fflush_r+0xc>
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	059b      	lsls	r3, r3, #22
 800646e:	d4dd      	bmi.n	800642c <_fflush_r+0xc>
 8006470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006472:	f000 f908 	bl	8006686 <__retarget_lock_release_recursive>
 8006476:	e7d9      	b.n	800642c <_fflush_r+0xc>
 8006478:	4b05      	ldr	r3, [pc, #20]	; (8006490 <_fflush_r+0x70>)
 800647a:	429c      	cmp	r4, r3
 800647c:	d101      	bne.n	8006482 <_fflush_r+0x62>
 800647e:	68ac      	ldr	r4, [r5, #8]
 8006480:	e7df      	b.n	8006442 <_fflush_r+0x22>
 8006482:	4b04      	ldr	r3, [pc, #16]	; (8006494 <_fflush_r+0x74>)
 8006484:	429c      	cmp	r4, r3
 8006486:	bf08      	it	eq
 8006488:	68ec      	ldreq	r4, [r5, #12]
 800648a:	e7da      	b.n	8006442 <_fflush_r+0x22>
 800648c:	08006b08 	.word	0x08006b08
 8006490:	08006b28 	.word	0x08006b28
 8006494:	08006ae8 	.word	0x08006ae8

08006498 <std>:
 8006498:	2300      	movs	r3, #0
 800649a:	b510      	push	{r4, lr}
 800649c:	4604      	mov	r4, r0
 800649e:	e9c0 3300 	strd	r3, r3, [r0]
 80064a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064a6:	6083      	str	r3, [r0, #8]
 80064a8:	8181      	strh	r1, [r0, #12]
 80064aa:	6643      	str	r3, [r0, #100]	; 0x64
 80064ac:	81c2      	strh	r2, [r0, #14]
 80064ae:	6183      	str	r3, [r0, #24]
 80064b0:	4619      	mov	r1, r3
 80064b2:	2208      	movs	r2, #8
 80064b4:	305c      	adds	r0, #92	; 0x5c
 80064b6:	f7ff fdef 	bl	8006098 <memset>
 80064ba:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <std+0x38>)
 80064bc:	6263      	str	r3, [r4, #36]	; 0x24
 80064be:	4b05      	ldr	r3, [pc, #20]	; (80064d4 <std+0x3c>)
 80064c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <std+0x40>)
 80064c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <std+0x44>)
 80064c8:	6224      	str	r4, [r4, #32]
 80064ca:	6323      	str	r3, [r4, #48]	; 0x30
 80064cc:	bd10      	pop	{r4, pc}
 80064ce:	bf00      	nop
 80064d0:	08006935 	.word	0x08006935
 80064d4:	08006957 	.word	0x08006957
 80064d8:	0800698f 	.word	0x0800698f
 80064dc:	080069b3 	.word	0x080069b3

080064e0 <_cleanup_r>:
 80064e0:	4901      	ldr	r1, [pc, #4]	; (80064e8 <_cleanup_r+0x8>)
 80064e2:	f000 b8af 	b.w	8006644 <_fwalk_reent>
 80064e6:	bf00      	nop
 80064e8:	08006421 	.word	0x08006421

080064ec <__sfmoreglue>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	2268      	movs	r2, #104	; 0x68
 80064f0:	1e4d      	subs	r5, r1, #1
 80064f2:	4355      	muls	r5, r2
 80064f4:	460e      	mov	r6, r1
 80064f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064fa:	f000 f997 	bl	800682c <_malloc_r>
 80064fe:	4604      	mov	r4, r0
 8006500:	b140      	cbz	r0, 8006514 <__sfmoreglue+0x28>
 8006502:	2100      	movs	r1, #0
 8006504:	e9c0 1600 	strd	r1, r6, [r0]
 8006508:	300c      	adds	r0, #12
 800650a:	60a0      	str	r0, [r4, #8]
 800650c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006510:	f7ff fdc2 	bl	8006098 <memset>
 8006514:	4620      	mov	r0, r4
 8006516:	bd70      	pop	{r4, r5, r6, pc}

08006518 <__sfp_lock_acquire>:
 8006518:	4801      	ldr	r0, [pc, #4]	; (8006520 <__sfp_lock_acquire+0x8>)
 800651a:	f000 b8b3 	b.w	8006684 <__retarget_lock_acquire_recursive>
 800651e:	bf00      	nop
 8006520:	200008e9 	.word	0x200008e9

08006524 <__sfp_lock_release>:
 8006524:	4801      	ldr	r0, [pc, #4]	; (800652c <__sfp_lock_release+0x8>)
 8006526:	f000 b8ae 	b.w	8006686 <__retarget_lock_release_recursive>
 800652a:	bf00      	nop
 800652c:	200008e9 	.word	0x200008e9

08006530 <__sinit_lock_acquire>:
 8006530:	4801      	ldr	r0, [pc, #4]	; (8006538 <__sinit_lock_acquire+0x8>)
 8006532:	f000 b8a7 	b.w	8006684 <__retarget_lock_acquire_recursive>
 8006536:	bf00      	nop
 8006538:	200008ea 	.word	0x200008ea

0800653c <__sinit_lock_release>:
 800653c:	4801      	ldr	r0, [pc, #4]	; (8006544 <__sinit_lock_release+0x8>)
 800653e:	f000 b8a2 	b.w	8006686 <__retarget_lock_release_recursive>
 8006542:	bf00      	nop
 8006544:	200008ea 	.word	0x200008ea

08006548 <__sinit>:
 8006548:	b510      	push	{r4, lr}
 800654a:	4604      	mov	r4, r0
 800654c:	f7ff fff0 	bl	8006530 <__sinit_lock_acquire>
 8006550:	69a3      	ldr	r3, [r4, #24]
 8006552:	b11b      	cbz	r3, 800655c <__sinit+0x14>
 8006554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006558:	f7ff bff0 	b.w	800653c <__sinit_lock_release>
 800655c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006560:	6523      	str	r3, [r4, #80]	; 0x50
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <__sinit+0x68>)
 8006564:	4a13      	ldr	r2, [pc, #76]	; (80065b4 <__sinit+0x6c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	62a2      	str	r2, [r4, #40]	; 0x28
 800656a:	42a3      	cmp	r3, r4
 800656c:	bf04      	itt	eq
 800656e:	2301      	moveq	r3, #1
 8006570:	61a3      	streq	r3, [r4, #24]
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f820 	bl	80065b8 <__sfp>
 8006578:	6060      	str	r0, [r4, #4]
 800657a:	4620      	mov	r0, r4
 800657c:	f000 f81c 	bl	80065b8 <__sfp>
 8006580:	60a0      	str	r0, [r4, #8]
 8006582:	4620      	mov	r0, r4
 8006584:	f000 f818 	bl	80065b8 <__sfp>
 8006588:	2200      	movs	r2, #0
 800658a:	60e0      	str	r0, [r4, #12]
 800658c:	2104      	movs	r1, #4
 800658e:	6860      	ldr	r0, [r4, #4]
 8006590:	f7ff ff82 	bl	8006498 <std>
 8006594:	68a0      	ldr	r0, [r4, #8]
 8006596:	2201      	movs	r2, #1
 8006598:	2109      	movs	r1, #9
 800659a:	f7ff ff7d 	bl	8006498 <std>
 800659e:	68e0      	ldr	r0, [r4, #12]
 80065a0:	2202      	movs	r2, #2
 80065a2:	2112      	movs	r1, #18
 80065a4:	f7ff ff78 	bl	8006498 <std>
 80065a8:	2301      	movs	r3, #1
 80065aa:	61a3      	str	r3, [r4, #24]
 80065ac:	e7d2      	b.n	8006554 <__sinit+0xc>
 80065ae:	bf00      	nop
 80065b0:	08006ae4 	.word	0x08006ae4
 80065b4:	080064e1 	.word	0x080064e1

080065b8 <__sfp>:
 80065b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ba:	4607      	mov	r7, r0
 80065bc:	f7ff ffac 	bl	8006518 <__sfp_lock_acquire>
 80065c0:	4b1e      	ldr	r3, [pc, #120]	; (800663c <__sfp+0x84>)
 80065c2:	681e      	ldr	r6, [r3, #0]
 80065c4:	69b3      	ldr	r3, [r6, #24]
 80065c6:	b913      	cbnz	r3, 80065ce <__sfp+0x16>
 80065c8:	4630      	mov	r0, r6
 80065ca:	f7ff ffbd 	bl	8006548 <__sinit>
 80065ce:	3648      	adds	r6, #72	; 0x48
 80065d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	d503      	bpl.n	80065e0 <__sfp+0x28>
 80065d8:	6833      	ldr	r3, [r6, #0]
 80065da:	b30b      	cbz	r3, 8006620 <__sfp+0x68>
 80065dc:	6836      	ldr	r6, [r6, #0]
 80065de:	e7f7      	b.n	80065d0 <__sfp+0x18>
 80065e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065e4:	b9d5      	cbnz	r5, 800661c <__sfp+0x64>
 80065e6:	4b16      	ldr	r3, [pc, #88]	; (8006640 <__sfp+0x88>)
 80065e8:	60e3      	str	r3, [r4, #12]
 80065ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065ee:	6665      	str	r5, [r4, #100]	; 0x64
 80065f0:	f000 f847 	bl	8006682 <__retarget_lock_init_recursive>
 80065f4:	f7ff ff96 	bl	8006524 <__sfp_lock_release>
 80065f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006600:	6025      	str	r5, [r4, #0]
 8006602:	61a5      	str	r5, [r4, #24]
 8006604:	2208      	movs	r2, #8
 8006606:	4629      	mov	r1, r5
 8006608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800660c:	f7ff fd44 	bl	8006098 <memset>
 8006610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006618:	4620      	mov	r0, r4
 800661a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800661c:	3468      	adds	r4, #104	; 0x68
 800661e:	e7d9      	b.n	80065d4 <__sfp+0x1c>
 8006620:	2104      	movs	r1, #4
 8006622:	4638      	mov	r0, r7
 8006624:	f7ff ff62 	bl	80064ec <__sfmoreglue>
 8006628:	4604      	mov	r4, r0
 800662a:	6030      	str	r0, [r6, #0]
 800662c:	2800      	cmp	r0, #0
 800662e:	d1d5      	bne.n	80065dc <__sfp+0x24>
 8006630:	f7ff ff78 	bl	8006524 <__sfp_lock_release>
 8006634:	230c      	movs	r3, #12
 8006636:	603b      	str	r3, [r7, #0]
 8006638:	e7ee      	b.n	8006618 <__sfp+0x60>
 800663a:	bf00      	nop
 800663c:	08006ae4 	.word	0x08006ae4
 8006640:	ffff0001 	.word	0xffff0001

08006644 <_fwalk_reent>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	4606      	mov	r6, r0
 800664a:	4688      	mov	r8, r1
 800664c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006650:	2700      	movs	r7, #0
 8006652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006656:	f1b9 0901 	subs.w	r9, r9, #1
 800665a:	d505      	bpl.n	8006668 <_fwalk_reent+0x24>
 800665c:	6824      	ldr	r4, [r4, #0]
 800665e:	2c00      	cmp	r4, #0
 8006660:	d1f7      	bne.n	8006652 <_fwalk_reent+0xe>
 8006662:	4638      	mov	r0, r7
 8006664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006668:	89ab      	ldrh	r3, [r5, #12]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d907      	bls.n	800667e <_fwalk_reent+0x3a>
 800666e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006672:	3301      	adds	r3, #1
 8006674:	d003      	beq.n	800667e <_fwalk_reent+0x3a>
 8006676:	4629      	mov	r1, r5
 8006678:	4630      	mov	r0, r6
 800667a:	47c0      	blx	r8
 800667c:	4307      	orrs	r7, r0
 800667e:	3568      	adds	r5, #104	; 0x68
 8006680:	e7e9      	b.n	8006656 <_fwalk_reent+0x12>

08006682 <__retarget_lock_init_recursive>:
 8006682:	4770      	bx	lr

08006684 <__retarget_lock_acquire_recursive>:
 8006684:	4770      	bx	lr

08006686 <__retarget_lock_release_recursive>:
 8006686:	4770      	bx	lr

08006688 <__swhatbuf_r>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	460e      	mov	r6, r1
 800668c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006690:	2900      	cmp	r1, #0
 8006692:	b096      	sub	sp, #88	; 0x58
 8006694:	4614      	mov	r4, r2
 8006696:	461d      	mov	r5, r3
 8006698:	da08      	bge.n	80066ac <__swhatbuf_r+0x24>
 800669a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	061a      	lsls	r2, r3, #24
 80066a4:	d410      	bmi.n	80066c8 <__swhatbuf_r+0x40>
 80066a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066aa:	e00e      	b.n	80066ca <__swhatbuf_r+0x42>
 80066ac:	466a      	mov	r2, sp
 80066ae:	f000 f9a7 	bl	8006a00 <_fstat_r>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	dbf1      	blt.n	800669a <__swhatbuf_r+0x12>
 80066b6:	9a01      	ldr	r2, [sp, #4]
 80066b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066c0:	425a      	negs	r2, r3
 80066c2:	415a      	adcs	r2, r3
 80066c4:	602a      	str	r2, [r5, #0]
 80066c6:	e7ee      	b.n	80066a6 <__swhatbuf_r+0x1e>
 80066c8:	2340      	movs	r3, #64	; 0x40
 80066ca:	2000      	movs	r0, #0
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	b016      	add	sp, #88	; 0x58
 80066d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080066d4 <__smakebuf_r>:
 80066d4:	898b      	ldrh	r3, [r1, #12]
 80066d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066d8:	079d      	lsls	r5, r3, #30
 80066da:	4606      	mov	r6, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	d507      	bpl.n	80066f0 <__smakebuf_r+0x1c>
 80066e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	2301      	movs	r3, #1
 80066ea:	6163      	str	r3, [r4, #20]
 80066ec:	b002      	add	sp, #8
 80066ee:	bd70      	pop	{r4, r5, r6, pc}
 80066f0:	ab01      	add	r3, sp, #4
 80066f2:	466a      	mov	r2, sp
 80066f4:	f7ff ffc8 	bl	8006688 <__swhatbuf_r>
 80066f8:	9900      	ldr	r1, [sp, #0]
 80066fa:	4605      	mov	r5, r0
 80066fc:	4630      	mov	r0, r6
 80066fe:	f000 f895 	bl	800682c <_malloc_r>
 8006702:	b948      	cbnz	r0, 8006718 <__smakebuf_r+0x44>
 8006704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006708:	059a      	lsls	r2, r3, #22
 800670a:	d4ef      	bmi.n	80066ec <__smakebuf_r+0x18>
 800670c:	f023 0303 	bic.w	r3, r3, #3
 8006710:	f043 0302 	orr.w	r3, r3, #2
 8006714:	81a3      	strh	r3, [r4, #12]
 8006716:	e7e3      	b.n	80066e0 <__smakebuf_r+0xc>
 8006718:	4b0d      	ldr	r3, [pc, #52]	; (8006750 <__smakebuf_r+0x7c>)
 800671a:	62b3      	str	r3, [r6, #40]	; 0x28
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	6020      	str	r0, [r4, #0]
 8006720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006724:	81a3      	strh	r3, [r4, #12]
 8006726:	9b00      	ldr	r3, [sp, #0]
 8006728:	6163      	str	r3, [r4, #20]
 800672a:	9b01      	ldr	r3, [sp, #4]
 800672c:	6120      	str	r0, [r4, #16]
 800672e:	b15b      	cbz	r3, 8006748 <__smakebuf_r+0x74>
 8006730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006734:	4630      	mov	r0, r6
 8006736:	f000 f975 	bl	8006a24 <_isatty_r>
 800673a:	b128      	cbz	r0, 8006748 <__smakebuf_r+0x74>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	f023 0303 	bic.w	r3, r3, #3
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	81a3      	strh	r3, [r4, #12]
 8006748:	89a0      	ldrh	r0, [r4, #12]
 800674a:	4305      	orrs	r5, r0
 800674c:	81a5      	strh	r5, [r4, #12]
 800674e:	e7cd      	b.n	80066ec <__smakebuf_r+0x18>
 8006750:	080064e1 	.word	0x080064e1

08006754 <_free_r>:
 8006754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006756:	2900      	cmp	r1, #0
 8006758:	d044      	beq.n	80067e4 <_free_r+0x90>
 800675a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675e:	9001      	str	r0, [sp, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f1a1 0404 	sub.w	r4, r1, #4
 8006766:	bfb8      	it	lt
 8006768:	18e4      	addlt	r4, r4, r3
 800676a:	f000 f97d 	bl	8006a68 <__malloc_lock>
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <_free_r+0x94>)
 8006770:	9801      	ldr	r0, [sp, #4]
 8006772:	6813      	ldr	r3, [r2, #0]
 8006774:	b933      	cbnz	r3, 8006784 <_free_r+0x30>
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	6014      	str	r4, [r2, #0]
 800677a:	b003      	add	sp, #12
 800677c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006780:	f000 b978 	b.w	8006a74 <__malloc_unlock>
 8006784:	42a3      	cmp	r3, r4
 8006786:	d908      	bls.n	800679a <_free_r+0x46>
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	1961      	adds	r1, r4, r5
 800678c:	428b      	cmp	r3, r1
 800678e:	bf01      	itttt	eq
 8006790:	6819      	ldreq	r1, [r3, #0]
 8006792:	685b      	ldreq	r3, [r3, #4]
 8006794:	1949      	addeq	r1, r1, r5
 8006796:	6021      	streq	r1, [r4, #0]
 8006798:	e7ed      	b.n	8006776 <_free_r+0x22>
 800679a:	461a      	mov	r2, r3
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	b10b      	cbz	r3, 80067a4 <_free_r+0x50>
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d9fa      	bls.n	800679a <_free_r+0x46>
 80067a4:	6811      	ldr	r1, [r2, #0]
 80067a6:	1855      	adds	r5, r2, r1
 80067a8:	42a5      	cmp	r5, r4
 80067aa:	d10b      	bne.n	80067c4 <_free_r+0x70>
 80067ac:	6824      	ldr	r4, [r4, #0]
 80067ae:	4421      	add	r1, r4
 80067b0:	1854      	adds	r4, r2, r1
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	6011      	str	r1, [r2, #0]
 80067b6:	d1e0      	bne.n	800677a <_free_r+0x26>
 80067b8:	681c      	ldr	r4, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	6053      	str	r3, [r2, #4]
 80067be:	4421      	add	r1, r4
 80067c0:	6011      	str	r1, [r2, #0]
 80067c2:	e7da      	b.n	800677a <_free_r+0x26>
 80067c4:	d902      	bls.n	80067cc <_free_r+0x78>
 80067c6:	230c      	movs	r3, #12
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	e7d6      	b.n	800677a <_free_r+0x26>
 80067cc:	6825      	ldr	r5, [r4, #0]
 80067ce:	1961      	adds	r1, r4, r5
 80067d0:	428b      	cmp	r3, r1
 80067d2:	bf04      	itt	eq
 80067d4:	6819      	ldreq	r1, [r3, #0]
 80067d6:	685b      	ldreq	r3, [r3, #4]
 80067d8:	6063      	str	r3, [r4, #4]
 80067da:	bf04      	itt	eq
 80067dc:	1949      	addeq	r1, r1, r5
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	6054      	str	r4, [r2, #4]
 80067e2:	e7ca      	b.n	800677a <_free_r+0x26>
 80067e4:	b003      	add	sp, #12
 80067e6:	bd30      	pop	{r4, r5, pc}
 80067e8:	200008ec 	.word	0x200008ec

080067ec <sbrk_aligned>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	4e0e      	ldr	r6, [pc, #56]	; (8006828 <sbrk_aligned+0x3c>)
 80067f0:	460c      	mov	r4, r1
 80067f2:	6831      	ldr	r1, [r6, #0]
 80067f4:	4605      	mov	r5, r0
 80067f6:	b911      	cbnz	r1, 80067fe <sbrk_aligned+0x12>
 80067f8:	f000 f88c 	bl	8006914 <_sbrk_r>
 80067fc:	6030      	str	r0, [r6, #0]
 80067fe:	4621      	mov	r1, r4
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f887 	bl	8006914 <_sbrk_r>
 8006806:	1c43      	adds	r3, r0, #1
 8006808:	d00a      	beq.n	8006820 <sbrk_aligned+0x34>
 800680a:	1cc4      	adds	r4, r0, #3
 800680c:	f024 0403 	bic.w	r4, r4, #3
 8006810:	42a0      	cmp	r0, r4
 8006812:	d007      	beq.n	8006824 <sbrk_aligned+0x38>
 8006814:	1a21      	subs	r1, r4, r0
 8006816:	4628      	mov	r0, r5
 8006818:	f000 f87c 	bl	8006914 <_sbrk_r>
 800681c:	3001      	adds	r0, #1
 800681e:	d101      	bne.n	8006824 <sbrk_aligned+0x38>
 8006820:	f04f 34ff 	mov.w	r4, #4294967295
 8006824:	4620      	mov	r0, r4
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	200008f0 	.word	0x200008f0

0800682c <_malloc_r>:
 800682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006830:	1ccd      	adds	r5, r1, #3
 8006832:	f025 0503 	bic.w	r5, r5, #3
 8006836:	3508      	adds	r5, #8
 8006838:	2d0c      	cmp	r5, #12
 800683a:	bf38      	it	cc
 800683c:	250c      	movcc	r5, #12
 800683e:	2d00      	cmp	r5, #0
 8006840:	4607      	mov	r7, r0
 8006842:	db01      	blt.n	8006848 <_malloc_r+0x1c>
 8006844:	42a9      	cmp	r1, r5
 8006846:	d905      	bls.n	8006854 <_malloc_r+0x28>
 8006848:	230c      	movs	r3, #12
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	2600      	movs	r6, #0
 800684e:	4630      	mov	r0, r6
 8006850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006854:	4e2e      	ldr	r6, [pc, #184]	; (8006910 <_malloc_r+0xe4>)
 8006856:	f000 f907 	bl	8006a68 <__malloc_lock>
 800685a:	6833      	ldr	r3, [r6, #0]
 800685c:	461c      	mov	r4, r3
 800685e:	bb34      	cbnz	r4, 80068ae <_malloc_r+0x82>
 8006860:	4629      	mov	r1, r5
 8006862:	4638      	mov	r0, r7
 8006864:	f7ff ffc2 	bl	80067ec <sbrk_aligned>
 8006868:	1c43      	adds	r3, r0, #1
 800686a:	4604      	mov	r4, r0
 800686c:	d14d      	bne.n	800690a <_malloc_r+0xde>
 800686e:	6834      	ldr	r4, [r6, #0]
 8006870:	4626      	mov	r6, r4
 8006872:	2e00      	cmp	r6, #0
 8006874:	d140      	bne.n	80068f8 <_malloc_r+0xcc>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	4631      	mov	r1, r6
 800687a:	4638      	mov	r0, r7
 800687c:	eb04 0803 	add.w	r8, r4, r3
 8006880:	f000 f848 	bl	8006914 <_sbrk_r>
 8006884:	4580      	cmp	r8, r0
 8006886:	d13a      	bne.n	80068fe <_malloc_r+0xd2>
 8006888:	6821      	ldr	r1, [r4, #0]
 800688a:	3503      	adds	r5, #3
 800688c:	1a6d      	subs	r5, r5, r1
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	4629      	mov	r1, r5
 800689c:	4638      	mov	r0, r7
 800689e:	f7ff ffa5 	bl	80067ec <sbrk_aligned>
 80068a2:	3001      	adds	r0, #1
 80068a4:	d02b      	beq.n	80068fe <_malloc_r+0xd2>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	442b      	add	r3, r5
 80068aa:	6023      	str	r3, [r4, #0]
 80068ac:	e00e      	b.n	80068cc <_malloc_r+0xa0>
 80068ae:	6822      	ldr	r2, [r4, #0]
 80068b0:	1b52      	subs	r2, r2, r5
 80068b2:	d41e      	bmi.n	80068f2 <_malloc_r+0xc6>
 80068b4:	2a0b      	cmp	r2, #11
 80068b6:	d916      	bls.n	80068e6 <_malloc_r+0xba>
 80068b8:	1961      	adds	r1, r4, r5
 80068ba:	42a3      	cmp	r3, r4
 80068bc:	6025      	str	r5, [r4, #0]
 80068be:	bf18      	it	ne
 80068c0:	6059      	strne	r1, [r3, #4]
 80068c2:	6863      	ldr	r3, [r4, #4]
 80068c4:	bf08      	it	eq
 80068c6:	6031      	streq	r1, [r6, #0]
 80068c8:	5162      	str	r2, [r4, r5]
 80068ca:	604b      	str	r3, [r1, #4]
 80068cc:	4638      	mov	r0, r7
 80068ce:	f104 060b 	add.w	r6, r4, #11
 80068d2:	f000 f8cf 	bl	8006a74 <__malloc_unlock>
 80068d6:	f026 0607 	bic.w	r6, r6, #7
 80068da:	1d23      	adds	r3, r4, #4
 80068dc:	1af2      	subs	r2, r6, r3
 80068de:	d0b6      	beq.n	800684e <_malloc_r+0x22>
 80068e0:	1b9b      	subs	r3, r3, r6
 80068e2:	50a3      	str	r3, [r4, r2]
 80068e4:	e7b3      	b.n	800684e <_malloc_r+0x22>
 80068e6:	6862      	ldr	r2, [r4, #4]
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	bf0c      	ite	eq
 80068ec:	6032      	streq	r2, [r6, #0]
 80068ee:	605a      	strne	r2, [r3, #4]
 80068f0:	e7ec      	b.n	80068cc <_malloc_r+0xa0>
 80068f2:	4623      	mov	r3, r4
 80068f4:	6864      	ldr	r4, [r4, #4]
 80068f6:	e7b2      	b.n	800685e <_malloc_r+0x32>
 80068f8:	4634      	mov	r4, r6
 80068fa:	6876      	ldr	r6, [r6, #4]
 80068fc:	e7b9      	b.n	8006872 <_malloc_r+0x46>
 80068fe:	230c      	movs	r3, #12
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	4638      	mov	r0, r7
 8006904:	f000 f8b6 	bl	8006a74 <__malloc_unlock>
 8006908:	e7a1      	b.n	800684e <_malloc_r+0x22>
 800690a:	6025      	str	r5, [r4, #0]
 800690c:	e7de      	b.n	80068cc <_malloc_r+0xa0>
 800690e:	bf00      	nop
 8006910:	200008ec 	.word	0x200008ec

08006914 <_sbrk_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d06      	ldr	r5, [pc, #24]	; (8006930 <_sbrk_r+0x1c>)
 8006918:	2300      	movs	r3, #0
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	602b      	str	r3, [r5, #0]
 8006920:	f7fb f94a 	bl	8001bb8 <_sbrk>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d102      	bne.n	800692e <_sbrk_r+0x1a>
 8006928:	682b      	ldr	r3, [r5, #0]
 800692a:	b103      	cbz	r3, 800692e <_sbrk_r+0x1a>
 800692c:	6023      	str	r3, [r4, #0]
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	200008f4 	.word	0x200008f4

08006934 <__sread>:
 8006934:	b510      	push	{r4, lr}
 8006936:	460c      	mov	r4, r1
 8006938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693c:	f000 f8a0 	bl	8006a80 <_read_r>
 8006940:	2800      	cmp	r0, #0
 8006942:	bfab      	itete	ge
 8006944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006946:	89a3      	ldrhlt	r3, [r4, #12]
 8006948:	181b      	addge	r3, r3, r0
 800694a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800694e:	bfac      	ite	ge
 8006950:	6563      	strge	r3, [r4, #84]	; 0x54
 8006952:	81a3      	strhlt	r3, [r4, #12]
 8006954:	bd10      	pop	{r4, pc}

08006956 <__swrite>:
 8006956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695a:	461f      	mov	r7, r3
 800695c:	898b      	ldrh	r3, [r1, #12]
 800695e:	05db      	lsls	r3, r3, #23
 8006960:	4605      	mov	r5, r0
 8006962:	460c      	mov	r4, r1
 8006964:	4616      	mov	r6, r2
 8006966:	d505      	bpl.n	8006974 <__swrite+0x1e>
 8006968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696c:	2302      	movs	r3, #2
 800696e:	2200      	movs	r2, #0
 8006970:	f000 f868 	bl	8006a44 <_lseek_r>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800697a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	4632      	mov	r2, r6
 8006982:	463b      	mov	r3, r7
 8006984:	4628      	mov	r0, r5
 8006986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800698a:	f000 b817 	b.w	80069bc <_write_r>

0800698e <__sseek>:
 800698e:	b510      	push	{r4, lr}
 8006990:	460c      	mov	r4, r1
 8006992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006996:	f000 f855 	bl	8006a44 <_lseek_r>
 800699a:	1c43      	adds	r3, r0, #1
 800699c:	89a3      	ldrh	r3, [r4, #12]
 800699e:	bf15      	itete	ne
 80069a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80069a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069aa:	81a3      	strheq	r3, [r4, #12]
 80069ac:	bf18      	it	ne
 80069ae:	81a3      	strhne	r3, [r4, #12]
 80069b0:	bd10      	pop	{r4, pc}

080069b2 <__sclose>:
 80069b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b6:	f000 b813 	b.w	80069e0 <_close_r>
	...

080069bc <_write_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d07      	ldr	r5, [pc, #28]	; (80069dc <_write_r+0x20>)
 80069c0:	4604      	mov	r4, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	2200      	movs	r2, #0
 80069c8:	602a      	str	r2, [r5, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7fb f8a3 	bl	8001b16 <_write>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_write_r+0x1e>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_write_r+0x1e>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	200008f4 	.word	0x200008f4

080069e0 <_close_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d06      	ldr	r5, [pc, #24]	; (80069fc <_close_r+0x1c>)
 80069e4:	2300      	movs	r3, #0
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	f7fb f8af 	bl	8001b4e <_close>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_close_r+0x1a>
 80069f4:	682b      	ldr	r3, [r5, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_close_r+0x1a>
 80069f8:	6023      	str	r3, [r4, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	200008f4 	.word	0x200008f4

08006a00 <_fstat_r>:
 8006a00:	b538      	push	{r3, r4, r5, lr}
 8006a02:	4d07      	ldr	r5, [pc, #28]	; (8006a20 <_fstat_r+0x20>)
 8006a04:	2300      	movs	r3, #0
 8006a06:	4604      	mov	r4, r0
 8006a08:	4608      	mov	r0, r1
 8006a0a:	4611      	mov	r1, r2
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	f7fb f8aa 	bl	8001b66 <_fstat>
 8006a12:	1c43      	adds	r3, r0, #1
 8006a14:	d102      	bne.n	8006a1c <_fstat_r+0x1c>
 8006a16:	682b      	ldr	r3, [r5, #0]
 8006a18:	b103      	cbz	r3, 8006a1c <_fstat_r+0x1c>
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	bd38      	pop	{r3, r4, r5, pc}
 8006a1e:	bf00      	nop
 8006a20:	200008f4 	.word	0x200008f4

08006a24 <_isatty_r>:
 8006a24:	b538      	push	{r3, r4, r5, lr}
 8006a26:	4d06      	ldr	r5, [pc, #24]	; (8006a40 <_isatty_r+0x1c>)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4608      	mov	r0, r1
 8006a2e:	602b      	str	r3, [r5, #0]
 8006a30:	f7fb f8a9 	bl	8001b86 <_isatty>
 8006a34:	1c43      	adds	r3, r0, #1
 8006a36:	d102      	bne.n	8006a3e <_isatty_r+0x1a>
 8006a38:	682b      	ldr	r3, [r5, #0]
 8006a3a:	b103      	cbz	r3, 8006a3e <_isatty_r+0x1a>
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	bd38      	pop	{r3, r4, r5, pc}
 8006a40:	200008f4 	.word	0x200008f4

08006a44 <_lseek_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4d07      	ldr	r5, [pc, #28]	; (8006a64 <_lseek_r+0x20>)
 8006a48:	4604      	mov	r4, r0
 8006a4a:	4608      	mov	r0, r1
 8006a4c:	4611      	mov	r1, r2
 8006a4e:	2200      	movs	r2, #0
 8006a50:	602a      	str	r2, [r5, #0]
 8006a52:	461a      	mov	r2, r3
 8006a54:	f7fb f8a2 	bl	8001b9c <_lseek>
 8006a58:	1c43      	adds	r3, r0, #1
 8006a5a:	d102      	bne.n	8006a62 <_lseek_r+0x1e>
 8006a5c:	682b      	ldr	r3, [r5, #0]
 8006a5e:	b103      	cbz	r3, 8006a62 <_lseek_r+0x1e>
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	bd38      	pop	{r3, r4, r5, pc}
 8006a64:	200008f4 	.word	0x200008f4

08006a68 <__malloc_lock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__malloc_lock+0x8>)
 8006a6a:	f7ff be0b 	b.w	8006684 <__retarget_lock_acquire_recursive>
 8006a6e:	bf00      	nop
 8006a70:	200008e8 	.word	0x200008e8

08006a74 <__malloc_unlock>:
 8006a74:	4801      	ldr	r0, [pc, #4]	; (8006a7c <__malloc_unlock+0x8>)
 8006a76:	f7ff be06 	b.w	8006686 <__retarget_lock_release_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	200008e8 	.word	0x200008e8

08006a80 <_read_r>:
 8006a80:	b538      	push	{r3, r4, r5, lr}
 8006a82:	4d07      	ldr	r5, [pc, #28]	; (8006aa0 <_read_r+0x20>)
 8006a84:	4604      	mov	r4, r0
 8006a86:	4608      	mov	r0, r1
 8006a88:	4611      	mov	r1, r2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	f7fb f824 	bl	8001adc <_read>
 8006a94:	1c43      	adds	r3, r0, #1
 8006a96:	d102      	bne.n	8006a9e <_read_r+0x1e>
 8006a98:	682b      	ldr	r3, [r5, #0]
 8006a9a:	b103      	cbz	r3, 8006a9e <_read_r+0x1e>
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	200008f4 	.word	0x200008f4

08006aa4 <_init>:
 8006aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aa6:	bf00      	nop
 8006aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aaa:	bc08      	pop	{r3}
 8006aac:	469e      	mov	lr, r3
 8006aae:	4770      	bx	lr

08006ab0 <_fini>:
 8006ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab2:	bf00      	nop
 8006ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ab6:	bc08      	pop	{r3}
 8006ab8:	469e      	mov	lr, r3
 8006aba:	4770      	bx	lr
