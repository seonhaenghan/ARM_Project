
03.TIMER_DHT11_CONTROL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006030  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  080061d0  080061d0  000161d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064c0  080064c0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080064c0  080064c0  000164c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064c8  080064c8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064c8  080064c8  000164c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064cc  080064cc  000164cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080064d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000078  08006548  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000078c  08006548  0002078c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb60  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264b  00000000  00000000  0002fc08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  00032258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d30  00000000  00000000  00033080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a15  00000000  00000000  00033db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001044a  00000000  00000000  0004b7c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc9d  00000000  00000000  0005bc0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb8ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043dc  00000000  00000000  000eb8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061b8 	.word	0x080061b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080061b8 	.word	0x080061b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <DHT11_processing>:
}
int dht11on = 1;		// dht11on : 1 DHT11 processing 을 실행하고 dht11on : 0return;
int dht11time = 150;	// pc 로 부터 dht11

void DHT11_processing(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
	// dht11time1500	: 1500ms
	// dht11time2000	: 2000ms
	// dht11time3000	: 3000ms
	// dht11timeasdad	: error code : default 1500ms

	if (TIM11_10ms_counter >= dht11time) // 1500ms
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <DHT11_processing+0x7c>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <DHT11_processing+0x80>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	db2f      	blt.n	8000de2 <DHT11_processing+0x72>
		{
		if(dht11on)
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <DHT11_processing+0x84>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d02b      	beq.n	8000de2 <DHT11_processing+0x72>
		{
			TIM11_10ms_counter=0;
 8000d8a:	4b18      	ldr	r3, [pc, #96]	; (8000dec <DHT11_processing+0x7c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]

			DHT11_trriger();
 8000d90:	f000 f848 	bl	8000e24 <DHT11_trriger>

			DHT11_DataLine_Input();
 8000d94:	f000 f85c 	bl	8000e50 <DHT11_DataLine_Input>
			DHT11_dumi_read();
 8000d98:	f000 f8ca 	bl	8000f30 <DHT11_dumi_read>

			i_RH = DHT11_rx_Data();
 8000d9c:	f000 f892 	bl	8000ec4 <DHT11_rx_Data>
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
			d_RH = DHT11_rx_Data();
 8000da4:	f000 f88e 	bl	8000ec4 <DHT11_rx_Data>
 8000da8:	4603      	mov	r3, r0
 8000daa:	71bb      	strb	r3, [r7, #6]
			i_Tmp = DHT11_rx_Data();
 8000dac:	f000 f88a 	bl	8000ec4 <DHT11_rx_Data>
 8000db0:	4603      	mov	r3, r0
 8000db2:	717b      	strb	r3, [r7, #5]
			d_Tmp = DHT11_rx_Data();
 8000db4:	f000 f886 	bl	8000ec4 <DHT11_rx_Data>
 8000db8:	4603      	mov	r3, r0
 8000dba:	713b      	strb	r3, [r7, #4]

			DHT11_DataLine_Output();
 8000dbc:	f000 f864 	bl	8000e88 <DHT11_DataLine_Output>
			HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	2110      	movs	r1, #16
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <DHT11_processing+0x88>)
 8000dc6:	f001 fc1f 	bl	8002608 <HAL_GPIO_WritePin>
	//		printf("[Tmp]%d\n",(int)i_Tmp);
	//		printf("[Wet]%d\n",(int)i_RH);
			printf("[Tmp]%d.%d\n",(int)i_Tmp,(int)d_Tmp);
 8000dca:	797b      	ldrb	r3, [r7, #5]
 8000dcc:	793a      	ldrb	r2, [r7, #4]
 8000dce:	4619      	mov	r1, r3
 8000dd0:	480a      	ldr	r0, [pc, #40]	; (8000dfc <DHT11_processing+0x8c>)
 8000dd2:	f004 f94d 	bl	8005070 <iprintf>
			printf("[Wet]%d.%d\n",(int)i_RH,(int)d_RH);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	79ba      	ldrb	r2, [r7, #6]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4808      	ldr	r0, [pc, #32]	; (8000e00 <DHT11_processing+0x90>)
 8000dde:	f004 f947 	bl	8005070 <iprintf>
			// FND_update(i_Tmp*100 + i_RH);
		}
		}
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	20000760 	.word	0x20000760
 8000df0:	20000004 	.word	0x20000004
 8000df4:	20000000 	.word	0x20000000
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	080061e8 	.word	0x080061e8
 8000e00:	080061f4 	.word	0x080061f4

08000e04 <DHT11_Init>:
void DHT11_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	4804      	ldr	r0, [pc, #16]	; (8000e20 <DHT11_Init+0x1c>)
 8000e0e:	f001 fbfb 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 8000e12:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e16:	f001 f893 	bl	8001f40 <HAL_Delay>
	return;
 8000e1a:	bf00      	nop
}
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40020800 	.word	0x40020800

08000e24 <DHT11_trriger>:


void DHT11_trriger(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4807      	ldr	r0, [pc, #28]	; (8000e4c <DHT11_trriger+0x28>)
 8000e2e:	f001 fbeb 	bl	8002608 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000e32:	2014      	movs	r0, #20
 8000e34:	f001 f884 	bl	8001f40 <HAL_Delay>
	
	HAL_GPIO_WritePin(DHT11_PORT, DHT11_DATA_RIN, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4803      	ldr	r0, [pc, #12]	; (8000e4c <DHT11_trriger+0x28>)
 8000e3e:	f001 fbe3 	bl	8002608 <HAL_GPIO_WritePin>
	delay_us(7);
 8000e42:	2007      	movs	r0, #7
 8000e44:	f000 fb1c 	bl	8001480 <delay_us>
	return;
 8000e48:	bf00      	nop
}
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40020800 	.word	0x40020800

08000e50 <DHT11_DataLine_Input>:


void DHT11_DataLine_Input(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e64:	2310      	movs	r3, #16
 8000e66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;			//Change Output to Input
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <DHT11_DataLine_Input+0x34>)
 8000e76:	f001 fa2b 	bl	80022d0 <HAL_GPIO_Init>
	
	return;
 8000e7a:	bf00      	nop
}
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40020800 	.word	0x40020800

08000e88 <DHT11_DataLine_Output>:


void DHT11_DataLine_Output(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
	
	/*Configure GPIO pin : PH0 */
  GPIO_InitStruct.Pin = DHT11_DATA_RIN;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;			//Change Input to Output 
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStruct);
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <DHT11_DataLine_Output+0x38>)
 8000eb2:	f001 fa0d 	bl	80022d0 <HAL_GPIO_Init>
	
	return;
 8000eb6:	bf00      	nop
}
 8000eb8:	3718      	adds	r7, #24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40020800 	.word	0x40020800

08000ec4 <DHT11_rx_Data>:


uint8_t DHT11_rx_Data(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
	uint8_t rx_data = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	
	for(int i = 0; i < 8; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	e023      	b.n	8000f1c <DHT11_rx_Data+0x58>
	{
		//when Input Data == 0
		while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000ed4:	bf00      	nop
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	4814      	ldr	r0, [pc, #80]	; (8000f2c <DHT11_rx_Data+0x68>)
 8000eda:	f001 fb7d 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0f8      	beq.n	8000ed6 <DHT11_rx_Data+0x12>
#if 1
		delay_us(40);
 8000ee4:	2028      	movs	r0, #40	; 0x28
 8000ee6:	f000 facb 	bl	8001480 <delay_us>
#else  // org
		delay_us(16);
#endif
		rx_data<<=1;
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	71fb      	strb	r3, [r7, #7]
		
		//when Input Data == 1
		if(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN))
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	480e      	ldr	r0, [pc, #56]	; (8000f2c <DHT11_rx_Data+0x68>)
 8000ef4:	f001 fb70 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <DHT11_rx_Data+0x42>
		{
			rx_data |= 1;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	71fb      	strb	r3, [r7, #7]
		}
		while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f06:	bf00      	nop
 8000f08:	2110      	movs	r1, #16
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <DHT11_rx_Data+0x68>)
 8000f0c:	f001 fb64 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d0f8      	beq.n	8000f08 <DHT11_rx_Data+0x44>
	for(int i = 0; i < 8; i++)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	603b      	str	r3, [r7, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	ddd8      	ble.n	8000ed4 <DHT11_rx_Data+0x10>
	}
	return rx_data;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020800 	.word	0x40020800

08000f30 <DHT11_dumi_read>:


void DHT11_dumi_read(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f34:	bf00      	nop
 8000f36:	2110      	movs	r1, #16
 8000f38:	480b      	ldr	r0, [pc, #44]	; (8000f68 <DHT11_dumi_read+0x38>)
 8000f3a:	f001 fb4d 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d0f8      	beq.n	8000f36 <DHT11_dumi_read+0x6>
	while( 0 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f44:	bf00      	nop
 8000f46:	2110      	movs	r1, #16
 8000f48:	4807      	ldr	r0, [pc, #28]	; (8000f68 <DHT11_dumi_read+0x38>)
 8000f4a:	f001 fb45 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f8      	beq.n	8000f46 <DHT11_dumi_read+0x16>
	while( 1 == HAL_GPIO_ReadPin(DHT11_PORT, DHT11_DATA_RIN) );
 8000f54:	bf00      	nop
 8000f56:	2110      	movs	r1, #16
 8000f58:	4803      	ldr	r0, [pc, #12]	; (8000f68 <DHT11_dumi_read+0x38>)
 8000f5a:	f001 fb3d 	bl	80025d8 <HAL_GPIO_ReadPin>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d0f8      	beq.n	8000f56 <DHT11_dumi_read+0x26>
	return;
 8000f64:	bf00      	nop
}
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40020800 	.word	0x40020800

08000f6c <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a28      	ldr	r2, [pc, #160]	; (8001018 <HAL_UART_RxCpltCallback+0xac>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d148      	bne.n	800100e <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 8000f7c:	f000 f86c 	bl	8001058 <is_full>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d13e      	bne.n	8001004 <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000f86:	4b25      	ldr	r3, [pc, #148]	; (800101c <HAL_UART_RxCpltCallback+0xb0>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d002      	beq.n	8000f98 <HAL_UART_RxCpltCallback+0x2c>
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b0d      	cmp	r3, #13
 8000f96:	d123      	bne.n	8000fe0 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_UART_RxCpltCallback+0xb4>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <HAL_UART_RxCpltCallback+0xb8>)
 8000f9e:	6819      	ldr	r1, [r3, #0]
 8000fa0:	4821      	ldr	r0, [pc, #132]	; (8001028 <HAL_UART_RxCpltCallback+0xbc>)
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	011b      	lsls	r3, r3, #4
 8000fa6:	1a9b      	subs	r3, r3, r2
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	4403      	add	r3, r0
 8000fac:	440b      	add	r3, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <HAL_UART_RxCpltCallback+0xb8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	; (8001020 <HAL_UART_RxCpltCallback+0xb4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <HAL_UART_RxCpltCallback+0xb4>)
 8000fc0:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_UART_RxCpltCallback+0xb4>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_UART_RxCpltCallback+0xc0>)
 8000fc8:	fb83 1302 	smull	r1, r3, r3, r2
 8000fcc:	1119      	asrs	r1, r3, #4
 8000fce:	17d3      	asrs	r3, r2, #31
 8000fd0:	1acb      	subs	r3, r1, r3
 8000fd2:	2132      	movs	r1, #50	; 0x32
 8000fd4:	fb01 f303 	mul.w	r3, r1, r3
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a11      	ldr	r2, [pc, #68]	; (8001020 <HAL_UART_RxCpltCallback+0xb4>)
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e011      	b.n	8001004 <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_UART_RxCpltCallback+0xb4>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_UART_RxCpltCallback+0xb8>)
 8000fe6:	6819      	ldr	r1, [r3, #0]
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <HAL_UART_RxCpltCallback+0xbc>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	011b      	lsls	r3, r3, #4
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	4403      	add	r3, r0
 8000ff4:	440b      	add	r3, r1
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_UART_RxCpltCallback+0xb8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a08      	ldr	r2, [pc, #32]	; (8001024 <HAL_UART_RxCpltCallback+0xb8>)
 8001002:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	4905      	ldr	r1, [pc, #20]	; (800101c <HAL_UART_RxCpltCallback+0xb0>)
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_UART_RxCpltCallback+0xac>)
 800100a:	f003 f862 	bl	80040d2 <HAL_UART_Receive_IT>

//	if (huart == &huart1)   // bluetooth
//	{
//
//	}
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000714 	.word	0x20000714
 800101c:	20000678 	.word	0x20000678
 8001020:	20000094 	.word	0x20000094
 8001024:	2000067c 	.word	0x2000067c
 8001028:	2000009c 	.word	0x2000009c
 800102c:	51eb851f 	.word	0x51eb851f

08001030 <is_empty>:

int is_empty()		// 큐의 공백 상태를 알려주는 함수
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	if (input_pointer == output_pointer)
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <is_empty+0x20>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <is_empty+0x24>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d101      	bne.n	8001044 <is_empty+0x14>
		return 1;
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <is_empty+0x16>
	else
		return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	20000094 	.word	0x20000094
 8001054:	20000098 	.word	0x20000098

08001058 <is_full>:

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <is_full+0x40>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3301      	adds	r3, #1
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <is_full+0x44>)
 8001066:	fb82 1203 	smull	r1, r2, r2, r3
 800106a:	1111      	asrs	r1, r2, #4
 800106c:	17da      	asrs	r2, r3, #31
 800106e:	1a8a      	subs	r2, r1, r2
 8001070:	2132      	movs	r1, #50	; 0x32
 8001072:	fb01 f202 	mul.w	r2, r1, r2
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <is_full+0x48>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d101      	bne.n	8001088 <is_full+0x30>
		return 1;
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <is_full+0x32>
	else
		return 0;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	20000094 	.word	0x20000094
 800109c:	51eb851f 	.word	0x51eb851f
 80010a0:	20000098 	.word	0x20000098

080010a4 <pc_command_processing>:


int printon = 0;

void pc_command_processing()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	if (is_empty())
 80010aa:	f7ff ffc1 	bl	8001030 <is_empty>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f040 812b 	bne.w	800130c <pc_command_processing+0x268>
	{
		// printf("Queue is Empty");
	}
	else
	{
		if(printon)
 80010b6:	4b97      	ldr	r3, [pc, #604]	; (8001314 <pc_command_processing+0x270>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d010      	beq.n	80010e0 <pc_command_processing+0x3c>
		{
			printf("output_pointer = %d\n", output_pointer);
 80010be:	4b96      	ldr	r3, [pc, #600]	; (8001318 <pc_command_processing+0x274>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4895      	ldr	r0, [pc, #596]	; (800131c <pc_command_processing+0x278>)
 80010c6:	f003 ffd3 	bl	8005070 <iprintf>
			printf("%s\n", rx_buff[output_pointer]);
 80010ca:	4b93      	ldr	r3, [pc, #588]	; (8001318 <pc_command_processing+0x274>)
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	4613      	mov	r3, r2
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	1a9b      	subs	r3, r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4a92      	ldr	r2, [pc, #584]	; (8001320 <pc_command_processing+0x27c>)
 80010d8:	4413      	add	r3, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f004 f84e 	bl	800517c <puts>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printon", strlen("printon")-1) == 0)
 80010e0:	4b8d      	ldr	r3, [pc, #564]	; (8001318 <pc_command_processing+0x274>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	4613      	mov	r3, r2
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4a8c      	ldr	r2, [pc, #560]	; (8001320 <pc_command_processing+0x27c>)
 80010ee:	4413      	add	r3, r2
 80010f0:	2206      	movs	r2, #6
 80010f2:	498c      	ldr	r1, [pc, #560]	; (8001324 <pc_command_processing+0x280>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f004 f849 	bl	800518c <strncmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d108      	bne.n	8001112 <pc_command_processing+0x6e>
		{
			printon = 1;
 8001100:	4b84      	ldr	r3, [pc, #528]	; (8001314 <pc_command_processing+0x270>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 8001106:	4b83      	ldr	r3, [pc, #524]	; (8001314 <pc_command_processing+0x270>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	4886      	ldr	r0, [pc, #536]	; (8001328 <pc_command_processing+0x284>)
 800110e:	f003 ffaf 	bl	8005070 <iprintf>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printoff", strlen("printoff")-1) == 0)
 8001112:	4b81      	ldr	r3, [pc, #516]	; (8001318 <pc_command_processing+0x274>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4a80      	ldr	r2, [pc, #512]	; (8001320 <pc_command_processing+0x27c>)
 8001120:	4413      	add	r3, r2
 8001122:	2207      	movs	r2, #7
 8001124:	4981      	ldr	r1, [pc, #516]	; (800132c <pc_command_processing+0x288>)
 8001126:	4618      	mov	r0, r3
 8001128:	f004 f830 	bl	800518c <strncmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d108      	bne.n	8001144 <pc_command_processing+0xa0>
		{
			printon = 0;
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <pc_command_processing+0x270>)
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <pc_command_processing+0x270>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	487a      	ldr	r0, [pc, #488]	; (8001328 <pc_command_processing+0x284>)
 8001140:	f003 ff96 	bl	8005070 <iprintf>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11time", strlen("dht11time")-1) == 0)
 8001144:	4b74      	ldr	r3, [pc, #464]	; (8001318 <pc_command_processing+0x274>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4613      	mov	r3, r2
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	4a73      	ldr	r2, [pc, #460]	; (8001320 <pc_command_processing+0x27c>)
 8001152:	4413      	add	r3, r2
 8001154:	2208      	movs	r2, #8
 8001156:	4976      	ldr	r1, [pc, #472]	; (8001330 <pc_command_processing+0x28c>)
 8001158:	4618      	mov	r0, r3
 800115a:	f004 f817 	bl	800518c <strncmp>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d144      	bne.n	80011ee <pc_command_processing+0x14a>
		{
			int time_value;

			if(digit_chk((char *)&rx_buff[output_pointer][9], 4))
 8001164:	4b6c      	ldr	r3, [pc, #432]	; (8001318 <pc_command_processing+0x274>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4613      	mov	r3, r2
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	1a9b      	subs	r3, r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	3309      	adds	r3, #9
 8001172:	4a6b      	ldr	r2, [pc, #428]	; (8001320 <pc_command_processing+0x27c>)
 8001174:	4413      	add	r3, r2
 8001176:	2104      	movs	r1, #4
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f8fd 	bl	8001378 <digit_chk>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d027      	beq.n	80011d4 <pc_command_processing+0x130>
			{
 printf("@@@@%s\n", &rx_buff[output_pointer][9]);
 8001184:	4b64      	ldr	r3, [pc, #400]	; (8001318 <pc_command_processing+0x274>)
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	4613      	mov	r3, r2
 800118a:	011b      	lsls	r3, r3, #4
 800118c:	1a9b      	subs	r3, r3, r2
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	3309      	adds	r3, #9
 8001192:	4a63      	ldr	r2, [pc, #396]	; (8001320 <pc_command_processing+0x27c>)
 8001194:	4413      	add	r3, r2
 8001196:	4619      	mov	r1, r3
 8001198:	4866      	ldr	r0, [pc, #408]	; (8001334 <pc_command_processing+0x290>)
 800119a:	f003 ff69 	bl	8005070 <iprintf>

			time_value = atoi((char *)&rx_buff[output_pointer][9]); // atoi (ascii to integer)
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <pc_command_processing+0x274>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	1a9b      	subs	r3, r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	3309      	adds	r3, #9
 80011ac:	4a5c      	ldr	r2, [pc, #368]	; (8001320 <pc_command_processing+0x27c>)
 80011ae:	4413      	add	r3, r2
 80011b0:	4618      	mov	r0, r3
 80011b2:	f003 ff27 	bl	8005004 <atoi>
 80011b6:	6078      	str	r0, [r7, #4]

			dht11time = time_value / 10;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <pc_command_processing+0x294>)
 80011bc:	fb82 1203 	smull	r1, r2, r2, r3
 80011c0:	1092      	asrs	r2, r2, #2
 80011c2:	17db      	asrs	r3, r3, #31
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	4a5d      	ldr	r2, [pc, #372]	; (800133c <pc_command_processing+0x298>)
 80011c8:	6013      	str	r3, [r2, #0]
 printf("%dms\n", time_value);
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	485c      	ldr	r0, [pc, #368]	; (8001340 <pc_command_processing+0x29c>)
 80011ce:	f003 ff4f 	bl	8005070 <iprintf>
 80011d2:	e00c      	b.n	80011ee <pc_command_processing+0x14a>
			}
			else
			{
				printf("invald number: %s\n", &rx_buff[output_pointer][9]);
 80011d4:	4b50      	ldr	r3, [pc, #320]	; (8001318 <pc_command_processing+0x274>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4613      	mov	r3, r2
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	3309      	adds	r3, #9
 80011e2:	4a4f      	ldr	r2, [pc, #316]	; (8001320 <pc_command_processing+0x27c>)
 80011e4:	4413      	add	r3, r2
 80011e6:	4619      	mov	r1, r3
 80011e8:	4856      	ldr	r0, [pc, #344]	; (8001344 <pc_command_processing+0x2a0>)
 80011ea:	f003 ff41 	bl	8005070 <iprintf>
			}
		}

		if(strncmp((const char *)rx_buff[output_pointer], "dht11on", strlen("dht11on")-1) == 0)
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <pc_command_processing+0x274>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	1a9b      	subs	r3, r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4a49      	ldr	r2, [pc, #292]	; (8001320 <pc_command_processing+0x27c>)
 80011fc:	4413      	add	r3, r2
 80011fe:	2206      	movs	r2, #6
 8001200:	4951      	ldr	r1, [pc, #324]	; (8001348 <pc_command_processing+0x2a4>)
 8001202:	4618      	mov	r0, r3
 8001204:	f003 ffc2 	bl	800518c <strncmp>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d105      	bne.n	800121a <pc_command_processing+0x176>
		{
			dht11on = 1;
 800120e:	4b4f      	ldr	r3, [pc, #316]	; (800134c <pc_command_processing+0x2a8>)
 8001210:	2201      	movs	r2, #1
 8001212:	601a      	str	r2, [r3, #0]
			printf("dht11_ON\n");
 8001214:	484e      	ldr	r0, [pc, #312]	; (8001350 <pc_command_processing+0x2ac>)
 8001216:	f003 ffb1 	bl	800517c <puts>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "dht11off", strlen("dht11off")-1) == 0)
 800121a:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <pc_command_processing+0x274>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	4613      	mov	r3, r2
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	1a9b      	subs	r3, r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4a3e      	ldr	r2, [pc, #248]	; (8001320 <pc_command_processing+0x27c>)
 8001228:	4413      	add	r3, r2
 800122a:	2207      	movs	r2, #7
 800122c:	4949      	ldr	r1, [pc, #292]	; (8001354 <pc_command_processing+0x2b0>)
 800122e:	4618      	mov	r0, r3
 8001230:	f003 ffac 	bl	800518c <strncmp>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d105      	bne.n	8001246 <pc_command_processing+0x1a2>
		{
			dht11on = 0;
 800123a:	4b44      	ldr	r3, [pc, #272]	; (800134c <pc_command_processing+0x2a8>)
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
			printf("dht11_OFF\n");
 8001240:	4845      	ldr	r0, [pc, #276]	; (8001358 <pc_command_processing+0x2b4>)
 8001242:	f003 ff9b 	bl	800517c <puts>
		}


		if(strncmp((const char *)rx_buff[output_pointer], "led_all_on", strlen("led_all_on")-1) == 0)
 8001246:	4b34      	ldr	r3, [pc, #208]	; (8001318 <pc_command_processing+0x274>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4613      	mov	r3, r2
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	1a9b      	subs	r3, r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4a33      	ldr	r2, [pc, #204]	; (8001320 <pc_command_processing+0x27c>)
 8001254:	4413      	add	r3, r2
 8001256:	2209      	movs	r2, #9
 8001258:	4940      	ldr	r1, [pc, #256]	; (800135c <pc_command_processing+0x2b8>)
 800125a:	4618      	mov	r0, r3
 800125c:	f003 ff96 	bl	800518c <strncmp>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <pc_command_processing+0x1c6>
		{
			 led_all_on();
 8001266:	f000 f8ab 	bl	80013c0 <led_all_on>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "led_all_off", strlen("led_all_off")-1) == 0)
 800126a:	4b2b      	ldr	r3, [pc, #172]	; (8001318 <pc_command_processing+0x274>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4613      	mov	r3, r2
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4a2a      	ldr	r2, [pc, #168]	; (8001320 <pc_command_processing+0x27c>)
 8001278:	4413      	add	r3, r2
 800127a:	220a      	movs	r2, #10
 800127c:	4938      	ldr	r1, [pc, #224]	; (8001360 <pc_command_processing+0x2bc>)
 800127e:	4618      	mov	r0, r3
 8001280:	f003 ff84 	bl	800518c <strncmp>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d102      	bne.n	8001290 <pc_command_processing+0x1ec>
		{
			led_all_off();
 800128a:	f000 f8a5 	bl	80013d8 <led_all_off>
 800128e:	e02e      	b.n	80012ee <pc_command_processing+0x24a>
//		{
//
//		}


		else if(strncmp((const char *)rx_buff[output_pointer], "dht11status", strlen("dht11status")-1) == 0)
 8001290:	4b21      	ldr	r3, [pc, #132]	; (8001318 <pc_command_processing+0x274>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4613      	mov	r3, r2
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	1a9b      	subs	r3, r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4a20      	ldr	r2, [pc, #128]	; (8001320 <pc_command_processing+0x27c>)
 800129e:	4413      	add	r3, r2
 80012a0:	220a      	movs	r2, #10
 80012a2:	4930      	ldr	r1, [pc, #192]	; (8001364 <pc_command_processing+0x2c0>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 ff71 	bl	800518c <strncmp>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d11e      	bne.n	80012ee <pc_command_processing+0x24a>
		{
			if(dht11on == 0)
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <pc_command_processing+0x2a8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d10d      	bne.n	80012d4 <pc_command_processing+0x230>
			{
				printf("dht11 : off\n");
 80012b8:	482b      	ldr	r0, [pc, #172]	; (8001368 <pc_command_processing+0x2c4>)
 80012ba:	f003 ff5f 	bl	800517c <puts>
				printf("dht11time : %dms\n", dht11time*10);
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <pc_command_processing+0x298>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	4619      	mov	r1, r3
 80012cc:	4827      	ldr	r0, [pc, #156]	; (800136c <pc_command_processing+0x2c8>)
 80012ce:	f003 fecf 	bl	8005070 <iprintf>
 80012d2:	e00c      	b.n	80012ee <pc_command_processing+0x24a>
			}
			else
			{
				printf("dht11 : on\n");
 80012d4:	4826      	ldr	r0, [pc, #152]	; (8001370 <pc_command_processing+0x2cc>)
 80012d6:	f003 ff51 	bl	800517c <puts>
				printf("dht11time : %dms\n", dht11time*10);
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <pc_command_processing+0x298>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	4820      	ldr	r0, [pc, #128]	; (800136c <pc_command_processing+0x2c8>)
 80012ea:	f003 fec1 	bl	8005070 <iprintf>
			}
		}

		output_pointer = (output_pointer + 1) % COMMAND_MAX;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <pc_command_processing+0x274>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <pc_command_processing+0x2d0>)
 80012f6:	fb83 1302 	smull	r1, r3, r3, r2
 80012fa:	1119      	asrs	r1, r3, #4
 80012fc:	17d3      	asrs	r3, r2, #31
 80012fe:	1acb      	subs	r3, r1, r3
 8001300:	2132      	movs	r1, #50	; 0x32
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <pc_command_processing+0x274>)
 800130a:	6013      	str	r3, [r2, #0]
	}
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000680 	.word	0x20000680
 8001318:	20000098 	.word	0x20000098
 800131c:	08006200 	.word	0x08006200
 8001320:	2000009c 	.word	0x2000009c
 8001324:	08006218 	.word	0x08006218
 8001328:	08006220 	.word	0x08006220
 800132c:	08006230 	.word	0x08006230
 8001330:	0800623c 	.word	0x0800623c
 8001334:	08006248 	.word	0x08006248
 8001338:	66666667 	.word	0x66666667
 800133c:	20000004 	.word	0x20000004
 8001340:	08006250 	.word	0x08006250
 8001344:	08006258 	.word	0x08006258
 8001348:	0800626c 	.word	0x0800626c
 800134c:	20000000 	.word	0x20000000
 8001350:	08006274 	.word	0x08006274
 8001354:	08006280 	.word	0x08006280
 8001358:	0800628c 	.word	0x0800628c
 800135c:	08006298 	.word	0x08006298
 8001360:	080062a4 	.word	0x080062a4
 8001364:	080062b0 	.word	0x080062b0
 8001368:	080062bc 	.word	0x080062bc
 800136c:	080062c8 	.word	0x080062c8
 8001370:	080062dc 	.word	0x080062dc
 8001374:	51eb851f 	.word	0x51eb851f

08001378 <digit_chk>:

// True : 1
// False : 0
int digit_chk(char *d, int len)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++)
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	e010      	b.n	80013aa <digit_chk+0x32>
	{
		if(d[i] >= '0' && d[i] <= '9')
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b2f      	cmp	r3, #47	; 0x2f
 8001392:	d905      	bls.n	80013a0 <digit_chk+0x28>
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b39      	cmp	r3, #57	; 0x39
 800139e:	d901      	bls.n	80013a4 <digit_chk+0x2c>
		{
			;
		}
		else
		{
			return 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	e007      	b.n	80013b4 <digit_chk+0x3c>
	for(int i = 0; i < len; i++)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3301      	adds	r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dbea      	blt.n	8001388 <digit_chk+0x10>
		}

	}
	return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <led_all_on>:
		HAL_Delay(200);
	}
}

void led_all_on()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	21ff      	movs	r1, #255	; 0xff
 80013c8:	4802      	ldr	r0, [pc, #8]	; (80013d4 <led_all_on+0x14>)
 80013ca:	f001 f91d 	bl	8002608 <HAL_GPIO_WritePin>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020400 	.word	0x40020400

080013d8 <led_all_off>:

void led_all_off()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80013dc:	2200      	movs	r2, #0
 80013de:	21ff      	movs	r1, #255	; 0xff
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <led_all_off+0x14>)
 80013e2:	f001 f911 	bl	8002608 <HAL_GPIO_WritePin>
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40020400 	.word	0x40020400

080013f0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80013f8:	1d39      	adds	r1, r7, #4
 80013fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fe:	2201      	movs	r2, #1
 8001400:	4803      	ldr	r0, [pc, #12]	; (8001410 <__io_putchar+0x20>)
 8001402:	f002 fdd4 	bl	8003fae <HAL_UART_Transmit>

  return ch;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000714 	.word	0x20000714

08001414 <HAL_SYSTICK_Callback>:
volatile int t2ms_count = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
	t1ms_count++; //
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <HAL_SYSTICK_Callback+0x24>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_SYSTICK_Callback+0x24>)
 8001420:	6013      	str	r3, [r2, #0]
	t2ms_count++; //
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_SYSTICK_Callback+0x28>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_SYSTICK_Callback+0x28>)
 800142a:	6013      	str	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000758 	.word	0x20000758
 800143c:	2000075c 	.word	0x2000075c

08001440 <HAL_TIM_PeriodElapsedCallback>:
// every TIMER INT callBack function : enter here every 10ms
volatile int TIM11_10ms_counter=0;
volatile int TIM11_10ms_ultrasonic_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d109      	bne.n	8001466 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		TIM11_10ms_counter++;
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a07      	ldr	r2, [pc, #28]	; (8001478 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800145a:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 800145c:	4b07      	ldr	r3, [pc, #28]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001464:	6013      	str	r3, [r2, #0]
	}
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40014800 	.word	0x40014800
 8001478:	20000760 	.word	0x20000760
 800147c:	20000764 	.word	0x20000764

08001480 <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <delay_us+0x2c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 8001490:	bf00      	nop
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <delay_us+0x2c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	429a      	cmp	r2, r3
 800149c:	d8f9      	bhi.n	8001492 <delay_us+0x12>
	;
}
 800149e:	bf00      	nop
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	20000684 	.word	0x20000684

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b4:	f000 fcd2 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b8:	f000 f82c 	bl	8001514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014bc:	f000 f962 	bl	8001784 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014c0:	f000 f936 	bl	8001730 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 80014c4:	f000 f910 	bl	80016e8 <MX_TIM11_Init>
  MX_TIM1_Init();
 80014c8:	f000 f89a 	bl	8001600 <MX_TIM1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014cc:	f000 f88c 	bl	80015e8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 80014d0:	480b      	ldr	r0, [pc, #44]	; (8001500 <main+0x50>)
 80014d2:	f001 fd9b 	bl	800300c <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 80014d6:	2100      	movs	r1, #0
 80014d8:	480a      	ldr	r0, [pc, #40]	; (8001504 <main+0x54>)
 80014da:	f001 fe53 	bl	8003184 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 80014de:	2201      	movs	r2, #1
 80014e0:	4909      	ldr	r1, [pc, #36]	; (8001508 <main+0x58>)
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <main+0x5c>)
 80014e4:	f002 fdf5 	bl	80040d2 <HAL_UART_Receive_IT>

  DHT11_Init();	// keep high while 3sec data line
 80014e8:	f7ff fc8c 	bl	8000e04 <DHT11_Init>

  printf("Hello STM32!!!\n");
 80014ec:	4808      	ldr	r0, [pc, #32]	; (8001510 <main+0x60>)
 80014ee:	f003 fe45 	bl	800517c <puts>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  DHT11_processing();
 80014f2:	f7ff fc3d 	bl	8000d70 <DHT11_processing>
	  pc_command_processing();
 80014f6:	f7ff fdd5 	bl	80010a4 <pc_command_processing>
	  ultrasonic_processing();
 80014fa:	f000 fc41 	bl	8001d80 <ultrasonic_processing>
  {
 80014fe:	e7f8      	b.n	80014f2 <main+0x42>
 8001500:	200006cc 	.word	0x200006cc
 8001504:	20000684 	.word	0x20000684
 8001508:	20000678 	.word	0x20000678
 800150c:	20000714 	.word	0x20000714
 8001510:	080062e8 	.word	0x080062e8

08001514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b094      	sub	sp, #80	; 0x50
 8001518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800151a:	f107 0320 	add.w	r3, r7, #32
 800151e:	2230      	movs	r2, #48	; 0x30
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f003 fd9c 	bl	8005060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001528:	f107 030c 	add.w	r3, r7, #12
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	60bb      	str	r3, [r7, #8]
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <SystemClock_Config+0xcc>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <SystemClock_Config+0xcc>)
 8001542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40
 8001548:	4b25      	ldr	r3, [pc, #148]	; (80015e0 <SystemClock_Config+0xcc>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001554:	2300      	movs	r3, #0
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <SystemClock_Config+0xd0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a21      	ldr	r2, [pc, #132]	; (80015e4 <SystemClock_Config+0xd0>)
 800155e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <SystemClock_Config+0xd0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001570:	2302      	movs	r3, #2
 8001572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001574:	2301      	movs	r3, #1
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001578:	2310      	movs	r3, #16
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157c:	2302      	movs	r3, #2
 800157e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001580:	2300      	movs	r3, #0
 8001582:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001584:	2310      	movs	r3, #16
 8001586:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001588:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800158e:	2304      	movs	r3, #4
 8001590:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001592:	2304      	movs	r3, #4
 8001594:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	4618      	mov	r0, r3
 800159c:	f001 f84e 	bl	800263c <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80015a6:	f000 f98f 	bl	80018c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	230f      	movs	r3, #15
 80015ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ae:	2302      	movs	r3, #2
 80015b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	2102      	movs	r1, #2
 80015c6:	4618      	mov	r0, r3
 80015c8:	f001 fab0 	bl	8002b2c <HAL_RCC_ClockConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015d2:	f000 f979 	bl	80018c8 <Error_Handler>
  }
}
 80015d6:	bf00      	nop
 80015d8:	3750      	adds	r7, #80	; 0x50
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800
 80015e4:	40007000 	.word	0x40007000

080015e8 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	201a      	movs	r0, #26
 80015f2:	f000 fda4 	bl	800213e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80015f6:	201a      	movs	r0, #26
 80015f8:	f000 fdbd 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}

08001600 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	; 0x28
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	f107 0318 	add.w	r3, r7, #24
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001614:	f107 0310 	add.w	r3, r7, #16
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800162a:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <MX_TIM1_Init+0xe0>)
 800162c:	4a2d      	ldr	r2, [pc, #180]	; (80016e4 <MX_TIM1_Init+0xe4>)
 800162e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001632:	2253      	movs	r2, #83	; 0x53
 8001634:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <MX_TIM1_Init+0xe0>)
 800163e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001642:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_TIM1_Init+0xe0>)
 800164c:	2200      	movs	r2, #0
 800164e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001656:	4822      	ldr	r0, [pc, #136]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001658:	f001 fc88 	bl	8002f6c <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001662:	f000 f931 	bl	80018c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	4619      	mov	r1, r3
 8001672:	481b      	ldr	r0, [pc, #108]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001674:	f002 f844 	bl	8003700 <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800167e:	f000 f923 	bl	80018c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001682:	4817      	ldr	r0, [pc, #92]	; (80016e0 <MX_TIM1_Init+0xe0>)
 8001684:	f001 fd24 	bl	80030d0 <HAL_TIM_IC_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800168e:	f000 f91b 	bl	80018c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800169a:	f107 0310 	add.w	r3, r7, #16
 800169e:	4619      	mov	r1, r3
 80016a0:	480f      	ldr	r0, [pc, #60]	; (80016e0 <MX_TIM1_Init+0xe0>)
 80016a2:	f002 fbb5 	bl	8003e10 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80016ac:	f000 f90c 	bl	80018c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80016b0:	230a      	movs	r3, #10
 80016b2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <MX_TIM1_Init+0xe0>)
 80016c8:	f001 ff7e 	bl	80035c8 <HAL_TIM_IC_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80016d2:	f000 f8f9 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	3728      	adds	r7, #40	; 0x28
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000684 	.word	0x20000684
 80016e4:	40010000 	.word	0x40010000

080016e8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_TIM11_Init+0x40>)
 80016ee:	4a0f      	ldr	r2, [pc, #60]	; (800172c <MX_TIM11_Init+0x44>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_TIM11_Init+0x40>)
 80016f4:	2253      	movs	r2, #83	; 0x53
 80016f6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_TIM11_Init+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_TIM11_Init+0x40>)
 8001700:	f242 720f 	movw	r2, #9999	; 0x270f
 8001704:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_TIM11_Init+0x40>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_TIM11_Init+0x40>)
 800170e:	2200      	movs	r2, #0
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_TIM11_Init+0x40>)
 8001714:	f001 fc2a 	bl	8002f6c <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800171e:	f000 f8d3 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200006cc 	.word	0x200006cc
 800172c:	40014800 	.word	0x40014800

08001730 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_USART2_UART_Init+0x4c>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_USART2_UART_Init+0x50>)
 8001738:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <MX_USART2_UART_Init+0x4c>)
 800173c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001740:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001742:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001748:	4b0c      	ldr	r3, [pc, #48]	; (800177c <MX_USART2_UART_Init+0x4c>)
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_USART2_UART_Init+0x4c>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_USART2_UART_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_USART2_UART_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_USART2_UART_Init+0x4c>)
 8001768:	f002 fbd4 	bl	8003f14 <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001772:	f000 f8a9 	bl	80018c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000714 	.word	0x20000714
 8001780:	40004400 	.word	0x40004400

08001784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	2200      	movs	r2, #0
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	605a      	str	r2, [r3, #4]
 8001794:	609a      	str	r2, [r3, #8]
 8001796:	60da      	str	r2, [r3, #12]
 8001798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a45      	ldr	r2, [pc, #276]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b43      	ldr	r3, [pc, #268]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b3f      	ldr	r3, [pc, #252]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a3e      	ldr	r2, [pc, #248]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b3c      	ldr	r3, [pc, #240]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b38      	ldr	r3, [pc, #224]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a37      	ldr	r2, [pc, #220]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b35      	ldr	r3, [pc, #212]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a30      	ldr	r2, [pc, #192]	; (80018b8 <MX_GPIO_Init+0x134>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <MX_GPIO_Init+0x134>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	482b      	ldr	r0, [pc, #172]	; (80018bc <MX_GPIO_Init+0x138>)
 8001810:	f000 fefa 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DHT11_Pin|ULTRASONIC_TRIG_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	2130      	movs	r1, #48	; 0x30
 8001818:	4829      	ldr	r0, [pc, #164]	; (80018c0 <MX_GPIO_Init+0x13c>)
 800181a:	f000 fef5 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 800181e:	2200      	movs	r2, #0
 8001820:	21ff      	movs	r1, #255	; 0xff
 8001822:	4828      	ldr	r0, [pc, #160]	; (80018c4 <MX_GPIO_Init+0x140>)
 8001824:	f000 fef0 	bl	8002608 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	4619      	mov	r1, r3
 800183e:	4820      	ldr	r0, [pc, #128]	; (80018c0 <MX_GPIO_Init+0x13c>)
 8001840:	f000 fd46 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001844:	2307      	movs	r3, #7
 8001846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	; (80018c0 <MX_GPIO_Init+0x13c>)
 8001858:	f000 fd3a 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800185c:	2320      	movs	r3, #32
 800185e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4812      	ldr	r0, [pc, #72]	; (80018bc <MX_GPIO_Init+0x138>)
 8001874:	f000 fd2c 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DHT11_Pin ULTRASONIC_TRIG_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin|ULTRASONIC_TRIG_Pin;
 8001878:	2330      	movs	r3, #48	; 0x30
 800187a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187c:	2301      	movs	r3, #1
 800187e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	4619      	mov	r1, r3
 800188e:	480c      	ldr	r0, [pc, #48]	; (80018c0 <MX_GPIO_Init+0x13c>)
 8001890:	f000 fd1e 	bl	80022d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001894:	23ff      	movs	r3, #255	; 0xff
 8001896:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	4619      	mov	r1, r3
 80018aa:	4806      	ldr	r0, [pc, #24]	; (80018c4 <MX_GPIO_Init+0x140>)
 80018ac:	f000 fd10 	bl	80022d0 <HAL_GPIO_Init>

}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	; 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020800 	.word	0x40020800
 80018c4:	40020400 	.word	0x40020400

080018c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018cc:	b672      	cpsid	i
}
 80018ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d0:	e7fe      	b.n	80018d0 <Error_Handler+0x8>
	...

080018d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <HAL_MspInit+0x4c>)
 80018e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e2:	4a0f      	ldr	r2, [pc, #60]	; (8001920 <HAL_MspInit+0x4c>)
 80018e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_MspInit+0x4c>)
 80018ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f2:	607b      	str	r3, [r7, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	603b      	str	r3, [r7, #0]
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_MspInit+0x4c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a08      	ldr	r2, [pc, #32]	; (8001920 <HAL_MspInit+0x4c>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_MspInit+0x4c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001912:	2007      	movs	r0, #7
 8001914:	f000 fc08 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08a      	sub	sp, #40	; 0x28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a2f      	ldr	r2, [pc, #188]	; (8001a00 <HAL_TIM_Base_MspInit+0xdc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d145      	bne.n	80019d2 <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194e:	4a2d      	ldr	r2, [pc, #180]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6453      	str	r3, [r2, #68]	; 0x44
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800197e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001990:	2301      	movs	r3, #1
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	481b      	ldr	r0, [pc, #108]	; (8001a08 <HAL_TIM_Base_MspInit+0xe4>)
 800199c:	f000 fc98 	bl	80022d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2100      	movs	r1, #0
 80019a4:	2018      	movs	r0, #24
 80019a6:	f000 fbca 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80019aa:	2018      	movs	r0, #24
 80019ac:	f000 fbe3 	bl	8002176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2019      	movs	r0, #25
 80019b6:	f000 fbc2 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019ba:	2019      	movs	r0, #25
 80019bc:	f000 fbdb 	bl	8002176 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	201b      	movs	r0, #27
 80019c6:	f000 fbba 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019ca:	201b      	movs	r0, #27
 80019cc:	f000 fbd3 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019d0:	e012      	b.n	80019f8 <HAL_TIM_Base_MspInit+0xd4>
  else if(htim_base->Instance==TIM11)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0d      	ldr	r2, [pc, #52]	; (8001a0c <HAL_TIM_Base_MspInit+0xe8>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d10d      	bne.n	80019f8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ea:	6453      	str	r3, [r2, #68]	; 0x44
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_TIM_Base_MspInit+0xe0>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40010000 	.word	0x40010000
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40014800 	.word	0x40014800

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_UART_MspInit+0x94>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d133      	bne.n	8001a9a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a40:	6413      	str	r3, [r2, #64]	; 0x40
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_UART_MspInit+0x98>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a6a:	230c      	movs	r3, #12
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_UART_MspInit+0x9c>)
 8001a86:	f000 fc23 	bl	80022d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2026      	movs	r0, #38	; 0x26
 8001a90:	f000 fb55 	bl	800213e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a94:	2026      	movs	r0, #38	; 0x26
 8001a96:	f000 fb6e 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3728      	adds	r7, #40	; 0x28
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40004400 	.word	0x40004400
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001afc:	f000 fa00 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 8001b00:	f7ff fc88 	bl	8001414 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b0e:	f001 fc53 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000684 	.word	0x20000684

08001b1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b22:	f001 fc49 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000684 	.word	0x20000684

08001b30 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b36:	f001 fc3f 	bl	80033b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b3a:	4803      	ldr	r0, [pc, #12]	; (8001b48 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b3c:	f001 fc3c 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20000684 	.word	0x20000684
 8001b48:	200006cc 	.word	0x200006cc

08001b4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM1_CC_IRQHandler+0x10>)
 8001b52:	f001 fc31 	bl	80033b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000684 	.word	0x20000684

08001b60 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <USART2_IRQHandler+0x10>)
 8001b66:	f002 fae5 	bl	8004134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000714 	.word	0x20000714

08001b74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	e00a      	b.n	8001b9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b86:	f3af 8000 	nop.w
 8001b8a:	4601      	mov	r1, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1c5a      	adds	r2, r3, #1
 8001b90:	60ba      	str	r2, [r7, #8]
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbf0      	blt.n	8001b86 <_read+0x12>
	}

return len;
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b086      	sub	sp, #24
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	e009      	b.n	8001bd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fc11 	bl	80013f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbf1      	blt.n	8001bc0 <_write+0x12>
	}
	return len;
 8001bdc:	687b      	ldr	r3, [r7, #4]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_close>:

int _close(int file)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
	return -1;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
 8001c06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0e:	605a      	str	r2, [r3, #4]
	return 0;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_isatty>:

int _isatty(int file)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	return 1;
 8001c26:	2301      	movs	r3, #1
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
	return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <_sbrk+0x5c>)
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <_sbrk+0x60>)
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <_sbrk+0x64>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <_sbrk+0x64>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <_sbrk+0x68>)
 8001c70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <_sbrk+0x64>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d207      	bcs.n	8001c90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c80:	f003 f9c4 	bl	800500c <__errno>
 8001c84:	4603      	mov	r3, r0
 8001c86:	220c      	movs	r2, #12
 8001c88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	e009      	b.n	8001ca4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c90:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <_sbrk+0x64>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <_sbrk+0x64>)
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <_sbrk+0x64>)
 8001ca0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20020000 	.word	0x20020000
 8001cb0:	00000400 	.word	0x00000400
 8001cb4:	20000768 	.word	0x20000768
 8001cb8:	20000790 	.word	0x20000790

08001cbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <SystemInit+0x20>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <SystemInit+0x20>)
 8001cc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <HAL_TIM_IC_CaptureCallback>:
int distance; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d11d      	bne.n	8001d2e <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d107      	bne.n	8001d0a <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 8001d02:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 8001d08:	e011      	b.n	8001d2e <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10d      	bne.n	8001d2e <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 8001d12:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 8001d18:	2100      	movs	r1, #0
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f001 fdb8 	bl	8003890 <HAL_TIM_ReadCapturedValue>
 8001d20:	4603      	mov	r3, r0
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d26:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40010000 	.word	0x40010000
 8001d3c:	20000774 	.word	0x20000774
 8001d40:	2000076c 	.word	0x2000076c
 8001d44:	20000770 	.word	0x20000770

08001d48 <make_trigger>:


void make_trigger()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2120      	movs	r1, #32
 8001d50:	480a      	ldr	r0, [pc, #40]	; (8001d7c <make_trigger+0x34>)
 8001d52:	f000 fc59 	bl	8002608 <HAL_GPIO_WritePin>
	delay_us(2);
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff fb92 	bl	8001480 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2120      	movs	r1, #32
 8001d60:	4806      	ldr	r0, [pc, #24]	; (8001d7c <make_trigger+0x34>)
 8001d62:	f000 fc51 	bl	8002608 <HAL_GPIO_WritePin>
	delay_us(10);
 8001d66:	200a      	movs	r0, #10
 8001d68:	f7ff fb8a 	bl	8001480 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2120      	movs	r1, #32
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <make_trigger+0x34>)
 8001d72:	f000 fc49 	bl	8002608 <HAL_GPIO_WritePin>

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020800 	.word	0x40020800

08001d80 <ultrasonic_processing>:

extern volatile int TIM11_10ms_ultrasonic_counter;

void ultrasonic_processing()
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0

	if(TIM11_10ms_ultrasonic_counter >= 100)	// 1000ms cycle
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <ultrasonic_processing+0x78>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b63      	cmp	r3, #99	; 0x63
 8001d8a:	dd2e      	ble.n	8001dea <ultrasonic_processing+0x6a>
	{
		TIM11_10ms_ultrasonic_counter = 0;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <ultrasonic_processing+0x78>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
		make_trigger();
 8001d92:	f7ff ffd9 	bl	8001d48 <make_trigger>
		if(ic_cpt_flag)
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <ultrasonic_processing+0x7c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d025      	beq.n	8001dea <ultrasonic_processing+0x6a>
		{
			ic_cpt_flag = 0;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <ultrasonic_processing+0x7c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
			distance = distance * 0.034 / 2; // 1us 가 0.034cm 이동
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <ultrasonic_processing+0x80>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fbbb 	bl	8000524 <__aeabi_i2d>
 8001dae:	a310      	add	r3, pc, #64	; (adr r3, 8001df0 <ultrasonic_processing+0x70>)
 8001db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db4:	f7fe fc20 	bl	80005f8 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dc8:	f7fe fd40 	bl	800084c <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe fe22 	bl	8000a1c <__aeabi_d2iz>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <ultrasonic_processing+0x80>)
 8001ddc:	6013      	str	r3, [r2, #0]
			// 왕복 값을 return 하기 때문에 편도 거리 값을 구하기 위해 /2를 해야함
			printf("distance : %dcm\n", distance);
 8001dde:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <ultrasonic_processing+0x80>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4619      	mov	r1, r3
 8001de4:	4807      	ldr	r0, [pc, #28]	; (8001e04 <ultrasonic_processing+0x84>)
 8001de6:	f003 f943 	bl	8005070 <iprintf>
		}
	}
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	b020c49c 	.word	0xb020c49c
 8001df4:	3fa16872 	.word	0x3fa16872
 8001df8:	20000764 	.word	0x20000764
 8001dfc:	20000770 	.word	0x20000770
 8001e00:	2000076c 	.word	0x2000076c
 8001e04:	080062f8 	.word	0x080062f8

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480d      	ldr	r0, [pc, #52]	; (8001e44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e0e:	490e      	ldr	r1, [pc, #56]	; (8001e48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e24:	4c0b      	ldr	r4, [pc, #44]	; (8001e54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ff43 	bl	8001cbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f003 f8ef 	bl	8005018 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff fb39 	bl	80014b0 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e4c:	080064d0 	.word	0x080064d0
  ldr r2, =_sbss
 8001e50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e54:	2000078c 	.word	0x2000078c

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 f94f 	bl	8002128 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fd20 	bl	80018d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f967 	bl	8002192 <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f92f 	bl	800213e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000010 	.word	0x20000010
 8001efc:	2000000c 	.word	0x2000000c

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000010 	.word	0x20000010
 8001f24:	20000778 	.word	0x20000778

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000778 	.word	0x20000778

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000010 	.word	0x20000010

08001f88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
         );
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
	...

080020e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020f4:	d301      	bcc.n	80020fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00f      	b.n	800211a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fa:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <SysTick_Config+0x40>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002102:	210f      	movs	r1, #15
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f7ff ff8e 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <SysTick_Config+0x40>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <SysTick_Config+0x40>)
 8002114:	2207      	movs	r2, #7
 8002116:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	e000e010 	.word	0xe000e010

08002128 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff29 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800213e:	b580      	push	{r7, lr}
 8002140:	b086      	sub	sp, #24
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	607a      	str	r2, [r7, #4]
 800214a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff3e 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff8e 	bl	800207c <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff31 	bl	8001fec <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa2 	bl	80020e4 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021b8:	f7ff feb6 	bl	8001f28 <HAL_GetTick>
 80021bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e052      	b.n	8002282 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 0216 	bic.w	r2, r2, #22
 80021ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <HAL_DMA_Abort+0x62>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0208 	bic.w	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222c:	e013      	b.n	8002256 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800222e:	f7ff fe7b 	bl	8001f28 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b05      	cmp	r3, #5
 800223a:	d90c      	bls.n	8002256 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2203      	movs	r2, #3
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e015      	b.n	8002282 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1e4      	bne.n	800222e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002268:	223f      	movs	r2, #63	; 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d004      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2280      	movs	r2, #128	; 0x80
 80022a2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e00c      	b.n	80022c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2205      	movs	r2, #5
 80022ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b089      	sub	sp, #36	; 0x24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
 80022ea:	e159      	b.n	80025a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022ec:	2201      	movs	r2, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	429a      	cmp	r2, r3
 8002306:	f040 8148 	bne.w	800259a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d005      	beq.n	8002322 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	2b02      	cmp	r3, #2
 8002320:	d130      	bne.n	8002384 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2203      	movs	r2, #3
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002358:	2201      	movs	r2, #1
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 0201 	and.w	r2, r3, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	2b03      	cmp	r3, #3
 800238e:	d017      	beq.n	80023c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d123      	bne.n	8002414 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	08da      	lsrs	r2, r3, #3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3208      	adds	r2, #8
 80023d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	220f      	movs	r2, #15
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	69b9      	ldr	r1, [r7, #24]
 8002410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0203 	and.w	r2, r3, #3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 80a2 	beq.w	800259a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	4b57      	ldr	r3, [pc, #348]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a56      	ldr	r2, [pc, #344]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b54      	ldr	r3, [pc, #336]	; (80025b8 <HAL_GPIO_Init+0x2e8>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	60fb      	str	r3, [r7, #12]
 8002470:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002472:	4a52      	ldr	r2, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a49      	ldr	r2, [pc, #292]	; (80025c0 <HAL_GPIO_Init+0x2f0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d019      	beq.n	80024d2 <HAL_GPIO_Init+0x202>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a48      	ldr	r2, [pc, #288]	; (80025c4 <HAL_GPIO_Init+0x2f4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d013      	beq.n	80024ce <HAL_GPIO_Init+0x1fe>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a47      	ldr	r2, [pc, #284]	; (80025c8 <HAL_GPIO_Init+0x2f8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d00d      	beq.n	80024ca <HAL_GPIO_Init+0x1fa>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a46      	ldr	r2, [pc, #280]	; (80025cc <HAL_GPIO_Init+0x2fc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d007      	beq.n	80024c6 <HAL_GPIO_Init+0x1f6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <HAL_GPIO_Init+0x300>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d101      	bne.n	80024c2 <HAL_GPIO_Init+0x1f2>
 80024be:	2304      	movs	r3, #4
 80024c0:	e008      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024c2:	2307      	movs	r3, #7
 80024c4:	e006      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024c6:	2303      	movs	r3, #3
 80024c8:	e004      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024ca:	2302      	movs	r3, #2
 80024cc:	e002      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_GPIO_Init+0x204>
 80024d2:	2300      	movs	r3, #0
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f002 0203 	and.w	r2, r2, #3
 80024da:	0092      	lsls	r2, r2, #2
 80024dc:	4093      	lsls	r3, r2
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e4:	4935      	ldr	r1, [pc, #212]	; (80025bc <HAL_GPIO_Init+0x2ec>)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	089b      	lsrs	r3, r3, #2
 80024ea:	3302      	adds	r3, #2
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024f2:	4b38      	ldr	r3, [pc, #224]	; (80025d4 <HAL_GPIO_Init+0x304>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4013      	ands	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002516:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_GPIO_Init+0x304>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002546:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800256a:	4a1a      	ldr	r2, [pc, #104]	; (80025d4 <HAL_GPIO_Init+0x304>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_GPIO_Init+0x304>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3301      	adds	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	2b0f      	cmp	r3, #15
 80025a4:	f67f aea2 	bls.w	80022ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a8:	bf00      	nop
 80025aa:	bf00      	nop
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40013800 	.word	0x40013800
 80025c0:	40020000 	.word	0x40020000
 80025c4:	40020400 	.word	0x40020400
 80025c8:	40020800 	.word	0x40020800
 80025cc:	40020c00 	.word	0x40020c00
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e267      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d075      	beq.n	8002746 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800265a:	4b88      	ldr	r3, [pc, #544]	; (800287c <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b04      	cmp	r3, #4
 8002664:	d00c      	beq.n	8002680 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002666:	4b85      	ldr	r3, [pc, #532]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800266e:	2b08      	cmp	r3, #8
 8002670:	d112      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002672:	4b82      	ldr	r3, [pc, #520]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800267e:	d10b      	bne.n	8002698 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	4b7e      	ldr	r3, [pc, #504]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d05b      	beq.n	8002744 <HAL_RCC_OscConfig+0x108>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d157      	bne.n	8002744 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e242      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a0:	d106      	bne.n	80026b0 <HAL_RCC_OscConfig+0x74>
 80026a2:	4b76      	ldr	r3, [pc, #472]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a75      	ldr	r2, [pc, #468]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e01d      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026b8:	d10c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x98>
 80026ba:	4b70      	ldr	r3, [pc, #448]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a6f      	ldr	r2, [pc, #444]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	4b6d      	ldr	r3, [pc, #436]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6c      	ldr	r2, [pc, #432]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	e00b      	b.n	80026ec <HAL_RCC_OscConfig+0xb0>
 80026d4:	4b69      	ldr	r3, [pc, #420]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a68      	ldr	r2, [pc, #416]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026de:	6013      	str	r3, [r2, #0]
 80026e0:	4b66      	ldr	r3, [pc, #408]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a65      	ldr	r2, [pc, #404]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80026e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d013      	beq.n	800271c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7ff fc18 	bl	8001f28 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fc:	f7ff fc14 	bl	8001f28 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b64      	cmp	r3, #100	; 0x64
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e207      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	4b5b      	ldr	r3, [pc, #364]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0xc0>
 800271a:	e014      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271c:	f7ff fc04 	bl	8001f28 <HAL_GetTick>
 8002720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002724:	f7ff fc00 	bl	8001f28 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b64      	cmp	r3, #100	; 0x64
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e1f3      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	4b51      	ldr	r3, [pc, #324]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0xe8>
 8002742:	e000      	b.n	8002746 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d063      	beq.n	800281a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 030c 	and.w	r3, r3, #12
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002766:	2b08      	cmp	r3, #8
 8002768:	d11c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_RCC_OscConfig+0x240>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d116      	bne.n	80027a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e1c7      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278e:	4b3b      	ldr	r3, [pc, #236]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4937      	ldr	r1, [pc, #220]	; (800287c <HAL_RCC_OscConfig+0x240>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	e03a      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d020      	beq.n	80027ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ac:	4b34      	ldr	r3, [pc, #208]	; (8002880 <HAL_RCC_OscConfig+0x244>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b2:	f7ff fbb9 	bl	8001f28 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ba:	f7ff fbb5 	bl	8001f28 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1a8      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d8:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	4925      	ldr	r1, [pc, #148]	; (800287c <HAL_RCC_OscConfig+0x240>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e015      	b.n	800281a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_OscConfig+0x244>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7ff fb98 	bl	8001f28 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027fc:	f7ff fb94 	bl	8001f28 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e187      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0308 	and.w	r3, r3, #8
 8002822:	2b00      	cmp	r3, #0
 8002824:	d036      	beq.n	8002894 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCC_OscConfig+0x248>)
 8002830:	2201      	movs	r2, #1
 8002832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff fb78 	bl	8001f28 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800283c:	f7ff fb74 	bl	8001f28 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e167      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800284e:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCC_OscConfig+0x240>)
 8002850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x200>
 800285a:	e01b      	b.n	8002894 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_OscConfig+0x248>)
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002862:	f7ff fb61 	bl	8001f28 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002868:	e00e      	b.n	8002888 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800286a:	f7ff fb5d 	bl	8001f28 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d907      	bls.n	8002888 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e150      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 800287c:	40023800 	.word	0x40023800
 8002880:	42470000 	.word	0x42470000
 8002884:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002888:	4b88      	ldr	r3, [pc, #544]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800288a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1ea      	bne.n	800286a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8097 	beq.w	80029d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a2:	2300      	movs	r3, #0
 80028a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a6:	4b81      	ldr	r3, [pc, #516]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10f      	bne.n	80028d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b7d      	ldr	r3, [pc, #500]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a7c      	ldr	r2, [pc, #496]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d2:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d118      	bne.n	8002910 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028de:	4b74      	ldr	r3, [pc, #464]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a73      	ldr	r2, [pc, #460]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 80028e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ea:	f7ff fb1d 	bl	8001f28 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f2:	f7ff fb19 	bl	8001f28 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e10c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b6a      	ldr	r3, [pc, #424]	; (8002ab0 <HAL_RCC_OscConfig+0x474>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x2ea>
 8002918:	4b64      	ldr	r3, [pc, #400]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a63      	ldr	r2, [pc, #396]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	e01c      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b05      	cmp	r3, #5
 800292c:	d10c      	bne.n	8002948 <HAL_RCC_OscConfig+0x30c>
 800292e:	4b5f      	ldr	r3, [pc, #380]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a5e      	ldr	r2, [pc, #376]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
 800293a:	4b5c      	ldr	r3, [pc, #368]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a5b      	ldr	r2, [pc, #364]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
 8002946:	e00b      	b.n	8002960 <HAL_RCC_OscConfig+0x324>
 8002948:	4b58      	ldr	r3, [pc, #352]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	4a54      	ldr	r2, [pc, #336]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 0304 	bic.w	r3, r3, #4
 800295e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fade 	bl	8001f28 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	e00a      	b.n	8002986 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f7ff fada 	bl	8001f28 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	f241 3288 	movw	r2, #5000	; 0x1388
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e0cb      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002986:	4b49      	ldr	r3, [pc, #292]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0ee      	beq.n	8002970 <HAL_RCC_OscConfig+0x334>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002994:	f7ff fac8 	bl	8001f28 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7ff fac4 	bl	8001f28 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0b5      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b2:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ee      	bne.n	800299c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c4:	4b39      	ldr	r3, [pc, #228]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	4a38      	ldr	r2, [pc, #224]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a1 	beq.w	8002b1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029da:	4b34      	ldr	r3, [pc, #208]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d05c      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d141      	bne.n	8002a72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_OscConfig+0x478>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7ff fa98 	bl	8001f28 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fc:	f7ff fa94 	bl	8001f28 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e087      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69da      	ldr	r2, [r3, #28]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a30:	085b      	lsrs	r3, r3, #1
 8002a32:	3b01      	subs	r3, #1
 8002a34:	041b      	lsls	r3, r3, #16
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	491b      	ldr	r1, [pc, #108]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7ff fa6d 	bl	8001f28 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a52:	f7ff fa69 	bl	8001f28 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e05c      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0f0      	beq.n	8002a52 <HAL_RCC_OscConfig+0x416>
 8002a70:	e054      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <HAL_RCC_OscConfig+0x478>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a78:	f7ff fa56 	bl	8001f28 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a80:	f7ff fa52 	bl	8001f28 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e045      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_OscConfig+0x470>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x444>
 8002a9e:	e03d      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e038      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCC_OscConfig+0x4ec>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d028      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d121      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d11a      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ae8:	4013      	ands	r3, r2
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d111      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	3b01      	subs	r3, #1
 8002b02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d101      	bne.n	8002b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e0cc      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b40:	4b68      	ldr	r3, [pc, #416]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d90c      	bls.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b65      	ldr	r3, [pc, #404]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b63      	ldr	r3, [pc, #396]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0b8      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d020      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b80:	4b59      	ldr	r3, [pc, #356]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b98:	4b53      	ldr	r3, [pc, #332]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	4a52      	ldr	r2, [pc, #328]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ba2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ba4:	4b50      	ldr	r3, [pc, #320]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	494d      	ldr	r1, [pc, #308]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d044      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d107      	bne.n	8002bda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d119      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e07f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bea:	4b3f      	ldr	r3, [pc, #252]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e06f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfa:	4b3b      	ldr	r3, [pc, #236]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e067      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4934      	ldr	r1, [pc, #208]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c1c:	f7ff f984 	bl	8001f28 <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7ff f980 	bl	8001f28 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e04f      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d20c      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5a:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e032      	b.n	8002cda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0304 	and.w	r3, r3, #4
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4916      	ldr	r1, [pc, #88]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d009      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c9e:	4b12      	ldr	r3, [pc, #72]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	490e      	ldr	r1, [pc, #56]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cb2:	f000 f821 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490a      	ldr	r1, [pc, #40]	; (8002cec <HAL_RCC_ClockConfig+0x1c0>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cca:	4a09      	ldr	r2, [pc, #36]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cce:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff f8e4 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	0800630c 	.word	0x0800630c
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	2000000c 	.word	0x2000000c

08002cf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cfc:	b094      	sub	sp, #80	; 0x50
 8002cfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
 8002d04:	2300      	movs	r3, #0
 8002d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d08:	2300      	movs	r3, #0
 8002d0a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d10:	4b79      	ldr	r3, [pc, #484]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d00d      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x40>
 8002d1c:	2b08      	cmp	r3, #8
 8002d1e:	f200 80e1 	bhi.w	8002ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d002      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x34>
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d003      	beq.n	8002d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d2a:	e0db      	b.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b73      	ldr	r3, [pc, #460]	; (8002efc <HAL_RCC_GetSysClockFreq+0x204>)
 8002d2e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002d30:	e0db      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d32:	4b73      	ldr	r3, [pc, #460]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d36:	e0d8      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d063      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	099b      	lsrs	r3, r3, #6
 8002d54:	2200      	movs	r2, #0
 8002d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d60:	633b      	str	r3, [r7, #48]	; 0x30
 8002d62:	2300      	movs	r3, #0
 8002d64:	637b      	str	r3, [r7, #52]	; 0x34
 8002d66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	462b      	mov	r3, r5
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4621      	mov	r1, r4
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	6139      	str	r1, [r7, #16]
 8002d88:	4629      	mov	r1, r5
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d9c:	4659      	mov	r1, fp
 8002d9e:	018b      	lsls	r3, r1, #6
 8002da0:	4651      	mov	r1, sl
 8002da2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002da6:	4651      	mov	r1, sl
 8002da8:	018a      	lsls	r2, r1, #6
 8002daa:	4651      	mov	r1, sl
 8002dac:	ebb2 0801 	subs.w	r8, r2, r1
 8002db0:	4659      	mov	r1, fp
 8002db2:	eb63 0901 	sbc.w	r9, r3, r1
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 0300 	mov.w	r3, #0
 8002dbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dca:	4690      	mov	r8, r2
 8002dcc:	4699      	mov	r9, r3
 8002dce:	4623      	mov	r3, r4
 8002dd0:	eb18 0303 	adds.w	r3, r8, r3
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	462b      	mov	r3, r5
 8002dd8:	eb49 0303 	adc.w	r3, r9, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	f04f 0200 	mov.w	r2, #0
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dea:	4629      	mov	r1, r5
 8002dec:	024b      	lsls	r3, r1, #9
 8002dee:	4621      	mov	r1, r4
 8002df0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002df4:	4621      	mov	r1, r4
 8002df6:	024a      	lsls	r2, r1, #9
 8002df8:	4610      	mov	r0, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfe:	2200      	movs	r2, #0
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e04:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e08:	f7fd fe30 	bl	8000a6c <__aeabi_uldivmod>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4613      	mov	r3, r2
 8002e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e14:	e058      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	4618      	mov	r0, r3
 8002e20:	4611      	mov	r1, r2
 8002e22:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e2c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e30:	4642      	mov	r2, r8
 8002e32:	464b      	mov	r3, r9
 8002e34:	f04f 0000 	mov.w	r0, #0
 8002e38:	f04f 0100 	mov.w	r1, #0
 8002e3c:	0159      	lsls	r1, r3, #5
 8002e3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e42:	0150      	lsls	r0, r2, #5
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4641      	mov	r1, r8
 8002e4a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e4e:	4649      	mov	r1, r9
 8002e50:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e60:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e64:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e68:	ebb2 040a 	subs.w	r4, r2, sl
 8002e6c:	eb63 050b 	sbc.w	r5, r3, fp
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	00eb      	lsls	r3, r5, #3
 8002e7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e7e:	00e2      	lsls	r2, r4, #3
 8002e80:	4614      	mov	r4, r2
 8002e82:	461d      	mov	r5, r3
 8002e84:	4643      	mov	r3, r8
 8002e86:	18e3      	adds	r3, r4, r3
 8002e88:	603b      	str	r3, [r7, #0]
 8002e8a:	464b      	mov	r3, r9
 8002e8c:	eb45 0303 	adc.w	r3, r5, r3
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	f04f 0200 	mov.w	r2, #0
 8002e96:	f04f 0300 	mov.w	r3, #0
 8002e9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e9e:	4629      	mov	r1, r5
 8002ea0:	028b      	lsls	r3, r1, #10
 8002ea2:	4621      	mov	r1, r4
 8002ea4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ea8:	4621      	mov	r1, r4
 8002eaa:	028a      	lsls	r2, r1, #10
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	61fa      	str	r2, [r7, #28]
 8002eb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ebc:	f7fd fdd6 	bl	8000a6c <__aeabi_uldivmod>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	0c1b      	lsrs	r3, r3, #16
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002ed8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ee6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ee8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3750      	adds	r7, #80	; 0x50
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	007a1200 	.word	0x007a1200

08002f04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f08:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000008 	.word	0x20000008

08002f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f20:	f7ff fff0 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	0800631c 	.word	0x0800631c

08002f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002f48:	f7ff ffdc 	bl	8002f04 <HAL_RCC_GetHCLKFreq>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	0b5b      	lsrs	r3, r3, #13
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	4903      	ldr	r1, [pc, #12]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f5a:	5ccb      	ldrb	r3, [r1, r3]
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40023800 	.word	0x40023800
 8002f68:	0800631c 	.word	0x0800631c

08002f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e041      	b.n	8003002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fe fcc6 	bl	8001924 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4610      	mov	r0, r2
 8002fac:	f000 fcd2 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d001      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e044      	b.n	80030ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_TIM_Base_Start_IT+0xb0>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d018      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x6c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304e:	d013      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x6c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a1a      	ldr	r2, [pc, #104]	; (80030c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00e      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x6c>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x6c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d004      	beq.n	8003078 <HAL_TIM_Base_Start_IT+0x6c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <HAL_TIM_Base_Start_IT+0xc0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d111      	bne.n	800309c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b06      	cmp	r3, #6
 8003088:	d010      	beq.n	80030ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f042 0201 	orr.w	r2, r2, #1
 8003098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800309a:	e007      	b.n	80030ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40000400 	.word	0x40000400
 80030c4:	40000800 	.word	0x40000800
 80030c8:	40000c00 	.word	0x40000c00
 80030cc:	40014000 	.word	0x40014000

080030d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e041      	b.n	8003166 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f839 	bl	800316e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3304      	adds	r3, #4
 800310c:	4619      	mov	r1, r3
 800310e:	4610      	mov	r0, r2
 8003110:	f000 fc20 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_IC_Start_IT+0x1e>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	e013      	b.n	80031ca <HAL_TIM_IC_Start_IT+0x46>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_IC_Start_IT+0x2e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e00b      	b.n	80031ca <HAL_TIM_IC_Start_IT+0x46>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	d104      	bne.n	80031c2 <HAL_TIM_IC_Start_IT+0x3e>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e003      	b.n	80031ca <HAL_TIM_IC_Start_IT+0x46>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d104      	bne.n	80031dc <HAL_TIM_IC_Start_IT+0x58>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e013      	b.n	8003204 <HAL_TIM_IC_Start_IT+0x80>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d104      	bne.n	80031ec <HAL_TIM_IC_Start_IT+0x68>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e00b      	b.n	8003204 <HAL_TIM_IC_Start_IT+0x80>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d104      	bne.n	80031fc <HAL_TIM_IC_Start_IT+0x78>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e003      	b.n	8003204 <HAL_TIM_IC_Start_IT+0x80>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003202:	b2db      	uxtb	r3, r3
 8003204:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d102      	bne.n	8003212 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800320c:	7b7b      	ldrb	r3, [r7, #13]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d001      	beq.n	8003216 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0c2      	b.n	800339c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d104      	bne.n	8003226 <HAL_TIM_IC_Start_IT+0xa2>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	e013      	b.n	800324e <HAL_TIM_IC_Start_IT+0xca>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b04      	cmp	r3, #4
 800322a:	d104      	bne.n	8003236 <HAL_TIM_IC_Start_IT+0xb2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	e00b      	b.n	800324e <HAL_TIM_IC_Start_IT+0xca>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b08      	cmp	r3, #8
 800323a:	d104      	bne.n	8003246 <HAL_TIM_IC_Start_IT+0xc2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2202      	movs	r2, #2
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003244:	e003      	b.n	800324e <HAL_TIM_IC_Start_IT+0xca>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2202      	movs	r2, #2
 800324a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d104      	bne.n	800325e <HAL_TIM_IC_Start_IT+0xda>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2202      	movs	r2, #2
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	e013      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x102>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b04      	cmp	r3, #4
 8003262:	d104      	bne.n	800326e <HAL_TIM_IC_Start_IT+0xea>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800326c:	e00b      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x102>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d104      	bne.n	800327e <HAL_TIM_IC_Start_IT+0xfa>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327c:	e003      	b.n	8003286 <HAL_TIM_IC_Start_IT+0x102>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2202      	movs	r2, #2
 8003282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d841      	bhi.n	8003310 <HAL_TIM_IC_Start_IT+0x18c>
 800328c:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <HAL_TIM_IC_Start_IT+0x110>)
 800328e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003292:	bf00      	nop
 8003294:	080032c9 	.word	0x080032c9
 8003298:	08003311 	.word	0x08003311
 800329c:	08003311 	.word	0x08003311
 80032a0:	08003311 	.word	0x08003311
 80032a4:	080032db 	.word	0x080032db
 80032a8:	08003311 	.word	0x08003311
 80032ac:	08003311 	.word	0x08003311
 80032b0:	08003311 	.word	0x08003311
 80032b4:	080032ed 	.word	0x080032ed
 80032b8:	08003311 	.word	0x08003311
 80032bc:	08003311 	.word	0x08003311
 80032c0:	08003311 	.word	0x08003311
 80032c4:	080032ff 	.word	0x080032ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f042 0202 	orr.w	r2, r2, #2
 80032d6:	60da      	str	r2, [r3, #12]
      break;
 80032d8:	e01d      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0204 	orr.w	r2, r2, #4
 80032e8:	60da      	str	r2, [r3, #12]
      break;
 80032ea:	e014      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	60da      	str	r2, [r3, #12]
      break;
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f042 0210 	orr.w	r2, r2, #16
 800330c:	60da      	str	r2, [r3, #12]
      break;
 800330e:	e002      	b.n	8003316 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      break;
 8003314:	bf00      	nop
  }

  if (status == HAL_OK)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d13e      	bne.n	800339a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2201      	movs	r2, #1
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fd4d 	bl	8003dc4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a1d      	ldr	r2, [pc, #116]	; (80033a4 <HAL_TIM_IC_Start_IT+0x220>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d018      	beq.n	8003366 <HAL_TIM_IC_Start_IT+0x1e2>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800333c:	d013      	beq.n	8003366 <HAL_TIM_IC_Start_IT+0x1e2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a19      	ldr	r2, [pc, #100]	; (80033a8 <HAL_TIM_IC_Start_IT+0x224>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d00e      	beq.n	8003366 <HAL_TIM_IC_Start_IT+0x1e2>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <HAL_TIM_IC_Start_IT+0x228>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_TIM_IC_Start_IT+0x1e2>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a16      	ldr	r2, [pc, #88]	; (80033b0 <HAL_TIM_IC_Start_IT+0x22c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <HAL_TIM_IC_Start_IT+0x1e2>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <HAL_TIM_IC_Start_IT+0x230>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	2b06      	cmp	r3, #6
 8003376:	d010      	beq.n	800339a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003388:	e007      	b.n	800339a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800339a:	7bfb      	ldrb	r3, [r7, #15]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40014000 	.word	0x40014000

080033b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d122      	bne.n	8003414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d11b      	bne.n	8003414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0202 	mvn.w	r2, #2
 80033e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2201      	movs	r2, #1
 80033ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f003 0303 	and.w	r3, r3, #3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe fc70 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8003400:	e005      	b.n	800340e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 fa88 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f000 fa8f 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f003 0304 	and.w	r3, r3, #4
 800341e:	2b04      	cmp	r3, #4
 8003420:	d122      	bne.n	8003468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b04      	cmp	r3, #4
 800342e:	d11b      	bne.n	8003468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0204 	mvn.w	r2, #4
 8003438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fc46 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 8003454:	e005      	b.n	8003462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fa5e 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fa65 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b08      	cmp	r3, #8
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b08      	cmp	r3, #8
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0208 	mvn.w	r2, #8
 800348c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2204      	movs	r2, #4
 8003492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fe fc1c 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa34 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa3b 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b10      	cmp	r3, #16
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b10      	cmp	r3, #16
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0210 	mvn.w	r2, #16
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2208      	movs	r2, #8
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fbf2 	bl	8001ce0 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa0a 	bl	8003918 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa11 	bl	800392c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d10e      	bne.n	800353c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b01      	cmp	r3, #1
 800352a:	d107      	bne.n	800353c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0201 	mvn.w	r2, #1
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd ff82 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003546:	2b80      	cmp	r3, #128	; 0x80
 8003548:	d10e      	bne.n	8003568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d107      	bne.n	8003568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 fccc 	bl	8003f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003572:	2b40      	cmp	r3, #64	; 0x40
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d107      	bne.n	8003594 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800358c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9d6 	bl	8003940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b20      	cmp	r3, #32
 80035a0:	d10e      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b20      	cmp	r3, #32
 80035ae:	d107      	bne.n	80035c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f06f 0220 	mvn.w	r2, #32
 80035b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fc96 	bl	8003eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e088      	b.n	80036f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d11b      	bne.n	800362c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6819      	ldr	r1, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f000 fa26 	bl	8003a54 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 020c 	bic.w	r2, r2, #12
 8003616:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	619a      	str	r2, [r3, #24]
 800362a:	e060      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d11c      	bne.n	800366c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	6819      	ldr	r1, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f000 fa9e 	bl	8003b82 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003654:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6999      	ldr	r1, [r3, #24]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	021a      	lsls	r2, r3, #8
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	619a      	str	r2, [r3, #24]
 800366a:	e040      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11b      	bne.n	80036aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f000 faeb 	bl	8003c5c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69da      	ldr	r2, [r3, #28]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 020c 	bic.w	r2, r2, #12
 8003694:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69d9      	ldr	r1, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	61da      	str	r2, [r3, #28]
 80036a8:	e021      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b0c      	cmp	r3, #12
 80036ae:	d11c      	bne.n	80036ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f000 fb08 	bl	8003cd4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69d9      	ldr	r1, [r3, #28]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	021a      	lsls	r2, r3, #8
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	61da      	str	r2, [r3, #28]
 80036e8:	e001      	b.n	80036ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_TIM_ConfigClockSource+0x1c>
 8003718:	2302      	movs	r3, #2
 800371a:	e0b4      	b.n	8003886 <HAL_TIM_ConfigClockSource+0x186>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800373a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003742:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003754:	d03e      	beq.n	80037d4 <HAL_TIM_ConfigClockSource+0xd4>
 8003756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800375a:	f200 8087 	bhi.w	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800375e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003762:	f000 8086 	beq.w	8003872 <HAL_TIM_ConfigClockSource+0x172>
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d87f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800376c:	2b70      	cmp	r3, #112	; 0x70
 800376e:	d01a      	beq.n	80037a6 <HAL_TIM_ConfigClockSource+0xa6>
 8003770:	2b70      	cmp	r3, #112	; 0x70
 8003772:	d87b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d050      	beq.n	800381a <HAL_TIM_ConfigClockSource+0x11a>
 8003778:	2b60      	cmp	r3, #96	; 0x60
 800377a:	d877      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800377c:	2b50      	cmp	r3, #80	; 0x50
 800377e:	d03c      	beq.n	80037fa <HAL_TIM_ConfigClockSource+0xfa>
 8003780:	2b50      	cmp	r3, #80	; 0x50
 8003782:	d873      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003784:	2b40      	cmp	r3, #64	; 0x40
 8003786:	d058      	beq.n	800383a <HAL_TIM_ConfigClockSource+0x13a>
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d86f      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800378c:	2b30      	cmp	r3, #48	; 0x30
 800378e:	d064      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003790:	2b30      	cmp	r3, #48	; 0x30
 8003792:	d86b      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 8003794:	2b20      	cmp	r3, #32
 8003796:	d060      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 8003798:	2b20      	cmp	r3, #32
 800379a:	d867      	bhi.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d05c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d05a      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x15a>
 80037a4:	e062      	b.n	800386c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6899      	ldr	r1, [r3, #8]
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f000 fae5 	bl	8003d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	609a      	str	r2, [r3, #8]
      break;
 80037d2:	e04f      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6818      	ldr	r0, [r3, #0]
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6899      	ldr	r1, [r3, #8]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	f000 face 	bl	8003d84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f6:	609a      	str	r2, [r3, #8]
      break;
 80037f8:	e03c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	461a      	mov	r2, r3
 8003808:	f000 f98c 	bl	8003b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2150      	movs	r1, #80	; 0x50
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fa9b 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003818:	e02c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	461a      	mov	r2, r3
 8003828:	f000 f9e8 	bl	8003bfc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2160      	movs	r1, #96	; 0x60
 8003832:	4618      	mov	r0, r3
 8003834:	f000 fa8b 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003838:	e01c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 f96c 	bl	8003b24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2140      	movs	r1, #64	; 0x40
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fa7b 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 8003858:	e00c      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4619      	mov	r1, r3
 8003864:	4610      	mov	r0, r2
 8003866:	f000 fa72 	bl	8003d4e <TIM_ITRx_SetConfig>
      break;
 800386a:	e003      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e000      	b.n	8003874 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003872:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
}
 8003886:	4618      	mov	r0, r3
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b0c      	cmp	r3, #12
 80038a2:	d831      	bhi.n	8003908 <HAL_TIM_ReadCapturedValue+0x78>
 80038a4:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <HAL_TIM_ReadCapturedValue+0x1c>)
 80038a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038aa:	bf00      	nop
 80038ac:	080038e1 	.word	0x080038e1
 80038b0:	08003909 	.word	0x08003909
 80038b4:	08003909 	.word	0x08003909
 80038b8:	08003909 	.word	0x08003909
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	08003909 	.word	0x08003909
 80038c4:	08003909 	.word	0x08003909
 80038c8:	08003909 	.word	0x08003909
 80038cc:	080038f5 	.word	0x080038f5
 80038d0:	08003909 	.word	0x08003909
 80038d4:	08003909 	.word	0x08003909
 80038d8:	08003909 	.word	0x08003909
 80038dc:	080038ff 	.word	0x080038ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	60fb      	str	r3, [r7, #12]

      break;
 80038e8:	e00f      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	60fb      	str	r3, [r7, #12]

      break;
 80038f2:	e00a      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038fa:	60fb      	str	r3, [r7, #12]

      break;
 80038fc:	e005      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	60fb      	str	r3, [r7, #12]

      break;
 8003906:	e000      	b.n	800390a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003908:	bf00      	nop
  }

  return tmpreg;
 800390a:	68fb      	ldr	r3, [r7, #12]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a34      	ldr	r2, [pc, #208]	; (8003a38 <TIM_Base_SetConfig+0xe4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00f      	beq.n	800398c <TIM_Base_SetConfig+0x38>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d00b      	beq.n	800398c <TIM_Base_SetConfig+0x38>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a31      	ldr	r2, [pc, #196]	; (8003a3c <TIM_Base_SetConfig+0xe8>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d007      	beq.n	800398c <TIM_Base_SetConfig+0x38>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <TIM_Base_SetConfig+0xec>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d003      	beq.n	800398c <TIM_Base_SetConfig+0x38>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a2f      	ldr	r2, [pc, #188]	; (8003a44 <TIM_Base_SetConfig+0xf0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d108      	bne.n	800399e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003992:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a25      	ldr	r2, [pc, #148]	; (8003a38 <TIM_Base_SetConfig+0xe4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01b      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d017      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a22      	ldr	r2, [pc, #136]	; (8003a3c <TIM_Base_SetConfig+0xe8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <TIM_Base_SetConfig+0xec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00f      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <TIM_Base_SetConfig+0xf0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00b      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a1f      	ldr	r2, [pc, #124]	; (8003a48 <TIM_Base_SetConfig+0xf4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d007      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <TIM_Base_SetConfig+0xf8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d003      	beq.n	80039de <TIM_Base_SetConfig+0x8a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <TIM_Base_SetConfig+0xfc>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	695b      	ldr	r3, [r3, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a08      	ldr	r2, [pc, #32]	; (8003a38 <TIM_Base_SetConfig+0xe4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d103      	bne.n	8003a24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	615a      	str	r2, [r3, #20]
}
 8003a2a:	bf00      	nop
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	40010000 	.word	0x40010000
 8003a3c:	40000400 	.word	0x40000400
 8003a40:	40000800 	.word	0x40000800
 8003a44:	40000c00 	.word	0x40000c00
 8003a48:	40014000 	.word	0x40014000
 8003a4c:	40014400 	.word	0x40014400
 8003a50:	40014800 	.word	0x40014800

08003a54 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
 8003a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a24      	ldr	r2, [pc, #144]	; (8003b10 <TIM_TI1_SetConfig+0xbc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d013      	beq.n	8003aaa <TIM_TI1_SetConfig+0x56>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a88:	d00f      	beq.n	8003aaa <TIM_TI1_SetConfig+0x56>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <TIM_TI1_SetConfig+0xc0>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00b      	beq.n	8003aaa <TIM_TI1_SetConfig+0x56>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <TIM_TI1_SetConfig+0xc4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <TIM_TI1_SetConfig+0x56>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <TIM_TI1_SetConfig+0xc8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d003      	beq.n	8003aaa <TIM_TI1_SetConfig+0x56>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a1e      	ldr	r2, [pc, #120]	; (8003b20 <TIM_TI1_SetConfig+0xcc>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d101      	bne.n	8003aae <TIM_TI1_SetConfig+0x5a>
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <TIM_TI1_SetConfig+0x5c>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	e003      	b.n	8003ace <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ad4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f023 030a 	bic.w	r3, r3, #10
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 030a 	and.w	r3, r3, #10
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40010000 	.word	0x40010000
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40000800 	.word	0x40000800
 8003b1c:	40000c00 	.word	0x40000c00
 8003b20:	40014000 	.word	0x40014000

08003b24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	f023 0201 	bic.w	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f023 030a 	bic.w	r3, r3, #10
 8003b60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 0210 	bic.w	r2, r3, #16
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	021b      	lsls	r3, r3, #8
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	031b      	lsls	r3, r3, #12
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	621a      	str	r2, [r3, #32]
}
 8003bf0:	bf00      	nop
 8003bf2:	371c      	adds	r7, #28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b087      	sub	sp, #28
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f023 0210 	bic.w	r2, r3, #16
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	031b      	lsls	r3, r3, #12
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	621a      	str	r2, [r3, #32]
}
 8003c50:	bf00      	nop
 8003c52:	371c      	adds	r7, #28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 0303 	bic.w	r3, r3, #3
 8003c88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003cac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	021b      	lsls	r3, r3, #8
 8003cb2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
 8003ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	69db      	ldr	r3, [r3, #28]
 8003cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	031b      	lsls	r3, r3, #12
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d26:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	031b      	lsls	r3, r3, #12
 8003d2c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b085      	sub	sp, #20
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f043 0307 	orr.w	r3, r3, #7
 8003d70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	021a      	lsls	r2, r3, #8
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	609a      	str	r2, [r3, #8]
}
 8003db8:	bf00      	nop
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	401a      	ands	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1a      	ldr	r2, [r3, #32]
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f003 031f 	and.w	r3, r3, #31
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	621a      	str	r2, [r3, #32]
}
 8003e02:	bf00      	nop
 8003e04:	371c      	adds	r7, #28
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr
	...

08003e10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e050      	b.n	8003eca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2202      	movs	r2, #2
 8003e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e74:	d013      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	; (8003ee0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a15      	ldr	r2, [pc, #84]	; (8003ee4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a13      	ldr	r2, [pc, #76]	; (8003ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ea4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40010000 	.word	0x40010000
 8003edc:	40000400 	.word	0x40000400
 8003ee0:	40000800 	.word	0x40000800
 8003ee4:	40000c00 	.word	0x40000c00
 8003ee8:	40014000 	.word	0x40014000

08003eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e03f      	b.n	8003fa6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d106      	bne.n	8003f40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fd fd68 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2224      	movs	r2, #36	; 0x24
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fddf 	bl	8004b1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2220      	movs	r2, #32
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b08a      	sub	sp, #40	; 0x28
 8003fb2:	af02      	add	r7, sp, #8
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	603b      	str	r3, [r7, #0]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d17c      	bne.n	80040c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_Transmit+0x2c>
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e075      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_UART_Transmit+0x3e>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e06e      	b.n	80040ca <HAL_UART_Transmit+0x11c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004002:	f7fd ff91 	bl	8001f28 <HAL_GetTick>
 8004006:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	88fa      	ldrh	r2, [r7, #6]
 800400c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	88fa      	ldrh	r2, [r7, #6]
 8004012:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401c:	d108      	bne.n	8004030 <HAL_UART_Transmit+0x82>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d104      	bne.n	8004030 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004026:	2300      	movs	r3, #0
 8004028:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	61bb      	str	r3, [r7, #24]
 800402e:	e003      	b.n	8004038 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004034:	2300      	movs	r3, #0
 8004036:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004040:	e02a      	b.n	8004098 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fb1f 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e036      	b.n	80040ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004070:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004072:	69bb      	ldr	r3, [r7, #24]
 8004074:	3302      	adds	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	e007      	b.n	800408a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	781a      	ldrb	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	3301      	adds	r3, #1
 8004088:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1cf      	bne.n	8004042 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	2200      	movs	r2, #0
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 faef 	bl	8004690 <UART_WaitOnFlagUntilTimeout>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e006      	b.n	80040ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	4613      	mov	r3, r2
 80040de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b20      	cmp	r3, #32
 80040ea:	d11d      	bne.n	8004128 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <HAL_UART_Receive_IT+0x26>
 80040f2:	88fb      	ldrh	r3, [r7, #6]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e016      	b.n	800412a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004102:	2b01      	cmp	r3, #1
 8004104:	d101      	bne.n	800410a <HAL_UART_Receive_IT+0x38>
 8004106:	2302      	movs	r3, #2
 8004108:	e00f      	b.n	800412a <HAL_UART_Receive_IT+0x58>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	461a      	mov	r2, r3
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 fb24 	bl	800476c <UART_Start_Receive_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	e000      	b.n	800412a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004128:	2302      	movs	r3, #2
  }
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b0ba      	sub	sp, #232	; 0xe8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004160:	2300      	movs	r3, #0
 8004162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800416a:	f003 030f 	and.w	r3, r3, #15
 800416e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800417a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417e:	f003 0320 	and.w	r3, r3, #32
 8004182:	2b00      	cmp	r3, #0
 8004184:	d009      	beq.n	800419a <HAL_UART_IRQHandler+0x66>
 8004186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fc07 	bl	80049a6 <UART_Receive_IT>
      return;
 8004198:	e256      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800419a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80de 	beq.w	8004360 <HAL_UART_IRQHandler+0x22c>
 80041a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041a8:	f003 0301 	and.w	r3, r3, #1
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	f000 80d1 	beq.w	8004360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00b      	beq.n	80041e2 <HAL_UART_IRQHandler+0xae>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d005      	beq.n	80041e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	f043 0201 	orr.w	r2, r3, #1
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00b      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
 80041ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f043 0202 	orr.w	r2, r3, #2
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_UART_IRQHandler+0xf6>
 8004212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d005      	beq.n	800422a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f043 0204 	orr.w	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800422a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d011      	beq.n	800425a <HAL_UART_IRQHandler+0x126>
 8004236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800423a:	f003 0320 	and.w	r3, r3, #32
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	f043 0208 	orr.w	r2, r3, #8
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 81ed 	beq.w	800463e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0320 	and.w	r3, r3, #32
 800426c:	2b00      	cmp	r3, #0
 800426e:	d008      	beq.n	8004282 <HAL_UART_IRQHandler+0x14e>
 8004270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 fb92 	bl	80049a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <HAL_UART_IRQHandler+0x17a>
 80042a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d04f      	beq.n	800434e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 fa9a 	bl	80047e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d141      	bne.n	8004346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3314      	adds	r3, #20
 80042c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80042d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3314      	adds	r3, #20
 80042ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80042ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80042f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80042fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1d9      	bne.n	80042c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d013      	beq.n	800433e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431a:	4a7d      	ldr	r2, [pc, #500]	; (8004510 <HAL_UART_IRQHandler+0x3dc>)
 800431c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd ffb1 	bl	800228a <HAL_DMA_Abort_IT>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004338:	4610      	mov	r0, r2
 800433a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e00e      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f990 	bl	8004664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e00a      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f98c 	bl	8004664 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800434c:	e006      	b.n	800435c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f988 	bl	8004664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800435a:	e170      	b.n	800463e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435c:	bf00      	nop
    return;
 800435e:	e16e      	b.n	800463e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	f040 814a 	bne.w	80045fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	f000 8143 	beq.w	80045fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	f000 813c 	beq.w	80045fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004386:	2300      	movs	r3, #0
 8004388:	60bb      	str	r3, [r7, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	f040 80b4 	bne.w	8004514 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8140 	beq.w	8004642 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043ca:	429a      	cmp	r2, r3
 80043cc:	f080 8139 	bcs.w	8004642 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80043d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e2:	f000 8088 	beq.w	80044f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	330c      	adds	r3, #12
 80043ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043f4:	e853 3f00 	ldrex	r3, [r3]
 80043f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80043fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	330c      	adds	r3, #12
 800440e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800441e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800442a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1d9      	bne.n	80043e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800445a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800445e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800446a:	2b00      	cmp	r3, #0
 800446c:	d1e1      	bne.n	8004432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3314      	adds	r3, #20
 800448e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004492:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800449a:	e841 2300 	strex	r3, r2, [r1]
 800449e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80044a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1e3      	bne.n	800446e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	330c      	adds	r3, #12
 80044d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80044d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80044da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80044de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80044e0:	e841 2300 	strex	r3, r2, [r1]
 80044e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80044e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1e3      	bne.n	80044b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fd fe5a 	bl	80021aa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8b6 	bl	8004678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800450c:	e099      	b.n	8004642 <HAL_UART_IRQHandler+0x50e>
 800450e:	bf00      	nop
 8004510:	080048af 	.word	0x080048af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800451c:	b29b      	uxth	r3, r3
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 808b 	beq.w	8004646 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 8086 	beq.w	8004646 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800454a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800454c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	330c      	adds	r3, #12
 800455a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800455e:	647a      	str	r2, [r7, #68]	; 0x44
 8004560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004566:	e841 2300 	strex	r3, r2, [r1]
 800456a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1e3      	bne.n	800453a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	e853 3f00 	ldrex	r3, [r3]
 8004580:	623b      	str	r3, [r7, #32]
   return(result);
 8004582:	6a3b      	ldr	r3, [r7, #32]
 8004584:	f023 0301 	bic.w	r3, r3, #1
 8004588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004596:	633a      	str	r2, [r7, #48]	; 0x30
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800459c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e3      	bne.n	8004572 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0310 	bic.w	r3, r3, #16
 80045ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80045dc:	61fa      	str	r2, [r7, #28]
 80045de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	69b9      	ldr	r1, [r7, #24]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	617b      	str	r3, [r7, #20]
   return(result);
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e3      	bne.n	80045b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80045f4:	4619      	mov	r1, r3
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f83e 	bl	8004678 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045fc:	e023      	b.n	8004646 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004606:	2b00      	cmp	r3, #0
 8004608:	d009      	beq.n	800461e <HAL_UART_IRQHandler+0x4ea>
 800460a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800460e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f95d 	bl	80048d6 <UART_Transmit_IT>
    return;
 800461c:	e014      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00e      	beq.n	8004648 <HAL_UART_IRQHandler+0x514>
 800462a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800462e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f99d 	bl	8004976 <UART_EndTransmit_IT>
    return;
 800463c:	e004      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
    return;
 800463e:	bf00      	nop
 8004640:	e002      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
      return;
 8004642:	bf00      	nop
 8004644:	e000      	b.n	8004648 <HAL_UART_IRQHandler+0x514>
      return;
 8004646:	bf00      	nop
  }
}
 8004648:	37e8      	adds	r7, #232	; 0xe8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop

08004650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	460b      	mov	r3, r1
 8004682:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b090      	sub	sp, #64	; 0x40
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046a0:	e050      	b.n	8004744 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a8:	d04c      	beq.n	8004744 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d007      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80046b0:	f7fd fc3a 	bl	8001f28 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046bc:	429a      	cmp	r2, r3
 80046be:	d241      	bcs.n	8004744 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	e853 3f00 	ldrex	r3, [r3]
 80046ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	330c      	adds	r3, #12
 80046de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e0:	637a      	str	r2, [r7, #52]	; 0x34
 80046e2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046e8:	e841 2300 	strex	r3, r2, [r1]
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e5      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	e853 3f00 	ldrex	r3, [r3]
 8004702:	613b      	str	r3, [r7, #16]
   return(result);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	63bb      	str	r3, [r7, #56]	; 0x38
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3314      	adds	r3, #20
 8004712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004714:	623a      	str	r2, [r7, #32]
 8004716:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004718:	69f9      	ldr	r1, [r7, #28]
 800471a:	6a3a      	ldr	r2, [r7, #32]
 800471c:	e841 2300 	strex	r3, r2, [r1]
 8004720:	61bb      	str	r3, [r7, #24]
   return(result);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e5      	bne.n	80046f4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2220      	movs	r2, #32
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e00f      	b.n	8004764 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	4013      	ands	r3, r2
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	bf0c      	ite	eq
 8004754:	2301      	moveq	r3, #1
 8004756:	2300      	movne	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	461a      	mov	r2, r3
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	429a      	cmp	r2, r3
 8004760:	d09f      	beq.n	80046a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3740      	adds	r7, #64	; 0x40
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	4613      	mov	r3, r2
 8004778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	88fa      	ldrh	r2, [r7, #6]
 800478a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2222      	movs	r2, #34	; 0x22
 8004796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047b8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0220 	orr.w	r2, r2, #32
 80047d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b095      	sub	sp, #84	; 0x54
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	330c      	adds	r3, #12
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004810:	643a      	str	r2, [r7, #64]	; 0x40
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e5      	bne.n	80047f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3314      	adds	r3, #20
 800482a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	61fb      	str	r3, [r7, #28]
   return(result);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	64bb      	str	r3, [r7, #72]	; 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3314      	adds	r3, #20
 8004842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800484a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	2b01      	cmp	r3, #1
 800485e:	d119      	bne.n	8004894 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f023 0310 	bic.w	r3, r3, #16
 8004876:	647b      	str	r3, [r7, #68]	; 0x44
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004880:	61ba      	str	r2, [r7, #24]
 8004882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6979      	ldr	r1, [r7, #20]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	613b      	str	r3, [r7, #16]
   return(result);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048a2:	bf00      	nop
 80048a4:	3754      	adds	r7, #84	; 0x54
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048ae:	b580      	push	{r7, lr}
 80048b0:	b084      	sub	sp, #16
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2200      	movs	r2, #0
 80048c0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff fecb 	bl	8004664 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048ce:	bf00      	nop
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b21      	cmp	r3, #33	; 0x21
 80048e8:	d13e      	bne.n	8004968 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f2:	d114      	bne.n	800491e <UART_Transmit_IT+0x48>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d110      	bne.n	800491e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004910:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	621a      	str	r2, [r3, #32]
 800491c:	e008      	b.n	8004930 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	1c59      	adds	r1, r3, #1
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6211      	str	r1, [r2, #32]
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	4619      	mov	r1, r3
 800493e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10f      	bne.n	8004964 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004952:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004962:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr

08004976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800498c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2220      	movs	r2, #32
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fe5a 	bl	8004650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b08c      	sub	sp, #48	; 0x30
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b22      	cmp	r3, #34	; 0x22
 80049b8:	f040 80ab 	bne.w	8004b12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049c4:	d117      	bne.n	80049f6 <UART_Receive_IT+0x50>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d113      	bne.n	80049f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b29b      	uxth	r3, r3
 80049e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	1c9a      	adds	r2, r3, #2
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	629a      	str	r2, [r3, #40]	; 0x28
 80049f4:	e026      	b.n	8004a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a08:	d007      	beq.n	8004a1a <UART_Receive_IT+0x74>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10a      	bne.n	8004a28 <UART_Receive_IT+0x82>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a24:	701a      	strb	r2, [r3, #0]
 8004a26:	e008      	b.n	8004a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	4619      	mov	r1, r3
 8004a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d15a      	bne.n	8004b0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0220 	bic.w	r2, r2, #32
 8004a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695a      	ldr	r2, [r3, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2220      	movs	r2, #32
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d135      	bne.n	8004b04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	e853 3f00 	ldrex	r3, [r3]
 8004aac:	613b      	str	r3, [r7, #16]
   return(result);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f023 0310 	bic.w	r3, r3, #16
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	623a      	str	r2, [r7, #32]
 8004ac0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	69f9      	ldr	r1, [r7, #28]
 8004ac4:	6a3a      	ldr	r2, [r7, #32]
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e5      	bne.n	8004a9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0310 	and.w	r3, r3, #16
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d10a      	bne.n	8004af6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004afa:	4619      	mov	r1, r3
 8004afc:	6878      	ldr	r0, [r7, #4]
 8004afe:	f7ff fdbb 	bl	8004678 <HAL_UARTEx_RxEventCallback>
 8004b02:	e002      	b.n	8004b0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7fc fa31 	bl	8000f6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	e002      	b.n	8004b14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e000      	b.n	8004b14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3730      	adds	r7, #48	; 0x30
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b20:	b0c0      	sub	sp, #256	; 0x100
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b38:	68d9      	ldr	r1, [r3, #12]
 8004b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	ea40 0301 	orr.w	r3, r0, r1
 8004b44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b74:	f021 010c 	bic.w	r1, r1, #12
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b82:	430b      	orrs	r3, r1
 8004b84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b96:	6999      	ldr	r1, [r3, #24]
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	ea40 0301 	orr.w	r3, r0, r1
 8004ba2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	4b8f      	ldr	r3, [pc, #572]	; (8004de8 <UART_SetConfig+0x2cc>)
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d005      	beq.n	8004bbc <UART_SetConfig+0xa0>
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	4b8d      	ldr	r3, [pc, #564]	; (8004dec <UART_SetConfig+0x2d0>)
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d104      	bne.n	8004bc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bbc:	f7fe f9c2 	bl	8002f44 <HAL_RCC_GetPCLK2Freq>
 8004bc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bc4:	e003      	b.n	8004bce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bc6:	f7fe f9a9 	bl	8002f1c <HAL_RCC_GetPCLK1Freq>
 8004bca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd8:	f040 810c 	bne.w	8004df4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004be0:	2200      	movs	r2, #0
 8004be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004be6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bee:	4622      	mov	r2, r4
 8004bf0:	462b      	mov	r3, r5
 8004bf2:	1891      	adds	r1, r2, r2
 8004bf4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bf6:	415b      	adcs	r3, r3
 8004bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bfe:	4621      	mov	r1, r4
 8004c00:	eb12 0801 	adds.w	r8, r2, r1
 8004c04:	4629      	mov	r1, r5
 8004c06:	eb43 0901 	adc.w	r9, r3, r1
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c1e:	4690      	mov	r8, r2
 8004c20:	4699      	mov	r9, r3
 8004c22:	4623      	mov	r3, r4
 8004c24:	eb18 0303 	adds.w	r3, r8, r3
 8004c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	eb49 0303 	adc.w	r3, r9, r3
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	18db      	adds	r3, r3, r3
 8004c4e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c50:	4613      	mov	r3, r2
 8004c52:	eb42 0303 	adc.w	r3, r2, r3
 8004c56:	657b      	str	r3, [r7, #84]	; 0x54
 8004c58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c60:	f7fb ff04 	bl	8000a6c <__aeabi_uldivmod>
 8004c64:	4602      	mov	r2, r0
 8004c66:	460b      	mov	r3, r1
 8004c68:	4b61      	ldr	r3, [pc, #388]	; (8004df0 <UART_SetConfig+0x2d4>)
 8004c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c6e:	095b      	lsrs	r3, r3, #5
 8004c70:	011c      	lsls	r4, r3, #4
 8004c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c84:	4642      	mov	r2, r8
 8004c86:	464b      	mov	r3, r9
 8004c88:	1891      	adds	r1, r2, r2
 8004c8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c8c:	415b      	adcs	r3, r3
 8004c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c94:	4641      	mov	r1, r8
 8004c96:	eb12 0a01 	adds.w	sl, r2, r1
 8004c9a:	4649      	mov	r1, r9
 8004c9c:	eb43 0b01 	adc.w	fp, r3, r1
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb4:	4692      	mov	sl, r2
 8004cb6:	469b      	mov	fp, r3
 8004cb8:	4643      	mov	r3, r8
 8004cba:	eb1a 0303 	adds.w	r3, sl, r3
 8004cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cd8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004cdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	18db      	adds	r3, r3, r3
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	eb42 0303 	adc.w	r3, r2, r3
 8004cec:	647b      	str	r3, [r7, #68]	; 0x44
 8004cee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cf6:	f7fb feb9 	bl	8000a6c <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4b3b      	ldr	r3, [pc, #236]	; (8004df0 <UART_SetConfig+0x2d4>)
 8004d02:	fba3 2301 	umull	r2, r3, r3, r1
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2264      	movs	r2, #100	; 0x64
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	1acb      	subs	r3, r1, r3
 8004d10:	00db      	lsls	r3, r3, #3
 8004d12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d16:	4b36      	ldr	r3, [pc, #216]	; (8004df0 <UART_SetConfig+0x2d4>)
 8004d18:	fba3 2302 	umull	r2, r3, r3, r2
 8004d1c:	095b      	lsrs	r3, r3, #5
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d24:	441c      	add	r4, r3
 8004d26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d38:	4642      	mov	r2, r8
 8004d3a:	464b      	mov	r3, r9
 8004d3c:	1891      	adds	r1, r2, r2
 8004d3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d40:	415b      	adcs	r3, r3
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d48:	4641      	mov	r1, r8
 8004d4a:	1851      	adds	r1, r2, r1
 8004d4c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d4e:	4649      	mov	r1, r9
 8004d50:	414b      	adcs	r3, r1
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d60:	4659      	mov	r1, fp
 8004d62:	00cb      	lsls	r3, r1, #3
 8004d64:	4651      	mov	r1, sl
 8004d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6a:	4651      	mov	r1, sl
 8004d6c:	00ca      	lsls	r2, r1, #3
 8004d6e:	4610      	mov	r0, r2
 8004d70:	4619      	mov	r1, r3
 8004d72:	4603      	mov	r3, r0
 8004d74:	4642      	mov	r2, r8
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d7c:	464b      	mov	r3, r9
 8004d7e:	460a      	mov	r2, r1
 8004d80:	eb42 0303 	adc.w	r3, r2, r3
 8004d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	18db      	adds	r3, r3, r3
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da2:	4613      	mov	r3, r2
 8004da4:	eb42 0303 	adc.w	r3, r2, r3
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004daa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004dae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004db2:	f7fb fe5b 	bl	8000a6c <__aeabi_uldivmod>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <UART_SetConfig+0x2d4>)
 8004dbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc0:	095b      	lsrs	r3, r3, #5
 8004dc2:	2164      	movs	r1, #100	; 0x64
 8004dc4:	fb01 f303 	mul.w	r3, r1, r3
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	00db      	lsls	r3, r3, #3
 8004dcc:	3332      	adds	r3, #50	; 0x32
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <UART_SetConfig+0x2d4>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	f003 0207 	and.w	r2, r3, #7
 8004dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4422      	add	r2, r4
 8004de2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004de4:	e105      	b.n	8004ff2 <UART_SetConfig+0x4d6>
 8004de6:	bf00      	nop
 8004de8:	40011000 	.word	0x40011000
 8004dec:	40011400 	.word	0x40011400
 8004df0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dfe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e06:	4642      	mov	r2, r8
 8004e08:	464b      	mov	r3, r9
 8004e0a:	1891      	adds	r1, r2, r2
 8004e0c:	6239      	str	r1, [r7, #32]
 8004e0e:	415b      	adcs	r3, r3
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
 8004e12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e16:	4641      	mov	r1, r8
 8004e18:	1854      	adds	r4, r2, r1
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	eb43 0501 	adc.w	r5, r3, r1
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	00eb      	lsls	r3, r5, #3
 8004e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e2e:	00e2      	lsls	r2, r4, #3
 8004e30:	4614      	mov	r4, r2
 8004e32:	461d      	mov	r5, r3
 8004e34:	4643      	mov	r3, r8
 8004e36:	18e3      	adds	r3, r4, r3
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e3c:	464b      	mov	r3, r9
 8004e3e:	eb45 0303 	adc.w	r3, r5, r3
 8004e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e52:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e62:	4629      	mov	r1, r5
 8004e64:	008b      	lsls	r3, r1, #2
 8004e66:	4621      	mov	r1, r4
 8004e68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	008a      	lsls	r2, r1, #2
 8004e70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e74:	f7fb fdfa 	bl	8000a6c <__aeabi_uldivmod>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4b60      	ldr	r3, [pc, #384]	; (8005000 <UART_SetConfig+0x4e4>)
 8004e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	011c      	lsls	r4, r3, #4
 8004e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e90:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	1891      	adds	r1, r2, r2
 8004e9e:	61b9      	str	r1, [r7, #24]
 8004ea0:	415b      	adcs	r3, r3
 8004ea2:	61fb      	str	r3, [r7, #28]
 8004ea4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea8:	4641      	mov	r1, r8
 8004eaa:	1851      	adds	r1, r2, r1
 8004eac:	6139      	str	r1, [r7, #16]
 8004eae:	4649      	mov	r1, r9
 8004eb0:	414b      	adcs	r3, r1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ec0:	4659      	mov	r1, fp
 8004ec2:	00cb      	lsls	r3, r1, #3
 8004ec4:	4651      	mov	r1, sl
 8004ec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eca:	4651      	mov	r1, sl
 8004ecc:	00ca      	lsls	r2, r1, #3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004edc:	464b      	mov	r3, r9
 8004ede:	460a      	mov	r2, r1
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ef2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f00:	4649      	mov	r1, r9
 8004f02:	008b      	lsls	r3, r1, #2
 8004f04:	4641      	mov	r1, r8
 8004f06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	008a      	lsls	r2, r1, #2
 8004f0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f12:	f7fb fdab 	bl	8000a6c <__aeabi_uldivmod>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4b39      	ldr	r3, [pc, #228]	; (8005000 <UART_SetConfig+0x4e4>)
 8004f1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f20:	095b      	lsrs	r3, r3, #5
 8004f22:	2164      	movs	r1, #100	; 0x64
 8004f24:	fb01 f303 	mul.w	r3, r1, r3
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	3332      	adds	r3, #50	; 0x32
 8004f2e:	4a34      	ldr	r2, [pc, #208]	; (8005000 <UART_SetConfig+0x4e4>)
 8004f30:	fba2 2303 	umull	r2, r3, r2, r3
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f3a:	441c      	add	r4, r3
 8004f3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f40:	2200      	movs	r2, #0
 8004f42:	673b      	str	r3, [r7, #112]	; 0x70
 8004f44:	677a      	str	r2, [r7, #116]	; 0x74
 8004f46:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	1891      	adds	r1, r2, r2
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	415b      	adcs	r3, r3
 8004f54:	60fb      	str	r3, [r7, #12]
 8004f56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f5a:	4641      	mov	r1, r8
 8004f5c:	1851      	adds	r1, r2, r1
 8004f5e:	6039      	str	r1, [r7, #0]
 8004f60:	4649      	mov	r1, r9
 8004f62:	414b      	adcs	r3, r1
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	f04f 0200 	mov.w	r2, #0
 8004f6a:	f04f 0300 	mov.w	r3, #0
 8004f6e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f72:	4659      	mov	r1, fp
 8004f74:	00cb      	lsls	r3, r1, #3
 8004f76:	4651      	mov	r1, sl
 8004f78:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7c:	4651      	mov	r1, sl
 8004f7e:	00ca      	lsls	r2, r1, #3
 8004f80:	4610      	mov	r0, r2
 8004f82:	4619      	mov	r1, r3
 8004f84:	4603      	mov	r3, r0
 8004f86:	4642      	mov	r2, r8
 8004f88:	189b      	adds	r3, r3, r2
 8004f8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	460a      	mov	r2, r1
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa0:	667a      	str	r2, [r7, #100]	; 0x64
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	f04f 0300 	mov.w	r3, #0
 8004faa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fae:	4649      	mov	r1, r9
 8004fb0:	008b      	lsls	r3, r1, #2
 8004fb2:	4641      	mov	r1, r8
 8004fb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fb8:	4641      	mov	r1, r8
 8004fba:	008a      	lsls	r2, r1, #2
 8004fbc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fc0:	f7fb fd54 	bl	8000a6c <__aeabi_uldivmod>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <UART_SetConfig+0x4e4>)
 8004fca:	fba3 1302 	umull	r1, r3, r3, r2
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	2164      	movs	r1, #100	; 0x64
 8004fd2:	fb01 f303 	mul.w	r3, r1, r3
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	3332      	adds	r3, #50	; 0x32
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <UART_SetConfig+0x4e4>)
 8004fde:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe2:	095b      	lsrs	r3, r3, #5
 8004fe4:	f003 020f 	and.w	r2, r3, #15
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4422      	add	r2, r4
 8004ff0:	609a      	str	r2, [r3, #8]
}
 8004ff2:	bf00      	nop
 8004ff4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ffe:	bf00      	nop
 8005000:	51eb851f 	.word	0x51eb851f

08005004 <atoi>:
 8005004:	220a      	movs	r2, #10
 8005006:	2100      	movs	r1, #0
 8005008:	f000 b956 	b.w	80052b8 <strtol>

0800500c <__errno>:
 800500c:	4b01      	ldr	r3, [pc, #4]	; (8005014 <__errno+0x8>)
 800500e:	6818      	ldr	r0, [r3, #0]
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20000014 	.word	0x20000014

08005018 <__libc_init_array>:
 8005018:	b570      	push	{r4, r5, r6, lr}
 800501a:	4d0d      	ldr	r5, [pc, #52]	; (8005050 <__libc_init_array+0x38>)
 800501c:	4c0d      	ldr	r4, [pc, #52]	; (8005054 <__libc_init_array+0x3c>)
 800501e:	1b64      	subs	r4, r4, r5
 8005020:	10a4      	asrs	r4, r4, #2
 8005022:	2600      	movs	r6, #0
 8005024:	42a6      	cmp	r6, r4
 8005026:	d109      	bne.n	800503c <__libc_init_array+0x24>
 8005028:	4d0b      	ldr	r5, [pc, #44]	; (8005058 <__libc_init_array+0x40>)
 800502a:	4c0c      	ldr	r4, [pc, #48]	; (800505c <__libc_init_array+0x44>)
 800502c:	f001 f8c4 	bl	80061b8 <_init>
 8005030:	1b64      	subs	r4, r4, r5
 8005032:	10a4      	asrs	r4, r4, #2
 8005034:	2600      	movs	r6, #0
 8005036:	42a6      	cmp	r6, r4
 8005038:	d105      	bne.n	8005046 <__libc_init_array+0x2e>
 800503a:	bd70      	pop	{r4, r5, r6, pc}
 800503c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005040:	4798      	blx	r3
 8005042:	3601      	adds	r6, #1
 8005044:	e7ee      	b.n	8005024 <__libc_init_array+0xc>
 8005046:	f855 3b04 	ldr.w	r3, [r5], #4
 800504a:	4798      	blx	r3
 800504c:	3601      	adds	r6, #1
 800504e:	e7f2      	b.n	8005036 <__libc_init_array+0x1e>
 8005050:	080064c8 	.word	0x080064c8
 8005054:	080064c8 	.word	0x080064c8
 8005058:	080064c8 	.word	0x080064c8
 800505c:	080064cc 	.word	0x080064cc

08005060 <memset>:
 8005060:	4402      	add	r2, r0
 8005062:	4603      	mov	r3, r0
 8005064:	4293      	cmp	r3, r2
 8005066:	d100      	bne.n	800506a <memset+0xa>
 8005068:	4770      	bx	lr
 800506a:	f803 1b01 	strb.w	r1, [r3], #1
 800506e:	e7f9      	b.n	8005064 <memset+0x4>

08005070 <iprintf>:
 8005070:	b40f      	push	{r0, r1, r2, r3}
 8005072:	4b0a      	ldr	r3, [pc, #40]	; (800509c <iprintf+0x2c>)
 8005074:	b513      	push	{r0, r1, r4, lr}
 8005076:	681c      	ldr	r4, [r3, #0]
 8005078:	b124      	cbz	r4, 8005084 <iprintf+0x14>
 800507a:	69a3      	ldr	r3, [r4, #24]
 800507c:	b913      	cbnz	r3, 8005084 <iprintf+0x14>
 800507e:	4620      	mov	r0, r4
 8005080:	f000 fafe 	bl	8005680 <__sinit>
 8005084:	ab05      	add	r3, sp, #20
 8005086:	9a04      	ldr	r2, [sp, #16]
 8005088:	68a1      	ldr	r1, [r4, #8]
 800508a:	9301      	str	r3, [sp, #4]
 800508c:	4620      	mov	r0, r4
 800508e:	f000 fd07 	bl	8005aa0 <_vfiprintf_r>
 8005092:	b002      	add	sp, #8
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	b004      	add	sp, #16
 800509a:	4770      	bx	lr
 800509c:	20000014 	.word	0x20000014

080050a0 <_puts_r>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	460e      	mov	r6, r1
 80050a4:	4605      	mov	r5, r0
 80050a6:	b118      	cbz	r0, 80050b0 <_puts_r+0x10>
 80050a8:	6983      	ldr	r3, [r0, #24]
 80050aa:	b90b      	cbnz	r3, 80050b0 <_puts_r+0x10>
 80050ac:	f000 fae8 	bl	8005680 <__sinit>
 80050b0:	69ab      	ldr	r3, [r5, #24]
 80050b2:	68ac      	ldr	r4, [r5, #8]
 80050b4:	b913      	cbnz	r3, 80050bc <_puts_r+0x1c>
 80050b6:	4628      	mov	r0, r5
 80050b8:	f000 fae2 	bl	8005680 <__sinit>
 80050bc:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <_puts_r+0xd0>)
 80050be:	429c      	cmp	r4, r3
 80050c0:	d120      	bne.n	8005104 <_puts_r+0x64>
 80050c2:	686c      	ldr	r4, [r5, #4]
 80050c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050c6:	07db      	lsls	r3, r3, #31
 80050c8:	d405      	bmi.n	80050d6 <_puts_r+0x36>
 80050ca:	89a3      	ldrh	r3, [r4, #12]
 80050cc:	0598      	lsls	r0, r3, #22
 80050ce:	d402      	bmi.n	80050d6 <_puts_r+0x36>
 80050d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050d2:	f000 fb73 	bl	80057bc <__retarget_lock_acquire_recursive>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	0719      	lsls	r1, r3, #28
 80050da:	d51d      	bpl.n	8005118 <_puts_r+0x78>
 80050dc:	6923      	ldr	r3, [r4, #16]
 80050de:	b1db      	cbz	r3, 8005118 <_puts_r+0x78>
 80050e0:	3e01      	subs	r6, #1
 80050e2:	68a3      	ldr	r3, [r4, #8]
 80050e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80050e8:	3b01      	subs	r3, #1
 80050ea:	60a3      	str	r3, [r4, #8]
 80050ec:	bb39      	cbnz	r1, 800513e <_puts_r+0x9e>
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	da38      	bge.n	8005164 <_puts_r+0xc4>
 80050f2:	4622      	mov	r2, r4
 80050f4:	210a      	movs	r1, #10
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 f8e8 	bl	80052cc <__swbuf_r>
 80050fc:	3001      	adds	r0, #1
 80050fe:	d011      	beq.n	8005124 <_puts_r+0x84>
 8005100:	250a      	movs	r5, #10
 8005102:	e011      	b.n	8005128 <_puts_r+0x88>
 8005104:	4b1b      	ldr	r3, [pc, #108]	; (8005174 <_puts_r+0xd4>)
 8005106:	429c      	cmp	r4, r3
 8005108:	d101      	bne.n	800510e <_puts_r+0x6e>
 800510a:	68ac      	ldr	r4, [r5, #8]
 800510c:	e7da      	b.n	80050c4 <_puts_r+0x24>
 800510e:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <_puts_r+0xd8>)
 8005110:	429c      	cmp	r4, r3
 8005112:	bf08      	it	eq
 8005114:	68ec      	ldreq	r4, [r5, #12]
 8005116:	e7d5      	b.n	80050c4 <_puts_r+0x24>
 8005118:	4621      	mov	r1, r4
 800511a:	4628      	mov	r0, r5
 800511c:	f000 f928 	bl	8005370 <__swsetup_r>
 8005120:	2800      	cmp	r0, #0
 8005122:	d0dd      	beq.n	80050e0 <_puts_r+0x40>
 8005124:	f04f 35ff 	mov.w	r5, #4294967295
 8005128:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800512a:	07da      	lsls	r2, r3, #31
 800512c:	d405      	bmi.n	800513a <_puts_r+0x9a>
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	059b      	lsls	r3, r3, #22
 8005132:	d402      	bmi.n	800513a <_puts_r+0x9a>
 8005134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005136:	f000 fb42 	bl	80057be <__retarget_lock_release_recursive>
 800513a:	4628      	mov	r0, r5
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	2b00      	cmp	r3, #0
 8005140:	da04      	bge.n	800514c <_puts_r+0xac>
 8005142:	69a2      	ldr	r2, [r4, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	dc06      	bgt.n	8005156 <_puts_r+0xb6>
 8005148:	290a      	cmp	r1, #10
 800514a:	d004      	beq.n	8005156 <_puts_r+0xb6>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	6022      	str	r2, [r4, #0]
 8005152:	7019      	strb	r1, [r3, #0]
 8005154:	e7c5      	b.n	80050e2 <_puts_r+0x42>
 8005156:	4622      	mov	r2, r4
 8005158:	4628      	mov	r0, r5
 800515a:	f000 f8b7 	bl	80052cc <__swbuf_r>
 800515e:	3001      	adds	r0, #1
 8005160:	d1bf      	bne.n	80050e2 <_puts_r+0x42>
 8005162:	e7df      	b.n	8005124 <_puts_r+0x84>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	250a      	movs	r5, #10
 8005168:	1c5a      	adds	r2, r3, #1
 800516a:	6022      	str	r2, [r4, #0]
 800516c:	701d      	strb	r5, [r3, #0]
 800516e:	e7db      	b.n	8005128 <_puts_r+0x88>
 8005170:	0800644c 	.word	0x0800644c
 8005174:	0800646c 	.word	0x0800646c
 8005178:	0800642c 	.word	0x0800642c

0800517c <puts>:
 800517c:	4b02      	ldr	r3, [pc, #8]	; (8005188 <puts+0xc>)
 800517e:	4601      	mov	r1, r0
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	f7ff bf8d 	b.w	80050a0 <_puts_r>
 8005186:	bf00      	nop
 8005188:	20000014 	.word	0x20000014

0800518c <strncmp>:
 800518c:	b510      	push	{r4, lr}
 800518e:	b17a      	cbz	r2, 80051b0 <strncmp+0x24>
 8005190:	4603      	mov	r3, r0
 8005192:	3901      	subs	r1, #1
 8005194:	1884      	adds	r4, r0, r2
 8005196:	f813 0b01 	ldrb.w	r0, [r3], #1
 800519a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800519e:	4290      	cmp	r0, r2
 80051a0:	d101      	bne.n	80051a6 <strncmp+0x1a>
 80051a2:	42a3      	cmp	r3, r4
 80051a4:	d101      	bne.n	80051aa <strncmp+0x1e>
 80051a6:	1a80      	subs	r0, r0, r2
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d1f3      	bne.n	8005196 <strncmp+0xa>
 80051ae:	e7fa      	b.n	80051a6 <strncmp+0x1a>
 80051b0:	4610      	mov	r0, r2
 80051b2:	e7f9      	b.n	80051a8 <strncmp+0x1c>

080051b4 <_strtol_l.constprop.0>:
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051ba:	d001      	beq.n	80051c0 <_strtol_l.constprop.0+0xc>
 80051bc:	2b24      	cmp	r3, #36	; 0x24
 80051be:	d906      	bls.n	80051ce <_strtol_l.constprop.0+0x1a>
 80051c0:	f7ff ff24 	bl	800500c <__errno>
 80051c4:	2316      	movs	r3, #22
 80051c6:	6003      	str	r3, [r0, #0]
 80051c8:	2000      	movs	r0, #0
 80051ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ce:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80052b4 <_strtol_l.constprop.0+0x100>
 80051d2:	460d      	mov	r5, r1
 80051d4:	462e      	mov	r6, r5
 80051d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051da:	f814 700c 	ldrb.w	r7, [r4, ip]
 80051de:	f017 0708 	ands.w	r7, r7, #8
 80051e2:	d1f7      	bne.n	80051d4 <_strtol_l.constprop.0+0x20>
 80051e4:	2c2d      	cmp	r4, #45	; 0x2d
 80051e6:	d132      	bne.n	800524e <_strtol_l.constprop.0+0x9a>
 80051e8:	782c      	ldrb	r4, [r5, #0]
 80051ea:	2701      	movs	r7, #1
 80051ec:	1cb5      	adds	r5, r6, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d05b      	beq.n	80052aa <_strtol_l.constprop.0+0xf6>
 80051f2:	2b10      	cmp	r3, #16
 80051f4:	d109      	bne.n	800520a <_strtol_l.constprop.0+0x56>
 80051f6:	2c30      	cmp	r4, #48	; 0x30
 80051f8:	d107      	bne.n	800520a <_strtol_l.constprop.0+0x56>
 80051fa:	782c      	ldrb	r4, [r5, #0]
 80051fc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005200:	2c58      	cmp	r4, #88	; 0x58
 8005202:	d14d      	bne.n	80052a0 <_strtol_l.constprop.0+0xec>
 8005204:	786c      	ldrb	r4, [r5, #1]
 8005206:	2310      	movs	r3, #16
 8005208:	3502      	adds	r5, #2
 800520a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800520e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005212:	f04f 0c00 	mov.w	ip, #0
 8005216:	fbb8 f9f3 	udiv	r9, r8, r3
 800521a:	4666      	mov	r6, ip
 800521c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005220:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005224:	f1be 0f09 	cmp.w	lr, #9
 8005228:	d816      	bhi.n	8005258 <_strtol_l.constprop.0+0xa4>
 800522a:	4674      	mov	r4, lr
 800522c:	42a3      	cmp	r3, r4
 800522e:	dd24      	ble.n	800527a <_strtol_l.constprop.0+0xc6>
 8005230:	f1bc 0f00 	cmp.w	ip, #0
 8005234:	db1e      	blt.n	8005274 <_strtol_l.constprop.0+0xc0>
 8005236:	45b1      	cmp	r9, r6
 8005238:	d31c      	bcc.n	8005274 <_strtol_l.constprop.0+0xc0>
 800523a:	d101      	bne.n	8005240 <_strtol_l.constprop.0+0x8c>
 800523c:	45a2      	cmp	sl, r4
 800523e:	db19      	blt.n	8005274 <_strtol_l.constprop.0+0xc0>
 8005240:	fb06 4603 	mla	r6, r6, r3, r4
 8005244:	f04f 0c01 	mov.w	ip, #1
 8005248:	f815 4b01 	ldrb.w	r4, [r5], #1
 800524c:	e7e8      	b.n	8005220 <_strtol_l.constprop.0+0x6c>
 800524e:	2c2b      	cmp	r4, #43	; 0x2b
 8005250:	bf04      	itt	eq
 8005252:	782c      	ldrbeq	r4, [r5, #0]
 8005254:	1cb5      	addeq	r5, r6, #2
 8005256:	e7ca      	b.n	80051ee <_strtol_l.constprop.0+0x3a>
 8005258:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800525c:	f1be 0f19 	cmp.w	lr, #25
 8005260:	d801      	bhi.n	8005266 <_strtol_l.constprop.0+0xb2>
 8005262:	3c37      	subs	r4, #55	; 0x37
 8005264:	e7e2      	b.n	800522c <_strtol_l.constprop.0+0x78>
 8005266:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800526a:	f1be 0f19 	cmp.w	lr, #25
 800526e:	d804      	bhi.n	800527a <_strtol_l.constprop.0+0xc6>
 8005270:	3c57      	subs	r4, #87	; 0x57
 8005272:	e7db      	b.n	800522c <_strtol_l.constprop.0+0x78>
 8005274:	f04f 3cff 	mov.w	ip, #4294967295
 8005278:	e7e6      	b.n	8005248 <_strtol_l.constprop.0+0x94>
 800527a:	f1bc 0f00 	cmp.w	ip, #0
 800527e:	da05      	bge.n	800528c <_strtol_l.constprop.0+0xd8>
 8005280:	2322      	movs	r3, #34	; 0x22
 8005282:	6003      	str	r3, [r0, #0]
 8005284:	4646      	mov	r6, r8
 8005286:	b942      	cbnz	r2, 800529a <_strtol_l.constprop.0+0xe6>
 8005288:	4630      	mov	r0, r6
 800528a:	e79e      	b.n	80051ca <_strtol_l.constprop.0+0x16>
 800528c:	b107      	cbz	r7, 8005290 <_strtol_l.constprop.0+0xdc>
 800528e:	4276      	negs	r6, r6
 8005290:	2a00      	cmp	r2, #0
 8005292:	d0f9      	beq.n	8005288 <_strtol_l.constprop.0+0xd4>
 8005294:	f1bc 0f00 	cmp.w	ip, #0
 8005298:	d000      	beq.n	800529c <_strtol_l.constprop.0+0xe8>
 800529a:	1e69      	subs	r1, r5, #1
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	e7f3      	b.n	8005288 <_strtol_l.constprop.0+0xd4>
 80052a0:	2430      	movs	r4, #48	; 0x30
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1b1      	bne.n	800520a <_strtol_l.constprop.0+0x56>
 80052a6:	2308      	movs	r3, #8
 80052a8:	e7af      	b.n	800520a <_strtol_l.constprop.0+0x56>
 80052aa:	2c30      	cmp	r4, #48	; 0x30
 80052ac:	d0a5      	beq.n	80051fa <_strtol_l.constprop.0+0x46>
 80052ae:	230a      	movs	r3, #10
 80052b0:	e7ab      	b.n	800520a <_strtol_l.constprop.0+0x56>
 80052b2:	bf00      	nop
 80052b4:	08006329 	.word	0x08006329

080052b8 <strtol>:
 80052b8:	4613      	mov	r3, r2
 80052ba:	460a      	mov	r2, r1
 80052bc:	4601      	mov	r1, r0
 80052be:	4802      	ldr	r0, [pc, #8]	; (80052c8 <strtol+0x10>)
 80052c0:	6800      	ldr	r0, [r0, #0]
 80052c2:	f7ff bf77 	b.w	80051b4 <_strtol_l.constprop.0>
 80052c6:	bf00      	nop
 80052c8:	20000014 	.word	0x20000014

080052cc <__swbuf_r>:
 80052cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ce:	460e      	mov	r6, r1
 80052d0:	4614      	mov	r4, r2
 80052d2:	4605      	mov	r5, r0
 80052d4:	b118      	cbz	r0, 80052de <__swbuf_r+0x12>
 80052d6:	6983      	ldr	r3, [r0, #24]
 80052d8:	b90b      	cbnz	r3, 80052de <__swbuf_r+0x12>
 80052da:	f000 f9d1 	bl	8005680 <__sinit>
 80052de:	4b21      	ldr	r3, [pc, #132]	; (8005364 <__swbuf_r+0x98>)
 80052e0:	429c      	cmp	r4, r3
 80052e2:	d12b      	bne.n	800533c <__swbuf_r+0x70>
 80052e4:	686c      	ldr	r4, [r5, #4]
 80052e6:	69a3      	ldr	r3, [r4, #24]
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	071a      	lsls	r2, r3, #28
 80052ee:	d52f      	bpl.n	8005350 <__swbuf_r+0x84>
 80052f0:	6923      	ldr	r3, [r4, #16]
 80052f2:	b36b      	cbz	r3, 8005350 <__swbuf_r+0x84>
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	6820      	ldr	r0, [r4, #0]
 80052f8:	1ac0      	subs	r0, r0, r3
 80052fa:	6963      	ldr	r3, [r4, #20]
 80052fc:	b2f6      	uxtb	r6, r6
 80052fe:	4283      	cmp	r3, r0
 8005300:	4637      	mov	r7, r6
 8005302:	dc04      	bgt.n	800530e <__swbuf_r+0x42>
 8005304:	4621      	mov	r1, r4
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f926 	bl	8005558 <_fflush_r>
 800530c:	bb30      	cbnz	r0, 800535c <__swbuf_r+0x90>
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	3b01      	subs	r3, #1
 8005312:	60a3      	str	r3, [r4, #8]
 8005314:	6823      	ldr	r3, [r4, #0]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	6022      	str	r2, [r4, #0]
 800531a:	701e      	strb	r6, [r3, #0]
 800531c:	6963      	ldr	r3, [r4, #20]
 800531e:	3001      	adds	r0, #1
 8005320:	4283      	cmp	r3, r0
 8005322:	d004      	beq.n	800532e <__swbuf_r+0x62>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	07db      	lsls	r3, r3, #31
 8005328:	d506      	bpl.n	8005338 <__swbuf_r+0x6c>
 800532a:	2e0a      	cmp	r6, #10
 800532c:	d104      	bne.n	8005338 <__swbuf_r+0x6c>
 800532e:	4621      	mov	r1, r4
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f911 	bl	8005558 <_fflush_r>
 8005336:	b988      	cbnz	r0, 800535c <__swbuf_r+0x90>
 8005338:	4638      	mov	r0, r7
 800533a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <__swbuf_r+0x9c>)
 800533e:	429c      	cmp	r4, r3
 8005340:	d101      	bne.n	8005346 <__swbuf_r+0x7a>
 8005342:	68ac      	ldr	r4, [r5, #8]
 8005344:	e7cf      	b.n	80052e6 <__swbuf_r+0x1a>
 8005346:	4b09      	ldr	r3, [pc, #36]	; (800536c <__swbuf_r+0xa0>)
 8005348:	429c      	cmp	r4, r3
 800534a:	bf08      	it	eq
 800534c:	68ec      	ldreq	r4, [r5, #12]
 800534e:	e7ca      	b.n	80052e6 <__swbuf_r+0x1a>
 8005350:	4621      	mov	r1, r4
 8005352:	4628      	mov	r0, r5
 8005354:	f000 f80c 	bl	8005370 <__swsetup_r>
 8005358:	2800      	cmp	r0, #0
 800535a:	d0cb      	beq.n	80052f4 <__swbuf_r+0x28>
 800535c:	f04f 37ff 	mov.w	r7, #4294967295
 8005360:	e7ea      	b.n	8005338 <__swbuf_r+0x6c>
 8005362:	bf00      	nop
 8005364:	0800644c 	.word	0x0800644c
 8005368:	0800646c 	.word	0x0800646c
 800536c:	0800642c 	.word	0x0800642c

08005370 <__swsetup_r>:
 8005370:	4b32      	ldr	r3, [pc, #200]	; (800543c <__swsetup_r+0xcc>)
 8005372:	b570      	push	{r4, r5, r6, lr}
 8005374:	681d      	ldr	r5, [r3, #0]
 8005376:	4606      	mov	r6, r0
 8005378:	460c      	mov	r4, r1
 800537a:	b125      	cbz	r5, 8005386 <__swsetup_r+0x16>
 800537c:	69ab      	ldr	r3, [r5, #24]
 800537e:	b913      	cbnz	r3, 8005386 <__swsetup_r+0x16>
 8005380:	4628      	mov	r0, r5
 8005382:	f000 f97d 	bl	8005680 <__sinit>
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <__swsetup_r+0xd0>)
 8005388:	429c      	cmp	r4, r3
 800538a:	d10f      	bne.n	80053ac <__swsetup_r+0x3c>
 800538c:	686c      	ldr	r4, [r5, #4]
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005394:	0719      	lsls	r1, r3, #28
 8005396:	d42c      	bmi.n	80053f2 <__swsetup_r+0x82>
 8005398:	06dd      	lsls	r5, r3, #27
 800539a:	d411      	bmi.n	80053c0 <__swsetup_r+0x50>
 800539c:	2309      	movs	r3, #9
 800539e:	6033      	str	r3, [r6, #0]
 80053a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053a4:	81a3      	strh	r3, [r4, #12]
 80053a6:	f04f 30ff 	mov.w	r0, #4294967295
 80053aa:	e03e      	b.n	800542a <__swsetup_r+0xba>
 80053ac:	4b25      	ldr	r3, [pc, #148]	; (8005444 <__swsetup_r+0xd4>)
 80053ae:	429c      	cmp	r4, r3
 80053b0:	d101      	bne.n	80053b6 <__swsetup_r+0x46>
 80053b2:	68ac      	ldr	r4, [r5, #8]
 80053b4:	e7eb      	b.n	800538e <__swsetup_r+0x1e>
 80053b6:	4b24      	ldr	r3, [pc, #144]	; (8005448 <__swsetup_r+0xd8>)
 80053b8:	429c      	cmp	r4, r3
 80053ba:	bf08      	it	eq
 80053bc:	68ec      	ldreq	r4, [r5, #12]
 80053be:	e7e6      	b.n	800538e <__swsetup_r+0x1e>
 80053c0:	0758      	lsls	r0, r3, #29
 80053c2:	d512      	bpl.n	80053ea <__swsetup_r+0x7a>
 80053c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053c6:	b141      	cbz	r1, 80053da <__swsetup_r+0x6a>
 80053c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053cc:	4299      	cmp	r1, r3
 80053ce:	d002      	beq.n	80053d6 <__swsetup_r+0x66>
 80053d0:	4630      	mov	r0, r6
 80053d2:	f000 fa5b 	bl	800588c <_free_r>
 80053d6:	2300      	movs	r3, #0
 80053d8:	6363      	str	r3, [r4, #52]	; 0x34
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053e0:	81a3      	strh	r3, [r4, #12]
 80053e2:	2300      	movs	r3, #0
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	6923      	ldr	r3, [r4, #16]
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	f043 0308 	orr.w	r3, r3, #8
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	b94b      	cbnz	r3, 800540a <__swsetup_r+0x9a>
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80053fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005400:	d003      	beq.n	800540a <__swsetup_r+0x9a>
 8005402:	4621      	mov	r1, r4
 8005404:	4630      	mov	r0, r6
 8005406:	f000 fa01 	bl	800580c <__smakebuf_r>
 800540a:	89a0      	ldrh	r0, [r4, #12]
 800540c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005410:	f010 0301 	ands.w	r3, r0, #1
 8005414:	d00a      	beq.n	800542c <__swsetup_r+0xbc>
 8005416:	2300      	movs	r3, #0
 8005418:	60a3      	str	r3, [r4, #8]
 800541a:	6963      	ldr	r3, [r4, #20]
 800541c:	425b      	negs	r3, r3
 800541e:	61a3      	str	r3, [r4, #24]
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	b943      	cbnz	r3, 8005436 <__swsetup_r+0xc6>
 8005424:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005428:	d1ba      	bne.n	80053a0 <__swsetup_r+0x30>
 800542a:	bd70      	pop	{r4, r5, r6, pc}
 800542c:	0781      	lsls	r1, r0, #30
 800542e:	bf58      	it	pl
 8005430:	6963      	ldrpl	r3, [r4, #20]
 8005432:	60a3      	str	r3, [r4, #8]
 8005434:	e7f4      	b.n	8005420 <__swsetup_r+0xb0>
 8005436:	2000      	movs	r0, #0
 8005438:	e7f7      	b.n	800542a <__swsetup_r+0xba>
 800543a:	bf00      	nop
 800543c:	20000014 	.word	0x20000014
 8005440:	0800644c 	.word	0x0800644c
 8005444:	0800646c 	.word	0x0800646c
 8005448:	0800642c 	.word	0x0800642c

0800544c <__sflush_r>:
 800544c:	898a      	ldrh	r2, [r1, #12]
 800544e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005452:	4605      	mov	r5, r0
 8005454:	0710      	lsls	r0, r2, #28
 8005456:	460c      	mov	r4, r1
 8005458:	d458      	bmi.n	800550c <__sflush_r+0xc0>
 800545a:	684b      	ldr	r3, [r1, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	dc05      	bgt.n	800546c <__sflush_r+0x20>
 8005460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005462:	2b00      	cmp	r3, #0
 8005464:	dc02      	bgt.n	800546c <__sflush_r+0x20>
 8005466:	2000      	movs	r0, #0
 8005468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800546c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800546e:	2e00      	cmp	r6, #0
 8005470:	d0f9      	beq.n	8005466 <__sflush_r+0x1a>
 8005472:	2300      	movs	r3, #0
 8005474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005478:	682f      	ldr	r7, [r5, #0]
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	d032      	beq.n	80054e4 <__sflush_r+0x98>
 800547e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005480:	89a3      	ldrh	r3, [r4, #12]
 8005482:	075a      	lsls	r2, r3, #29
 8005484:	d505      	bpl.n	8005492 <__sflush_r+0x46>
 8005486:	6863      	ldr	r3, [r4, #4]
 8005488:	1ac0      	subs	r0, r0, r3
 800548a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800548c:	b10b      	cbz	r3, 8005492 <__sflush_r+0x46>
 800548e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005490:	1ac0      	subs	r0, r0, r3
 8005492:	2300      	movs	r3, #0
 8005494:	4602      	mov	r2, r0
 8005496:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005498:	6a21      	ldr	r1, [r4, #32]
 800549a:	4628      	mov	r0, r5
 800549c:	47b0      	blx	r6
 800549e:	1c43      	adds	r3, r0, #1
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	d106      	bne.n	80054b2 <__sflush_r+0x66>
 80054a4:	6829      	ldr	r1, [r5, #0]
 80054a6:	291d      	cmp	r1, #29
 80054a8:	d82c      	bhi.n	8005504 <__sflush_r+0xb8>
 80054aa:	4a2a      	ldr	r2, [pc, #168]	; (8005554 <__sflush_r+0x108>)
 80054ac:	40ca      	lsrs	r2, r1
 80054ae:	07d6      	lsls	r6, r2, #31
 80054b0:	d528      	bpl.n	8005504 <__sflush_r+0xb8>
 80054b2:	2200      	movs	r2, #0
 80054b4:	6062      	str	r2, [r4, #4]
 80054b6:	04d9      	lsls	r1, r3, #19
 80054b8:	6922      	ldr	r2, [r4, #16]
 80054ba:	6022      	str	r2, [r4, #0]
 80054bc:	d504      	bpl.n	80054c8 <__sflush_r+0x7c>
 80054be:	1c42      	adds	r2, r0, #1
 80054c0:	d101      	bne.n	80054c6 <__sflush_r+0x7a>
 80054c2:	682b      	ldr	r3, [r5, #0]
 80054c4:	b903      	cbnz	r3, 80054c8 <__sflush_r+0x7c>
 80054c6:	6560      	str	r0, [r4, #84]	; 0x54
 80054c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054ca:	602f      	str	r7, [r5, #0]
 80054cc:	2900      	cmp	r1, #0
 80054ce:	d0ca      	beq.n	8005466 <__sflush_r+0x1a>
 80054d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054d4:	4299      	cmp	r1, r3
 80054d6:	d002      	beq.n	80054de <__sflush_r+0x92>
 80054d8:	4628      	mov	r0, r5
 80054da:	f000 f9d7 	bl	800588c <_free_r>
 80054de:	2000      	movs	r0, #0
 80054e0:	6360      	str	r0, [r4, #52]	; 0x34
 80054e2:	e7c1      	b.n	8005468 <__sflush_r+0x1c>
 80054e4:	6a21      	ldr	r1, [r4, #32]
 80054e6:	2301      	movs	r3, #1
 80054e8:	4628      	mov	r0, r5
 80054ea:	47b0      	blx	r6
 80054ec:	1c41      	adds	r1, r0, #1
 80054ee:	d1c7      	bne.n	8005480 <__sflush_r+0x34>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0c4      	beq.n	8005480 <__sflush_r+0x34>
 80054f6:	2b1d      	cmp	r3, #29
 80054f8:	d001      	beq.n	80054fe <__sflush_r+0xb2>
 80054fa:	2b16      	cmp	r3, #22
 80054fc:	d101      	bne.n	8005502 <__sflush_r+0xb6>
 80054fe:	602f      	str	r7, [r5, #0]
 8005500:	e7b1      	b.n	8005466 <__sflush_r+0x1a>
 8005502:	89a3      	ldrh	r3, [r4, #12]
 8005504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005508:	81a3      	strh	r3, [r4, #12]
 800550a:	e7ad      	b.n	8005468 <__sflush_r+0x1c>
 800550c:	690f      	ldr	r7, [r1, #16]
 800550e:	2f00      	cmp	r7, #0
 8005510:	d0a9      	beq.n	8005466 <__sflush_r+0x1a>
 8005512:	0793      	lsls	r3, r2, #30
 8005514:	680e      	ldr	r6, [r1, #0]
 8005516:	bf08      	it	eq
 8005518:	694b      	ldreq	r3, [r1, #20]
 800551a:	600f      	str	r7, [r1, #0]
 800551c:	bf18      	it	ne
 800551e:	2300      	movne	r3, #0
 8005520:	eba6 0807 	sub.w	r8, r6, r7
 8005524:	608b      	str	r3, [r1, #8]
 8005526:	f1b8 0f00 	cmp.w	r8, #0
 800552a:	dd9c      	ble.n	8005466 <__sflush_r+0x1a>
 800552c:	6a21      	ldr	r1, [r4, #32]
 800552e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005530:	4643      	mov	r3, r8
 8005532:	463a      	mov	r2, r7
 8005534:	4628      	mov	r0, r5
 8005536:	47b0      	blx	r6
 8005538:	2800      	cmp	r0, #0
 800553a:	dc06      	bgt.n	800554a <__sflush_r+0xfe>
 800553c:	89a3      	ldrh	r3, [r4, #12]
 800553e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e78e      	b.n	8005468 <__sflush_r+0x1c>
 800554a:	4407      	add	r7, r0
 800554c:	eba8 0800 	sub.w	r8, r8, r0
 8005550:	e7e9      	b.n	8005526 <__sflush_r+0xda>
 8005552:	bf00      	nop
 8005554:	20400001 	.word	0x20400001

08005558 <_fflush_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	690b      	ldr	r3, [r1, #16]
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b913      	cbnz	r3, 8005568 <_fflush_r+0x10>
 8005562:	2500      	movs	r5, #0
 8005564:	4628      	mov	r0, r5
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	b118      	cbz	r0, 8005572 <_fflush_r+0x1a>
 800556a:	6983      	ldr	r3, [r0, #24]
 800556c:	b90b      	cbnz	r3, 8005572 <_fflush_r+0x1a>
 800556e:	f000 f887 	bl	8005680 <__sinit>
 8005572:	4b14      	ldr	r3, [pc, #80]	; (80055c4 <_fflush_r+0x6c>)
 8005574:	429c      	cmp	r4, r3
 8005576:	d11b      	bne.n	80055b0 <_fflush_r+0x58>
 8005578:	686c      	ldr	r4, [r5, #4]
 800557a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ef      	beq.n	8005562 <_fflush_r+0xa>
 8005582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005584:	07d0      	lsls	r0, r2, #31
 8005586:	d404      	bmi.n	8005592 <_fflush_r+0x3a>
 8005588:	0599      	lsls	r1, r3, #22
 800558a:	d402      	bmi.n	8005592 <_fflush_r+0x3a>
 800558c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800558e:	f000 f915 	bl	80057bc <__retarget_lock_acquire_recursive>
 8005592:	4628      	mov	r0, r5
 8005594:	4621      	mov	r1, r4
 8005596:	f7ff ff59 	bl	800544c <__sflush_r>
 800559a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800559c:	07da      	lsls	r2, r3, #31
 800559e:	4605      	mov	r5, r0
 80055a0:	d4e0      	bmi.n	8005564 <_fflush_r+0xc>
 80055a2:	89a3      	ldrh	r3, [r4, #12]
 80055a4:	059b      	lsls	r3, r3, #22
 80055a6:	d4dd      	bmi.n	8005564 <_fflush_r+0xc>
 80055a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055aa:	f000 f908 	bl	80057be <__retarget_lock_release_recursive>
 80055ae:	e7d9      	b.n	8005564 <_fflush_r+0xc>
 80055b0:	4b05      	ldr	r3, [pc, #20]	; (80055c8 <_fflush_r+0x70>)
 80055b2:	429c      	cmp	r4, r3
 80055b4:	d101      	bne.n	80055ba <_fflush_r+0x62>
 80055b6:	68ac      	ldr	r4, [r5, #8]
 80055b8:	e7df      	b.n	800557a <_fflush_r+0x22>
 80055ba:	4b04      	ldr	r3, [pc, #16]	; (80055cc <_fflush_r+0x74>)
 80055bc:	429c      	cmp	r4, r3
 80055be:	bf08      	it	eq
 80055c0:	68ec      	ldreq	r4, [r5, #12]
 80055c2:	e7da      	b.n	800557a <_fflush_r+0x22>
 80055c4:	0800644c 	.word	0x0800644c
 80055c8:	0800646c 	.word	0x0800646c
 80055cc:	0800642c 	.word	0x0800642c

080055d0 <std>:
 80055d0:	2300      	movs	r3, #0
 80055d2:	b510      	push	{r4, lr}
 80055d4:	4604      	mov	r4, r0
 80055d6:	e9c0 3300 	strd	r3, r3, [r0]
 80055da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055de:	6083      	str	r3, [r0, #8]
 80055e0:	8181      	strh	r1, [r0, #12]
 80055e2:	6643      	str	r3, [r0, #100]	; 0x64
 80055e4:	81c2      	strh	r2, [r0, #14]
 80055e6:	6183      	str	r3, [r0, #24]
 80055e8:	4619      	mov	r1, r3
 80055ea:	2208      	movs	r2, #8
 80055ec:	305c      	adds	r0, #92	; 0x5c
 80055ee:	f7ff fd37 	bl	8005060 <memset>
 80055f2:	4b05      	ldr	r3, [pc, #20]	; (8005608 <std+0x38>)
 80055f4:	6263      	str	r3, [r4, #36]	; 0x24
 80055f6:	4b05      	ldr	r3, [pc, #20]	; (800560c <std+0x3c>)
 80055f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <std+0x40>)
 80055fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <std+0x44>)
 8005600:	6224      	str	r4, [r4, #32]
 8005602:	6323      	str	r3, [r4, #48]	; 0x30
 8005604:	bd10      	pop	{r4, pc}
 8005606:	bf00      	nop
 8005608:	08006049 	.word	0x08006049
 800560c:	0800606b 	.word	0x0800606b
 8005610:	080060a3 	.word	0x080060a3
 8005614:	080060c7 	.word	0x080060c7

08005618 <_cleanup_r>:
 8005618:	4901      	ldr	r1, [pc, #4]	; (8005620 <_cleanup_r+0x8>)
 800561a:	f000 b8af 	b.w	800577c <_fwalk_reent>
 800561e:	bf00      	nop
 8005620:	08005559 	.word	0x08005559

08005624 <__sfmoreglue>:
 8005624:	b570      	push	{r4, r5, r6, lr}
 8005626:	2268      	movs	r2, #104	; 0x68
 8005628:	1e4d      	subs	r5, r1, #1
 800562a:	4355      	muls	r5, r2
 800562c:	460e      	mov	r6, r1
 800562e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005632:	f000 f997 	bl	8005964 <_malloc_r>
 8005636:	4604      	mov	r4, r0
 8005638:	b140      	cbz	r0, 800564c <__sfmoreglue+0x28>
 800563a:	2100      	movs	r1, #0
 800563c:	e9c0 1600 	strd	r1, r6, [r0]
 8005640:	300c      	adds	r0, #12
 8005642:	60a0      	str	r0, [r4, #8]
 8005644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005648:	f7ff fd0a 	bl	8005060 <memset>
 800564c:	4620      	mov	r0, r4
 800564e:	bd70      	pop	{r4, r5, r6, pc}

08005650 <__sfp_lock_acquire>:
 8005650:	4801      	ldr	r0, [pc, #4]	; (8005658 <__sfp_lock_acquire+0x8>)
 8005652:	f000 b8b3 	b.w	80057bc <__retarget_lock_acquire_recursive>
 8005656:	bf00      	nop
 8005658:	2000077d 	.word	0x2000077d

0800565c <__sfp_lock_release>:
 800565c:	4801      	ldr	r0, [pc, #4]	; (8005664 <__sfp_lock_release+0x8>)
 800565e:	f000 b8ae 	b.w	80057be <__retarget_lock_release_recursive>
 8005662:	bf00      	nop
 8005664:	2000077d 	.word	0x2000077d

08005668 <__sinit_lock_acquire>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sinit_lock_acquire+0x8>)
 800566a:	f000 b8a7 	b.w	80057bc <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	2000077e 	.word	0x2000077e

08005674 <__sinit_lock_release>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sinit_lock_release+0x8>)
 8005676:	f000 b8a2 	b.w	80057be <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	2000077e 	.word	0x2000077e

08005680 <__sinit>:
 8005680:	b510      	push	{r4, lr}
 8005682:	4604      	mov	r4, r0
 8005684:	f7ff fff0 	bl	8005668 <__sinit_lock_acquire>
 8005688:	69a3      	ldr	r3, [r4, #24]
 800568a:	b11b      	cbz	r3, 8005694 <__sinit+0x14>
 800568c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005690:	f7ff bff0 	b.w	8005674 <__sinit_lock_release>
 8005694:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005698:	6523      	str	r3, [r4, #80]	; 0x50
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <__sinit+0x68>)
 800569c:	4a13      	ldr	r2, [pc, #76]	; (80056ec <__sinit+0x6c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	bf04      	itt	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	61a3      	streq	r3, [r4, #24]
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 f820 	bl	80056f0 <__sfp>
 80056b0:	6060      	str	r0, [r4, #4]
 80056b2:	4620      	mov	r0, r4
 80056b4:	f000 f81c 	bl	80056f0 <__sfp>
 80056b8:	60a0      	str	r0, [r4, #8]
 80056ba:	4620      	mov	r0, r4
 80056bc:	f000 f818 	bl	80056f0 <__sfp>
 80056c0:	2200      	movs	r2, #0
 80056c2:	60e0      	str	r0, [r4, #12]
 80056c4:	2104      	movs	r1, #4
 80056c6:	6860      	ldr	r0, [r4, #4]
 80056c8:	f7ff ff82 	bl	80055d0 <std>
 80056cc:	68a0      	ldr	r0, [r4, #8]
 80056ce:	2201      	movs	r2, #1
 80056d0:	2109      	movs	r1, #9
 80056d2:	f7ff ff7d 	bl	80055d0 <std>
 80056d6:	68e0      	ldr	r0, [r4, #12]
 80056d8:	2202      	movs	r2, #2
 80056da:	2112      	movs	r1, #18
 80056dc:	f7ff ff78 	bl	80055d0 <std>
 80056e0:	2301      	movs	r3, #1
 80056e2:	61a3      	str	r3, [r4, #24]
 80056e4:	e7d2      	b.n	800568c <__sinit+0xc>
 80056e6:	bf00      	nop
 80056e8:	08006324 	.word	0x08006324
 80056ec:	08005619 	.word	0x08005619

080056f0 <__sfp>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	4607      	mov	r7, r0
 80056f4:	f7ff ffac 	bl	8005650 <__sfp_lock_acquire>
 80056f8:	4b1e      	ldr	r3, [pc, #120]	; (8005774 <__sfp+0x84>)
 80056fa:	681e      	ldr	r6, [r3, #0]
 80056fc:	69b3      	ldr	r3, [r6, #24]
 80056fe:	b913      	cbnz	r3, 8005706 <__sfp+0x16>
 8005700:	4630      	mov	r0, r6
 8005702:	f7ff ffbd 	bl	8005680 <__sinit>
 8005706:	3648      	adds	r6, #72	; 0x48
 8005708:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800570c:	3b01      	subs	r3, #1
 800570e:	d503      	bpl.n	8005718 <__sfp+0x28>
 8005710:	6833      	ldr	r3, [r6, #0]
 8005712:	b30b      	cbz	r3, 8005758 <__sfp+0x68>
 8005714:	6836      	ldr	r6, [r6, #0]
 8005716:	e7f7      	b.n	8005708 <__sfp+0x18>
 8005718:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800571c:	b9d5      	cbnz	r5, 8005754 <__sfp+0x64>
 800571e:	4b16      	ldr	r3, [pc, #88]	; (8005778 <__sfp+0x88>)
 8005720:	60e3      	str	r3, [r4, #12]
 8005722:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005726:	6665      	str	r5, [r4, #100]	; 0x64
 8005728:	f000 f847 	bl	80057ba <__retarget_lock_init_recursive>
 800572c:	f7ff ff96 	bl	800565c <__sfp_lock_release>
 8005730:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005734:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005738:	6025      	str	r5, [r4, #0]
 800573a:	61a5      	str	r5, [r4, #24]
 800573c:	2208      	movs	r2, #8
 800573e:	4629      	mov	r1, r5
 8005740:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005744:	f7ff fc8c 	bl	8005060 <memset>
 8005748:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800574c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005750:	4620      	mov	r0, r4
 8005752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005754:	3468      	adds	r4, #104	; 0x68
 8005756:	e7d9      	b.n	800570c <__sfp+0x1c>
 8005758:	2104      	movs	r1, #4
 800575a:	4638      	mov	r0, r7
 800575c:	f7ff ff62 	bl	8005624 <__sfmoreglue>
 8005760:	4604      	mov	r4, r0
 8005762:	6030      	str	r0, [r6, #0]
 8005764:	2800      	cmp	r0, #0
 8005766:	d1d5      	bne.n	8005714 <__sfp+0x24>
 8005768:	f7ff ff78 	bl	800565c <__sfp_lock_release>
 800576c:	230c      	movs	r3, #12
 800576e:	603b      	str	r3, [r7, #0]
 8005770:	e7ee      	b.n	8005750 <__sfp+0x60>
 8005772:	bf00      	nop
 8005774:	08006324 	.word	0x08006324
 8005778:	ffff0001 	.word	0xffff0001

0800577c <_fwalk_reent>:
 800577c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005780:	4606      	mov	r6, r0
 8005782:	4688      	mov	r8, r1
 8005784:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005788:	2700      	movs	r7, #0
 800578a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800578e:	f1b9 0901 	subs.w	r9, r9, #1
 8005792:	d505      	bpl.n	80057a0 <_fwalk_reent+0x24>
 8005794:	6824      	ldr	r4, [r4, #0]
 8005796:	2c00      	cmp	r4, #0
 8005798:	d1f7      	bne.n	800578a <_fwalk_reent+0xe>
 800579a:	4638      	mov	r0, r7
 800579c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057a0:	89ab      	ldrh	r3, [r5, #12]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d907      	bls.n	80057b6 <_fwalk_reent+0x3a>
 80057a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057aa:	3301      	adds	r3, #1
 80057ac:	d003      	beq.n	80057b6 <_fwalk_reent+0x3a>
 80057ae:	4629      	mov	r1, r5
 80057b0:	4630      	mov	r0, r6
 80057b2:	47c0      	blx	r8
 80057b4:	4307      	orrs	r7, r0
 80057b6:	3568      	adds	r5, #104	; 0x68
 80057b8:	e7e9      	b.n	800578e <_fwalk_reent+0x12>

080057ba <__retarget_lock_init_recursive>:
 80057ba:	4770      	bx	lr

080057bc <__retarget_lock_acquire_recursive>:
 80057bc:	4770      	bx	lr

080057be <__retarget_lock_release_recursive>:
 80057be:	4770      	bx	lr

080057c0 <__swhatbuf_r>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	460e      	mov	r6, r1
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	2900      	cmp	r1, #0
 80057ca:	b096      	sub	sp, #88	; 0x58
 80057cc:	4614      	mov	r4, r2
 80057ce:	461d      	mov	r5, r3
 80057d0:	da08      	bge.n	80057e4 <__swhatbuf_r+0x24>
 80057d2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	602a      	str	r2, [r5, #0]
 80057da:	061a      	lsls	r2, r3, #24
 80057dc:	d410      	bmi.n	8005800 <__swhatbuf_r+0x40>
 80057de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057e2:	e00e      	b.n	8005802 <__swhatbuf_r+0x42>
 80057e4:	466a      	mov	r2, sp
 80057e6:	f000 fc95 	bl	8006114 <_fstat_r>
 80057ea:	2800      	cmp	r0, #0
 80057ec:	dbf1      	blt.n	80057d2 <__swhatbuf_r+0x12>
 80057ee:	9a01      	ldr	r2, [sp, #4]
 80057f0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80057f4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80057f8:	425a      	negs	r2, r3
 80057fa:	415a      	adcs	r2, r3
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	e7ee      	b.n	80057de <__swhatbuf_r+0x1e>
 8005800:	2340      	movs	r3, #64	; 0x40
 8005802:	2000      	movs	r0, #0
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	b016      	add	sp, #88	; 0x58
 8005808:	bd70      	pop	{r4, r5, r6, pc}
	...

0800580c <__smakebuf_r>:
 800580c:	898b      	ldrh	r3, [r1, #12]
 800580e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005810:	079d      	lsls	r5, r3, #30
 8005812:	4606      	mov	r6, r0
 8005814:	460c      	mov	r4, r1
 8005816:	d507      	bpl.n	8005828 <__smakebuf_r+0x1c>
 8005818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	6123      	str	r3, [r4, #16]
 8005820:	2301      	movs	r3, #1
 8005822:	6163      	str	r3, [r4, #20]
 8005824:	b002      	add	sp, #8
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	ab01      	add	r3, sp, #4
 800582a:	466a      	mov	r2, sp
 800582c:	f7ff ffc8 	bl	80057c0 <__swhatbuf_r>
 8005830:	9900      	ldr	r1, [sp, #0]
 8005832:	4605      	mov	r5, r0
 8005834:	4630      	mov	r0, r6
 8005836:	f000 f895 	bl	8005964 <_malloc_r>
 800583a:	b948      	cbnz	r0, 8005850 <__smakebuf_r+0x44>
 800583c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005840:	059a      	lsls	r2, r3, #22
 8005842:	d4ef      	bmi.n	8005824 <__smakebuf_r+0x18>
 8005844:	f023 0303 	bic.w	r3, r3, #3
 8005848:	f043 0302 	orr.w	r3, r3, #2
 800584c:	81a3      	strh	r3, [r4, #12]
 800584e:	e7e3      	b.n	8005818 <__smakebuf_r+0xc>
 8005850:	4b0d      	ldr	r3, [pc, #52]	; (8005888 <__smakebuf_r+0x7c>)
 8005852:	62b3      	str	r3, [r6, #40]	; 0x28
 8005854:	89a3      	ldrh	r3, [r4, #12]
 8005856:	6020      	str	r0, [r4, #0]
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	9b00      	ldr	r3, [sp, #0]
 8005860:	6163      	str	r3, [r4, #20]
 8005862:	9b01      	ldr	r3, [sp, #4]
 8005864:	6120      	str	r0, [r4, #16]
 8005866:	b15b      	cbz	r3, 8005880 <__smakebuf_r+0x74>
 8005868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800586c:	4630      	mov	r0, r6
 800586e:	f000 fc63 	bl	8006138 <_isatty_r>
 8005872:	b128      	cbz	r0, 8005880 <__smakebuf_r+0x74>
 8005874:	89a3      	ldrh	r3, [r4, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	f043 0301 	orr.w	r3, r3, #1
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	89a0      	ldrh	r0, [r4, #12]
 8005882:	4305      	orrs	r5, r0
 8005884:	81a5      	strh	r5, [r4, #12]
 8005886:	e7cd      	b.n	8005824 <__smakebuf_r+0x18>
 8005888:	08005619 	.word	0x08005619

0800588c <_free_r>:
 800588c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800588e:	2900      	cmp	r1, #0
 8005890:	d044      	beq.n	800591c <_free_r+0x90>
 8005892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005896:	9001      	str	r0, [sp, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f1a1 0404 	sub.w	r4, r1, #4
 800589e:	bfb8      	it	lt
 80058a0:	18e4      	addlt	r4, r4, r3
 80058a2:	f000 fc6b 	bl	800617c <__malloc_lock>
 80058a6:	4a1e      	ldr	r2, [pc, #120]	; (8005920 <_free_r+0x94>)
 80058a8:	9801      	ldr	r0, [sp, #4]
 80058aa:	6813      	ldr	r3, [r2, #0]
 80058ac:	b933      	cbnz	r3, 80058bc <_free_r+0x30>
 80058ae:	6063      	str	r3, [r4, #4]
 80058b0:	6014      	str	r4, [r2, #0]
 80058b2:	b003      	add	sp, #12
 80058b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058b8:	f000 bc66 	b.w	8006188 <__malloc_unlock>
 80058bc:	42a3      	cmp	r3, r4
 80058be:	d908      	bls.n	80058d2 <_free_r+0x46>
 80058c0:	6825      	ldr	r5, [r4, #0]
 80058c2:	1961      	adds	r1, r4, r5
 80058c4:	428b      	cmp	r3, r1
 80058c6:	bf01      	itttt	eq
 80058c8:	6819      	ldreq	r1, [r3, #0]
 80058ca:	685b      	ldreq	r3, [r3, #4]
 80058cc:	1949      	addeq	r1, r1, r5
 80058ce:	6021      	streq	r1, [r4, #0]
 80058d0:	e7ed      	b.n	80058ae <_free_r+0x22>
 80058d2:	461a      	mov	r2, r3
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b10b      	cbz	r3, 80058dc <_free_r+0x50>
 80058d8:	42a3      	cmp	r3, r4
 80058da:	d9fa      	bls.n	80058d2 <_free_r+0x46>
 80058dc:	6811      	ldr	r1, [r2, #0]
 80058de:	1855      	adds	r5, r2, r1
 80058e0:	42a5      	cmp	r5, r4
 80058e2:	d10b      	bne.n	80058fc <_free_r+0x70>
 80058e4:	6824      	ldr	r4, [r4, #0]
 80058e6:	4421      	add	r1, r4
 80058e8:	1854      	adds	r4, r2, r1
 80058ea:	42a3      	cmp	r3, r4
 80058ec:	6011      	str	r1, [r2, #0]
 80058ee:	d1e0      	bne.n	80058b2 <_free_r+0x26>
 80058f0:	681c      	ldr	r4, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	6053      	str	r3, [r2, #4]
 80058f6:	4421      	add	r1, r4
 80058f8:	6011      	str	r1, [r2, #0]
 80058fa:	e7da      	b.n	80058b2 <_free_r+0x26>
 80058fc:	d902      	bls.n	8005904 <_free_r+0x78>
 80058fe:	230c      	movs	r3, #12
 8005900:	6003      	str	r3, [r0, #0]
 8005902:	e7d6      	b.n	80058b2 <_free_r+0x26>
 8005904:	6825      	ldr	r5, [r4, #0]
 8005906:	1961      	adds	r1, r4, r5
 8005908:	428b      	cmp	r3, r1
 800590a:	bf04      	itt	eq
 800590c:	6819      	ldreq	r1, [r3, #0]
 800590e:	685b      	ldreq	r3, [r3, #4]
 8005910:	6063      	str	r3, [r4, #4]
 8005912:	bf04      	itt	eq
 8005914:	1949      	addeq	r1, r1, r5
 8005916:	6021      	streq	r1, [r4, #0]
 8005918:	6054      	str	r4, [r2, #4]
 800591a:	e7ca      	b.n	80058b2 <_free_r+0x26>
 800591c:	b003      	add	sp, #12
 800591e:	bd30      	pop	{r4, r5, pc}
 8005920:	20000780 	.word	0x20000780

08005924 <sbrk_aligned>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4e0e      	ldr	r6, [pc, #56]	; (8005960 <sbrk_aligned+0x3c>)
 8005928:	460c      	mov	r4, r1
 800592a:	6831      	ldr	r1, [r6, #0]
 800592c:	4605      	mov	r5, r0
 800592e:	b911      	cbnz	r1, 8005936 <sbrk_aligned+0x12>
 8005930:	f000 fb7a 	bl	8006028 <_sbrk_r>
 8005934:	6030      	str	r0, [r6, #0]
 8005936:	4621      	mov	r1, r4
 8005938:	4628      	mov	r0, r5
 800593a:	f000 fb75 	bl	8006028 <_sbrk_r>
 800593e:	1c43      	adds	r3, r0, #1
 8005940:	d00a      	beq.n	8005958 <sbrk_aligned+0x34>
 8005942:	1cc4      	adds	r4, r0, #3
 8005944:	f024 0403 	bic.w	r4, r4, #3
 8005948:	42a0      	cmp	r0, r4
 800594a:	d007      	beq.n	800595c <sbrk_aligned+0x38>
 800594c:	1a21      	subs	r1, r4, r0
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fb6a 	bl	8006028 <_sbrk_r>
 8005954:	3001      	adds	r0, #1
 8005956:	d101      	bne.n	800595c <sbrk_aligned+0x38>
 8005958:	f04f 34ff 	mov.w	r4, #4294967295
 800595c:	4620      	mov	r0, r4
 800595e:	bd70      	pop	{r4, r5, r6, pc}
 8005960:	20000784 	.word	0x20000784

08005964 <_malloc_r>:
 8005964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005968:	1ccd      	adds	r5, r1, #3
 800596a:	f025 0503 	bic.w	r5, r5, #3
 800596e:	3508      	adds	r5, #8
 8005970:	2d0c      	cmp	r5, #12
 8005972:	bf38      	it	cc
 8005974:	250c      	movcc	r5, #12
 8005976:	2d00      	cmp	r5, #0
 8005978:	4607      	mov	r7, r0
 800597a:	db01      	blt.n	8005980 <_malloc_r+0x1c>
 800597c:	42a9      	cmp	r1, r5
 800597e:	d905      	bls.n	800598c <_malloc_r+0x28>
 8005980:	230c      	movs	r3, #12
 8005982:	603b      	str	r3, [r7, #0]
 8005984:	2600      	movs	r6, #0
 8005986:	4630      	mov	r0, r6
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	4e2e      	ldr	r6, [pc, #184]	; (8005a48 <_malloc_r+0xe4>)
 800598e:	f000 fbf5 	bl	800617c <__malloc_lock>
 8005992:	6833      	ldr	r3, [r6, #0]
 8005994:	461c      	mov	r4, r3
 8005996:	bb34      	cbnz	r4, 80059e6 <_malloc_r+0x82>
 8005998:	4629      	mov	r1, r5
 800599a:	4638      	mov	r0, r7
 800599c:	f7ff ffc2 	bl	8005924 <sbrk_aligned>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	4604      	mov	r4, r0
 80059a4:	d14d      	bne.n	8005a42 <_malloc_r+0xde>
 80059a6:	6834      	ldr	r4, [r6, #0]
 80059a8:	4626      	mov	r6, r4
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	d140      	bne.n	8005a30 <_malloc_r+0xcc>
 80059ae:	6823      	ldr	r3, [r4, #0]
 80059b0:	4631      	mov	r1, r6
 80059b2:	4638      	mov	r0, r7
 80059b4:	eb04 0803 	add.w	r8, r4, r3
 80059b8:	f000 fb36 	bl	8006028 <_sbrk_r>
 80059bc:	4580      	cmp	r8, r0
 80059be:	d13a      	bne.n	8005a36 <_malloc_r+0xd2>
 80059c0:	6821      	ldr	r1, [r4, #0]
 80059c2:	3503      	adds	r5, #3
 80059c4:	1a6d      	subs	r5, r5, r1
 80059c6:	f025 0503 	bic.w	r5, r5, #3
 80059ca:	3508      	adds	r5, #8
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	bf38      	it	cc
 80059d0:	250c      	movcc	r5, #12
 80059d2:	4629      	mov	r1, r5
 80059d4:	4638      	mov	r0, r7
 80059d6:	f7ff ffa5 	bl	8005924 <sbrk_aligned>
 80059da:	3001      	adds	r0, #1
 80059dc:	d02b      	beq.n	8005a36 <_malloc_r+0xd2>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	442b      	add	r3, r5
 80059e2:	6023      	str	r3, [r4, #0]
 80059e4:	e00e      	b.n	8005a04 <_malloc_r+0xa0>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	1b52      	subs	r2, r2, r5
 80059ea:	d41e      	bmi.n	8005a2a <_malloc_r+0xc6>
 80059ec:	2a0b      	cmp	r2, #11
 80059ee:	d916      	bls.n	8005a1e <_malloc_r+0xba>
 80059f0:	1961      	adds	r1, r4, r5
 80059f2:	42a3      	cmp	r3, r4
 80059f4:	6025      	str	r5, [r4, #0]
 80059f6:	bf18      	it	ne
 80059f8:	6059      	strne	r1, [r3, #4]
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	bf08      	it	eq
 80059fe:	6031      	streq	r1, [r6, #0]
 8005a00:	5162      	str	r2, [r4, r5]
 8005a02:	604b      	str	r3, [r1, #4]
 8005a04:	4638      	mov	r0, r7
 8005a06:	f104 060b 	add.w	r6, r4, #11
 8005a0a:	f000 fbbd 	bl	8006188 <__malloc_unlock>
 8005a0e:	f026 0607 	bic.w	r6, r6, #7
 8005a12:	1d23      	adds	r3, r4, #4
 8005a14:	1af2      	subs	r2, r6, r3
 8005a16:	d0b6      	beq.n	8005986 <_malloc_r+0x22>
 8005a18:	1b9b      	subs	r3, r3, r6
 8005a1a:	50a3      	str	r3, [r4, r2]
 8005a1c:	e7b3      	b.n	8005986 <_malloc_r+0x22>
 8005a1e:	6862      	ldr	r2, [r4, #4]
 8005a20:	42a3      	cmp	r3, r4
 8005a22:	bf0c      	ite	eq
 8005a24:	6032      	streq	r2, [r6, #0]
 8005a26:	605a      	strne	r2, [r3, #4]
 8005a28:	e7ec      	b.n	8005a04 <_malloc_r+0xa0>
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	6864      	ldr	r4, [r4, #4]
 8005a2e:	e7b2      	b.n	8005996 <_malloc_r+0x32>
 8005a30:	4634      	mov	r4, r6
 8005a32:	6876      	ldr	r6, [r6, #4]
 8005a34:	e7b9      	b.n	80059aa <_malloc_r+0x46>
 8005a36:	230c      	movs	r3, #12
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	f000 fba4 	bl	8006188 <__malloc_unlock>
 8005a40:	e7a1      	b.n	8005986 <_malloc_r+0x22>
 8005a42:	6025      	str	r5, [r4, #0]
 8005a44:	e7de      	b.n	8005a04 <_malloc_r+0xa0>
 8005a46:	bf00      	nop
 8005a48:	20000780 	.word	0x20000780

08005a4c <__sfputc_r>:
 8005a4c:	6893      	ldr	r3, [r2, #8]
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	b410      	push	{r4}
 8005a54:	6093      	str	r3, [r2, #8]
 8005a56:	da08      	bge.n	8005a6a <__sfputc_r+0x1e>
 8005a58:	6994      	ldr	r4, [r2, #24]
 8005a5a:	42a3      	cmp	r3, r4
 8005a5c:	db01      	blt.n	8005a62 <__sfputc_r+0x16>
 8005a5e:	290a      	cmp	r1, #10
 8005a60:	d103      	bne.n	8005a6a <__sfputc_r+0x1e>
 8005a62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a66:	f7ff bc31 	b.w	80052cc <__swbuf_r>
 8005a6a:	6813      	ldr	r3, [r2, #0]
 8005a6c:	1c58      	adds	r0, r3, #1
 8005a6e:	6010      	str	r0, [r2, #0]
 8005a70:	7019      	strb	r1, [r3, #0]
 8005a72:	4608      	mov	r0, r1
 8005a74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <__sfputs_r>:
 8005a7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a7c:	4606      	mov	r6, r0
 8005a7e:	460f      	mov	r7, r1
 8005a80:	4614      	mov	r4, r2
 8005a82:	18d5      	adds	r5, r2, r3
 8005a84:	42ac      	cmp	r4, r5
 8005a86:	d101      	bne.n	8005a8c <__sfputs_r+0x12>
 8005a88:	2000      	movs	r0, #0
 8005a8a:	e007      	b.n	8005a9c <__sfputs_r+0x22>
 8005a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a90:	463a      	mov	r2, r7
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ffda 	bl	8005a4c <__sfputc_r>
 8005a98:	1c43      	adds	r3, r0, #1
 8005a9a:	d1f3      	bne.n	8005a84 <__sfputs_r+0xa>
 8005a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005aa0 <_vfiprintf_r>:
 8005aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa4:	460d      	mov	r5, r1
 8005aa6:	b09d      	sub	sp, #116	; 0x74
 8005aa8:	4614      	mov	r4, r2
 8005aaa:	4698      	mov	r8, r3
 8005aac:	4606      	mov	r6, r0
 8005aae:	b118      	cbz	r0, 8005ab8 <_vfiprintf_r+0x18>
 8005ab0:	6983      	ldr	r3, [r0, #24]
 8005ab2:	b90b      	cbnz	r3, 8005ab8 <_vfiprintf_r+0x18>
 8005ab4:	f7ff fde4 	bl	8005680 <__sinit>
 8005ab8:	4b89      	ldr	r3, [pc, #548]	; (8005ce0 <_vfiprintf_r+0x240>)
 8005aba:	429d      	cmp	r5, r3
 8005abc:	d11b      	bne.n	8005af6 <_vfiprintf_r+0x56>
 8005abe:	6875      	ldr	r5, [r6, #4]
 8005ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ac2:	07d9      	lsls	r1, r3, #31
 8005ac4:	d405      	bmi.n	8005ad2 <_vfiprintf_r+0x32>
 8005ac6:	89ab      	ldrh	r3, [r5, #12]
 8005ac8:	059a      	lsls	r2, r3, #22
 8005aca:	d402      	bmi.n	8005ad2 <_vfiprintf_r+0x32>
 8005acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ace:	f7ff fe75 	bl	80057bc <__retarget_lock_acquire_recursive>
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	071b      	lsls	r3, r3, #28
 8005ad6:	d501      	bpl.n	8005adc <_vfiprintf_r+0x3c>
 8005ad8:	692b      	ldr	r3, [r5, #16]
 8005ada:	b9eb      	cbnz	r3, 8005b18 <_vfiprintf_r+0x78>
 8005adc:	4629      	mov	r1, r5
 8005ade:	4630      	mov	r0, r6
 8005ae0:	f7ff fc46 	bl	8005370 <__swsetup_r>
 8005ae4:	b1c0      	cbz	r0, 8005b18 <_vfiprintf_r+0x78>
 8005ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ae8:	07dc      	lsls	r4, r3, #31
 8005aea:	d50e      	bpl.n	8005b0a <_vfiprintf_r+0x6a>
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295
 8005af0:	b01d      	add	sp, #116	; 0x74
 8005af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af6:	4b7b      	ldr	r3, [pc, #492]	; (8005ce4 <_vfiprintf_r+0x244>)
 8005af8:	429d      	cmp	r5, r3
 8005afa:	d101      	bne.n	8005b00 <_vfiprintf_r+0x60>
 8005afc:	68b5      	ldr	r5, [r6, #8]
 8005afe:	e7df      	b.n	8005ac0 <_vfiprintf_r+0x20>
 8005b00:	4b79      	ldr	r3, [pc, #484]	; (8005ce8 <_vfiprintf_r+0x248>)
 8005b02:	429d      	cmp	r5, r3
 8005b04:	bf08      	it	eq
 8005b06:	68f5      	ldreq	r5, [r6, #12]
 8005b08:	e7da      	b.n	8005ac0 <_vfiprintf_r+0x20>
 8005b0a:	89ab      	ldrh	r3, [r5, #12]
 8005b0c:	0598      	lsls	r0, r3, #22
 8005b0e:	d4ed      	bmi.n	8005aec <_vfiprintf_r+0x4c>
 8005b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b12:	f7ff fe54 	bl	80057be <__retarget_lock_release_recursive>
 8005b16:	e7e9      	b.n	8005aec <_vfiprintf_r+0x4c>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b1c:	2320      	movs	r3, #32
 8005b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b26:	2330      	movs	r3, #48	; 0x30
 8005b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005cec <_vfiprintf_r+0x24c>
 8005b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b30:	f04f 0901 	mov.w	r9, #1
 8005b34:	4623      	mov	r3, r4
 8005b36:	469a      	mov	sl, r3
 8005b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b3c:	b10a      	cbz	r2, 8005b42 <_vfiprintf_r+0xa2>
 8005b3e:	2a25      	cmp	r2, #37	; 0x25
 8005b40:	d1f9      	bne.n	8005b36 <_vfiprintf_r+0x96>
 8005b42:	ebba 0b04 	subs.w	fp, sl, r4
 8005b46:	d00b      	beq.n	8005b60 <_vfiprintf_r+0xc0>
 8005b48:	465b      	mov	r3, fp
 8005b4a:	4622      	mov	r2, r4
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7ff ff93 	bl	8005a7a <__sfputs_r>
 8005b54:	3001      	adds	r0, #1
 8005b56:	f000 80aa 	beq.w	8005cae <_vfiprintf_r+0x20e>
 8005b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b5c:	445a      	add	r2, fp
 8005b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8005b60:	f89a 3000 	ldrb.w	r3, [sl]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80a2 	beq.w	8005cae <_vfiprintf_r+0x20e>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b74:	f10a 0a01 	add.w	sl, sl, #1
 8005b78:	9304      	str	r3, [sp, #16]
 8005b7a:	9307      	str	r3, [sp, #28]
 8005b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b80:	931a      	str	r3, [sp, #104]	; 0x68
 8005b82:	4654      	mov	r4, sl
 8005b84:	2205      	movs	r2, #5
 8005b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b8a:	4858      	ldr	r0, [pc, #352]	; (8005cec <_vfiprintf_r+0x24c>)
 8005b8c:	f7fa fb28 	bl	80001e0 <memchr>
 8005b90:	9a04      	ldr	r2, [sp, #16]
 8005b92:	b9d8      	cbnz	r0, 8005bcc <_vfiprintf_r+0x12c>
 8005b94:	06d1      	lsls	r1, r2, #27
 8005b96:	bf44      	itt	mi
 8005b98:	2320      	movmi	r3, #32
 8005b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b9e:	0713      	lsls	r3, r2, #28
 8005ba0:	bf44      	itt	mi
 8005ba2:	232b      	movmi	r3, #43	; 0x2b
 8005ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8005bac:	2b2a      	cmp	r3, #42	; 0x2a
 8005bae:	d015      	beq.n	8005bdc <_vfiprintf_r+0x13c>
 8005bb0:	9a07      	ldr	r2, [sp, #28]
 8005bb2:	4654      	mov	r4, sl
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f04f 0c0a 	mov.w	ip, #10
 8005bba:	4621      	mov	r1, r4
 8005bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bc0:	3b30      	subs	r3, #48	; 0x30
 8005bc2:	2b09      	cmp	r3, #9
 8005bc4:	d94e      	bls.n	8005c64 <_vfiprintf_r+0x1c4>
 8005bc6:	b1b0      	cbz	r0, 8005bf6 <_vfiprintf_r+0x156>
 8005bc8:	9207      	str	r2, [sp, #28]
 8005bca:	e014      	b.n	8005bf6 <_vfiprintf_r+0x156>
 8005bcc:	eba0 0308 	sub.w	r3, r0, r8
 8005bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	9304      	str	r3, [sp, #16]
 8005bd8:	46a2      	mov	sl, r4
 8005bda:	e7d2      	b.n	8005b82 <_vfiprintf_r+0xe2>
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	1d19      	adds	r1, r3, #4
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	9103      	str	r1, [sp, #12]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bfbb      	ittet	lt
 8005be8:	425b      	neglt	r3, r3
 8005bea:	f042 0202 	orrlt.w	r2, r2, #2
 8005bee:	9307      	strge	r3, [sp, #28]
 8005bf0:	9307      	strlt	r3, [sp, #28]
 8005bf2:	bfb8      	it	lt
 8005bf4:	9204      	strlt	r2, [sp, #16]
 8005bf6:	7823      	ldrb	r3, [r4, #0]
 8005bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8005bfa:	d10c      	bne.n	8005c16 <_vfiprintf_r+0x176>
 8005bfc:	7863      	ldrb	r3, [r4, #1]
 8005bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8005c00:	d135      	bne.n	8005c6e <_vfiprintf_r+0x1ce>
 8005c02:	9b03      	ldr	r3, [sp, #12]
 8005c04:	1d1a      	adds	r2, r3, #4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	9203      	str	r2, [sp, #12]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bfb8      	it	lt
 8005c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c12:	3402      	adds	r4, #2
 8005c14:	9305      	str	r3, [sp, #20]
 8005c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005cfc <_vfiprintf_r+0x25c>
 8005c1a:	7821      	ldrb	r1, [r4, #0]
 8005c1c:	2203      	movs	r2, #3
 8005c1e:	4650      	mov	r0, sl
 8005c20:	f7fa fade 	bl	80001e0 <memchr>
 8005c24:	b140      	cbz	r0, 8005c38 <_vfiprintf_r+0x198>
 8005c26:	2340      	movs	r3, #64	; 0x40
 8005c28:	eba0 000a 	sub.w	r0, r0, sl
 8005c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c30:	9b04      	ldr	r3, [sp, #16]
 8005c32:	4303      	orrs	r3, r0
 8005c34:	3401      	adds	r4, #1
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c3c:	482c      	ldr	r0, [pc, #176]	; (8005cf0 <_vfiprintf_r+0x250>)
 8005c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c42:	2206      	movs	r2, #6
 8005c44:	f7fa facc 	bl	80001e0 <memchr>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	d03f      	beq.n	8005ccc <_vfiprintf_r+0x22c>
 8005c4c:	4b29      	ldr	r3, [pc, #164]	; (8005cf4 <_vfiprintf_r+0x254>)
 8005c4e:	bb1b      	cbnz	r3, 8005c98 <_vfiprintf_r+0x1f8>
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	3307      	adds	r3, #7
 8005c54:	f023 0307 	bic.w	r3, r3, #7
 8005c58:	3308      	adds	r3, #8
 8005c5a:	9303      	str	r3, [sp, #12]
 8005c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c5e:	443b      	add	r3, r7
 8005c60:	9309      	str	r3, [sp, #36]	; 0x24
 8005c62:	e767      	b.n	8005b34 <_vfiprintf_r+0x94>
 8005c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c68:	460c      	mov	r4, r1
 8005c6a:	2001      	movs	r0, #1
 8005c6c:	e7a5      	b.n	8005bba <_vfiprintf_r+0x11a>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	3401      	adds	r4, #1
 8005c72:	9305      	str	r3, [sp, #20]
 8005c74:	4619      	mov	r1, r3
 8005c76:	f04f 0c0a 	mov.w	ip, #10
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c80:	3a30      	subs	r2, #48	; 0x30
 8005c82:	2a09      	cmp	r2, #9
 8005c84:	d903      	bls.n	8005c8e <_vfiprintf_r+0x1ee>
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0c5      	beq.n	8005c16 <_vfiprintf_r+0x176>
 8005c8a:	9105      	str	r1, [sp, #20]
 8005c8c:	e7c3      	b.n	8005c16 <_vfiprintf_r+0x176>
 8005c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c92:	4604      	mov	r4, r0
 8005c94:	2301      	movs	r3, #1
 8005c96:	e7f0      	b.n	8005c7a <_vfiprintf_r+0x1da>
 8005c98:	ab03      	add	r3, sp, #12
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <_vfiprintf_r+0x258>)
 8005ca0:	a904      	add	r1, sp, #16
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f3af 8000 	nop.w
 8005ca8:	4607      	mov	r7, r0
 8005caa:	1c78      	adds	r0, r7, #1
 8005cac:	d1d6      	bne.n	8005c5c <_vfiprintf_r+0x1bc>
 8005cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cb0:	07d9      	lsls	r1, r3, #31
 8005cb2:	d405      	bmi.n	8005cc0 <_vfiprintf_r+0x220>
 8005cb4:	89ab      	ldrh	r3, [r5, #12]
 8005cb6:	059a      	lsls	r2, r3, #22
 8005cb8:	d402      	bmi.n	8005cc0 <_vfiprintf_r+0x220>
 8005cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cbc:	f7ff fd7f 	bl	80057be <__retarget_lock_release_recursive>
 8005cc0:	89ab      	ldrh	r3, [r5, #12]
 8005cc2:	065b      	lsls	r3, r3, #25
 8005cc4:	f53f af12 	bmi.w	8005aec <_vfiprintf_r+0x4c>
 8005cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cca:	e711      	b.n	8005af0 <_vfiprintf_r+0x50>
 8005ccc:	ab03      	add	r3, sp, #12
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	462a      	mov	r2, r5
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <_vfiprintf_r+0x258>)
 8005cd4:	a904      	add	r1, sp, #16
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	f000 f880 	bl	8005ddc <_printf_i>
 8005cdc:	e7e4      	b.n	8005ca8 <_vfiprintf_r+0x208>
 8005cde:	bf00      	nop
 8005ce0:	0800644c 	.word	0x0800644c
 8005ce4:	0800646c 	.word	0x0800646c
 8005ce8:	0800642c 	.word	0x0800642c
 8005cec:	0800648c 	.word	0x0800648c
 8005cf0:	08006496 	.word	0x08006496
 8005cf4:	00000000 	.word	0x00000000
 8005cf8:	08005a7b 	.word	0x08005a7b
 8005cfc:	08006492 	.word	0x08006492

08005d00 <_printf_common>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	4616      	mov	r6, r2
 8005d06:	4699      	mov	r9, r3
 8005d08:	688a      	ldr	r2, [r1, #8]
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	bfb8      	it	lt
 8005d14:	4613      	movlt	r3, r2
 8005d16:	6033      	str	r3, [r6, #0]
 8005d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d1c:	4607      	mov	r7, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	b10a      	cbz	r2, 8005d26 <_printf_common+0x26>
 8005d22:	3301      	adds	r3, #1
 8005d24:	6033      	str	r3, [r6, #0]
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0699      	lsls	r1, r3, #26
 8005d2a:	bf42      	ittt	mi
 8005d2c:	6833      	ldrmi	r3, [r6, #0]
 8005d2e:	3302      	addmi	r3, #2
 8005d30:	6033      	strmi	r3, [r6, #0]
 8005d32:	6825      	ldr	r5, [r4, #0]
 8005d34:	f015 0506 	ands.w	r5, r5, #6
 8005d38:	d106      	bne.n	8005d48 <_printf_common+0x48>
 8005d3a:	f104 0a19 	add.w	sl, r4, #25
 8005d3e:	68e3      	ldr	r3, [r4, #12]
 8005d40:	6832      	ldr	r2, [r6, #0]
 8005d42:	1a9b      	subs	r3, r3, r2
 8005d44:	42ab      	cmp	r3, r5
 8005d46:	dc26      	bgt.n	8005d96 <_printf_common+0x96>
 8005d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d4c:	1e13      	subs	r3, r2, #0
 8005d4e:	6822      	ldr	r2, [r4, #0]
 8005d50:	bf18      	it	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	0692      	lsls	r2, r2, #26
 8005d56:	d42b      	bmi.n	8005db0 <_printf_common+0xb0>
 8005d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c0      	blx	r8
 8005d62:	3001      	adds	r0, #1
 8005d64:	d01e      	beq.n	8005da4 <_printf_common+0xa4>
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	68e5      	ldr	r5, [r4, #12]
 8005d6a:	6832      	ldr	r2, [r6, #0]
 8005d6c:	f003 0306 	and.w	r3, r3, #6
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	bf08      	it	eq
 8005d74:	1aad      	subeq	r5, r5, r2
 8005d76:	68a3      	ldr	r3, [r4, #8]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	bf0c      	ite	eq
 8005d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d80:	2500      	movne	r5, #0
 8005d82:	4293      	cmp	r3, r2
 8005d84:	bfc4      	itt	gt
 8005d86:	1a9b      	subgt	r3, r3, r2
 8005d88:	18ed      	addgt	r5, r5, r3
 8005d8a:	2600      	movs	r6, #0
 8005d8c:	341a      	adds	r4, #26
 8005d8e:	42b5      	cmp	r5, r6
 8005d90:	d11a      	bne.n	8005dc8 <_printf_common+0xc8>
 8005d92:	2000      	movs	r0, #0
 8005d94:	e008      	b.n	8005da8 <_printf_common+0xa8>
 8005d96:	2301      	movs	r3, #1
 8005d98:	4652      	mov	r2, sl
 8005d9a:	4649      	mov	r1, r9
 8005d9c:	4638      	mov	r0, r7
 8005d9e:	47c0      	blx	r8
 8005da0:	3001      	adds	r0, #1
 8005da2:	d103      	bne.n	8005dac <_printf_common+0xac>
 8005da4:	f04f 30ff 	mov.w	r0, #4294967295
 8005da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dac:	3501      	adds	r5, #1
 8005dae:	e7c6      	b.n	8005d3e <_printf_common+0x3e>
 8005db0:	18e1      	adds	r1, r4, r3
 8005db2:	1c5a      	adds	r2, r3, #1
 8005db4:	2030      	movs	r0, #48	; 0x30
 8005db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dba:	4422      	add	r2, r4
 8005dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	e7c7      	b.n	8005d58 <_printf_common+0x58>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4622      	mov	r2, r4
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d0e6      	beq.n	8005da4 <_printf_common+0xa4>
 8005dd6:	3601      	adds	r6, #1
 8005dd8:	e7d9      	b.n	8005d8e <_printf_common+0x8e>
	...

08005ddc <_printf_i>:
 8005ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	7e0f      	ldrb	r7, [r1, #24]
 8005de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de4:	2f78      	cmp	r7, #120	; 0x78
 8005de6:	4691      	mov	r9, r2
 8005de8:	4680      	mov	r8, r0
 8005dea:	460c      	mov	r4, r1
 8005dec:	469a      	mov	sl, r3
 8005dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005df2:	d807      	bhi.n	8005e04 <_printf_i+0x28>
 8005df4:	2f62      	cmp	r7, #98	; 0x62
 8005df6:	d80a      	bhi.n	8005e0e <_printf_i+0x32>
 8005df8:	2f00      	cmp	r7, #0
 8005dfa:	f000 80d8 	beq.w	8005fae <_printf_i+0x1d2>
 8005dfe:	2f58      	cmp	r7, #88	; 0x58
 8005e00:	f000 80a3 	beq.w	8005f4a <_printf_i+0x16e>
 8005e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e0c:	e03a      	b.n	8005e84 <_printf_i+0xa8>
 8005e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e12:	2b15      	cmp	r3, #21
 8005e14:	d8f6      	bhi.n	8005e04 <_printf_i+0x28>
 8005e16:	a101      	add	r1, pc, #4	; (adr r1, 8005e1c <_printf_i+0x40>)
 8005e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e1c:	08005e75 	.word	0x08005e75
 8005e20:	08005e89 	.word	0x08005e89
 8005e24:	08005e05 	.word	0x08005e05
 8005e28:	08005e05 	.word	0x08005e05
 8005e2c:	08005e05 	.word	0x08005e05
 8005e30:	08005e05 	.word	0x08005e05
 8005e34:	08005e89 	.word	0x08005e89
 8005e38:	08005e05 	.word	0x08005e05
 8005e3c:	08005e05 	.word	0x08005e05
 8005e40:	08005e05 	.word	0x08005e05
 8005e44:	08005e05 	.word	0x08005e05
 8005e48:	08005f95 	.word	0x08005f95
 8005e4c:	08005eb9 	.word	0x08005eb9
 8005e50:	08005f77 	.word	0x08005f77
 8005e54:	08005e05 	.word	0x08005e05
 8005e58:	08005e05 	.word	0x08005e05
 8005e5c:	08005fb7 	.word	0x08005fb7
 8005e60:	08005e05 	.word	0x08005e05
 8005e64:	08005eb9 	.word	0x08005eb9
 8005e68:	08005e05 	.word	0x08005e05
 8005e6c:	08005e05 	.word	0x08005e05
 8005e70:	08005f7f 	.word	0x08005f7f
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	1d1a      	adds	r2, r3, #4
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	602a      	str	r2, [r5, #0]
 8005e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e84:	2301      	movs	r3, #1
 8005e86:	e0a3      	b.n	8005fd0 <_printf_i+0x1f4>
 8005e88:	6820      	ldr	r0, [r4, #0]
 8005e8a:	6829      	ldr	r1, [r5, #0]
 8005e8c:	0606      	lsls	r6, r0, #24
 8005e8e:	f101 0304 	add.w	r3, r1, #4
 8005e92:	d50a      	bpl.n	8005eaa <_printf_i+0xce>
 8005e94:	680e      	ldr	r6, [r1, #0]
 8005e96:	602b      	str	r3, [r5, #0]
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	da03      	bge.n	8005ea4 <_printf_i+0xc8>
 8005e9c:	232d      	movs	r3, #45	; 0x2d
 8005e9e:	4276      	negs	r6, r6
 8005ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ea4:	485e      	ldr	r0, [pc, #376]	; (8006020 <_printf_i+0x244>)
 8005ea6:	230a      	movs	r3, #10
 8005ea8:	e019      	b.n	8005ede <_printf_i+0x102>
 8005eaa:	680e      	ldr	r6, [r1, #0]
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005eb2:	bf18      	it	ne
 8005eb4:	b236      	sxthne	r6, r6
 8005eb6:	e7ef      	b.n	8005e98 <_printf_i+0xbc>
 8005eb8:	682b      	ldr	r3, [r5, #0]
 8005eba:	6820      	ldr	r0, [r4, #0]
 8005ebc:	1d19      	adds	r1, r3, #4
 8005ebe:	6029      	str	r1, [r5, #0]
 8005ec0:	0601      	lsls	r1, r0, #24
 8005ec2:	d501      	bpl.n	8005ec8 <_printf_i+0xec>
 8005ec4:	681e      	ldr	r6, [r3, #0]
 8005ec6:	e002      	b.n	8005ece <_printf_i+0xf2>
 8005ec8:	0646      	lsls	r6, r0, #25
 8005eca:	d5fb      	bpl.n	8005ec4 <_printf_i+0xe8>
 8005ecc:	881e      	ldrh	r6, [r3, #0]
 8005ece:	4854      	ldr	r0, [pc, #336]	; (8006020 <_printf_i+0x244>)
 8005ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8005ed2:	bf0c      	ite	eq
 8005ed4:	2308      	moveq	r3, #8
 8005ed6:	230a      	movne	r3, #10
 8005ed8:	2100      	movs	r1, #0
 8005eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ede:	6865      	ldr	r5, [r4, #4]
 8005ee0:	60a5      	str	r5, [r4, #8]
 8005ee2:	2d00      	cmp	r5, #0
 8005ee4:	bfa2      	ittt	ge
 8005ee6:	6821      	ldrge	r1, [r4, #0]
 8005ee8:	f021 0104 	bicge.w	r1, r1, #4
 8005eec:	6021      	strge	r1, [r4, #0]
 8005eee:	b90e      	cbnz	r6, 8005ef4 <_printf_i+0x118>
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	d04d      	beq.n	8005f90 <_printf_i+0x1b4>
 8005ef4:	4615      	mov	r5, r2
 8005ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005efa:	fb03 6711 	mls	r7, r3, r1, r6
 8005efe:	5dc7      	ldrb	r7, [r0, r7]
 8005f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f04:	4637      	mov	r7, r6
 8005f06:	42bb      	cmp	r3, r7
 8005f08:	460e      	mov	r6, r1
 8005f0a:	d9f4      	bls.n	8005ef6 <_printf_i+0x11a>
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d10b      	bne.n	8005f28 <_printf_i+0x14c>
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	07de      	lsls	r6, r3, #31
 8005f14:	d508      	bpl.n	8005f28 <_printf_i+0x14c>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	6861      	ldr	r1, [r4, #4]
 8005f1a:	4299      	cmp	r1, r3
 8005f1c:	bfde      	ittt	le
 8005f1e:	2330      	movle	r3, #48	; 0x30
 8005f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f28:	1b52      	subs	r2, r2, r5
 8005f2a:	6122      	str	r2, [r4, #16]
 8005f2c:	f8cd a000 	str.w	sl, [sp]
 8005f30:	464b      	mov	r3, r9
 8005f32:	aa03      	add	r2, sp, #12
 8005f34:	4621      	mov	r1, r4
 8005f36:	4640      	mov	r0, r8
 8005f38:	f7ff fee2 	bl	8005d00 <_printf_common>
 8005f3c:	3001      	adds	r0, #1
 8005f3e:	d14c      	bne.n	8005fda <_printf_i+0x1fe>
 8005f40:	f04f 30ff 	mov.w	r0, #4294967295
 8005f44:	b004      	add	sp, #16
 8005f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f4a:	4835      	ldr	r0, [pc, #212]	; (8006020 <_printf_i+0x244>)
 8005f4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f50:	6829      	ldr	r1, [r5, #0]
 8005f52:	6823      	ldr	r3, [r4, #0]
 8005f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f58:	6029      	str	r1, [r5, #0]
 8005f5a:	061d      	lsls	r5, r3, #24
 8005f5c:	d514      	bpl.n	8005f88 <_printf_i+0x1ac>
 8005f5e:	07df      	lsls	r7, r3, #31
 8005f60:	bf44      	itt	mi
 8005f62:	f043 0320 	orrmi.w	r3, r3, #32
 8005f66:	6023      	strmi	r3, [r4, #0]
 8005f68:	b91e      	cbnz	r6, 8005f72 <_printf_i+0x196>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	f023 0320 	bic.w	r3, r3, #32
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	2310      	movs	r3, #16
 8005f74:	e7b0      	b.n	8005ed8 <_printf_i+0xfc>
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	f043 0320 	orr.w	r3, r3, #32
 8005f7c:	6023      	str	r3, [r4, #0]
 8005f7e:	2378      	movs	r3, #120	; 0x78
 8005f80:	4828      	ldr	r0, [pc, #160]	; (8006024 <_printf_i+0x248>)
 8005f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f86:	e7e3      	b.n	8005f50 <_printf_i+0x174>
 8005f88:	0659      	lsls	r1, r3, #25
 8005f8a:	bf48      	it	mi
 8005f8c:	b2b6      	uxthmi	r6, r6
 8005f8e:	e7e6      	b.n	8005f5e <_printf_i+0x182>
 8005f90:	4615      	mov	r5, r2
 8005f92:	e7bb      	b.n	8005f0c <_printf_i+0x130>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	6826      	ldr	r6, [r4, #0]
 8005f98:	6961      	ldr	r1, [r4, #20]
 8005f9a:	1d18      	adds	r0, r3, #4
 8005f9c:	6028      	str	r0, [r5, #0]
 8005f9e:	0635      	lsls	r5, r6, #24
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0x1cc>
 8005fa4:	6019      	str	r1, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0x1d2>
 8005fa8:	0670      	lsls	r0, r6, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0x1c8>
 8005fac:	8019      	strh	r1, [r3, #0]
 8005fae:	2300      	movs	r3, #0
 8005fb0:	6123      	str	r3, [r4, #16]
 8005fb2:	4615      	mov	r5, r2
 8005fb4:	e7ba      	b.n	8005f2c <_printf_i+0x150>
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	602a      	str	r2, [r5, #0]
 8005fbc:	681d      	ldr	r5, [r3, #0]
 8005fbe:	6862      	ldr	r2, [r4, #4]
 8005fc0:	2100      	movs	r1, #0
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7fa f90c 	bl	80001e0 <memchr>
 8005fc8:	b108      	cbz	r0, 8005fce <_printf_i+0x1f2>
 8005fca:	1b40      	subs	r0, r0, r5
 8005fcc:	6060      	str	r0, [r4, #4]
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	6123      	str	r3, [r4, #16]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fd8:	e7a8      	b.n	8005f2c <_printf_i+0x150>
 8005fda:	6923      	ldr	r3, [r4, #16]
 8005fdc:	462a      	mov	r2, r5
 8005fde:	4649      	mov	r1, r9
 8005fe0:	4640      	mov	r0, r8
 8005fe2:	47d0      	blx	sl
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d0ab      	beq.n	8005f40 <_printf_i+0x164>
 8005fe8:	6823      	ldr	r3, [r4, #0]
 8005fea:	079b      	lsls	r3, r3, #30
 8005fec:	d413      	bmi.n	8006016 <_printf_i+0x23a>
 8005fee:	68e0      	ldr	r0, [r4, #12]
 8005ff0:	9b03      	ldr	r3, [sp, #12]
 8005ff2:	4298      	cmp	r0, r3
 8005ff4:	bfb8      	it	lt
 8005ff6:	4618      	movlt	r0, r3
 8005ff8:	e7a4      	b.n	8005f44 <_printf_i+0x168>
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	4632      	mov	r2, r6
 8005ffe:	4649      	mov	r1, r9
 8006000:	4640      	mov	r0, r8
 8006002:	47d0      	blx	sl
 8006004:	3001      	adds	r0, #1
 8006006:	d09b      	beq.n	8005f40 <_printf_i+0x164>
 8006008:	3501      	adds	r5, #1
 800600a:	68e3      	ldr	r3, [r4, #12]
 800600c:	9903      	ldr	r1, [sp, #12]
 800600e:	1a5b      	subs	r3, r3, r1
 8006010:	42ab      	cmp	r3, r5
 8006012:	dcf2      	bgt.n	8005ffa <_printf_i+0x21e>
 8006014:	e7eb      	b.n	8005fee <_printf_i+0x212>
 8006016:	2500      	movs	r5, #0
 8006018:	f104 0619 	add.w	r6, r4, #25
 800601c:	e7f5      	b.n	800600a <_printf_i+0x22e>
 800601e:	bf00      	nop
 8006020:	0800649d 	.word	0x0800649d
 8006024:	080064ae 	.word	0x080064ae

08006028 <_sbrk_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d06      	ldr	r5, [pc, #24]	; (8006044 <_sbrk_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fb fe0c 	bl	8001c50 <_sbrk>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_sbrk_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_sbrk_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000788 	.word	0x20000788

08006048 <__sread>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006050:	f000 f8a0 	bl	8006194 <_read_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	bfab      	itete	ge
 8006058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800605a:	89a3      	ldrhlt	r3, [r4, #12]
 800605c:	181b      	addge	r3, r3, r0
 800605e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006062:	bfac      	ite	ge
 8006064:	6563      	strge	r3, [r4, #84]	; 0x54
 8006066:	81a3      	strhlt	r3, [r4, #12]
 8006068:	bd10      	pop	{r4, pc}

0800606a <__swrite>:
 800606a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800606e:	461f      	mov	r7, r3
 8006070:	898b      	ldrh	r3, [r1, #12]
 8006072:	05db      	lsls	r3, r3, #23
 8006074:	4605      	mov	r5, r0
 8006076:	460c      	mov	r4, r1
 8006078:	4616      	mov	r6, r2
 800607a:	d505      	bpl.n	8006088 <__swrite+0x1e>
 800607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006080:	2302      	movs	r3, #2
 8006082:	2200      	movs	r2, #0
 8006084:	f000 f868 	bl	8006158 <_lseek_r>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800608e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	4632      	mov	r2, r6
 8006096:	463b      	mov	r3, r7
 8006098:	4628      	mov	r0, r5
 800609a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800609e:	f000 b817 	b.w	80060d0 <_write_r>

080060a2 <__sseek>:
 80060a2:	b510      	push	{r4, lr}
 80060a4:	460c      	mov	r4, r1
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 f855 	bl	8006158 <_lseek_r>
 80060ae:	1c43      	adds	r3, r0, #1
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	bf15      	itete	ne
 80060b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80060b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060be:	81a3      	strheq	r3, [r4, #12]
 80060c0:	bf18      	it	ne
 80060c2:	81a3      	strhne	r3, [r4, #12]
 80060c4:	bd10      	pop	{r4, pc}

080060c6 <__sclose>:
 80060c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ca:	f000 b813 	b.w	80060f4 <_close_r>
	...

080060d0 <_write_r>:
 80060d0:	b538      	push	{r3, r4, r5, lr}
 80060d2:	4d07      	ldr	r5, [pc, #28]	; (80060f0 <_write_r+0x20>)
 80060d4:	4604      	mov	r4, r0
 80060d6:	4608      	mov	r0, r1
 80060d8:	4611      	mov	r1, r2
 80060da:	2200      	movs	r2, #0
 80060dc:	602a      	str	r2, [r5, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	f7fb fd65 	bl	8001bae <_write>
 80060e4:	1c43      	adds	r3, r0, #1
 80060e6:	d102      	bne.n	80060ee <_write_r+0x1e>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	b103      	cbz	r3, 80060ee <_write_r+0x1e>
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
 80060f0:	20000788 	.word	0x20000788

080060f4 <_close_r>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	4d06      	ldr	r5, [pc, #24]	; (8006110 <_close_r+0x1c>)
 80060f8:	2300      	movs	r3, #0
 80060fa:	4604      	mov	r4, r0
 80060fc:	4608      	mov	r0, r1
 80060fe:	602b      	str	r3, [r5, #0]
 8006100:	f7fb fd71 	bl	8001be6 <_close>
 8006104:	1c43      	adds	r3, r0, #1
 8006106:	d102      	bne.n	800610e <_close_r+0x1a>
 8006108:	682b      	ldr	r3, [r5, #0]
 800610a:	b103      	cbz	r3, 800610e <_close_r+0x1a>
 800610c:	6023      	str	r3, [r4, #0]
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20000788 	.word	0x20000788

08006114 <_fstat_r>:
 8006114:	b538      	push	{r3, r4, r5, lr}
 8006116:	4d07      	ldr	r5, [pc, #28]	; (8006134 <_fstat_r+0x20>)
 8006118:	2300      	movs	r3, #0
 800611a:	4604      	mov	r4, r0
 800611c:	4608      	mov	r0, r1
 800611e:	4611      	mov	r1, r2
 8006120:	602b      	str	r3, [r5, #0]
 8006122:	f7fb fd6c 	bl	8001bfe <_fstat>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d102      	bne.n	8006130 <_fstat_r+0x1c>
 800612a:	682b      	ldr	r3, [r5, #0]
 800612c:	b103      	cbz	r3, 8006130 <_fstat_r+0x1c>
 800612e:	6023      	str	r3, [r4, #0]
 8006130:	bd38      	pop	{r3, r4, r5, pc}
 8006132:	bf00      	nop
 8006134:	20000788 	.word	0x20000788

08006138 <_isatty_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d06      	ldr	r5, [pc, #24]	; (8006154 <_isatty_r+0x1c>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	602b      	str	r3, [r5, #0]
 8006144:	f7fb fd6b 	bl	8001c1e <_isatty>
 8006148:	1c43      	adds	r3, r0, #1
 800614a:	d102      	bne.n	8006152 <_isatty_r+0x1a>
 800614c:	682b      	ldr	r3, [r5, #0]
 800614e:	b103      	cbz	r3, 8006152 <_isatty_r+0x1a>
 8006150:	6023      	str	r3, [r4, #0]
 8006152:	bd38      	pop	{r3, r4, r5, pc}
 8006154:	20000788 	.word	0x20000788

08006158 <_lseek_r>:
 8006158:	b538      	push	{r3, r4, r5, lr}
 800615a:	4d07      	ldr	r5, [pc, #28]	; (8006178 <_lseek_r+0x20>)
 800615c:	4604      	mov	r4, r0
 800615e:	4608      	mov	r0, r1
 8006160:	4611      	mov	r1, r2
 8006162:	2200      	movs	r2, #0
 8006164:	602a      	str	r2, [r5, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	f7fb fd64 	bl	8001c34 <_lseek>
 800616c:	1c43      	adds	r3, r0, #1
 800616e:	d102      	bne.n	8006176 <_lseek_r+0x1e>
 8006170:	682b      	ldr	r3, [r5, #0]
 8006172:	b103      	cbz	r3, 8006176 <_lseek_r+0x1e>
 8006174:	6023      	str	r3, [r4, #0]
 8006176:	bd38      	pop	{r3, r4, r5, pc}
 8006178:	20000788 	.word	0x20000788

0800617c <__malloc_lock>:
 800617c:	4801      	ldr	r0, [pc, #4]	; (8006184 <__malloc_lock+0x8>)
 800617e:	f7ff bb1d 	b.w	80057bc <__retarget_lock_acquire_recursive>
 8006182:	bf00      	nop
 8006184:	2000077c 	.word	0x2000077c

08006188 <__malloc_unlock>:
 8006188:	4801      	ldr	r0, [pc, #4]	; (8006190 <__malloc_unlock+0x8>)
 800618a:	f7ff bb18 	b.w	80057be <__retarget_lock_release_recursive>
 800618e:	bf00      	nop
 8006190:	2000077c 	.word	0x2000077c

08006194 <_read_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	; (80061b4 <_read_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fb fce6 	bl	8001b74 <_read>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_read_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_read_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000788 	.word	0x20000788

080061b8 <_init>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	bf00      	nop
 80061bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061be:	bc08      	pop	{r3}
 80061c0:	469e      	mov	lr, r3
 80061c2:	4770      	bx	lr

080061c4 <_fini>:
 80061c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061c6:	bf00      	nop
 80061c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ca:	bc08      	pop	{r3}
 80061cc:	469e      	mov	lr, r3
 80061ce:	4770      	bx	lr
