
05.STEPMOTOR_PTR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000892c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08008acc  08008acc  00018acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ddc  08008ddc  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008ddc  08008ddc  00018ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de4  08008de4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de4  08008de4  00018de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008dec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000828  20000080  08008e6c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a8  08008e6c  000208a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d74  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003487  00000000  00000000  00035e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  000392b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001210  00000000  00000000  0003a610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198bc  00000000  00000000  0003b820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000186a8  00000000  00000000  000550dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000986f0  00000000  00000000  0006d784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00105e74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b9c  00000000  00000000  00105ec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008ab4 	.word	0x08008ab4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08008ab4 	.word	0x08008ab4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <HAL_UART_RxCpltCallback>:
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <HAL_UART_RxCpltCallback+0xac>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d148      	bne.n	8000e12 <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 8000d80:	f000 f86c 	bl	8000e5c <is_full>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d13e      	bne.n	8000e08 <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <HAL_UART_RxCpltCallback+0xb0>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 8000d90:	7bfb      	ldrb	r3, [r7, #15]
 8000d92:	2b0a      	cmp	r3, #10
 8000d94:	d002      	beq.n	8000d9c <HAL_UART_RxCpltCallback+0x2c>
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	2b0d      	cmp	r3, #13
 8000d9a:	d123      	bne.n	8000de4 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <HAL_UART_RxCpltCallback+0xb4>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b21      	ldr	r3, [pc, #132]	; (8000e28 <HAL_UART_RxCpltCallback+0xb8>)
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	4821      	ldr	r0, [pc, #132]	; (8000e2c <HAL_UART_RxCpltCallback+0xbc>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4403      	add	r3, r0
 8000db0:	440b      	add	r3, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 8000db6:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <HAL_UART_RxCpltCallback+0xb8>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 8000dbc:	4b19      	ldr	r3, [pc, #100]	; (8000e24 <HAL_UART_RxCpltCallback+0xb4>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a18      	ldr	r2, [pc, #96]	; (8000e24 <HAL_UART_RxCpltCallback+0xb4>)
 8000dc4:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_UART_RxCpltCallback+0xb4>)
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_UART_RxCpltCallback+0xc0>)
 8000dcc:	fb83 1302 	smull	r1, r3, r3, r2
 8000dd0:	1119      	asrs	r1, r3, #4
 8000dd2:	17d3      	asrs	r3, r2, #31
 8000dd4:	1acb      	subs	r3, r1, r3
 8000dd6:	2132      	movs	r1, #50	; 0x32
 8000dd8:	fb01 f303 	mul.w	r3, r1, r3
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	4a11      	ldr	r2, [pc, #68]	; (8000e24 <HAL_UART_RxCpltCallback+0xb4>)
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e011      	b.n	8000e08 <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_UART_RxCpltCallback+0xb4>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_UART_RxCpltCallback+0xb8>)
 8000dea:	6819      	ldr	r1, [r3, #0]
 8000dec:	480f      	ldr	r0, [pc, #60]	; (8000e2c <HAL_UART_RxCpltCallback+0xbc>)
 8000dee:	4613      	mov	r3, r2
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	1a9b      	subs	r3, r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4403      	add	r3, r0
 8000df8:	440b      	add	r3, r1
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_UART_RxCpltCallback+0xb8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_UART_RxCpltCallback+0xb8>)
 8000e06:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		//rx interrupt를 뜨게 하기 위함
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4905      	ldr	r1, [pc, #20]	; (8000e20 <HAL_UART_RxCpltCallback+0xb0>)
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <HAL_UART_RxCpltCallback+0xac>)
 8000e0e:	f005 fbee 	bl	80065ee <HAL_UART_Receive_IT>

//	if (huart == &huart1)   // bluetooth
//	{
//
//	}
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000808 	.word	0x20000808
 8000e20:	20000680 	.word	0x20000680
 8000e24:	2000009c 	.word	0x2000009c
 8000e28:	20000684 	.word	0x20000684
 8000e2c:	200000a4 	.word	0x200000a4
 8000e30:	51eb851f 	.word	0x51eb851f

08000e34 <is_empty>:

int is_empty()		// 큐의 공백 상태를 알려주는 함수
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
	if (input_pointer == output_pointer)
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <is_empty+0x20>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <is_empty+0x24>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d101      	bne.n	8000e48 <is_empty+0x14>
		return 1;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <is_empty+0x16>
	else
		return 0;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	2000009c 	.word	0x2000009c
 8000e58:	200000a0 	.word	0x200000a0

08000e5c <is_full>:

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <is_full+0x40>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <is_full+0x44>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1111      	asrs	r1, r2, #4
 8000e70:	17da      	asrs	r2, r3, #31
 8000e72:	1a8a      	subs	r2, r1, r2
 8000e74:	2132      	movs	r1, #50	; 0x32
 8000e76:	fb01 f202 	mul.w	r2, r1, r2
 8000e7a:	1a9b      	subs	r3, r3, r2
 8000e7c:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <is_full+0x48>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d101      	bne.n	8000e8c <is_full+0x30>
		return 1;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <is_full+0x32>
	else
		return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	2000009c 	.word	0x2000009c
 8000ea0:	51eb851f 	.word	0x51eb851f
 8000ea4:	200000a0 	.word	0x200000a0

08000ea8 <pc_command_processing>:


int printon = 0;

void pc_command_processing()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
	if (is_empty())
 8000eae:	f7ff ffc1 	bl	8000e34 <is_empty>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f040 8146 	bne.w	8001146 <pc_command_processing+0x29e>
	{
		// printf("Queue is Empty");
	}
	else
	{
		if(printon)
 8000eba:	4ba5      	ldr	r3, [pc, #660]	; (8001150 <pc_command_processing+0x2a8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d010      	beq.n	8000ee4 <pc_command_processing+0x3c>
		{
			printf("output_pointer = %d\n", output_pointer);
 8000ec2:	4ba4      	ldr	r3, [pc, #656]	; (8001154 <pc_command_processing+0x2ac>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	48a3      	ldr	r0, [pc, #652]	; (8001158 <pc_command_processing+0x2b0>)
 8000eca:	f006 fb5f 	bl	800758c <iprintf>
			printf("%s\n", rx_buff[output_pointer]);
 8000ece:	4ba1      	ldr	r3, [pc, #644]	; (8001154 <pc_command_processing+0x2ac>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	4aa0      	ldr	r2, [pc, #640]	; (800115c <pc_command_processing+0x2b4>)
 8000edc:	4413      	add	r3, r2
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f006 fbda 	bl	8007698 <puts>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printon", strlen("printon")-1) == 0)
 8000ee4:	4b9b      	ldr	r3, [pc, #620]	; (8001154 <pc_command_processing+0x2ac>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4a9a      	ldr	r2, [pc, #616]	; (800115c <pc_command_processing+0x2b4>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	2206      	movs	r2, #6
 8000ef6:	499a      	ldr	r1, [pc, #616]	; (8001160 <pc_command_processing+0x2b8>)
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f006 fbf5 	bl	80076e8 <strncmp>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d108      	bne.n	8000f16 <pc_command_processing+0x6e>
		{
			printon = 1;
 8000f04:	4b92      	ldr	r3, [pc, #584]	; (8001150 <pc_command_processing+0x2a8>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 8000f0a:	4b91      	ldr	r3, [pc, #580]	; (8001150 <pc_command_processing+0x2a8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4894      	ldr	r0, [pc, #592]	; (8001164 <pc_command_processing+0x2bc>)
 8000f12:	f006 fb3b 	bl	800758c <iprintf>
		}
		 if(strncmp((const char *)rx_buff[output_pointer], "printoff", strlen("printoff")-1) == 0)
 8000f16:	4b8f      	ldr	r3, [pc, #572]	; (8001154 <pc_command_processing+0x2ac>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	011b      	lsls	r3, r3, #4
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	4a8e      	ldr	r2, [pc, #568]	; (800115c <pc_command_processing+0x2b4>)
 8000f24:	4413      	add	r3, r2
 8000f26:	2207      	movs	r2, #7
 8000f28:	498f      	ldr	r1, [pc, #572]	; (8001168 <pc_command_processing+0x2c0>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f006 fbdc 	bl	80076e8 <strncmp>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d108      	bne.n	8000f48 <pc_command_processing+0xa0>
		{
			printon = 0;
 8000f36:	4b86      	ldr	r3, [pc, #536]	; (8001150 <pc_command_processing+0x2a8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
			printf("printon : %d\n", printon);
 8000f3c:	4b84      	ldr	r3, [pc, #528]	; (8001150 <pc_command_processing+0x2a8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4619      	mov	r1, r3
 8000f42:	4888      	ldr	r0, [pc, #544]	; (8001164 <pc_command_processing+0x2bc>)
 8000f44:	f006 fb22 	bl	800758c <iprintf>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11time", strlen("dht11time")-1) == 0)
 8000f48:	4b82      	ldr	r3, [pc, #520]	; (8001154 <pc_command_processing+0x2ac>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	1a9b      	subs	r3, r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4a81      	ldr	r2, [pc, #516]	; (800115c <pc_command_processing+0x2b4>)
 8000f56:	4413      	add	r3, r2
 8000f58:	2208      	movs	r2, #8
 8000f5a:	4984      	ldr	r1, [pc, #528]	; (800116c <pc_command_processing+0x2c4>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f006 fbc3 	bl	80076e8 <strncmp>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d144      	bne.n	8000ff2 <pc_command_processing+0x14a>
		{
			int time_value;

			if(digit_chk((char *)&rx_buff[output_pointer][9], 4))
 8000f68:	4b7a      	ldr	r3, [pc, #488]	; (8001154 <pc_command_processing+0x2ac>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	1a9b      	subs	r3, r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	3309      	adds	r3, #9
 8000f76:	4a79      	ldr	r2, [pc, #484]	; (800115c <pc_command_processing+0x2b4>)
 8000f78:	4413      	add	r3, r2
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f91b 	bl	80011b8 <digit_chk>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d027      	beq.n	8000fd8 <pc_command_processing+0x130>
			{
 printf("@@@@%s\n", &rx_buff[output_pointer][9]);
 8000f88:	4b72      	ldr	r3, [pc, #456]	; (8001154 <pc_command_processing+0x2ac>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	1a9b      	subs	r3, r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	3309      	adds	r3, #9
 8000f96:	4a71      	ldr	r2, [pc, #452]	; (800115c <pc_command_processing+0x2b4>)
 8000f98:	4413      	add	r3, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4874      	ldr	r0, [pc, #464]	; (8001170 <pc_command_processing+0x2c8>)
 8000f9e:	f006 faf5 	bl	800758c <iprintf>

			time_value = atoi((char *)&rx_buff[output_pointer][9]); // atoi (ascii to integer)
 8000fa2:	4b6c      	ldr	r3, [pc, #432]	; (8001154 <pc_command_processing+0x2ac>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	011b      	lsls	r3, r3, #4
 8000faa:	1a9b      	subs	r3, r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	3309      	adds	r3, #9
 8000fb0:	4a6a      	ldr	r2, [pc, #424]	; (800115c <pc_command_processing+0x2b4>)
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fab3 	bl	8007520 <atoi>
 8000fba:	6078      	str	r0, [r7, #4]

			dht11time = time_value / 10;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a6d      	ldr	r2, [pc, #436]	; (8001174 <pc_command_processing+0x2cc>)
 8000fc0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fc4:	1092      	asrs	r2, r2, #2
 8000fc6:	17db      	asrs	r3, r3, #31
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	4a6b      	ldr	r2, [pc, #428]	; (8001178 <pc_command_processing+0x2d0>)
 8000fcc:	6013      	str	r3, [r2, #0]
 printf("%dms\n", time_value);
 8000fce:	6879      	ldr	r1, [r7, #4]
 8000fd0:	486a      	ldr	r0, [pc, #424]	; (800117c <pc_command_processing+0x2d4>)
 8000fd2:	f006 fadb 	bl	800758c <iprintf>
 8000fd6:	e00c      	b.n	8000ff2 <pc_command_processing+0x14a>
			}
			else
			{
				printf("invald number: %s\n", &rx_buff[output_pointer][9]);
 8000fd8:	4b5e      	ldr	r3, [pc, #376]	; (8001154 <pc_command_processing+0x2ac>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	1a9b      	subs	r3, r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	3309      	adds	r3, #9
 8000fe6:	4a5d      	ldr	r2, [pc, #372]	; (800115c <pc_command_processing+0x2b4>)
 8000fe8:	4413      	add	r3, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	4864      	ldr	r0, [pc, #400]	; (8001180 <pc_command_processing+0x2d8>)
 8000fee:	f006 facd 	bl	800758c <iprintf>
			}
		}

		if(strncmp((const char *)rx_buff[output_pointer], "dht11on", strlen("dht11on")-1) == 0)
 8000ff2:	4b58      	ldr	r3, [pc, #352]	; (8001154 <pc_command_processing+0x2ac>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	1a9b      	subs	r3, r3, r2
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	4a57      	ldr	r2, [pc, #348]	; (800115c <pc_command_processing+0x2b4>)
 8001000:	4413      	add	r3, r2
 8001002:	2206      	movs	r2, #6
 8001004:	495f      	ldr	r1, [pc, #380]	; (8001184 <pc_command_processing+0x2dc>)
 8001006:	4618      	mov	r0, r3
 8001008:	f006 fb6e 	bl	80076e8 <strncmp>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d105      	bne.n	800101e <pc_command_processing+0x176>
		{
			dht11on = 1;
 8001012:	4b5d      	ldr	r3, [pc, #372]	; (8001188 <pc_command_processing+0x2e0>)
 8001014:	2201      	movs	r2, #1
 8001016:	601a      	str	r2, [r3, #0]
			printf("dht11_ON\n");
 8001018:	485c      	ldr	r0, [pc, #368]	; (800118c <pc_command_processing+0x2e4>)
 800101a:	f006 fb3d 	bl	8007698 <puts>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "dht11off", strlen("dht11off")-1) == 0)
 800101e:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <pc_command_processing+0x2ac>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4613      	mov	r3, r2
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4a4c      	ldr	r2, [pc, #304]	; (800115c <pc_command_processing+0x2b4>)
 800102c:	4413      	add	r3, r2
 800102e:	2207      	movs	r2, #7
 8001030:	4957      	ldr	r1, [pc, #348]	; (8001190 <pc_command_processing+0x2e8>)
 8001032:	4618      	mov	r0, r3
 8001034:	f006 fb58 	bl	80076e8 <strncmp>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <pc_command_processing+0x1a2>
		{
			dht11on = 0;
 800103e:	4b52      	ldr	r3, [pc, #328]	; (8001188 <pc_command_processing+0x2e0>)
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
			printf("dht11_OFF\n");
 8001044:	4853      	ldr	r0, [pc, #332]	; (8001194 <pc_command_processing+0x2ec>)
 8001046:	f006 fb27 	bl	8007698 <puts>
		}


		if(strncmp((const char *)rx_buff[output_pointer], "led_all_on", strlen("led_all_on")-1) == 0)
 800104a:	4b42      	ldr	r3, [pc, #264]	; (8001154 <pc_command_processing+0x2ac>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4613      	mov	r3, r2
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4a41      	ldr	r2, [pc, #260]	; (800115c <pc_command_processing+0x2b4>)
 8001058:	4413      	add	r3, r2
 800105a:	2209      	movs	r2, #9
 800105c:	494e      	ldr	r1, [pc, #312]	; (8001198 <pc_command_processing+0x2f0>)
 800105e:	4618      	mov	r0, r3
 8001060:	f006 fb42 	bl	80076e8 <strncmp>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <pc_command_processing+0x1c6>
		{
			 led_all_on();
 800106a:	f000 fb29 	bl	80016c0 <led_all_on>
		}
		if(strncmp((const char *)rx_buff[output_pointer], "led_all_off", strlen("led_all_off")-1) == 0)
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <pc_command_processing+0x2ac>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4613      	mov	r3, r2
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	1a9b      	subs	r3, r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4a38      	ldr	r2, [pc, #224]	; (800115c <pc_command_processing+0x2b4>)
 800107c:	4413      	add	r3, r2
 800107e:	220a      	movs	r2, #10
 8001080:	4946      	ldr	r1, [pc, #280]	; (800119c <pc_command_processing+0x2f4>)
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fb30 	bl	80076e8 <strncmp>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d101      	bne.n	8001092 <pc_command_processing+0x1ea>
		{
			led_all_off();
 800108e:	f000 fb23 	bl	80016d8 <led_all_off>
		}

		 if(strncmp((const char *)rx_buff[output_pointer], "dht11status", strlen("dht11status")-1) == 0)
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <pc_command_processing+0x2ac>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	4613      	mov	r3, r2
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4a2f      	ldr	r2, [pc, #188]	; (800115c <pc_command_processing+0x2b4>)
 80010a0:	4413      	add	r3, r2
 80010a2:	220a      	movs	r2, #10
 80010a4:	493e      	ldr	r1, [pc, #248]	; (80011a0 <pc_command_processing+0x2f8>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f006 fb1e 	bl	80076e8 <strncmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d11e      	bne.n	80010f0 <pc_command_processing+0x248>
		{
			if(dht11on == 0)
 80010b2:	4b35      	ldr	r3, [pc, #212]	; (8001188 <pc_command_processing+0x2e0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d10d      	bne.n	80010d6 <pc_command_processing+0x22e>
			{
				printf("dht11 : off\n");
 80010ba:	483a      	ldr	r0, [pc, #232]	; (80011a4 <pc_command_processing+0x2fc>)
 80010bc:	f006 faec 	bl	8007698 <puts>
				printf("dht11time : %dms\n", dht11time*10);
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <pc_command_processing+0x2d0>)
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	4836      	ldr	r0, [pc, #216]	; (80011a8 <pc_command_processing+0x300>)
 80010d0:	f006 fa5c 	bl	800758c <iprintf>
 80010d4:	e00c      	b.n	80010f0 <pc_command_processing+0x248>
			}
			else
			{
				printf("dht11 : on\n");
 80010d6:	4835      	ldr	r0, [pc, #212]	; (80011ac <pc_command_processing+0x304>)
 80010d8:	f006 fade 	bl	8007698 <puts>
				printf("dht11time : %dms\n", dht11time*10);
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <pc_command_processing+0x2d0>)
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	482f      	ldr	r0, [pc, #188]	; (80011a8 <pc_command_processing+0x300>)
 80010ec:	f006 fa4e 	bl	800758c <iprintf>
			}
		}
		 // setrtc220830111500
	    if(strncmp((const char *)rx_buff[output_pointer], "setrtc", strlen("setrtc")-1) == 0)
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <pc_command_processing+0x2ac>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <pc_command_processing+0x2b4>)
 80010fe:	4413      	add	r3, r2
 8001100:	2205      	movs	r2, #5
 8001102:	492b      	ldr	r1, [pc, #172]	; (80011b0 <pc_command_processing+0x308>)
 8001104:	4618      	mov	r0, r3
 8001106:	f006 faef 	bl	80076e8 <strncmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10b      	bne.n	8001128 <pc_command_processing+0x280>
		{
	    	// 앞단에 Filter 기능을 추가할 것
	    	set_rtc_date_time(&rx_buff[output_pointer][6]);	// 220830111500이것이 들어있는 주소 값이 넘어감
 8001110:	4b10      	ldr	r3, [pc, #64]	; (8001154 <pc_command_processing+0x2ac>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4613      	mov	r3, r2
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	3306      	adds	r3, #6
 800111e:	4a0f      	ldr	r2, [pc, #60]	; (800115c <pc_command_processing+0x2b4>)
 8001120:	4413      	add	r3, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f000 fa2e 	bl	8001584 <set_rtc_date_time>
		}

		output_pointer = (output_pointer + 1) % COMMAND_MAX;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <pc_command_processing+0x2ac>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <pc_command_processing+0x30c>)
 8001130:	fb83 1302 	smull	r1, r3, r3, r2
 8001134:	1119      	asrs	r1, r3, #4
 8001136:	17d3      	asrs	r3, r2, #31
 8001138:	1acb      	subs	r3, r1, r3
 800113a:	2132      	movs	r1, #50	; 0x32
 800113c:	fb01 f303 	mul.w	r3, r1, r3
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	4a04      	ldr	r2, [pc, #16]	; (8001154 <pc_command_processing+0x2ac>)
 8001144:	6013      	str	r3, [r2, #0]
	}
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000688 	.word	0x20000688
 8001154:	200000a0 	.word	0x200000a0
 8001158:	08008acc 	.word	0x08008acc
 800115c:	200000a4 	.word	0x200000a4
 8001160:	08008ae4 	.word	0x08008ae4
 8001164:	08008aec 	.word	0x08008aec
 8001168:	08008afc 	.word	0x08008afc
 800116c:	08008b08 	.word	0x08008b08
 8001170:	08008b14 	.word	0x08008b14
 8001174:	66666667 	.word	0x66666667
 8001178:	20000004 	.word	0x20000004
 800117c:	08008b1c 	.word	0x08008b1c
 8001180:	08008b24 	.word	0x08008b24
 8001184:	08008b38 	.word	0x08008b38
 8001188:	20000000 	.word	0x20000000
 800118c:	08008b40 	.word	0x08008b40
 8001190:	08008b4c 	.word	0x08008b4c
 8001194:	08008b58 	.word	0x08008b58
 8001198:	08008b64 	.word	0x08008b64
 800119c:	08008b70 	.word	0x08008b70
 80011a0:	08008b7c 	.word	0x08008b7c
 80011a4:	08008b88 	.word	0x08008b88
 80011a8:	08008b94 	.word	0x08008b94
 80011ac:	08008ba8 	.word	0x08008ba8
 80011b0:	08008bb4 	.word	0x08008bb4
 80011b4:	51eb851f 	.word	0x51eb851f

080011b8 <digit_chk>:

// True : 1
// False : 0
int digit_chk(char *d, int len)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e010      	b.n	80011ea <digit_chk+0x32>
	{
		if(d[i] >= '0' && d[i] <= '9')
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b2f      	cmp	r3, #47	; 0x2f
 80011d2:	d905      	bls.n	80011e0 <digit_chk+0x28>
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b39      	cmp	r3, #57	; 0x39
 80011de:	d901      	bls.n	80011e4 <digit_chk+0x2c>
		{
			;
		}
		else
		{
			return 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e007      	b.n	80011f4 <digit_chk+0x3c>
	for(int i = 0; i < len; i++)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3301      	adds	r3, #1
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dbea      	blt.n	80011c8 <digit_chk+0x10>
		}

	}
	return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <get_button>:
uint8_t prev_button3_state=BUTTON_RELEASE;
uint8_t prev_button4_state=BUTTON_RELEASE;

// 1. GPIO 2. GPIO PIN 3. 이전의 버튼
int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *prev_button_state)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	460b      	mov	r3, r1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	817b      	strh	r3, [r7, #10]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800120e:	897b      	ldrh	r3, [r7, #10]
 8001210:	4619      	mov	r1, r3
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f002 f876 	bl	8003304 <HAL_GPIO_ReadPin>
 8001218:	4603      	mov	r3, r0
 800121a:	75fb      	strb	r3, [r7, #23]

	if ((current_state == BUTTON_PRESS) && (*prev_button_state == BUTTON_RELEASE))  // 처음 누른상태
 800121c:	7dfb      	ldrb	r3, [r7, #23]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10b      	bne.n	800123a <get_button+0x3a>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d107      	bne.n	800123a <get_button+0x3a>
	{
		*prev_button_state = current_state;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	7dfa      	ldrb	r2, [r7, #23]
 800122e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(30);   // noise가 지나가기를 기다린다.
 8001230:	201e      	movs	r0, #30
 8001232:	f001 fd1b 	bl	8002c6c <HAL_Delay>
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 8001236:	2301      	movs	r3, #1
 8001238:	e00c      	b.n	8001254 <get_button+0x54>
	}
	else if ((current_state == BUTTON_RELEASE) && (*prev_button_state == BUTTON_PRESS))
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <get_button+0x52>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d104      	bne.n	8001252 <get_button+0x52>
	{
		*prev_button_state = current_state;   // 릴리즈 상태
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7dfa      	ldrb	r2, [r7, #23]
 800124c:	701a      	strb	r2, [r3, #0]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <get_button+0x54>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <lcd_command>:




void lcd_command(uint8_t command)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af02      	add	r7, sp, #8
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f023 030f 	bic.w	r3, r3, #15
 800126c:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	f043 030c 	orr.w	r3, r3, #12
 800127a:	b2db      	uxtb	r3, r3
 800127c:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	f043 0308 	orr.w	r3, r3, #8
 8001284:	b2db      	uxtb	r3, r3
 8001286:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	f043 030c 	orr.w	r3, r3, #12
 800128e:	b2db      	uxtb	r3, r3
 8001290:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	b2db      	uxtb	r3, r3
 800129a:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 800129c:	bf00      	nop
 800129e:	f107 0208 	add.w	r2, r7, #8
 80012a2:	2364      	movs	r3, #100	; 0x64
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2304      	movs	r3, #4
 80012a8:	214e      	movs	r1, #78	; 0x4e
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <lcd_command+0x64>)
 80012ac:	f002 f9b8 	bl	8003620 <HAL_I2C_Master_Transmit>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f3      	bne.n	800129e <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 80012b6:	bf00      	nop
}
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200006bc 	.word	0x200006bc

080012c4 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	f023 030f 	bic.w	r3, r3, #15
 80012d4:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f043 030d 	orr.w	r3, r3, #13
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f043 0309 	orr.w	r3, r3, #9
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 80012f0:	7bbb      	ldrb	r3, [r7, #14]
 80012f2:	f043 030d 	orr.w	r3, r3, #13
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	f043 0309 	orr.w	r3, r3, #9
 8001300:	b2db      	uxtb	r3, r3
 8001302:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8001304:	bf00      	nop
 8001306:	f107 0208 	add.w	r2, r7, #8
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2304      	movs	r3, #4
 8001310:	214e      	movs	r1, #78	; 0x4e
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <lcd_data+0x64>)
 8001314:	f002 f984 	bl	8003620 <HAL_I2C_Master_Transmit>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f3      	bne.n	8001306 <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 800131e:	bf00      	nop
}
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200006bc 	.word	0x200006bc

0800132c <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8001330:	2033      	movs	r0, #51	; 0x33
 8001332:	f7ff ff93 	bl	800125c <lcd_command>
	lcd_command(0x32);
 8001336:	2032      	movs	r0, #50	; 0x32
 8001338:	f7ff ff90 	bl	800125c <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 800133c:	2028      	movs	r0, #40	; 0x28
 800133e:	f7ff ff8d 	bl	800125c <lcd_command>
	lcd_command(DISPLAY_ON);
 8001342:	200c      	movs	r0, #12
 8001344:	f7ff ff8a 	bl	800125c <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8001348:	2006      	movs	r0, #6
 800134a:	f7ff ff87 	bl	800125c <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff ff84 	bl	800125c <lcd_command>
	HAL_Delay(2);
 8001354:	2002      	movs	r0, #2
 8001356:	f001 fc89 	bl	8002c6c <HAL_Delay>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}

0800135e <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 8001366:	e006      	b.n	8001376 <lcd_string+0x18>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ffa7 	bl	80012c4 <lcd_data>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f4      	bne.n	8001368 <lcd_string+0xa>
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	71fb      	strb	r3, [r7, #7]
 8001394:	4613      	mov	r3, r2
 8001396:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	019b      	lsls	r3, r3, #6
 800139c:	b2da      	uxtb	r2, r3
 800139e:	79bb      	ldrb	r3, [r7, #6]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff56 	bl	800125c <lcd_command>
	return;
 80013b0:	bf00      	nop
}
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <bin2dec>:
// high nibble, Low nibble
// 0010 0010
// 20 + 2
// ==> 22
uint8_t bin2dec(uint8_t byte)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	low = byte & 0x0f; // 하위 4비트만 취한다.
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 030f 	and.w	r3, r3, #15
 80013c8:	73fb      	strb	r3, [r7, #15]
	high = ((byte >> 4) & 0x0f) * 10; 		// 00100010 ----> 4bit shift 우측으로 ==> 00000010 * 10 ==> 22
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	0092      	lsls	r2, r2, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]

	return high + low;
 80013da:	7bba      	ldrb	r2, [r7, #14]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4413      	add	r3, r2
 80013e0:	b2db      	uxtb	r3, r3
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <dec2bin>:

// 10진수 --> BCD			22
uint8_t dec2bin(uint8_t byte)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
	uint8_t high, low;

	high = ((byte / 10) << 4);
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <dec2bin+0x44>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	b2db      	uxtb	r3, r3
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	73fb      	strb	r3, [r7, #15]
	//00000010 << 4 ==> 00100000
	low = byte % 10;
 800140a:	79fa      	ldrb	r2, [r7, #7]
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <dec2bin+0x44>)
 800140e:	fba3 1302 	umull	r1, r3, r3, r2
 8001412:	08d9      	lsrs	r1, r3, #3
 8001414:	460b      	mov	r3, r1
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	73bb      	strb	r3, [r7, #14]

	return high + low; // 0010 0010
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	4413      	add	r3, r2
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	cccccccd 	.word	0xcccccccd

08001438 <get_rtc_time>:

// RTC에서 날짜와 시각 정보를 가져오는 함수
void get_rtc_time(void)
{
 8001438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800143c:	b099      	sub	sp, #100	; 0x64
 800143e:	af04      	add	r7, sp, #16
	static RTC_TimeTypeDef oTime;	// 이전 시각 정보
	char lcd_buff_date[40];
	char lcd_buff_time[40];
	// 각 매개 변수에 call by ref 이기 때문에 주소 연산자를 앞에 붙임
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 8001440:	2201      	movs	r2, #1
 8001442:	4949      	ldr	r1, [pc, #292]	; (8001568 <get_rtc_time+0x130>)
 8001444:	4849      	ldr	r0, [pc, #292]	; (800156c <get_rtc_time+0x134>)
 8001446:	f003 fa8b 	bl	8004960 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 800144a:	2201      	movs	r2, #1
 800144c:	4948      	ldr	r1, [pc, #288]	; (8001570 <get_rtc_time+0x138>)
 800144e:	4847      	ldr	r0, [pc, #284]	; (800156c <get_rtc_time+0x134>)
 8001450:	f003 fb68 	bl	8004b24 <HAL_RTC_GetDate>

	if(oTime.Seconds != sTime.Seconds)
 8001454:	4b47      	ldr	r3, [pc, #284]	; (8001574 <get_rtc_time+0x13c>)
 8001456:	789a      	ldrb	r2, [r3, #2]
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <get_rtc_time+0x130>)
 800145a:	789b      	ldrb	r3, [r3, #2]
 800145c:	429a      	cmp	r2, r3
 800145e:	d07a      	beq.n	8001556 <get_rtc_time+0x11e>
	{
		// YY-MM-DD HH:mm:SS
		// 01234567890123456789
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 8001460:	4b43      	ldr	r3, [pc, #268]	; (8001570 <get_rtc_time+0x138>)
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ffa7 	bl	80013b8 <bin2dec>
 800146a:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800146c:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <get_rtc_time+0x138>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff9f 	bl	80013b8 <bin2dec>
 800147a:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800147c:	4698      	mov	r8, r3
				bin2dec(sDate.Year)+2000, bin2dec(sDate.Month), bin2dec(sDate.Date),
 800147e:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <get_rtc_time+0x138>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff98 	bl	80013b8 <bin2dec>
 8001488:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 800148a:	4699      	mov	r9, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <get_rtc_time+0x130>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff91 	bl	80013b8 <bin2dec>
 8001496:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8001498:	461d      	mov	r5, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <get_rtc_time+0x130>)
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff8a 	bl	80013b8 <bin2dec>
 80014a4:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80014a6:	461e      	mov	r6, r3
				bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <get_rtc_time+0x130>)
 80014aa:	789b      	ldrb	r3, [r3, #2]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff83 	bl	80013b8 <bin2dec>
 80014b2:	4603      	mov	r3, r0
		printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 80014b4:	9302      	str	r3, [sp, #8]
 80014b6:	9601      	str	r6, [sp, #4]
 80014b8:	9500      	str	r5, [sp, #0]
 80014ba:	464b      	mov	r3, r9
 80014bc:	4642      	mov	r2, r8
 80014be:	4621      	mov	r1, r4
 80014c0:	482d      	ldr	r0, [pc, #180]	; (8001578 <get_rtc_time+0x140>)
 80014c2:	f006 f863 	bl	800758c <iprintf>
		// text lcd의 1번 째 line에 출력

		sprintf(lcd_buff_date,"DATE %02d-%02d-%02d",bin2dec(sDate.Year), bin2dec(sDate.Month), bin2dec(sDate.Date));
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <get_rtc_time+0x138>)
 80014c8:	78db      	ldrb	r3, [r3, #3]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff74 	bl	80013b8 <bin2dec>
 80014d0:	4603      	mov	r3, r0
 80014d2:	461c      	mov	r4, r3
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <get_rtc_time+0x138>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff6d 	bl	80013b8 <bin2dec>
 80014de:	4603      	mov	r3, r0
 80014e0:	461d      	mov	r5, r3
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <get_rtc_time+0x138>)
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff66 	bl	80013b8 <bin2dec>
 80014ec:	4603      	mov	r3, r0
 80014ee:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	462b      	mov	r3, r5
 80014f6:	4622      	mov	r2, r4
 80014f8:	4920      	ldr	r1, [pc, #128]	; (800157c <get_rtc_time+0x144>)
 80014fa:	f006 f8d5 	bl	80076a8 <siprintf>
		sprintf(lcd_buff_time,"TIME %02d:%02d:%02d",bin2dec(sTime.Hours), bin2dec(sTime.Minutes), bin2dec(sTime.Seconds));
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <get_rtc_time+0x130>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff ff58 	bl	80013b8 <bin2dec>
 8001508:	4603      	mov	r3, r0
 800150a:	461c      	mov	r4, r3
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <get_rtc_time+0x130>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff51 	bl	80013b8 <bin2dec>
 8001516:	4603      	mov	r3, r0
 8001518:	461d      	mov	r5, r3
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <get_rtc_time+0x130>)
 800151c:	789b      	ldrb	r3, [r3, #2]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff4a 	bl	80013b8 <bin2dec>
 8001524:	4603      	mov	r3, r0
 8001526:	4638      	mov	r0, r7
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	462b      	mov	r3, r5
 800152c:	4622      	mov	r2, r4
 800152e:	4914      	ldr	r1, [pc, #80]	; (8001580 <get_rtc_time+0x148>)
 8001530:	f006 f8ba 	bl	80076a8 <siprintf>

		move_cursor(1,0);
 8001534:	2100      	movs	r1, #0
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff ff26 	bl	8001388 <move_cursor>
		lcd_string(lcd_buff_date);
 800153c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff0c 	bl	800135e <lcd_string>

		move_cursor(0,0);
 8001546:	2100      	movs	r1, #0
 8001548:	2000      	movs	r0, #0
 800154a:	f7ff ff1d 	bl	8001388 <move_cursor>
		lcd_string(lcd_buff_time);
 800154e:	463b      	mov	r3, r7
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff04 	bl	800135e <lcd_string>
	}
	oTime.Seconds = sTime.Seconds;
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <get_rtc_time+0x130>)
 8001558:	789a      	ldrb	r2, [r3, #2]
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <get_rtc_time+0x13c>)
 800155c:	709a      	strb	r2, [r3, #2]
}
 800155e:	bf00      	nop
 8001560:	3754      	adds	r7, #84	; 0x54
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001568:	2000068c 	.word	0x2000068c
 800156c:	20000710 	.word	0x20000710
 8001570:	200006a0 	.word	0x200006a0
 8001574:	200006a4 	.word	0x200006a4
 8001578:	08008bbc 	.word	0x08008bbc
 800157c:	08008bdc 	.word	0x08008bdc
 8001580:	08008bf0 	.word	0x08008bf0

08001584 <set_rtc_date_time>:
// setrtc220830111500
// 012345678901234567
// pc_command_processing에 입력 받음
// data time이라는 변수에는  220830111500의 주소가 넘어온다.
void set_rtc_date_time(char *date_time)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	char yy[4], mm[4], dd[4]; // 날짜 정보
	char hh[4], min[4], ss[4]; // 시각 정보

	strncpy(yy, date_time, 2);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2202      	movs	r2, #2
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f006 f8bb 	bl	8007710 <strncpy>
	strncpy(mm, date_time+2, 2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	1c99      	adds	r1, r3, #2
 800159e:	f107 0318 	add.w	r3, r7, #24
 80015a2:	2202      	movs	r2, #2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f006 f8b3 	bl	8007710 <strncpy>
	strncpy(dd, date_time+4, 2);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	1d19      	adds	r1, r3, #4
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	2202      	movs	r2, #2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f006 f8ab 	bl	8007710 <strncpy>

	strncpy(hh, date_time+6, 2);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	1d99      	adds	r1, r3, #6
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	2202      	movs	r2, #2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f006 f8a3 	bl	8007710 <strncpy>
	strncpy(min, date_time+8, 2);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f103 0108 	add.w	r1, r3, #8
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2202      	movs	r2, #2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f006 f89a 	bl	8007710 <strncpy>
	strncpy(ss, date_time+10, 2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f103 010a 	add.w	r1, r3, #10
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2202      	movs	r2, #2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f006 f891 	bl	8007710 <strncpy>

	// 1.ascii ==> int ==> bcd ==> rtc
	sDate.Year = dec2bin(atoi(yy));
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 ff94 	bl	8007520 <atoi>
 80015f8:	4603      	mov	r3, r0
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fef7 	bl	80013f0 <dec2bin>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <set_rtc_date_time+0x130>)
 8001608:	70da      	strb	r2, [r3, #3]
	sDate.Month = dec2bin(atoi(mm));
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	4618      	mov	r0, r3
 8001610:	f005 ff86 	bl	8007520 <atoi>
 8001614:	4603      	mov	r3, r0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fee9 	bl	80013f0 <dec2bin>
 800161e:	4603      	mov	r3, r0
 8001620:	461a      	mov	r2, r3
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <set_rtc_date_time+0x130>)
 8001624:	705a      	strb	r2, [r3, #1]
	sDate.Date = dec2bin(atoi(dd));
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4618      	mov	r0, r3
 800162c:	f005 ff78 	bl	8007520 <atoi>
 8001630:	4603      	mov	r3, r0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fedb 	bl	80013f0 <dec2bin>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <set_rtc_date_time+0x130>)
 8001640:	709a      	strb	r2, [r3, #2]

	sTime.Hours = dec2bin(atoi(hh));
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4618      	mov	r0, r3
 8001648:	f005 ff6a 	bl	8007520 <atoi>
 800164c:	4603      	mov	r3, r0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fecd 	bl	80013f0 <dec2bin>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <set_rtc_date_time+0x134>)
 800165c:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = dec2bin(atoi(min));
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4618      	mov	r0, r3
 8001664:	f005 ff5c 	bl	8007520 <atoi>
 8001668:	4603      	mov	r3, r0
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff febf 	bl	80013f0 <dec2bin>
 8001672:	4603      	mov	r3, r0
 8001674:	461a      	mov	r2, r3
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <set_rtc_date_time+0x134>)
 8001678:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = dec2bin(atoi(ss));
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	4618      	mov	r0, r3
 8001680:	f005 ff4e 	bl	8007520 <atoi>
 8001684:	4603      	mov	r3, r0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff feb1 	bl	80013f0 <dec2bin>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <set_rtc_date_time+0x134>)
 8001694:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD);
 8001696:	2201      	movs	r2, #1
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <set_rtc_date_time+0x130>)
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <set_rtc_date_time+0x138>)
 800169c:	f003 f9be 	bl	8004a1c <HAL_RTC_SetDate>
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD);
 80016a0:	2201      	movs	r2, #1
 80016a2:	4905      	ldr	r1, [pc, #20]	; (80016b8 <set_rtc_date_time+0x134>)
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <set_rtc_date_time+0x138>)
 80016a6:	f003 f8c1 	bl	800482c <HAL_RTC_SetTime>
}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200006a0 	.word	0x200006a0
 80016b8:	2000068c 	.word	0x2000068c
 80016bc:	20000710 	.word	0x20000710

080016c0 <led_all_on>:
		HAL_Delay(200);
	}
}

void led_all_on()
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	21ff      	movs	r1, #255	; 0xff
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <led_all_on+0x14>)
 80016ca:	f001 fe33 	bl	8003334 <HAL_GPIO_WritePin>
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40020400 	.word	0x40020400

080016d8 <led_all_off>:

void led_all_off()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	21ff      	movs	r1, #255	; 0xff
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <led_all_off+0x14>)
 80016e2:	f001 fe27 	bl	8003334 <HAL_GPIO_WritePin>
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40020400 	.word	0x40020400

080016f0 <led_re_shift>:
void led_re_shift()
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

		HAL_GPIO_WritePin(GPIOB, 0x80 >> led_shift, GPIO_PIN_SET);
 80016f4:	4b12      	ldr	r3, [pc, #72]	; (8001740 <led_re_shift+0x50>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	fa42 f303 	asr.w	r3, r2, r3
 80016fe:	b29b      	uxth	r3, r3
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	480f      	ldr	r0, [pc, #60]	; (8001744 <led_re_shift+0x54>)
 8001706:	f001 fe15 	bl	8003334 <HAL_GPIO_WritePin>
		if(led_timer == 500)
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <led_re_shift+0x58>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001712:	d113      	bne.n	800173c <led_re_shift+0x4c>
		{
			led_timer = 0;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <led_re_shift+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
			led_shift++;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <led_re_shift+0x50>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	4a07      	ldr	r2, [pc, #28]	; (8001740 <led_re_shift+0x50>)
 8001722:	6013      	str	r3, [r2, #0]

			HAL_GPIO_WritePin(GPIOB, 0xff , GPIO_PIN_RESET);
 8001724:	2200      	movs	r2, #0
 8001726:	21ff      	movs	r1, #255	; 0xff
 8001728:	4806      	ldr	r0, [pc, #24]	; (8001744 <led_re_shift+0x54>)
 800172a:	f001 fe03 	bl	8003334 <HAL_GPIO_WritePin>
			if(led_shift > 8)
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <led_re_shift+0x50>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2b08      	cmp	r3, #8
 8001734:	dd02      	ble.n	800173c <led_re_shift+0x4c>
			{
				led_shift = 0;
 8001736:	4b02      	ldr	r3, [pc, #8]	; (8001740 <led_re_shift+0x50>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
			}
		}



}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	200006b8 	.word	0x200006b8
 8001744:	40020400 	.word	0x40020400
 8001748:	20000854 	.word	0x20000854

0800174c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001754:	1d39      	adds	r1, r7, #4
 8001756:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175a:	2201      	movs	r2, #1
 800175c:	4803      	ldr	r0, [pc, #12]	; (800176c <__io_putchar+0x20>)
 800175e:	f004 feb4 	bl	80064ca <HAL_UART_Transmit>

  return ch;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000808 	.word	0x20000808

08001770 <HAL_SYSTICK_Callback>:
volatile int led_timer = 0;
// call by SysTick_Handler of stm32f4xx_it.c
// enter here every 1ms
// ARM default function
void HAL_SYSTICK_Callback()
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
	t1ms_count++;
 8001774:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_SYSTICK_Callback+0x2c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	3301      	adds	r3, #1
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_SYSTICK_Callback+0x2c>)
 800177c:	6013      	str	r3, [r2, #0]
	t2ms_count ++;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_SYSTICK_Callback+0x30>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <HAL_SYSTICK_Callback+0x30>)
 8001786:	6013      	str	r3, [r2, #0]
	led_timer++;
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_SYSTICK_Callback+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <HAL_SYSTICK_Callback+0x34>)
 8001790:	6013      	str	r3, [r2, #0]
}
 8001792:	bf00      	nop
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	2000084c 	.word	0x2000084c
 80017a0:	20000850 	.word	0x20000850
 80017a4:	20000854 	.word	0x20000854

080017a8 <HAL_TIM_PeriodElapsedCallback>:
volatile int TIM11_10ms_counter=0;
volatile int TIM11_10ms_ultrasonic_counter = 0;
volatile int TIM11_10ms_servomotor_counter = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM11)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d10e      	bne.n	80017d8 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM11_10ms_counter++;
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80017c2:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x44>)
 80017cc:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80017d6:	6013      	str	r3, [r2, #0]
	}
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40014800 	.word	0x40014800
 80017e8:	20000858 	.word	0x20000858
 80017ec:	2000085c 	.word	0x2000085c
 80017f0:	20000860 	.word	0x20000860

080017f4 <HAL_GPIO_EXTI_Callback>:
// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every GPIO_EXTI_Callback function : enter here every 10ms
volatile int exint_signal = 3;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin)
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d002      	beq.n	800180a <HAL_GPIO_EXTI_Callback+0x16>
 8001804:	2b02      	cmp	r3, #2
 8001806:	d00f      	beq.n	8001828 <HAL_GPIO_EXTI_Callback+0x34>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);

  		exint_signal = 1;
  	  break;
  }
}
 8001808:	e01d      	b.n	8001846 <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_0, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8001810:	480f      	ldr	r0, [pc, #60]	; (8001850 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001812:	f001 fd8f 	bl	8003334 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001816:	2201      	movs	r2, #1
 8001818:	2101      	movs	r1, #1
 800181a:	480d      	ldr	r0, [pc, #52]	; (8001850 <HAL_GPIO_EXTI_Callback+0x5c>)
 800181c:	f001 fd8a 	bl	8003334 <HAL_GPIO_WritePin>
  		exint_signal = 0;
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_GPIO_EXTI_Callback+0x60>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
  	  break;
 8001826:	e00e      	b.n	8001846 <HAL_GPIO_EXTI_Callback+0x52>
  		HAL_GPIO_WritePin(GPIOB, ~GPIO_PIN_1, GPIO_PIN_RESET);
 8001828:	2200      	movs	r2, #0
 800182a:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 800182e:	4808      	ldr	r0, [pc, #32]	; (8001850 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001830:	f001 fd80 	bl	8003334 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2102      	movs	r1, #2
 8001838:	4805      	ldr	r0, [pc, #20]	; (8001850 <HAL_GPIO_EXTI_Callback+0x5c>)
 800183a:	f001 fd7b 	bl	8003334 <HAL_GPIO_WritePin>
  		exint_signal = 1;
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_GPIO_EXTI_Callback+0x60>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]
  	  break;
 8001844:	bf00      	nop
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40020400 	.word	0x40020400
 8001854:	2000000c 	.word	0x2000000c

08001858 <delay_us>:
// count us timer pulse
// 0.000001sec ==> 1us
// 0.001sec ==> 1ms ==> 1000us
// 0.1sec ==> 100ms ==> 100000us
void delay_us(unsigned long us)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	//TCNT=0; ex) AVR
	__HAL_TIM_SET_COUNTER(&htim1, 0); // clear timer counter
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <delay_us+0x2c>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < us) // wait counter value until reach
 8001868:	bf00      	nop
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <delay_us+0x2c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	429a      	cmp	r2, r3
 8001874:	d8f9      	bhi.n	800186a <delay_us+0x12>
	;
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	20000730 	.word	0x20000730

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f001 f97c 	bl	8002b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f83a 	bl	8001908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f000 fa70 	bl	8001d78 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001898:	f000 fa44 	bl	8001d24 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 800189c:	f000 fa1e 	bl	8001cdc <MX_TIM11_Init>
  MX_TIM1_Init();
 80018a0:	f000 f932 	bl	8001b08 <MX_TIM1_Init>
  MX_RTC_Init();
 80018a4:	f000 f8d6 	bl	8001a54 <MX_RTC_Init>
  MX_I2C1_Init();
 80018a8:	f000 f8a6 	bl	80019f8 <MX_I2C1_Init>
  MX_TIM2_Init();
 80018ac:	f000 f9a0 	bl	8001bf0 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80018b0:	f000 f896 	bl	80019e0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11); // add_SHHAN_0826 for TIM11 every 10ms
 80018b4:	480e      	ldr	r0, [pc, #56]	; (80018f0 <main+0x68>)
 80018b6:	f003 fa91 	bl	8004ddc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // add_SHHAN_0826 for us_delay, ultrasonic
 80018ba:	2100      	movs	r1, #0
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <main+0x6c>)
 80018be:	f003 fca1 	bl	8005204 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);	// PC UART Enable rx_interrupt
 80018c2:	2201      	movs	r2, #1
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <main+0x70>)
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <main+0x74>)
 80018c8:	f004 fe91 	bl	80065ee <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);	// PWM Control for Servo motor
 80018cc:	2108      	movs	r1, #8
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <main+0x78>)
 80018d0:	f003 fb40 	bl	8004f54 <HAL_TIM_PWM_Start_IT>
  i2c_lcd_init();
 80018d4:	f7ff fd2a 	bl	800132c <i2c_lcd_init>
  printf("Hello STM32!!!\n");
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <main+0x7c>)
 80018da:	f005 fedd 	bl	8007698 <puts>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  pc_command_processing();
 80018de:	f7ff fae3 	bl	8000ea8 <pc_command_processing>
	  ultrasonic_processing();
 80018e2:	f001 f8dd 	bl	8002aa0 <ultrasonic_processing>
	  get_rtc_time();
 80018e6:	f7ff fda7 	bl	8001438 <get_rtc_time>
	  flow_button_move();
 80018ea:	f000 fbe3 	bl	80020b4 <flow_button_move>
  {
 80018ee:	e7f6      	b.n	80018de <main+0x56>
 80018f0:	200007c0 	.word	0x200007c0
 80018f4:	20000730 	.word	0x20000730
 80018f8:	20000680 	.word	0x20000680
 80018fc:	20000808 	.word	0x20000808
 8001900:	20000778 	.word	0x20000778
 8001904:	08008c04 	.word	0x08008c04

08001908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b094      	sub	sp, #80	; 0x50
 800190c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	2230      	movs	r2, #48	; 0x30
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f005 fe30 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	4b29      	ldr	r3, [pc, #164]	; (80019d8 <SystemClock_Config+0xd0>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <SystemClock_Config+0xd0>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193a:	6413      	str	r3, [r2, #64]	; 0x40
 800193c:	4b26      	ldr	r3, [pc, #152]	; (80019d8 <SystemClock_Config+0xd0>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001948:	2300      	movs	r3, #0
 800194a:	607b      	str	r3, [r7, #4]
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <SystemClock_Config+0xd4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a22      	ldr	r2, [pc, #136]	; (80019dc <SystemClock_Config+0xd4>)
 8001952:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b20      	ldr	r3, [pc, #128]	; (80019dc <SystemClock_Config+0xd4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001964:	230a      	movs	r3, #10
 8001966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001968:	2301      	movs	r3, #1
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800196c:	2310      	movs	r3, #16
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001970:	2301      	movs	r3, #1
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001974:	2302      	movs	r3, #2
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001978:	2300      	movs	r3, #0
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800197c:	2310      	movs	r3, #16
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001980:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001984:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001986:	2304      	movs	r3, #4
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800198a:	2304      	movs	r3, #4
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	4618      	mov	r0, r3
 8001994:	f002 f94c 	bl	8003c30 <HAL_RCC_OscConfig>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800199e:	f000 fa99 	bl	8001ed4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019a2:	230f      	movs	r3, #15
 80019a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a6:	2302      	movs	r3, #2
 80019a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b8:	f107 030c 	add.w	r3, r7, #12
 80019bc:	2102      	movs	r1, #2
 80019be:	4618      	mov	r0, r3
 80019c0:	f002 fbae 	bl	8004120 <HAL_RCC_ClockConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80019ca:	f000 fa83 	bl	8001ed4 <Error_Handler>
  }
}
 80019ce:	bf00      	nop
 80019d0:	3750      	adds	r7, #80	; 0x50
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000

080019e0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	201a      	movs	r0, #26
 80019ea:	f001 fa3e 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019ee:	201a      	movs	r0, #26
 80019f0:	f001 fa57 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019fc:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <MX_I2C1_Init+0x50>)
 80019fe:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <MX_I2C1_Init+0x54>)
 8001a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a04:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_I2C1_Init+0x58>)
 8001a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a08:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a14:	4b0c      	ldr	r3, [pc, #48]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a1a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a1c:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a34:	4804      	ldr	r0, [pc, #16]	; (8001a48 <MX_I2C1_Init+0x50>)
 8001a36:	f001 fcaf 	bl	8003398 <HAL_I2C_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a40:	f000 fa48 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200006bc 	.word	0x200006bc
 8001a4c:	40005400 	.word	0x40005400
 8001a50:	000186a0 	.word	0x000186a0

08001a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001a68:	2300      	movs	r3, #0
 8001a6a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a6e:	4a25      	ldr	r2, [pc, #148]	; (8001b04 <MX_RTC_Init+0xb0>)
 8001a70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001a78:	4b21      	ldr	r3, [pc, #132]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a7a:	227f      	movs	r2, #127	; 0x7f
 8001a7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a80:	22ff      	movs	r2, #255	; 0xff
 8001a82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a96:	481a      	ldr	r0, [pc, #104]	; (8001b00 <MX_RTC_Init+0xac>)
 8001a98:	f002 fe52 	bl	8004740 <HAL_RTC_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001aa2:	f000 fa17 	bl	8001ed4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x11;
 8001aa6:	2311      	movs	r3, #17
 8001aa8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8001aaa:	2310      	movs	r3, #16
 8001aac:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2201      	movs	r2, #1
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480f      	ldr	r0, [pc, #60]	; (8001b00 <MX_RTC_Init+0xac>)
 8001ac2:	f002 feb3 	bl	800482c <HAL_RTC_SetTime>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001acc:	f000 fa02 	bl	8001ed4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8001ad4:	2308      	movs	r3, #8
 8001ad6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8001ad8:	2330      	movs	r3, #48	; 0x30
 8001ada:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8001adc:	2322      	movs	r3, #34	; 0x22
 8001ade:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4806      	ldr	r0, [pc, #24]	; (8001b00 <MX_RTC_Init+0xac>)
 8001ae8:	f002 ff98 	bl	8004a1c <HAL_RTC_SetDate>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001af2:	f000 f9ef 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001af6:	bf00      	nop
 8001af8:	3718      	adds	r7, #24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	20000710 	.word	0x20000710
 8001b04:	40002800 	.word	0x40002800

08001b08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0e:	f107 0318 	add.w	r3, r7, #24
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001b26:	463b      	mov	r3, r7
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b34:	4a2d      	ldr	r2, [pc, #180]	; (8001bec <MX_TIM1_Init+0xe4>)
 8001b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001b38:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b3a:	2253      	movs	r2, #83	; 0x53
 8001b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b44:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4c:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b5e:	4822      	ldr	r0, [pc, #136]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b60:	f003 f8ec 	bl	8004d3c <HAL_TIM_Base_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001b6a:	f000 f9b3 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b72:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	4619      	mov	r1, r3
 8001b7a:	481b      	ldr	r0, [pc, #108]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b7c:	f003 fec2 	bl	8005904 <HAL_TIM_ConfigClockSource>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b86:	f000 f9a5 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001b8a:	4817      	ldr	r0, [pc, #92]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001b8c:	f003 fae0 	bl	8005150 <HAL_TIM_IC_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001b96:	f000 f99d 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480f      	ldr	r0, [pc, #60]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001baa:	f004 fbbf 	bl	800632c <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001bb4:	f000 f98e 	bl	8001ed4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001bb8:	230a      	movs	r3, #10
 8001bba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <MX_TIM1_Init+0xe0>)
 8001bd0:	f003 fd3a 	bl	8005648 <HAL_TIM_IC_ConfigChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001bda:	f000 f97b 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3728      	adds	r7, #40	; 0x28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000730 	.word	0x20000730
 8001bec:	40010000 	.word	0x40010000

08001bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08e      	sub	sp, #56	; 0x38
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 8001c28:	4b2b      	ldr	r3, [pc, #172]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c2a:	f240 628f 	movw	r2, #1679	; 0x68f
 8001c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c30:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001c36:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c4a:	4823      	ldr	r0, [pc, #140]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c4c:	f003 f876 	bl	8004d3c <HAL_TIM_Base_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001c56:	f000 f93d 	bl	8001ed4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c64:	4619      	mov	r1, r3
 8001c66:	481c      	ldr	r0, [pc, #112]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c68:	f003 fe4c 	bl	8005904 <HAL_TIM_ConfigClockSource>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001c72:	f000 f92f 	bl	8001ed4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c78:	f003 f912 	bl	8004ea0 <HAL_TIM_PWM_Init>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001c82:	f000 f927 	bl	8001ed4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	4619      	mov	r1, r3
 8001c94:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001c96:	f004 fb49 	bl	800632c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001ca0:	f000 f918 	bl	8001ed4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2208      	movs	r2, #8
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4807      	ldr	r0, [pc, #28]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001cbc:	f003 fd60 	bl	8005780 <HAL_TIM_PWM_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001cc6:	f000 f905 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cca:	4803      	ldr	r0, [pc, #12]	; (8001cd8 <MX_TIM2_Init+0xe8>)
 8001ccc:	f000 fce0 	bl	8002690 <HAL_TIM_MspPostInit>

}
 8001cd0:	bf00      	nop
 8001cd2:	3738      	adds	r7, #56	; 0x38
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000778 	.word	0x20000778

08001cdc <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ce0:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001ce2:	4a0f      	ldr	r2, [pc, #60]	; (8001d20 <MX_TIM11_Init+0x44>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001ce8:	2253      	movs	r2, #83	; 0x53
 8001cea:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001cf4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cf8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_TIM11_Init+0x40>)
 8001d08:	f003 f818 	bl	8004d3c <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001d12:	f000 f8df 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200007c0 	.word	0x200007c0
 8001d20:	40014800 	.word	0x40014800

08001d24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d28:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d2a:	4a12      	ldr	r2, [pc, #72]	; (8001d74 <MX_USART2_UART_Init+0x50>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_USART2_UART_Init+0x4c>)
 8001d5c:	f004 fb68 	bl	8006430 <HAL_UART_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d66:	f000 f8b5 	bl	8001ed4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000808 	.word	0x20000808
 8001d74:	40004400 	.word	0x40004400

08001d78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
 8001d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b49      	ldr	r3, [pc, #292]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0304 	and.w	r3, r3, #4
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b45      	ldr	r3, [pc, #276]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dba:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b34      	ldr	r3, [pc, #208]	; (8001ec4 <MX_GPIO_Init+0x14c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	607b      	str	r3, [r7, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ULTRASONIC_TRIG_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8001e04:	4830      	ldr	r0, [pc, #192]	; (8001ec8 <MX_GPIO_Init+0x150>)
 8001e06:	f001 fa95 	bl	8003334 <HAL_GPIO_WritePin>
                          |INT4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	21ff      	movs	r1, #255	; 0xff
 8001e0e:	482f      	ldr	r0, [pc, #188]	; (8001ecc <MX_GPIO_Init+0x154>)
 8001e10:	f001 fa90 	bl	8003334 <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4827      	ldr	r0, [pc, #156]	; (8001ec8 <MX_GPIO_Init+0x150>)
 8001e2c:	f001 f8e6 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin BUTTON4_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin|BUTTON4_Pin;
 8001e30:	230f      	movs	r3, #15
 8001e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e34:	2300      	movs	r3, #0
 8001e36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	4619      	mov	r1, r3
 8001e42:	4821      	ldr	r0, [pc, #132]	; (8001ec8 <MX_GPIO_Init+0x150>)
 8001e44:	f001 f8da 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <MX_GPIO_Init+0x158>)
 8001e5e:	f001 f8cd 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRASONIC_TRIG_Pin INT1_Pin INT2_Pin INT3_Pin
                           INT4_Pin */
  GPIO_InitStruct.Pin = ULTRASONIC_TRIG_Pin|INT1_Pin|INT2_Pin|INT3_Pin
 8001e62:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001e66:	617b      	str	r3, [r7, #20]
                          |INT4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <MX_GPIO_Init+0x150>)
 8001e7c:	f001 f8be 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001e80:	23ff      	movs	r3, #255	; 0xff
 8001e82:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	480d      	ldr	r0, [pc, #52]	; (8001ecc <MX_GPIO_Init+0x154>)
 8001e98:	f001 f8b0 	bl	8002ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2006      	movs	r0, #6
 8001ea2:	f000 ffe2 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f000 fffb 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2007      	movs	r0, #7
 8001eb2:	f000 ffda 	bl	8002e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001eb6:	2007      	movs	r0, #7
 8001eb8:	f000 fff3 	bl	8002ea2 <HAL_NVIC_EnableIRQ>

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020000 	.word	0x40020000

08001ed4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed8:	b672      	cpsid	i
}
 8001eda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001edc:	e7fe      	b.n	8001edc <Error_Handler+0x8>

08001ede <set_rpm>:

extern volatile int exint_signal;


void set_rpm(int rpm)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	delay_us(60000000/ STEPS_PER_REV/rpm);
 8001ee6:	f643 1238 	movw	r2, #14648	; 0x3938
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fcb1 	bl	8001858 <delay_us>
	// 최대 speed 기준 (13) ==> _delay_us(1126)
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <stepmotor_driver>:
			}

}

void stepmotor_driver(int step)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	switch(step)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b07      	cmp	r3, #7
 8001f0c:	f200 80cc 	bhi.w	80020a8 <stepmotor_driver+0x1a8>
 8001f10:	a201      	add	r2, pc, #4	; (adr r2, 8001f18 <stepmotor_driver+0x18>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f39 	.word	0x08001f39
 8001f1c:	08001f67 	.word	0x08001f67
 8001f20:	08001f95 	.word	0x08001f95
 8001f24:	08001fc3 	.word	0x08001fc3
 8001f28:	08001ff1 	.word	0x08001ff1
 8001f2c:	0800201f 	.word	0x0800201f
 8001f30:	0800204d 	.word	0x0800204d
 8001f34:	0800207b 	.word	0x0800207b
	{
		case 0:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2140      	movs	r1, #64	; 0x40
 8001f3c:	485c      	ldr	r0, [pc, #368]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f3e:	f001 f9f9 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2180      	movs	r1, #128	; 0x80
 8001f46:	485a      	ldr	r0, [pc, #360]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f48:	f001 f9f4 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f52:	4857      	ldr	r0, [pc, #348]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f54:	f001 f9ee 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5e:	4854      	ldr	r0, [pc, #336]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f60:	f001 f9e8 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 8001f64:	e0a0      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 1:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	2140      	movs	r1, #64	; 0x40
 8001f6a:	4851      	ldr	r0, [pc, #324]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f6c:	f001 f9e2 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f70:	2201      	movs	r2, #1
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	484e      	ldr	r0, [pc, #312]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f76:	f001 f9dd 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f80:	484b      	ldr	r0, [pc, #300]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f82:	f001 f9d7 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f86:	2200      	movs	r2, #0
 8001f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8c:	4848      	ldr	r0, [pc, #288]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f8e:	f001 f9d1 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 8001f92:	e089      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 2:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2140      	movs	r1, #64	; 0x40
 8001f98:	4845      	ldr	r0, [pc, #276]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001f9a:	f001 f9cb 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	4843      	ldr	r0, [pc, #268]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fa4:	f001 f9c6 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fae:	4840      	ldr	r0, [pc, #256]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fb0:	f001 f9c0 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fba:	483d      	ldr	r0, [pc, #244]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fbc:	f001 f9ba 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 8001fc0:	e072      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 3:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2140      	movs	r1, #64	; 0x40
 8001fc6:	483a      	ldr	r0, [pc, #232]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fc8:	f001 f9b4 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	4837      	ldr	r0, [pc, #220]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fd2:	f001 f9af 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fdc:	4834      	ldr	r0, [pc, #208]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fde:	f001 f9a9 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe8:	4831      	ldr	r0, [pc, #196]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001fea:	f001 f9a3 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 8001fee:	e05b      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 4:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2140      	movs	r1, #64	; 0x40
 8001ff4:	482e      	ldr	r0, [pc, #184]	; (80020b0 <stepmotor_driver+0x1b0>)
 8001ff6:	f001 f99d 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	482c      	ldr	r0, [pc, #176]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002000:	f001 f998 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002004:	2201      	movs	r2, #1
 8002006:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200a:	4829      	ldr	r0, [pc, #164]	; (80020b0 <stepmotor_driver+0x1b0>)
 800200c:	f001 f992 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8002010:	2200      	movs	r2, #0
 8002012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002016:	4826      	ldr	r0, [pc, #152]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002018:	f001 f98c 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 800201c:	e044      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 5:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	2140      	movs	r1, #64	; 0x40
 8002022:	4823      	ldr	r0, [pc, #140]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002024:	f001 f986 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002028:	2200      	movs	r2, #0
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	4820      	ldr	r0, [pc, #128]	; (80020b0 <stepmotor_driver+0x1b0>)
 800202e:	f001 f981 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002038:	481d      	ldr	r0, [pc, #116]	; (80020b0 <stepmotor_driver+0x1b0>)
 800203a:	f001 f97b 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800203e:	2201      	movs	r2, #1
 8002040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002044:	481a      	ldr	r0, [pc, #104]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002046:	f001 f975 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 800204a:	e02d      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 6:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800204c:	2200      	movs	r2, #0
 800204e:	2140      	movs	r1, #64	; 0x40
 8002050:	4817      	ldr	r0, [pc, #92]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002052:	f001 f96f 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002056:	2200      	movs	r2, #0
 8002058:	2180      	movs	r1, #128	; 0x80
 800205a:	4815      	ldr	r0, [pc, #84]	; (80020b0 <stepmotor_driver+0x1b0>)
 800205c:	f001 f96a 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002066:	4812      	ldr	r0, [pc, #72]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002068:	f001 f964 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002072:	480f      	ldr	r0, [pc, #60]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002074:	f001 f95e 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 8002078:	e016      	b.n	80020a8 <stepmotor_driver+0x1a8>

		case 7:
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET);
 800207a:	2201      	movs	r2, #1
 800207c:	2140      	movs	r1, #64	; 0x40
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002080:	f001 f958 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	2180      	movs	r1, #128	; 0x80
 8002088:	4809      	ldr	r0, [pc, #36]	; (80020b0 <stepmotor_driver+0x1b0>)
 800208a:	f001 f953 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002094:	4806      	ldr	r0, [pc, #24]	; (80020b0 <stepmotor_driver+0x1b0>)
 8002096:	f001 f94d 	bl	8003334 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020a0:	4803      	ldr	r0, [pc, #12]	; (80020b0 <stepmotor_driver+0x1b0>)
 80020a2:	f001 f947 	bl	8003334 <HAL_GPIO_WritePin>
		break;
 80020a6:	bf00      	nop
	}
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40020800 	.word	0x40020800

080020b4 <flow_button_move>:

	}
}

void flow_button_move()
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0

	switch(elevator_mode_state)
 80020b8:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <flow_button_move+0x214>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b03      	cmp	r3, #3
 80020be:	f200 81a9 	bhi.w	8002414 <flow_button_move+0x360>
 80020c2:	a201      	add	r2, pc, #4	; (adr r2, 80020c8 <flow_button_move+0x14>)
 80020c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c8:	080020d9 	.word	0x080020d9
 80020cc:	080022f1 	.word	0x080022f1
 80020d0:	08002365 	.word	0x08002365
 80020d4:	080023ef 	.word	0x080023ef
		{
			case 0:
				if(pre_elevator_state == 1)
 80020d8:	4b7c      	ldr	r3, [pc, #496]	; (80022cc <flow_button_move+0x218>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10a      	bne.n	80020f6 <flow_button_move+0x42>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80020e0:	2200      	movs	r2, #0
 80020e2:	21ff      	movs	r1, #255	; 0xff
 80020e4:	487a      	ldr	r0, [pc, #488]	; (80022d0 <flow_button_move+0x21c>)
 80020e6:	f001 f925 	bl	8003334 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x01, GPIO_PIN_SET);
 80020ea:	2201      	movs	r2, #1
 80020ec:	2101      	movs	r1, #1
 80020ee:	4878      	ldr	r0, [pc, #480]	; (80022d0 <flow_button_move+0x21c>)
 80020f0:	f001 f920 	bl	8003334 <HAL_GPIO_WritePin>
 80020f4:	e02b      	b.n	800214e <flow_button_move+0x9a>
				}
				else if(pre_elevator_state == 2)
 80020f6:	4b75      	ldr	r3, [pc, #468]	; (80022cc <flow_button_move+0x218>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d10a      	bne.n	8002114 <flow_button_move+0x60>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	21ff      	movs	r1, #255	; 0xff
 8002102:	4873      	ldr	r0, [pc, #460]	; (80022d0 <flow_button_move+0x21c>)
 8002104:	f001 f916 	bl	8003334 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x03, GPIO_PIN_SET);
 8002108:	2201      	movs	r2, #1
 800210a:	2103      	movs	r1, #3
 800210c:	4870      	ldr	r0, [pc, #448]	; (80022d0 <flow_button_move+0x21c>)
 800210e:	f001 f911 	bl	8003334 <HAL_GPIO_WritePin>
 8002112:	e01c      	b.n	800214e <flow_button_move+0x9a>
				}
				else if(pre_elevator_state == 3)
 8002114:	4b6d      	ldr	r3, [pc, #436]	; (80022cc <flow_button_move+0x218>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d10a      	bne.n	8002132 <flow_button_move+0x7e>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 800211c:	2200      	movs	r2, #0
 800211e:	21ff      	movs	r1, #255	; 0xff
 8002120:	486b      	ldr	r0, [pc, #428]	; (80022d0 <flow_button_move+0x21c>)
 8002122:	f001 f907 	bl	8003334 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x07, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	2107      	movs	r1, #7
 800212a:	4869      	ldr	r0, [pc, #420]	; (80022d0 <flow_button_move+0x21c>)
 800212c:	f001 f902 	bl	8003334 <HAL_GPIO_WritePin>
 8002130:	e00d      	b.n	800214e <flow_button_move+0x9a>
				}
				else if(pre_elevator_state == 4)
 8002132:	4b66      	ldr	r3, [pc, #408]	; (80022cc <flow_button_move+0x218>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b04      	cmp	r3, #4
 8002138:	d109      	bne.n	800214e <flow_button_move+0x9a>
				{
					HAL_GPIO_WritePin(GPIOB, 0xff, GPIO_PIN_RESET);
 800213a:	2200      	movs	r2, #0
 800213c:	21ff      	movs	r1, #255	; 0xff
 800213e:	4864      	ldr	r0, [pc, #400]	; (80022d0 <flow_button_move+0x21c>)
 8002140:	f001 f8f8 	bl	8003334 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, 0x0f, GPIO_PIN_SET);
 8002144:	2201      	movs	r2, #1
 8002146:	210f      	movs	r1, #15
 8002148:	4861      	ldr	r0, [pc, #388]	; (80022d0 <flow_button_move+0x21c>)
 800214a:	f001 f8f3 	bl	8003334 <HAL_GPIO_WritePin>
				}


				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 800214e:	4a61      	ldr	r2, [pc, #388]	; (80022d4 <flow_button_move+0x220>)
 8002150:	2101      	movs	r1, #1
 8002152:	4861      	ldr	r0, [pc, #388]	; (80022d8 <flow_button_move+0x224>)
 8002154:	f7ff f854 	bl	8001200 <get_button>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d120      	bne.n	80021a0 <flow_button_move+0xec>
				{
					if(pre_elevator_state > 1)
 800215e:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <flow_button_move+0x218>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b01      	cmp	r3, #1
 8002164:	dd0f      	ble.n	8002186 <flow_button_move+0xd2>
					{
						floor_gap = pre_elevator_state - 1;
 8002166:	4b59      	ldr	r3, [pc, #356]	; (80022cc <flow_button_move+0x218>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	4a5b      	ldr	r2, [pc, #364]	; (80022dc <flow_button_move+0x228>)
 800216e:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8002170:	4b5a      	ldr	r3, [pc, #360]	; (80022dc <flow_button_move+0x228>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a5a      	ldr	r2, [pc, #360]	; (80022e0 <flow_button_move+0x22c>)
 8002176:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 1;
 8002178:	4b54      	ldr	r3, [pc, #336]	; (80022cc <flow_button_move+0x218>)
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2; // BACKWARD
 800217e:	4b52      	ldr	r3, [pc, #328]	; (80022c8 <flow_button_move+0x214>)
 8002180:	2202      	movs	r2, #2
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e00c      	b.n	80021a0 <flow_button_move+0xec>
					}
					else if(pre_elevator_state < 1)
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <flow_button_move+0x218>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	dc08      	bgt.n	80021a0 <flow_button_move+0xec>
					{
						elevator_state = 1;
 800218e:	4b54      	ldr	r3, [pc, #336]	; (80022e0 <flow_button_move+0x22c>)
 8002190:	2201      	movs	r2, #1
 8002192:	601a      	str	r2, [r3, #0]
						pre_elevator_state = 1;
 8002194:	4b4d      	ldr	r3, [pc, #308]	; (80022cc <flow_button_move+0x218>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1;
 800219a:	4b4b      	ldr	r3, [pc, #300]	; (80022c8 <flow_button_move+0x214>)
 800219c:	2201      	movs	r2, #1
 800219e:	601a      	str	r2, [r3, #0]
					}

				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON2_Pin, &prev_button2_state) == BUTTON_PRESS)
 80021a0:	4a50      	ldr	r2, [pc, #320]	; (80022e4 <flow_button_move+0x230>)
 80021a2:	2102      	movs	r1, #2
 80021a4:	484c      	ldr	r0, [pc, #304]	; (80022d8 <flow_button_move+0x224>)
 80021a6:	f7ff f82b 	bl	8001200 <get_button>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d127      	bne.n	8002200 <flow_button_move+0x14c>
				{
					if(pre_elevator_state > 2)
 80021b0:	4b46      	ldr	r3, [pc, #280]	; (80022cc <flow_button_move+0x218>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	dd0f      	ble.n	80021d8 <flow_button_move+0x124>
					{
						floor_gap = pre_elevator_state - 2;
 80021b8:	4b44      	ldr	r3, [pc, #272]	; (80022cc <flow_button_move+0x218>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3b02      	subs	r3, #2
 80021be:	4a47      	ldr	r2, [pc, #284]	; (80022dc <flow_button_move+0x228>)
 80021c0:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 80021c2:	4b46      	ldr	r3, [pc, #280]	; (80022dc <flow_button_move+0x228>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a46      	ldr	r2, [pc, #280]	; (80022e0 <flow_button_move+0x22c>)
 80021c8:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 2;
 80021ca:	4b40      	ldr	r3, [pc, #256]	; (80022cc <flow_button_move+0x218>)
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 80021d0:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <flow_button_move+0x214>)
 80021d2:	2202      	movs	r2, #2
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	e013      	b.n	8002200 <flow_button_move+0x14c>
					}
					else if(pre_elevator_state < 2)
 80021d8:	4b3c      	ldr	r3, [pc, #240]	; (80022cc <flow_button_move+0x218>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	dc0f      	bgt.n	8002200 <flow_button_move+0x14c>
					{
						floor_gap = 2 - pre_elevator_state;
 80021e0:	4b3a      	ldr	r3, [pc, #232]	; (80022cc <flow_button_move+0x218>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1c3 0302 	rsb	r3, r3, #2
 80021e8:	4a3c      	ldr	r2, [pc, #240]	; (80022dc <flow_button_move+0x228>)
 80021ea:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80021ec:	4b3b      	ldr	r3, [pc, #236]	; (80022dc <flow_button_move+0x228>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a3b      	ldr	r2, [pc, #236]	; (80022e0 <flow_button_move+0x22c>)
 80021f2:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 2;
 80021f4:	4b35      	ldr	r3, [pc, #212]	; (80022cc <flow_button_move+0x218>)
 80021f6:	2202      	movs	r2, #2
 80021f8:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 80021fa:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <flow_button_move+0x214>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON3_Pin, &prev_button3_state) == BUTTON_PRESS)
 8002200:	4a39      	ldr	r2, [pc, #228]	; (80022e8 <flow_button_move+0x234>)
 8002202:	2104      	movs	r1, #4
 8002204:	4834      	ldr	r0, [pc, #208]	; (80022d8 <flow_button_move+0x224>)
 8002206:	f7fe fffb 	bl	8001200 <get_button>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d127      	bne.n	8002260 <flow_button_move+0x1ac>
				{
					if(pre_elevator_state > 3)
 8002210:	4b2e      	ldr	r3, [pc, #184]	; (80022cc <flow_button_move+0x218>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b03      	cmp	r3, #3
 8002216:	dd0f      	ble.n	8002238 <flow_button_move+0x184>
					{
						floor_gap = pre_elevator_state - 3;
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <flow_button_move+0x218>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3b03      	subs	r3, #3
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <flow_button_move+0x228>)
 8002220:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8002222:	4b2e      	ldr	r3, [pc, #184]	; (80022dc <flow_button_move+0x228>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a2e      	ldr	r2, [pc, #184]	; (80022e0 <flow_button_move+0x22c>)
 8002228:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 3;
 800222a:	4b28      	ldr	r3, [pc, #160]	; (80022cc <flow_button_move+0x218>)
 800222c:	2203      	movs	r2, #3
 800222e:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <flow_button_move+0x214>)
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e013      	b.n	8002260 <flow_button_move+0x1ac>
					}
					else if(pre_elevator_state < 3)
 8002238:	4b24      	ldr	r3, [pc, #144]	; (80022cc <flow_button_move+0x218>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b02      	cmp	r3, #2
 800223e:	dc0f      	bgt.n	8002260 <flow_button_move+0x1ac>
					{
						floor_gap = 3 - pre_elevator_state;
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <flow_button_move+0x218>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1c3 0303 	rsb	r3, r3, #3
 8002248:	4a24      	ldr	r2, [pc, #144]	; (80022dc <flow_button_move+0x228>)
 800224a:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 800224c:	4b23      	ldr	r3, [pc, #140]	; (80022dc <flow_button_move+0x228>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a23      	ldr	r2, [pc, #140]	; (80022e0 <flow_button_move+0x22c>)
 8002252:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 3;
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <flow_button_move+0x218>)
 8002256:	2203      	movs	r2, #3
 8002258:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <flow_button_move+0x214>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
					}
				}

				if (get_button(BUTTON1_GPIO_Port, BUTTON4_Pin, &prev_button4_state) == BUTTON_PRESS)
 8002260:	4a22      	ldr	r2, [pc, #136]	; (80022ec <flow_button_move+0x238>)
 8002262:	2108      	movs	r1, #8
 8002264:	481c      	ldr	r0, [pc, #112]	; (80022d8 <flow_button_move+0x224>)
 8002266:	f7fe ffcb 	bl	8001200 <get_button>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 80d0 	bne.w	8002412 <flow_button_move+0x35e>
				{
					// 최상층

					if(pre_elevator_state > 4)
 8002272:	4b16      	ldr	r3, [pc, #88]	; (80022cc <flow_button_move+0x218>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b04      	cmp	r3, #4
 8002278:	dd0f      	ble.n	800229a <flow_button_move+0x1e6>
					{
						floor_gap = pre_elevator_state - 4;
 800227a:	4b14      	ldr	r3, [pc, #80]	; (80022cc <flow_button_move+0x218>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3b04      	subs	r3, #4
 8002280:	4a16      	ldr	r2, [pc, #88]	; (80022dc <flow_button_move+0x228>)
 8002282:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <flow_button_move+0x228>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <flow_button_move+0x22c>)
 800228a:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 4;
 800228c:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <flow_button_move+0x218>)
 800228e:	2204      	movs	r2, #4
 8002290:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 2;
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <flow_button_move+0x214>)
 8002294:	2202      	movs	r2, #2
 8002296:	601a      	str	r2, [r3, #0]
						pre_elevator_state = 4;
						elevator_mode_state = 1; // FORWARD
					}
				}

			break;
 8002298:	e0bb      	b.n	8002412 <flow_button_move+0x35e>
					else if(pre_elevator_state < 4)
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <flow_button_move+0x218>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2b03      	cmp	r3, #3
 80022a0:	f300 80b7 	bgt.w	8002412 <flow_button_move+0x35e>
						floor_gap = 4 - pre_elevator_state;
 80022a4:	4b09      	ldr	r3, [pc, #36]	; (80022cc <flow_button_move+0x218>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f1c3 0304 	rsb	r3, r3, #4
 80022ac:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <flow_button_move+0x228>)
 80022ae:	6013      	str	r3, [r2, #0]
						elevator_state = floor_gap;	// floor
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <flow_button_move+0x228>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <flow_button_move+0x22c>)
 80022b6:	6013      	str	r3, [r2, #0]
						pre_elevator_state = 4;
 80022b8:	4b04      	ldr	r3, [pc, #16]	; (80022cc <flow_button_move+0x218>)
 80022ba:	2204      	movs	r2, #4
 80022bc:	601a      	str	r2, [r3, #0]
						elevator_mode_state = 1; // FORWARD
 80022be:	4b02      	ldr	r3, [pc, #8]	; (80022c8 <flow_button_move+0x214>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
			break;
 80022c4:	e0a5      	b.n	8002412 <flow_button_move+0x35e>
 80022c6:	bf00      	nop
 80022c8:	20000868 	.word	0x20000868
 80022cc:	2000086c 	.word	0x2000086c
 80022d0:	40020400 	.word	0x40020400
 80022d4:	20000008 	.word	0x20000008
 80022d8:	40020800 	.word	0x40020800
 80022dc:	20000870 	.word	0x20000870
 80022e0:	20000864 	.word	0x20000864
 80022e4:	20000009 	.word	0x20000009
 80022e8:	2000000a 	.word	0x2000000a
 80022ec:	2000000b 	.word	0x2000000b
//					elevator_mode_state = 3;
//				}

				//for(int i = 0; i < elevator_state * 4096; i++)

			if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 80022f0:	4a49      	ldr	r2, [pc, #292]	; (8002418 <flow_button_move+0x364>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	4849      	ldr	r0, [pc, #292]	; (800241c <flow_button_move+0x368>)
 80022f6:	f7fe ff83 	bl	8001200 <get_button>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <flow_button_move+0x252>
			{
				elevator_mode_state = 0;
 8002300:	4b47      	ldr	r3, [pc, #284]	; (8002420 <flow_button_move+0x36c>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]

			}


			if(temp2 <= elevator_state * STEPS_PER_REV)
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <flow_button_move+0x370>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	031a      	lsls	r2, r3, #12
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <flow_button_move+0x374>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	db1d      	blt.n	8002350 <flow_button_move+0x29c>
			{
				temp2++;
 8002314:	4b44      	ldr	r3, [pc, #272]	; (8002428 <flow_button_move+0x374>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a43      	ldr	r2, [pc, #268]	; (8002428 <flow_button_move+0x374>)
 800231c:	6013      	str	r3, [r2, #0]
				temp++;
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <flow_button_move+0x378>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3301      	adds	r3, #1
 8002324:	4a41      	ldr	r2, [pc, #260]	; (800242c <flow_button_move+0x378>)
 8002326:	6013      	str	r3, [r2, #0]
				temp %= 8;
 8002328:	4b40      	ldr	r3, [pc, #256]	; (800242c <flow_button_move+0x378>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	425a      	negs	r2, r3
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	f002 0207 	and.w	r2, r2, #7
 8002336:	bf58      	it	pl
 8002338:	4253      	negpl	r3, r2
 800233a:	4a3c      	ldr	r2, [pc, #240]	; (800242c <flow_button_move+0x378>)
 800233c:	6013      	str	r3, [r2, #0]
				stepmotor_driver(temp);
 800233e:	4b3b      	ldr	r3, [pc, #236]	; (800242c <flow_button_move+0x378>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fddc 	bl	8001f00 <stepmotor_driver>
				set_rpm(13);
 8002348:	200d      	movs	r0, #13
 800234a:	f7ff fdc8 	bl	8001ede <set_rpm>
			}




			break;
 800234e:	e061      	b.n	8002414 <flow_button_move+0x360>
				elevator_mode_state = 0;
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <flow_button_move+0x36c>)
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
				temp = 0;
 8002356:	4b35      	ldr	r3, [pc, #212]	; (800242c <flow_button_move+0x378>)
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
				temp2 = 0;
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <flow_button_move+0x374>)
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
			break;
 8002362:	e057      	b.n	8002414 <flow_button_move+0x360>
//				}
//				else
//				{
//					elevator_mode_state = 3;
//				}
				if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 8002364:	4a2c      	ldr	r2, [pc, #176]	; (8002418 <flow_button_move+0x364>)
 8002366:	2101      	movs	r1, #1
 8002368:	482c      	ldr	r0, [pc, #176]	; (800241c <flow_button_move+0x368>)
 800236a:	f7fe ff49 	bl	8001200 <get_button>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d102      	bne.n	800237a <flow_button_move+0x2c6>
				{
					elevator_mode_state = 0;
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <flow_button_move+0x36c>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

				}


				if(temp2 <= elevator_state * STEPS_PER_REV)
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <flow_button_move+0x370>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	031a      	lsls	r2, r3, #12
 8002380:	4b29      	ldr	r3, [pc, #164]	; (8002428 <flow_button_move+0x374>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	db28      	blt.n	80023da <flow_button_move+0x326>
				{
					temp2++;
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <flow_button_move+0x374>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3301      	adds	r3, #1
 800238e:	4a26      	ldr	r2, [pc, #152]	; (8002428 <flow_button_move+0x374>)
 8002390:	6013      	str	r3, [r2, #0]

					if(temp >= 0)
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <flow_button_move+0x378>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	db0f      	blt.n	80023ba <flow_button_move+0x306>
					{
						temp--;
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <flow_button_move+0x378>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3b01      	subs	r3, #1
 80023a0:	4a22      	ldr	r2, [pc, #136]	; (800242c <flow_button_move+0x378>)
 80023a2:	6013      	str	r3, [r2, #0]
						temp %= 8;
 80023a4:	4b21      	ldr	r3, [pc, #132]	; (800242c <flow_button_move+0x378>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	425a      	negs	r2, r3
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	f002 0207 	and.w	r2, r2, #7
 80023b2:	bf58      	it	pl
 80023b4:	4253      	negpl	r3, r2
 80023b6:	4a1d      	ldr	r2, [pc, #116]	; (800242c <flow_button_move+0x378>)
 80023b8:	6013      	str	r3, [r2, #0]
					}

					if(temp < 0)
 80023ba:	4b1c      	ldr	r3, [pc, #112]	; (800242c <flow_button_move+0x378>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da02      	bge.n	80023c8 <flow_button_move+0x314>
					{
						temp = 7;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <flow_button_move+0x378>)
 80023c4:	2207      	movs	r2, #7
 80023c6:	601a      	str	r2, [r3, #0]
					}

					stepmotor_driver(temp);
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <flow_button_move+0x378>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fd97 	bl	8001f00 <stepmotor_driver>
					set_rpm(13);
 80023d2:	200d      	movs	r0, #13
 80023d4:	f7ff fd83 	bl	8001ede <set_rpm>
				{
					elevator_mode_state = 0;
					temp = 0;
					temp2 = 0;
				}
			break;
 80023d8:	e01c      	b.n	8002414 <flow_button_move+0x360>
					elevator_mode_state = 0;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <flow_button_move+0x36c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
					temp = 0;
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <flow_button_move+0x378>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
					temp2 = 0;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <flow_button_move+0x374>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
			break;
 80023ec:	e012      	b.n	8002414 <flow_button_move+0x360>

			case 3:
				cancel_mode = 0;
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <flow_button_move+0x37c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]

					if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, &prev_button1_state) == BUTTON_PRESS)
 80023f4:	4a08      	ldr	r2, [pc, #32]	; (8002418 <flow_button_move+0x364>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	4808      	ldr	r0, [pc, #32]	; (800241c <flow_button_move+0x368>)
 80023fa:	f7fe ff01 	bl	8001200 <get_button>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <flow_button_move+0x358>
					{
						elevator_mode_state = 0;
 8002404:	4b06      	ldr	r3, [pc, #24]	; (8002420 <flow_button_move+0x36c>)
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
					else
					{
						led_re_shift();

					}
			break;
 800240a:	e003      	b.n	8002414 <flow_button_move+0x360>
						led_re_shift();
 800240c:	f7ff f970 	bl	80016f0 <led_re_shift>
			break;
 8002410:	e000      	b.n	8002414 <flow_button_move+0x360>
			break;
 8002412:	bf00      	nop
		}
}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000008 	.word	0x20000008
 800241c:	40020800 	.word	0x40020800
 8002420:	20000868 	.word	0x20000868
 8002424:	20000864 	.word	0x20000864
 8002428:	2000087c 	.word	0x2000087c
 800242c:	20000878 	.word	0x20000878
 8002430:	20000874 	.word	0x20000874

08002434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	607b      	str	r3, [r7, #4]
 800243e:	4b10      	ldr	r3, [pc, #64]	; (8002480 <HAL_MspInit+0x4c>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_MspInit+0x4c>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_MspInit+0x4c>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_MspInit+0x4c>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_MspInit+0x4c>)
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	6413      	str	r3, [r2, #64]	; 0x40
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_MspInit+0x4c>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002472:	2007      	movs	r0, #7
 8002474:	f000 fcee 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40023800 	.word	0x40023800

08002484 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <HAL_I2C_MspInit+0x84>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d12c      	bne.n	8002500 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_I2C_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a17      	ldr	r2, [pc, #92]	; (800250c <HAL_I2C_MspInit+0x88>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <HAL_I2C_MspInit+0x88>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80024c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c8:	2312      	movs	r3, #18
 80024ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024d4:	2304      	movs	r3, #4
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	4619      	mov	r1, r3
 80024de:	480c      	ldr	r0, [pc, #48]	; (8002510 <HAL_I2C_MspInit+0x8c>)
 80024e0:	f000 fd8c 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_I2C_MspInit+0x88>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_I2C_MspInit+0x88>)
 80024ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_I2C_MspInit+0x88>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002500:	bf00      	nop
 8002502:	3728      	adds	r7, #40	; 0x28
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40005400 	.word	0x40005400
 800250c:	40023800 	.word	0x40023800
 8002510:	40020400 	.word	0x40020400

08002514 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b088      	sub	sp, #32
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800251c:	f107 0308 	add.w	r3, r7, #8
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
 800252c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RTC_MspInit+0x50>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002538:	2302      	movs	r3, #2
 800253a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800253c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002540:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	4618      	mov	r0, r3
 8002548:	f002 f80a 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8002552:	f7ff fcbf 	bl	8001ed4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <HAL_RTC_MspInit+0x54>)
 8002558:	2201      	movs	r2, #1
 800255a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800255c:	bf00      	nop
 800255e:	3720      	adds	r7, #32
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40002800 	.word	0x40002800
 8002568:	42470e3c 	.word	0x42470e3c

0800256c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08c      	sub	sp, #48	; 0x30
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 031c 	add.w	r3, r7, #28
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a3d      	ldr	r2, [pc, #244]	; (8002680 <HAL_TIM_Base_MspInit+0x114>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d145      	bne.n	800261a <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	4b3c      	ldr	r3, [pc, #240]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	4a3b      	ldr	r2, [pc, #236]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6453      	str	r3, [r2, #68]	; 0x44
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	61bb      	str	r3, [r7, #24]
 80025a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	4b35      	ldr	r3, [pc, #212]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a34      	ldr	r2, [pc, #208]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b32      	ldr	r3, [pc, #200]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025d8:	2301      	movs	r3, #1
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4619      	mov	r1, r3
 80025e2:	4829      	ldr	r0, [pc, #164]	; (8002688 <HAL_TIM_Base_MspInit+0x11c>)
 80025e4:	f000 fd0a 	bl	8002ffc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80025e8:	2200      	movs	r2, #0
 80025ea:	2100      	movs	r1, #0
 80025ec:	2018      	movs	r0, #24
 80025ee:	f000 fc3c 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80025f2:	2018      	movs	r0, #24
 80025f4:	f000 fc55 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	2019      	movs	r0, #25
 80025fe:	f000 fc34 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002602:	2019      	movs	r0, #25
 8002604:	f000 fc4d 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	201b      	movs	r0, #27
 800260e:	f000 fc2c 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002612:	201b      	movs	r0, #27
 8002614:	f000 fc45 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002618:	e02e      	b.n	8002678 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002622:	d116      	bne.n	8002652 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	4a15      	ldr	r2, [pc, #84]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6413      	str	r3, [r2, #64]	; 0x40
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 8002636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002640:	2200      	movs	r2, #0
 8002642:	2100      	movs	r1, #0
 8002644:	201c      	movs	r0, #28
 8002646:	f000 fc10 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800264a:	201c      	movs	r0, #28
 800264c:	f000 fc29 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
}
 8002650:	e012      	b.n	8002678 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_TIM_Base_MspInit+0x120>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10d      	bne.n	8002678 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	4b08      	ldr	r3, [pc, #32]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 8002662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002664:	4a07      	ldr	r2, [pc, #28]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 8002666:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800266a:	6453      	str	r3, [r2, #68]	; 0x44
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_TIM_Base_MspInit+0x118>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	bf00      	nop
 800267a:	3730      	adds	r7, #48	; 0x30
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40010000 	.word	0x40010000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000
 800268c:	40014800 	.word	0x40014800

08002690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 030c 	add.w	r3, r7, #12
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b0:	d11e      	bne.n	80026f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_TIM_MspPostInit+0x68>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a0f      	ldr	r2, [pc, #60]	; (80026f8 <HAL_TIM_MspPostInit+0x68>)
 80026bc:	f043 0302 	orr.w	r3, r3, #2
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <HAL_TIM_MspPostInit+0x68>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d4:	2302      	movs	r3, #2
 80026d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d8:	2300      	movs	r3, #0
 80026da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026e0:	2301      	movs	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4619      	mov	r1, r3
 80026ea:	4804      	ldr	r0, [pc, #16]	; (80026fc <HAL_TIM_MspPostInit+0x6c>)
 80026ec:	f000 fc86 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80026f0:	bf00      	nop
 80026f2:	3720      	adds	r7, #32
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40023800 	.word	0x40023800
 80026fc:	40020400 	.word	0x40020400

08002700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08a      	sub	sp, #40	; 0x28
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <HAL_UART_MspInit+0x94>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d133      	bne.n	800278a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002722:	2300      	movs	r3, #0
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	4b1c      	ldr	r3, [pc, #112]	; (8002798 <HAL_UART_MspInit+0x98>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	4a1b      	ldr	r2, [pc, #108]	; (8002798 <HAL_UART_MspInit+0x98>)
 800272c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
 8002732:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_UART_MspInit+0x98>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	613b      	str	r3, [r7, #16]
 800273c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_UART_MspInit+0x98>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_UART_MspInit+0x98>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6313      	str	r3, [r2, #48]	; 0x30
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_UART_MspInit+0x98>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800275a:	230c      	movs	r3, #12
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002766:	2303      	movs	r3, #3
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800276a:	2307      	movs	r3, #7
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4809      	ldr	r0, [pc, #36]	; (800279c <HAL_UART_MspInit+0x9c>)
 8002776:	f000 fc41 	bl	8002ffc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	2026      	movs	r0, #38	; 0x26
 8002780:	f000 fb73 	bl	8002e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002784:	2026      	movs	r0, #38	; 0x26
 8002786:	f000 fb8c 	bl	8002ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800278a:	bf00      	nop
 800278c:	3728      	adds	r7, #40	; 0x28
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40004400 	.word	0x40004400
 8002798:	40023800 	.word	0x40023800
 800279c:	40020000 	.word	0x40020000

080027a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <NMI_Handler+0x4>

080027a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027a6:	b480      	push	{r7}
 80027a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027aa:	e7fe      	b.n	80027aa <HardFault_Handler+0x4>

080027ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <MemManage_Handler+0x4>

080027b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027b2:	b480      	push	{r7}
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027b6:	e7fe      	b.n	80027b6 <BusFault_Handler+0x4>

080027b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <UsageFault_Handler+0x4>

080027be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027ec:	f000 fa1e 	bl	8002c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();	// ADD_SHHAN_0826
 80027f0:	f7fe ffbe 	bl	8001770 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80027f4:	bf00      	nop
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027fc:	2001      	movs	r0, #1
 80027fe:	f000 fdb3 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}

08002806 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800280a:	2002      	movs	r0, #2
 800280c:	f000 fdac 	bl	8003368 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800281a:	f002 fe0d 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000730 	.word	0x20000730

08002828 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800282e:	f002 fe03 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000730 	.word	0x20000730

0800283c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002840:	4803      	ldr	r0, [pc, #12]	; (8002850 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002842:	f002 fdf9 	bl	8005438 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002846:	4803      	ldr	r0, [pc, #12]	; (8002854 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002848:	f002 fdf6 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000730 	.word	0x20000730
 8002854:	200007c0 	.word	0x200007c0

08002858 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <TIM1_CC_IRQHandler+0x10>)
 800285e:	f002 fdeb 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000730 	.word	0x20000730

0800286c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM2_IRQHandler+0x10>)
 8002872:	f002 fde1 	bl	8005438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	20000778 	.word	0x20000778

08002880 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <USART2_IRQHandler+0x10>)
 8002886:	f003 fee3 	bl	8006650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000808 	.word	0x20000808

08002894 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	e00a      	b.n	80028bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028a6:	f3af 8000 	nop.w
 80028aa:	4601      	mov	r1, r0
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	b2ca      	uxtb	r2, r1
 80028b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	3301      	adds	r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	dbf0      	blt.n	80028a6 <_read+0x12>
	}

return len;
 80028c4:	687b      	ldr	r3, [r7, #4]
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	e009      	b.n	80028f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	60ba      	str	r2, [r7, #8]
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe ff2f 	bl	800174c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	3301      	adds	r3, #1
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	dbf1      	blt.n	80028e0 <_write+0x12>
	}
	return len;
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <_close>:

int _close(int file)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
	return -1;
 800290e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800292e:	605a      	str	r2, [r3, #4]
	return 0;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <_isatty>:

int _isatty(int file)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
	return 1;
 8002946:	2301      	movs	r3, #1
}
 8002948:	4618      	mov	r0, r3
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
	return 0;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <_sbrk+0x5c>)
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <_sbrk+0x60>)
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <_sbrk+0x64>)
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <_sbrk+0x68>)
 8002990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	429a      	cmp	r2, r3
 800299e:	d207      	bcs.n	80029b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a0:	f004 fdc2 	bl	8007528 <__errno>
 80029a4:	4603      	mov	r3, r0
 80029a6:	220c      	movs	r2, #12
 80029a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	e009      	b.n	80029c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <_sbrk+0x64>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029b6:	4b07      	ldr	r3, [pc, #28]	; (80029d4 <_sbrk+0x64>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4413      	add	r3, r2
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <_sbrk+0x64>)
 80029c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029c2:	68fb      	ldr	r3, [r7, #12]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20020000 	.word	0x20020000
 80029d0:	00000400 	.word	0x00000400
 80029d4:	20000880 	.word	0x20000880
 80029d8:	200008a8 	.word	0x200008a8

080029dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e0:	4b06      	ldr	r3, [pc, #24]	; (80029fc <SystemInit+0x20>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <SystemInit+0x20>)
 80029e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <HAL_TIM_IC_CaptureCallback>:
int distance, distance_chk; // 거리 측정 값을 저장하는 변수
int ic_cpt_flag; // Rising Edge, Falling Edge를 Detect했을 때 check 하는 변수

// Rising Edge, Falling Edge Interrupt 가 발생 되면 이곳으로 들어 온다.
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  static uint8_t is_first_capture = 0;

  if(htim->Instance == TIM1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a12      	ldr	r2, [pc, #72]	; (8002a58 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d11d      	bne.n	8002a4e <HAL_TIM_IC_CaptureCallback+0x4e>
  {
	  if(is_first_capture == 0) // Rising Edge detect!!
 8002a12:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d107      	bne.n	8002a2a <HAL_TIM_IC_CaptureCallback+0x2a>
	  {
		  __HAL_TIM_SET_COUNTER(htim, 0);	// counter clear
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24
		  is_first_capture = 1; // Rising Edge 를 만났다는 indicator 를 set
 8002a22:	4b0e      	ldr	r3, [pc, #56]	; (8002a5c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
		  ic_cpt_flag  = 1;
	  }
  }
}
 8002a28:	e011      	b.n	8002a4e <HAL_TIM_IC_CaptureCallback+0x4e>
	  else if(is_first_capture == 1)	// falling Edge detect!!!!!
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d10d      	bne.n	8002a4e <HAL_TIM_IC_CaptureCallback+0x4e>
		  is_first_capture = 0; // 다음 INTRR를 위해 initial
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]
		  distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // 현재 까지 count된 값을 읽어 옴
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f003 f82a 	bl	8005a94 <HAL_TIM_ReadCapturedValue>
 8002a40:	4603      	mov	r3, r0
 8002a42:	461a      	mov	r2, r3
 8002a44:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002a46:	601a      	str	r2, [r3, #0]
		  ic_cpt_flag  = 1;
 8002a48:	4b06      	ldr	r3, [pc, #24]	; (8002a64 <HAL_TIM_IC_CaptureCallback+0x64>)
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40010000 	.word	0x40010000
 8002a5c:	20000890 	.word	0x20000890
 8002a60:	20000884 	.word	0x20000884
 8002a64:	2000088c 	.word	0x2000088c

08002a68 <make_trigger>:


void make_trigger()
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2120      	movs	r1, #32
 8002a70:	480a      	ldr	r0, [pc, #40]	; (8002a9c <make_trigger+0x34>)
 8002a72:	f000 fc5f 	bl	8003334 <HAL_GPIO_WritePin>
	delay_us(2);
 8002a76:	2002      	movs	r0, #2
 8002a78:	f7fe feee 	bl	8001858 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	2120      	movs	r1, #32
 8002a80:	4806      	ldr	r0, [pc, #24]	; (8002a9c <make_trigger+0x34>)
 8002a82:	f000 fc57 	bl	8003334 <HAL_GPIO_WritePin>
	delay_us(10);
 8002a86:	200a      	movs	r0, #10
 8002a88:	f7fe fee6 	bl	8001858 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2120      	movs	r1, #32
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <make_trigger+0x34>)
 8002a92:	f000 fc4f 	bl	8003334 <HAL_GPIO_WritePin>

}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40020800 	.word	0x40020800

08002aa0 <ultrasonic_processing>:

extern volatile int TIM11_10ms_ultrasonic_counter;

void ultrasonic_processing()
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
	if(TIM11_10ms_ultrasonic_counter >= 100)	// 1000ms cycle
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	; (8002b20 <ultrasonic_processing+0x80>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b63      	cmp	r3, #99	; 0x63
 8002aaa:	dd32      	ble.n	8002b12 <ultrasonic_processing+0x72>
	{
		TIM11_10ms_ultrasonic_counter = 0;
 8002aac:	4b1c      	ldr	r3, [pc, #112]	; (8002b20 <ultrasonic_processing+0x80>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
		make_trigger();
 8002ab2:	f7ff ffd9 	bl	8002a68 <make_trigger>
		if(ic_cpt_flag)
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <ultrasonic_processing+0x84>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d029      	beq.n	8002b12 <ultrasonic_processing+0x72>
		{
			ic_cpt_flag = 0;
 8002abe:	4b19      	ldr	r3, [pc, #100]	; (8002b24 <ultrasonic_processing+0x84>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
			distance = distance * 0.034 / 2; // 1us 가 0.034cm 이동
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <ultrasonic_processing+0x88>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd2b 	bl	8000524 <__aeabi_i2d>
 8002ace:	a312      	add	r3, pc, #72	; (adr r3, 8002b18 <ultrasonic_processing+0x78>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fd90 	bl	80005f8 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ae8:	f7fd feb0 	bl	800084c <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	f7fd ff92 	bl	8000a1c <__aeabi_d2iz>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <ultrasonic_processing+0x88>)
 8002afc:	6013      	str	r3, [r2, #0]
			distance_chk = distance;
 8002afe:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <ultrasonic_processing+0x88>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <ultrasonic_processing+0x8c>)
 8002b04:	6013      	str	r3, [r2, #0]
			// 왕복 값을 return 하기 때문에 편도 거리 값을 구하기 위해 /2를 해야함
			printf("distance : %dcm\n", distance);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <ultrasonic_processing+0x88>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4808      	ldr	r0, [pc, #32]	; (8002b30 <ultrasonic_processing+0x90>)
 8002b0e:	f004 fd3d 	bl	800758c <iprintf>
		}
	}
}
 8002b12:	bf00      	nop
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	b020c49c 	.word	0xb020c49c
 8002b1c:	3fa16872 	.word	0x3fa16872
 8002b20:	2000085c 	.word	0x2000085c
 8002b24:	2000088c 	.word	0x2000088c
 8002b28:	20000884 	.word	0x20000884
 8002b2c:	20000888 	.word	0x20000888
 8002b30:	08008c14 	.word	0x08008c14

08002b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b38:	480d      	ldr	r0, [pc, #52]	; (8002b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b3a:	490e      	ldr	r1, [pc, #56]	; (8002b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b3c:	4a0e      	ldr	r2, [pc, #56]	; (8002b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b40:	e002      	b.n	8002b48 <LoopCopyDataInit>

08002b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b46:	3304      	adds	r3, #4

08002b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b4c:	d3f9      	bcc.n	8002b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b4e:	4a0b      	ldr	r2, [pc, #44]	; (8002b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b50:	4c0b      	ldr	r4, [pc, #44]	; (8002b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b54:	e001      	b.n	8002b5a <LoopFillZerobss>

08002b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b58:	3204      	adds	r2, #4

08002b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b5c:	d3fb      	bcc.n	8002b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b5e:	f7ff ff3d 	bl	80029dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b62:	f004 fce7 	bl	8007534 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b66:	f7fe fe8f 	bl	8001888 <main>
  bx  lr    
 8002b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b74:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002b78:	08008dec 	.word	0x08008dec
  ldr r2, =_sbss
 8002b7c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002b80:	200008a8 	.word	0x200008a8

08002b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b84:	e7fe      	b.n	8002b84 <ADC_IRQHandler>
	...

08002b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0d      	ldr	r2, [pc, #52]	; (8002bc8 <HAL_Init+0x40>)
 8002b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <HAL_Init+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <HAL_Init+0x40>)
 8002b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ba4:	4b08      	ldr	r3, [pc, #32]	; (8002bc8 <HAL_Init+0x40>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a07      	ldr	r2, [pc, #28]	; (8002bc8 <HAL_Init+0x40>)
 8002baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	f000 f94f 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f000 f808 	bl	8002bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bbc:	f7ff fc3a 	bl	8002434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00

08002bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bd4:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_InitTick+0x54>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_InitTick+0x58>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 f967 	bl	8002ebe <HAL_SYSTICK_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00e      	b.n	8002c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d80a      	bhi.n	8002c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c00:	2200      	movs	r2, #0
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f000 f92f 	bl	8002e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c0c:	4a06      	ldr	r2, [pc, #24]	; (8002c28 <HAL_InitTick+0x5c>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	20000010 	.word	0x20000010
 8002c24:	20000018 	.word	0x20000018
 8002c28:	20000014 	.word	0x20000014

08002c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <HAL_IncTick+0x20>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_IncTick+0x24>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a04      	ldr	r2, [pc, #16]	; (8002c50 <HAL_IncTick+0x24>)
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000018 	.word	0x20000018
 8002c50:	20000894 	.word	0x20000894

08002c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return uwTick;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_GetTick+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000894 	.word	0x20000894

08002c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c74:	f7ff ffee 	bl	8002c54 <HAL_GetTick>
 8002c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d005      	beq.n	8002c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c86:	4b0a      	ldr	r3, [pc, #40]	; (8002cb0 <HAL_Delay+0x44>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4413      	add	r3, r2
 8002c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c92:	bf00      	nop
 8002c94:	f7ff ffde 	bl	8002c54 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d8f7      	bhi.n	8002c94 <HAL_Delay+0x28>
  {
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000018 	.word	0x20000018

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	db0b      	blt.n	8002d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	4907      	ldr	r1, [pc, #28]	; (8002d50 <__NVIC_EnableIRQ+0x38>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	095b      	lsrs	r3, r3, #5
 8002d38:	2001      	movs	r0, #1
 8002d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	e000e100 	.word	0xe000e100

08002d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	6039      	str	r1, [r7, #0]
 8002d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	db0a      	blt.n	8002d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	490c      	ldr	r1, [pc, #48]	; (8002da0 <__NVIC_SetPriority+0x4c>)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	0112      	lsls	r2, r2, #4
 8002d74:	b2d2      	uxtb	r2, r2
 8002d76:	440b      	add	r3, r1
 8002d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d7c:	e00a      	b.n	8002d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4908      	ldr	r1, [pc, #32]	; (8002da4 <__NVIC_SetPriority+0x50>)
 8002d84:	79fb      	ldrb	r3, [r7, #7]
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	3b04      	subs	r3, #4
 8002d8c:	0112      	lsls	r2, r2, #4
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	440b      	add	r3, r1
 8002d92:	761a      	strb	r2, [r3, #24]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	e000e100 	.word	0xe000e100
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b089      	sub	sp, #36	; 0x24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f1c3 0307 	rsb	r3, r3, #7
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	bf28      	it	cs
 8002dc6:	2304      	movcs	r3, #4
 8002dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2b06      	cmp	r3, #6
 8002dd0:	d902      	bls.n	8002dd8 <NVIC_EncodePriority+0x30>
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3b03      	subs	r3, #3
 8002dd6:	e000      	b.n	8002dda <NVIC_EncodePriority+0x32>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	401a      	ands	r2, r3
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df0:	f04f 31ff 	mov.w	r1, #4294967295
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfa:	43d9      	mvns	r1, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e00:	4313      	orrs	r3, r2
         );
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3724      	adds	r7, #36	; 0x24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e20:	d301      	bcc.n	8002e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00f      	b.n	8002e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <SysTick_Config+0x40>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f7ff ff8e 	bl	8002d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SysTick_Config+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <SysTick_Config+0x40>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff ff29 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b086      	sub	sp, #24
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	4603      	mov	r3, r0
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
 8002e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e7c:	f7ff ff3e 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68b9      	ldr	r1, [r7, #8]
 8002e86:	6978      	ldr	r0, [r7, #20]
 8002e88:	f7ff ff8e 	bl	8002da8 <NVIC_EncodePriority>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff ff5d 	bl	8002d54 <__NVIC_SetPriority>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff ff31 	bl	8002d18 <__NVIC_EnableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ffa2 	bl	8002e10 <SysTick_Config>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ee4:	f7ff feb6 	bl	8002c54 <HAL_GetTick>
 8002ee8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d008      	beq.n	8002f08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e052      	b.n	8002fae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0216 	bic.w	r2, r2, #22
 8002f16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695a      	ldr	r2, [r3, #20]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <HAL_DMA_Abort+0x62>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0208 	bic.w	r2, r2, #8
 8002f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	e013      	b.n	8002f82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5a:	f7ff fe7b 	bl	8002c54 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d90c      	bls.n	8002f82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e015      	b.n	8002fae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e4      	bne.n	8002f5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	223f      	movs	r2, #63	; 0x3f
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2280      	movs	r2, #128	; 0x80
 8002fce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e00c      	b.n	8002fee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2205      	movs	r2, #5
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e159      	b.n	80032cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 8148 	bne.w	80032c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d005      	beq.n	800304e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304a:	2b02      	cmp	r3, #2
 800304c:	d130      	bne.n	80030b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	2203      	movs	r2, #3
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 0201 	and.w	r2, r3, #1
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d017      	beq.n	80030ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	2203      	movs	r2, #3
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d123      	bne.n	8003140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a2 	beq.w	80032c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b57      	ldr	r3, [pc, #348]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b54      	ldr	r3, [pc, #336]	; (80032e4 <HAL_GPIO_Init+0x2e8>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319e:	4a52      	ldr	r2, [pc, #328]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a49      	ldr	r2, [pc, #292]	; (80032ec <HAL_GPIO_Init+0x2f0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d019      	beq.n	80031fe <HAL_GPIO_Init+0x202>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a48      	ldr	r2, [pc, #288]	; (80032f0 <HAL_GPIO_Init+0x2f4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_GPIO_Init+0x1fe>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a47      	ldr	r2, [pc, #284]	; (80032f4 <HAL_GPIO_Init+0x2f8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d00d      	beq.n	80031f6 <HAL_GPIO_Init+0x1fa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a46      	ldr	r2, [pc, #280]	; (80032f8 <HAL_GPIO_Init+0x2fc>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <HAL_GPIO_Init+0x1f6>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a45      	ldr	r2, [pc, #276]	; (80032fc <HAL_GPIO_Init+0x300>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d101      	bne.n	80031ee <HAL_GPIO_Init+0x1f2>
 80031ea:	2304      	movs	r3, #4
 80031ec:	e008      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031ee:	2307      	movs	r3, #7
 80031f0:	e006      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031f2:	2303      	movs	r3, #3
 80031f4:	e004      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e002      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <HAL_GPIO_Init+0x204>
 80031fe:	2300      	movs	r3, #0
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	f002 0203 	and.w	r2, r2, #3
 8003206:	0092      	lsls	r2, r2, #2
 8003208:	4093      	lsls	r3, r2
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003210:	4935      	ldr	r1, [pc, #212]	; (80032e8 <HAL_GPIO_Init+0x2ec>)
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	089b      	lsrs	r3, r3, #2
 8003216:	3302      	adds	r3, #2
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321e:	4b38      	ldr	r3, [pc, #224]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003248:	4b2d      	ldr	r3, [pc, #180]	; (8003300 <HAL_GPIO_Init+0x304>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <HAL_GPIO_Init+0x304>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003272:	4b23      	ldr	r3, [pc, #140]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	43db      	mvns	r3, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4013      	ands	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003296:	4a1a      	ldr	r2, [pc, #104]	; (8003300 <HAL_GPIO_Init+0x304>)
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800329c:	4b18      	ldr	r3, [pc, #96]	; (8003300 <HAL_GPIO_Init+0x304>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c0:	4a0f      	ldr	r2, [pc, #60]	; (8003300 <HAL_GPIO_Init+0x304>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3301      	adds	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	2b0f      	cmp	r3, #15
 80032d0:	f67f aea2 	bls.w	8003018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800
 80032e8:	40013800 	.word	0x40013800
 80032ec:	40020000 	.word	0x40020000
 80032f0:	40020400 	.word	0x40020400
 80032f4:	40020800 	.word	0x40020800
 80032f8:	40020c00 	.word	0x40020c00
 80032fc:	40021000 	.word	0x40021000
 8003300:	40013c00 	.word	0x40013c00

08003304 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
 8003320:	e001      	b.n	8003326 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003322:	2300      	movs	r3, #0
 8003324:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003326:	7bfb      	ldrb	r3, [r7, #15]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	807b      	strh	r3, [r7, #2]
 8003340:	4613      	mov	r3, r2
 8003342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003344:	787b      	ldrb	r3, [r7, #1]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334a:	887a      	ldrh	r2, [r7, #2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003350:	e003      	b.n	800335a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003352:	887b      	ldrh	r3, [r7, #2]
 8003354:	041a      	lsls	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	619a      	str	r2, [r3, #24]
}
 800335a:	bf00      	nop
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003372:	4b08      	ldr	r3, [pc, #32]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003374:	695a      	ldr	r2, [r3, #20]
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	4013      	ands	r3, r2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337e:	4a05      	ldr	r2, [pc, #20]	; (8003394 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003384:	88fb      	ldrh	r3, [r7, #6]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fa34 	bl	80017f4 <HAL_GPIO_EXTI_Callback>
  }
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40013c00 	.word	0x40013c00

08003398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e12b      	b.n	8003602 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff f860 	bl	8002484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033fc:	f001 f888 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a81      	ldr	r2, [pc, #516]	; (800360c <HAL_I2C_Init+0x274>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d807      	bhi.n	800341c <HAL_I2C_Init+0x84>
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a80      	ldr	r2, [pc, #512]	; (8003610 <HAL_I2C_Init+0x278>)
 8003410:	4293      	cmp	r3, r2
 8003412:	bf94      	ite	ls
 8003414:	2301      	movls	r3, #1
 8003416:	2300      	movhi	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e006      	b.n	800342a <HAL_I2C_Init+0x92>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a7d      	ldr	r2, [pc, #500]	; (8003614 <HAL_I2C_Init+0x27c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0e7      	b.n	8003602 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a78      	ldr	r2, [pc, #480]	; (8003618 <HAL_I2C_Init+0x280>)
 8003436:	fba2 2303 	umull	r2, r3, r2, r3
 800343a:	0c9b      	lsrs	r3, r3, #18
 800343c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	430a      	orrs	r2, r1
 8003450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a6a      	ldr	r2, [pc, #424]	; (800360c <HAL_I2C_Init+0x274>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d802      	bhi.n	800346c <HAL_I2C_Init+0xd4>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3301      	adds	r3, #1
 800346a:	e009      	b.n	8003480 <HAL_I2C_Init+0xe8>
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003472:	fb02 f303 	mul.w	r3, r2, r3
 8003476:	4a69      	ldr	r2, [pc, #420]	; (800361c <HAL_I2C_Init+0x284>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	099b      	lsrs	r3, r3, #6
 800347e:	3301      	adds	r3, #1
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	430b      	orrs	r3, r1
 8003486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	495c      	ldr	r1, [pc, #368]	; (800360c <HAL_I2C_Init+0x274>)
 800349c:	428b      	cmp	r3, r1
 800349e:	d819      	bhi.n	80034d4 <HAL_I2C_Init+0x13c>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e59      	subs	r1, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034b4:	400b      	ands	r3, r1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <HAL_I2C_Init+0x138>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1e59      	subs	r1, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034c8:	3301      	adds	r3, #1
 80034ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ce:	e051      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 80034d0:	2304      	movs	r3, #4
 80034d2:	e04f      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d111      	bne.n	8003500 <HAL_I2C_Init+0x168>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	1e58      	subs	r0, r3, #1
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6859      	ldr	r1, [r3, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e012      	b.n	8003526 <HAL_I2C_Init+0x18e>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1e58      	subs	r0, r3, #1
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6859      	ldr	r1, [r3, #4]
 8003508:	460b      	mov	r3, r1
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	0099      	lsls	r1, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	fbb0 f3f3 	udiv	r3, r0, r3
 8003516:	3301      	adds	r3, #1
 8003518:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800351c:	2b00      	cmp	r3, #0
 800351e:	bf0c      	ite	eq
 8003520:	2301      	moveq	r3, #1
 8003522:	2300      	movne	r3, #0
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Init+0x196>
 800352a:	2301      	movs	r3, #1
 800352c:	e022      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10e      	bne.n	8003554 <HAL_I2C_Init+0x1bc>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1e58      	subs	r0, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	fbb0 f3f3 	udiv	r3, r0, r3
 8003548:	3301      	adds	r3, #1
 800354a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	e00f      	b.n	8003574 <HAL_I2C_Init+0x1dc>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	6809      	ldr	r1, [r1, #0]
 8003578:	4313      	orrs	r3, r2
 800357a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6911      	ldr	r1, [r2, #16]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68d2      	ldr	r2, [r2, #12]
 80035ae:	4311      	orrs	r1, r2
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	430b      	orrs	r3, r1
 80035b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695a      	ldr	r2, [r3, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0201 	orr.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2220      	movs	r2, #32
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3710      	adds	r7, #16
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	000186a0 	.word	0x000186a0
 8003610:	001e847f 	.word	0x001e847f
 8003614:	003d08ff 	.word	0x003d08ff
 8003618:	431bde83 	.word	0x431bde83
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607a      	str	r2, [r7, #4]
 800362a:	461a      	mov	r2, r3
 800362c:	460b      	mov	r3, r1
 800362e:	817b      	strh	r3, [r7, #10]
 8003630:	4613      	mov	r3, r2
 8003632:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003634:	f7ff fb0e 	bl	8002c54 <HAL_GetTick>
 8003638:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b20      	cmp	r3, #32
 8003644:	f040 80e0 	bne.w	8003808 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2319      	movs	r3, #25
 800364e:	2201      	movs	r2, #1
 8003650:	4970      	ldr	r1, [pc, #448]	; (8003814 <HAL_I2C_Master_Transmit+0x1f4>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f964 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800365e:	2302      	movs	r3, #2
 8003660:	e0d3      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_I2C_Master_Transmit+0x50>
 800366c:	2302      	movs	r3, #2
 800366e:	e0cc      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b01      	cmp	r3, #1
 8003684:	d007      	beq.n	8003696 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0201 	orr.w	r2, r2, #1
 8003694:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2221      	movs	r2, #33	; 0x21
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2210      	movs	r2, #16
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	893a      	ldrh	r2, [r7, #8]
 80036c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	4a50      	ldr	r2, [pc, #320]	; (8003818 <HAL_I2C_Master_Transmit+0x1f8>)
 80036d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d8:	8979      	ldrh	r1, [r7, #10]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	6a3a      	ldr	r2, [r7, #32]
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f89c 	bl	800381c <I2C_MasterRequestWrite>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e08d      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	613b      	str	r3, [r7, #16]
 8003702:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003704:	e066      	b.n	80037d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	6a39      	ldr	r1, [r7, #32]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f9de 	bl	8003acc <I2C_WaitOnTXEFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00d      	beq.n	8003732 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b04      	cmp	r3, #4
 800371c:	d107      	bne.n	800372e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800372c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e06b      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	781a      	ldrb	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d11b      	bne.n	80037a8 <HAL_I2C_Master_Transmit+0x188>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	2b00      	cmp	r3, #0
 8003776:	d017      	beq.n	80037a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	6a39      	ldr	r1, [r7, #32]
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f9ce 	bl	8003b4e <I2C_WaitOnBTFFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e01a      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d194      	bne.n	8003706 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000

0800381c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b088      	sub	sp, #32
 8003820:	af02      	add	r7, sp, #8
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	603b      	str	r3, [r7, #0]
 8003828:	460b      	mov	r3, r1
 800382a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2b08      	cmp	r3, #8
 8003836:	d006      	beq.n	8003846 <I2C_MasterRequestWrite+0x2a>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d003      	beq.n	8003846 <I2C_MasterRequestWrite+0x2a>
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003844:	d108      	bne.n	8003858 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003854:	601a      	str	r2, [r3, #0]
 8003856:	e00b      	b.n	8003870 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	2b12      	cmp	r3, #18
 800385e:	d107      	bne.n	8003870 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f84f 	bl	8003920 <I2C_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00d      	beq.n	80038a4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003896:	d103      	bne.n	80038a0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800389e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e035      	b.n	8003910 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ac:	d108      	bne.n	80038c0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80038ae:	897b      	ldrh	r3, [r7, #10]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80038bc:	611a      	str	r2, [r3, #16]
 80038be:	e01b      	b.n	80038f8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80038c0:	897b      	ldrh	r3, [r7, #10]
 80038c2:	11db      	asrs	r3, r3, #7
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 0306 	and.w	r3, r3, #6
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	f063 030f 	orn	r3, r3, #15
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	490e      	ldr	r1, [pc, #56]	; (8003918 <I2C_MasterRequestWrite+0xfc>)
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 f875 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e010      	b.n	8003910 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80038ee:	897b      	ldrh	r3, [r7, #10]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	4907      	ldr	r1, [pc, #28]	; (800391c <I2C_MasterRequestWrite+0x100>)
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f865 	bl	80039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	00010008 	.word	0x00010008
 800391c:	00010002 	.word	0x00010002

08003920 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	603b      	str	r3, [r7, #0]
 800392c:	4613      	mov	r3, r2
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003930:	e025      	b.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d021      	beq.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7ff f98b 	bl	8002c54 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnFlagUntilTimeout+0x30>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d116      	bne.n	800397e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f043 0220 	orr.w	r2, r3, #32
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e023      	b.n	80039c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d10d      	bne.n	80039a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	695b      	ldr	r3, [r3, #20]
 800398e:	43da      	mvns	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4013      	ands	r3, r2
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	bf0c      	ite	eq
 800399a:	2301      	moveq	r3, #1
 800399c:	2300      	movne	r3, #0
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	e00c      	b.n	80039be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4013      	ands	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf0c      	ite	eq
 80039b6:	2301      	moveq	r3, #1
 80039b8:	2300      	movne	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	461a      	mov	r2, r3
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d0b6      	beq.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
 80039da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039dc:	e051      	b.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d123      	bne.n	8003a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0204 	orr.w	r2, r3, #4
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e046      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a3c:	d021      	beq.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3e:	f7ff f909 	bl	8002c54 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d302      	bcc.n	8003a54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6e:	f043 0220 	orr.w	r2, r3, #32
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e020      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d10c      	bne.n	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	43da      	mvns	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf14      	ite	ne
 8003a9e:	2301      	movne	r3, #1
 8003aa0:	2300      	moveq	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e00b      	b.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	43da      	mvns	r2, r3
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d18d      	bne.n	80039de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad8:	e02d      	b.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f878 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e02d      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d021      	beq.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7ff f8af 	bl	8002c54 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d116      	bne.n	8003b36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e007      	b.n	8003b46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b40:	2b80      	cmp	r3, #128	; 0x80
 8003b42:	d1ca      	bne.n	8003ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b084      	sub	sp, #16
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b5a:	e02d      	b.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 f837 	bl	8003bd0 <I2C_IsAcknowledgeFailed>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e02d      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b72:	d021      	beq.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b74:	f7ff f86e 	bl	8002c54 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d302      	bcc.n	8003b8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d116      	bne.n	8003bb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba4:	f043 0220 	orr.w	r2, r3, #32
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b04      	cmp	r3, #4
 8003bc4:	d1ca      	bne.n	8003b5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d11b      	bne.n	8003c20 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0c:	f043 0204 	orr.w	r2, r3, #4
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
	...

08003c30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e267      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d075      	beq.n	8003d3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	d00c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c5a:	4b85      	ldr	r3, [pc, #532]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d112      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c66:	4b82      	ldr	r3, [pc, #520]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c72:	d10b      	bne.n	8003c8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	4b7e      	ldr	r3, [pc, #504]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d05b      	beq.n	8003d38 <HAL_RCC_OscConfig+0x108>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d157      	bne.n	8003d38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e242      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d106      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x74>
 8003c96:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a75      	ldr	r2, [pc, #468]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e01d      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cac:	d10c      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x98>
 8003cae:	4b70      	ldr	r3, [pc, #448]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6f      	ldr	r2, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a6c      	ldr	r2, [pc, #432]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc4:	6013      	str	r3, [r2, #0]
 8003cc6:	e00b      	b.n	8003ce0 <HAL_RCC_OscConfig+0xb0>
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a68      	ldr	r2, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a65      	ldr	r2, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003cda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d013      	beq.n	8003d10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fe ffb4 	bl	8002c54 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf0:	f7fe ffb0 	bl	8002c54 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b64      	cmp	r3, #100	; 0x64
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e207      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d02:	4b5b      	ldr	r3, [pc, #364]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d0f0      	beq.n	8003cf0 <HAL_RCC_OscConfig+0xc0>
 8003d0e:	e014      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d10:	f7fe ffa0 	bl	8002c54 <HAL_GetTick>
 8003d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d16:	e008      	b.n	8003d2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d18:	f7fe ff9c 	bl	8002c54 <HAL_GetTick>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	2b64      	cmp	r3, #100	; 0x64
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e1f3      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d2a:	4b51      	ldr	r3, [pc, #324]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0xe8>
 8003d36:	e000      	b.n	8003d3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d063      	beq.n	8003e0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d46:	4b4a      	ldr	r3, [pc, #296]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d52:	4b47      	ldr	r3, [pc, #284]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d11c      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d5e:	4b44      	ldr	r3, [pc, #272]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d116      	bne.n	8003d98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d001      	beq.n	8003d82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e1c7      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d82:	4b3b      	ldr	r3, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	00db      	lsls	r3, r3, #3
 8003d90:	4937      	ldr	r1, [pc, #220]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d96:	e03a      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003da0:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da6:	f7fe ff55 	bl	8002c54 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dae:	f7fe ff51 	bl	8002c54 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e1a8      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc0:	4b2b      	ldr	r3, [pc, #172]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d0f0      	beq.n	8003dae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	4925      	ldr	r1, [pc, #148]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	600b      	str	r3, [r1, #0]
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003de2:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCC_OscConfig+0x244>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fe ff34 	bl	8002c54 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003df0:	f7fe ff30 	bl	8002c54 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e187      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0302 	and.w	r3, r3, #2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d036      	beq.n	8003e88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d016      	beq.n	8003e50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e28:	f7fe ff14 	bl	8002c54 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e30:	f7fe ff10 	bl	8002c54 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e167      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <HAL_RCC_OscConfig+0x240>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x200>
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <HAL_RCC_OscConfig+0x248>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e56:	f7fe fefd 	bl	8002c54 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fe fef9 	bl	8002c54 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e150      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 8003e70:	40023800 	.word	0x40023800
 8003e74:	42470000 	.word	0x42470000
 8003e78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	4b88      	ldr	r3, [pc, #544]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 8097 	beq.w	8003fc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e9a:	4b81      	ldr	r3, [pc, #516]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	4b7d      	ldr	r3, [pc, #500]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a7c      	ldr	r2, [pc, #496]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b7a      	ldr	r3, [pc, #488]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec6:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d118      	bne.n	8003f04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ed2:	4b74      	ldr	r3, [pc, #464]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a73      	ldr	r2, [pc, #460]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ede:	f7fe feb9 	bl	8002c54 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ee6:	f7fe feb5 	bl	8002c54 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e10c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef8:	4b6a      	ldr	r3, [pc, #424]	; (80040a4 <HAL_RCC_OscConfig+0x474>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCC_OscConfig+0x2ea>
 8003f0c:	4b64      	ldr	r3, [pc, #400]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a63      	ldr	r2, [pc, #396]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	e01c      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	2b05      	cmp	r3, #5
 8003f20:	d10c      	bne.n	8003f3c <HAL_RCC_OscConfig+0x30c>
 8003f22:	4b5f      	ldr	r3, [pc, #380]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	4a5e      	ldr	r2, [pc, #376]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f2e:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f32:	4a5b      	ldr	r2, [pc, #364]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6713      	str	r3, [r2, #112]	; 0x70
 8003f3a:	e00b      	b.n	8003f54 <HAL_RCC_OscConfig+0x324>
 8003f3c:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	4a57      	ldr	r2, [pc, #348]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	6713      	str	r3, [r2, #112]	; 0x70
 8003f48:	4b55      	ldr	r3, [pc, #340]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4c:	4a54      	ldr	r2, [pc, #336]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f4e:	f023 0304 	bic.w	r3, r3, #4
 8003f52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d015      	beq.n	8003f88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5c:	f7fe fe7a 	bl	8002c54 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fe fe76 	bl	8002c54 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e0cb      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7a:	4b49      	ldr	r3, [pc, #292]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0ee      	beq.n	8003f64 <HAL_RCC_OscConfig+0x334>
 8003f86:	e014      	b.n	8003fb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7fe fe64 	bl	8002c54 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f8e:	e00a      	b.n	8003fa6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fe fe60 	bl	8002c54 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e0b5      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa6:	4b3e      	ldr	r3, [pc, #248]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1ee      	bne.n	8003f90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb2:	7dfb      	ldrb	r3, [r7, #23]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d105      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb8:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	4a38      	ldr	r2, [pc, #224]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80a1 	beq.w	8004110 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fce:	4b34      	ldr	r3, [pc, #208]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b08      	cmp	r3, #8
 8003fd8:	d05c      	beq.n	8004094 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d141      	bne.n	8004066 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b31      	ldr	r3, [pc, #196]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fe34 	bl	8002c54 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe fe30 	bl	8002c54 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e087      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b27      	ldr	r3, [pc, #156]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69da      	ldr	r2, [r3, #28]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	019b      	lsls	r3, r3, #6
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	085b      	lsrs	r3, r3, #1
 8004026:	3b01      	subs	r3, #1
 8004028:	041b      	lsls	r3, r3, #16
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	061b      	lsls	r3, r3, #24
 8004032:	491b      	ldr	r1, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004034:	4313      	orrs	r3, r2
 8004036:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004038:	4b1b      	ldr	r3, [pc, #108]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 800403a:	2201      	movs	r2, #1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fe fe09 	bl	8002c54 <HAL_GetTick>
 8004042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004046:	f7fe fe05 	bl	8002c54 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e05c      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004058:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x416>
 8004064:	e054      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe fdf2 	bl	8002c54 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe fdee 	bl	8002c54 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e045      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b06      	ldr	r3, [pc, #24]	; (80040a0 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x444>
 8004092:	e03d      	b.n	8004110 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d107      	bne.n	80040ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e038      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	40007000 	.word	0x40007000
 80040a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040ac:	4b1b      	ldr	r3, [pc, #108]	; (800411c <HAL_RCC_OscConfig+0x4ec>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d028      	beq.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d121      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d11a      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040dc:	4013      	ands	r3, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d111      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	3b01      	subs	r3, #1
 80040f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004108:	429a      	cmp	r2, r3
 800410a:	d001      	beq.n	8004110 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	40023800 	.word	0x40023800

08004120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0cc      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	429a      	cmp	r2, r3
 8004140:	d90c      	bls.n	800415c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004142:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800414a:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e0b8      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d020      	beq.n	80041aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004174:	4b59      	ldr	r3, [pc, #356]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800417e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800418c:	4b53      	ldr	r3, [pc, #332]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	4a52      	ldr	r2, [pc, #328]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004196:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004198:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	494d      	ldr	r1, [pc, #308]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d044      	beq.n	8004240 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d107      	bne.n	80041ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d119      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e07f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041de:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d109      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e06f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ee:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e067      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fe:	4b37      	ldr	r3, [pc, #220]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f023 0203 	bic.w	r2, r3, #3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	4934      	ldr	r1, [pc, #208]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	4313      	orrs	r3, r2
 800420e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004210:	f7fe fd20 	bl	8002c54 <HAL_GetTick>
 8004214:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	e00a      	b.n	800422e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004218:	f7fe fd1c 	bl	8002c54 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	f241 3288 	movw	r2, #5000	; 0x1388
 8004226:	4293      	cmp	r3, r2
 8004228:	d901      	bls.n	800422e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e04f      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422e:	4b2b      	ldr	r3, [pc, #172]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 020c 	and.w	r2, r3, #12
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	429a      	cmp	r2, r3
 800423e:	d1eb      	bne.n	8004218 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0307 	and.w	r3, r3, #7
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d20c      	bcs.n	8004268 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b22      	ldr	r3, [pc, #136]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d001      	beq.n	8004268 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e032      	b.n	80042ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d008      	beq.n	8004286 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004274:	4b19      	ldr	r3, [pc, #100]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4916      	ldr	r1, [pc, #88]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004282:	4313      	orrs	r3, r2
 8004284:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004292:	4b12      	ldr	r3, [pc, #72]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	490e      	ldr	r1, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042a6:	f000 f821 	bl	80042ec <HAL_RCC_GetSysClockFreq>
 80042aa:	4602      	mov	r2, r0
 80042ac:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_ClockConfig+0x1bc>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	490a      	ldr	r1, [pc, #40]	; (80042e0 <HAL_RCC_ClockConfig+0x1c0>)
 80042b8:	5ccb      	ldrb	r3, [r1, r3]
 80042ba:	fa22 f303 	lsr.w	r3, r2, r3
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <HAL_RCC_ClockConfig+0x1c4>)
 80042c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042c2:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1c8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7fe fc80 	bl	8002bcc <HAL_InitTick>

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023c00 	.word	0x40023c00
 80042dc:	40023800 	.word	0x40023800
 80042e0:	08008c28 	.word	0x08008c28
 80042e4:	20000010 	.word	0x20000010
 80042e8:	20000014 	.word	0x20000014

080042ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f0:	b094      	sub	sp, #80	; 0x50
 80042f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	647b      	str	r3, [r7, #68]	; 0x44
 80042f8:	2300      	movs	r3, #0
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	2300      	movs	r3, #0
 80042fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004304:	4b79      	ldr	r3, [pc, #484]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b08      	cmp	r3, #8
 800430e:	d00d      	beq.n	800432c <HAL_RCC_GetSysClockFreq+0x40>
 8004310:	2b08      	cmp	r3, #8
 8004312:	f200 80e1 	bhi.w	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <HAL_RCC_GetSysClockFreq+0x34>
 800431a:	2b04      	cmp	r3, #4
 800431c:	d003      	beq.n	8004326 <HAL_RCC_GetSysClockFreq+0x3a>
 800431e:	e0db      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004320:	4b73      	ldr	r3, [pc, #460]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004324:	e0db      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004326:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004328:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432a:	e0d8      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800432c:	4b6f      	ldr	r3, [pc, #444]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004336:	4b6d      	ldr	r3, [pc, #436]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d063      	beq.n	800440a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004342:	4b6a      	ldr	r3, [pc, #424]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	099b      	lsrs	r3, r3, #6
 8004348:	2200      	movs	r2, #0
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
 800434c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800434e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800435e:	4622      	mov	r2, r4
 8004360:	462b      	mov	r3, r5
 8004362:	f04f 0000 	mov.w	r0, #0
 8004366:	f04f 0100 	mov.w	r1, #0
 800436a:	0159      	lsls	r1, r3, #5
 800436c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004370:	0150      	lsls	r0, r2, #5
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4621      	mov	r1, r4
 8004378:	1a51      	subs	r1, r2, r1
 800437a:	6139      	str	r1, [r7, #16]
 800437c:	4629      	mov	r1, r5
 800437e:	eb63 0301 	sbc.w	r3, r3, r1
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004390:	4659      	mov	r1, fp
 8004392:	018b      	lsls	r3, r1, #6
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439a:	4651      	mov	r1, sl
 800439c:	018a      	lsls	r2, r1, #6
 800439e:	4651      	mov	r1, sl
 80043a0:	ebb2 0801 	subs.w	r8, r2, r1
 80043a4:	4659      	mov	r1, fp
 80043a6:	eb63 0901 	sbc.w	r9, r3, r1
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043be:	4690      	mov	r8, r2
 80043c0:	4699      	mov	r9, r3
 80043c2:	4623      	mov	r3, r4
 80043c4:	eb18 0303 	adds.w	r3, r8, r3
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	462b      	mov	r3, r5
 80043cc:	eb49 0303 	adc.w	r3, r9, r3
 80043d0:	60fb      	str	r3, [r7, #12]
 80043d2:	f04f 0200 	mov.w	r2, #0
 80043d6:	f04f 0300 	mov.w	r3, #0
 80043da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043de:	4629      	mov	r1, r5
 80043e0:	024b      	lsls	r3, r1, #9
 80043e2:	4621      	mov	r1, r4
 80043e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043e8:	4621      	mov	r1, r4
 80043ea:	024a      	lsls	r2, r1, #9
 80043ec:	4610      	mov	r0, r2
 80043ee:	4619      	mov	r1, r3
 80043f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f2:	2200      	movs	r2, #0
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043fc:	f7fc fb36 	bl	8000a6c <__aeabi_uldivmod>
 8004400:	4602      	mov	r2, r0
 8004402:	460b      	mov	r3, r1
 8004404:	4613      	mov	r3, r2
 8004406:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004408:	e058      	b.n	80044bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	099b      	lsrs	r3, r3, #6
 8004410:	2200      	movs	r2, #0
 8004412:	4618      	mov	r0, r3
 8004414:	4611      	mov	r1, r2
 8004416:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	2300      	movs	r3, #0
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
 8004420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004424:	4642      	mov	r2, r8
 8004426:	464b      	mov	r3, r9
 8004428:	f04f 0000 	mov.w	r0, #0
 800442c:	f04f 0100 	mov.w	r1, #0
 8004430:	0159      	lsls	r1, r3, #5
 8004432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004436:	0150      	lsls	r0, r2, #5
 8004438:	4602      	mov	r2, r0
 800443a:	460b      	mov	r3, r1
 800443c:	4641      	mov	r1, r8
 800443e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004442:	4649      	mov	r1, r9
 8004444:	eb63 0b01 	sbc.w	fp, r3, r1
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004454:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004458:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800445c:	ebb2 040a 	subs.w	r4, r2, sl
 8004460:	eb63 050b 	sbc.w	r5, r3, fp
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	00eb      	lsls	r3, r5, #3
 800446e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004472:	00e2      	lsls	r2, r4, #3
 8004474:	4614      	mov	r4, r2
 8004476:	461d      	mov	r5, r3
 8004478:	4643      	mov	r3, r8
 800447a:	18e3      	adds	r3, r4, r3
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	464b      	mov	r3, r9
 8004480:	eb45 0303 	adc.w	r3, r5, r3
 8004484:	607b      	str	r3, [r7, #4]
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004492:	4629      	mov	r1, r5
 8004494:	028b      	lsls	r3, r1, #10
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800449c:	4621      	mov	r1, r4
 800449e:	028a      	lsls	r2, r1, #10
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a6:	2200      	movs	r2, #0
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	61fa      	str	r2, [r7, #28]
 80044ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b0:	f7fc fadc 	bl	8000a6c <__aeabi_uldivmod>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4613      	mov	r3, r2
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	0c1b      	lsrs	r3, r3, #16
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	3301      	adds	r3, #1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044d6:	e002      	b.n	80044de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3750      	adds	r7, #80	; 0x50
 80044e4:	46bd      	mov	sp, r7
 80044e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ea:	bf00      	nop
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	007a1200 	.word	0x007a1200

080044f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000010 	.word	0x20000010

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	08008c38 	.word	0x08008c38

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffdc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	08008c38 	.word	0x08008c38

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d105      	bne.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004584:	2b00      	cmp	r3, #0
 8004586:	d038      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004588:	4b68      	ldr	r3, [pc, #416]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800458e:	f7fe fb61 	bl	8002c54 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004596:	f7fe fb5d 	bl	8002c54 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0bd      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a8:	4b61      	ldr	r3, [pc, #388]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	019b      	lsls	r3, r3, #6
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	071b      	lsls	r3, r3, #28
 80045c6:	495a      	ldr	r1, [pc, #360]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045ce:	4b57      	ldr	r3, [pc, #348]	; (800472c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045d4:	f7fe fb3e 	bl	8002c54 <HAL_GetTick>
 80045d8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045dc:	f7fe fb3a 	bl	8002c54 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e09a      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045ee:	4b50      	ldr	r3, [pc, #320]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d0f0      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 8083 	beq.w	800470e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
 800460c:	4b48      	ldr	r3, [pc, #288]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	4a47      	ldr	r2, [pc, #284]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004616:	6413      	str	r3, [r2, #64]	; 0x40
 8004618:	4b45      	ldr	r3, [pc, #276]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004624:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a42      	ldr	r2, [pc, #264]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800462a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800462e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004630:	f7fe fb10 	bl	8002c54 <HAL_GetTick>
 8004634:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004636:	e008      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004638:	f7fe fb0c 	bl	8002c54 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b02      	cmp	r3, #2
 8004644:	d901      	bls.n	800464a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e06c      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800464a:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0f0      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004656:	4b36      	ldr	r3, [pc, #216]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800465e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d02f      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	429a      	cmp	r2, r3
 8004672:	d028      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004674:	4b2e      	ldr	r3, [pc, #184]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800467e:	4b2e      	ldr	r3, [pc, #184]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004680:	2201      	movs	r2, #1
 8004682:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004684:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800468a:	4a29      	ldr	r2, [pc, #164]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004690:	4b27      	ldr	r3, [pc, #156]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b01      	cmp	r3, #1
 800469a:	d114      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800469c:	f7fe fada 	bl	8002c54 <HAL_GetTick>
 80046a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046a2:	e00a      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046a4:	f7fe fad6 	bl	8002c54 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d901      	bls.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e034      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ba:	4b1d      	ldr	r3, [pc, #116]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0ee      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d2:	d10d      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e8:	4911      	ldr	r1, [pc, #68]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
 80046ee:	e005      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a0e      	ldr	r2, [pc, #56]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046fa:	6093      	str	r3, [r2, #8]
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	4909      	ldr	r1, [pc, #36]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	7d1a      	ldrb	r2, [r3, #20]
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004720:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	42470068 	.word	0x42470068
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	42470e40 	.word	0x42470e40
 800473c:	424711e0 	.word	0x424711e0

08004740 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e066      	b.n	8004824 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7f5b      	ldrb	r3, [r3, #29]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fd fed4 	bl	8002514 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	22ca      	movs	r2, #202	; 0xca
 8004778:	625a      	str	r2, [r3, #36]	; 0x24
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2253      	movs	r2, #83	; 0x53
 8004780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa45 	bl	8004c12 <RTC_EnterInitMode>
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d12c      	bne.n	80047ec <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80047a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	68d2      	ldr	r2, [r2, #12]
 80047cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6919      	ldr	r1, [r3, #16]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	041a      	lsls	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fa4c 	bl	8004c80 <RTC_ExitInitMode>
 80047e8:	4603      	mov	r3, r0
 80047ea:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d113      	bne.n	800481a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	22ff      	movs	r2, #255	; 0xff
 8004820:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	7f1b      	ldrb	r3, [r3, #28]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_RTC_SetTime+0x1c>
 8004844:	2302      	movs	r3, #2
 8004846:	e087      	b.n	8004958 <HAL_RTC_SetTime+0x12c>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2201      	movs	r2, #1
 800484c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2202      	movs	r2, #2
 8004852:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d126      	bne.n	80048a8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004864:	2b00      	cmp	r3, #0
 8004866:	d102      	bne.n	800486e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2200      	movs	r2, #0
 800486c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fa29 	bl	8004cca <RTC_ByteToBcd2>
 8004878:	4603      	mov	r3, r0
 800487a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fa22 	bl	8004cca <RTC_ByteToBcd2>
 8004886:	4603      	mov	r3, r0
 8004888:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800488a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	789b      	ldrb	r3, [r3, #2]
 8004890:	4618      	mov	r0, r3
 8004892:	f000 fa1a 	bl	8004cca <RTC_ByteToBcd2>
 8004896:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004898:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	78db      	ldrb	r3, [r3, #3]
 80048a0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	e018      	b.n	80048da <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d102      	bne.n	80048bc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	2200      	movs	r2, #0
 80048ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	785b      	ldrb	r3, [r3, #1]
 80048c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048c8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80048ce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	78db      	ldrb	r3, [r3, #3]
 80048d4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80048d6:	4313      	orrs	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	22ca      	movs	r2, #202	; 0xca
 80048e0:	625a      	str	r2, [r3, #36]	; 0x24
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2253      	movs	r2, #83	; 0x53
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f991 	bl	8004c12 <RTC_EnterInitMode>
 80048f0:	4603      	mov	r3, r0
 80048f2:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80048f4:	7cfb      	ldrb	r3, [r7, #19]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d120      	bne.n	800493c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004904:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004908:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004918:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6899      	ldr	r1, [r3, #8]
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f000 f9a4 	bl	8004c80 <RTC_ExitInitMode>
 8004938:	4603      	mov	r3, r0
 800493a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	22ff      	movs	r2, #255	; 0xff
 800494e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	771a      	strb	r2, [r3, #28]

  return status;
 8004956:	7cfb      	ldrb	r3, [r7, #19]
}
 8004958:	4618      	mov	r0, r3
 800495a:	371c      	adds	r7, #28
 800495c:	46bd      	mov	sp, r7
 800495e:	bd90      	pop	{r4, r7, pc}

08004960 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004992:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004996:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	0c1b      	lsrs	r3, r3, #16
 800499c:	b2db      	uxtb	r3, r3
 800499e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	0a1b      	lsrs	r3, r3, #8
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	0d9b      	lsrs	r3, r3, #22
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d11a      	bne.n	8004a12 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 f98f 	bl	8004d04 <RTC_Bcd2ToByte>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 f986 	bl	8004d04 <RTC_Bcd2ToByte>
 80049f8:	4603      	mov	r3, r0
 80049fa:	461a      	mov	r2, r3
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	789b      	ldrb	r3, [r3, #2]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f97d 	bl	8004d04 <RTC_Bcd2ToByte>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3718      	adds	r7, #24
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	7f1b      	ldrb	r3, [r3, #28]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RTC_SetDate+0x1c>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e071      	b.n	8004b1c <HAL_RTC_SetDate+0x100>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2202      	movs	r2, #2
 8004a42:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10e      	bne.n	8004a68 <HAL_RTC_SetDate+0x4c>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	785b      	ldrb	r3, [r3, #1]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	f023 0310 	bic.w	r3, r3, #16
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	330a      	adds	r3, #10
 8004a62:	b2da      	uxtb	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d11c      	bne.n	8004aa8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	78db      	ldrb	r3, [r3, #3]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f929 	bl	8004cca <RTC_ByteToBcd2>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	785b      	ldrb	r3, [r3, #1]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 f922 	bl	8004cca <RTC_ByteToBcd2>
 8004a86:	4603      	mov	r3, r0
 8004a88:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a8a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	789b      	ldrb	r3, [r3, #2]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 f91a 	bl	8004cca <RTC_ByteToBcd2>
 8004a96:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a98:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e00e      	b.n	8004ac6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	78db      	ldrb	r3, [r3, #3]
 8004aac:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ab4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004aba:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	22ca      	movs	r2, #202	; 0xca
 8004acc:	625a      	str	r2, [r3, #36]	; 0x24
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2253      	movs	r2, #83	; 0x53
 8004ad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 f89b 	bl	8004c12 <RTC_EnterInitMode>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004af0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004af4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f000 f8c2 	bl	8004c80 <RTC_ExitInitMode>
 8004afc:	4603      	mov	r3, r0
 8004afe:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b00:	7cfb      	ldrb	r3, [r7, #19]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	22ff      	movs	r2, #255	; 0xff
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	771a      	strb	r2, [r3, #28]

  return status;
 8004b1a:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd90      	pop	{r4, r7, pc}

08004b24 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004b3e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004b42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	0a1b      	lsrs	r3, r3, #8
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	0b5b      	lsrs	r3, r3, #13
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f003 0307 	and.w	r3, r3, #7
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11a      	bne.n	8004bb8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	78db      	ldrb	r3, [r3, #3]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f000 f8bc 	bl	8004d04 <RTC_Bcd2ToByte>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	785b      	ldrb	r3, [r3, #1]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 f8b3 	bl	8004d04 <RTC_Bcd2ToByte>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	789b      	ldrb	r3, [r3, #2]
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 f8aa 	bl	8004d04 <RTC_Bcd2ToByte>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b084      	sub	sp, #16
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bdc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bde:	f7fe f839 	bl	8002c54 <HAL_GetTick>
 8004be2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004be4:	e009      	b.n	8004bfa <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004be6:	f7fe f835 	bl	8002c54 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf4:	d901      	bls.n	8004bfa <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e007      	b.n	8004c0a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f003 0320 	and.w	r3, r3, #32
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ee      	beq.n	8004be6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d122      	bne.n	8004c76 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c40:	f7fe f808 	bl	8002c54 <HAL_GetTick>
 8004c44:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c46:	e00c      	b.n	8004c62 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004c48:	f7fe f804 	bl	8002c54 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c56:	d904      	bls.n	8004c62 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <RTC_EnterInitMode+0x64>
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d1e8      	bne.n	8004c48 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c9a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10a      	bne.n	8004cc0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff ff89 	bl	8004bc2 <HAL_RTC_WaitForSynchro>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d004      	beq.n	8004cc0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2204      	movs	r2, #4
 8004cba:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b085      	sub	sp, #20
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8004cd8:	e005      	b.n	8004ce6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	3b0a      	subs	r3, #10
 8004ce4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	2b09      	cmp	r3, #9
 8004cea:	d8f6      	bhi.n	8004cda <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	b2db      	uxtb	r3, r3
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8004d12:	79fb      	ldrb	r3, [r7, #7]
 8004d14:	091b      	lsrs	r3, r3, #4
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	0092      	lsls	r2, r2, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	f003 030f 	and.w	r3, r3, #15
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	b2db      	uxtb	r3, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e041      	b.n	8004dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d106      	bne.n	8004d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7fd fc02 	bl	800256c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	3304      	adds	r3, #4
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f000 feec 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d001      	beq.n	8004df4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e044      	b.n	8004e7e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <HAL_TIM_Base_Start_IT+0xb0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d018      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x6c>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1e:	d013      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x6c>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_TIM_Base_Start_IT+0xb4>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d00e      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x6c>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a19      	ldr	r2, [pc, #100]	; (8004e94 <HAL_TIM_Base_Start_IT+0xb8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d009      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x6c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d004      	beq.n	8004e48 <HAL_TIM_Base_Start_IT+0x6c>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a16      	ldr	r2, [pc, #88]	; (8004e9c <HAL_TIM_Base_Start_IT+0xc0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d111      	bne.n	8004e6c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2b06      	cmp	r3, #6
 8004e58:	d010      	beq.n	8004e7c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f042 0201 	orr.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e6a:	e007      	b.n	8004e7c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f042 0201 	orr.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	40000400 	.word	0x40000400
 8004e94:	40000800 	.word	0x40000800
 8004e98:	40000c00 	.word	0x40000c00
 8004e9c:	40014000 	.word	0x40014000

08004ea0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e041      	b.n	8004f36 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d106      	bne.n	8004ecc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f839 	bl	8004f3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3304      	adds	r3, #4
 8004edc:	4619      	mov	r1, r3
 8004ede:	4610      	mov	r0, r2
 8004ee0:	f000 fe3a 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f46:	bf00      	nop
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
	...

08004f54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d109      	bne.n	8004f7c <HAL_TIM_PWM_Start_IT+0x28>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	bf14      	ite	ne
 8004f74:	2301      	movne	r3, #1
 8004f76:	2300      	moveq	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	e022      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d109      	bne.n	8004f96 <HAL_TIM_PWM_Start_IT+0x42>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	bf14      	ite	ne
 8004f8e:	2301      	movne	r3, #1
 8004f90:	2300      	moveq	r3, #0
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	e015      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x6e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d109      	bne.n	8004fb0 <HAL_TIM_PWM_Start_IT+0x5c>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e008      	b.n	8004fc2 <HAL_TIM_PWM_Start_IT+0x6e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e0b3      	b.n	8005132 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Start_IT+0x86>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Start_IT+0xae>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Start_IT+0x96>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fe8:	e00b      	b.n	8005002 <HAL_TIM_PWM_Start_IT+0xae>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Start_IT+0xa6>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff8:	e003      	b.n	8005002 <HAL_TIM_PWM_Start_IT+0xae>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d841      	bhi.n	800508c <HAL_TIM_PWM_Start_IT+0x138>
 8005008:	a201      	add	r2, pc, #4	; (adr r2, 8005010 <HAL_TIM_PWM_Start_IT+0xbc>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005045 	.word	0x08005045
 8005014:	0800508d 	.word	0x0800508d
 8005018:	0800508d 	.word	0x0800508d
 800501c:	0800508d 	.word	0x0800508d
 8005020:	08005057 	.word	0x08005057
 8005024:	0800508d 	.word	0x0800508d
 8005028:	0800508d 	.word	0x0800508d
 800502c:	0800508d 	.word	0x0800508d
 8005030:	08005069 	.word	0x08005069
 8005034:	0800508d 	.word	0x0800508d
 8005038:	0800508d 	.word	0x0800508d
 800503c:	0800508d 	.word	0x0800508d
 8005040:	0800507b 	.word	0x0800507b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0202 	orr.w	r2, r2, #2
 8005052:	60da      	str	r2, [r3, #12]
      break;
 8005054:	e01d      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0204 	orr.w	r2, r2, #4
 8005064:	60da      	str	r2, [r3, #12]
      break;
 8005066:	e014      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0208 	orr.w	r2, r2, #8
 8005076:	60da      	str	r2, [r3, #12]
      break;
 8005078:	e00b      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0210 	orr.w	r2, r2, #16
 8005088:	60da      	str	r2, [r3, #12]
      break;
 800508a:	e002      	b.n	8005092 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	73fb      	strb	r3, [r7, #15]
      break;
 8005090:	bf00      	nop
  }

  if (status == HAL_OK)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d14b      	bne.n	8005130 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	6839      	ldr	r1, [r7, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f001 f91d 	bl	80062e0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a24      	ldr	r2, [pc, #144]	; (800513c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050be:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a1d      	ldr	r2, [pc, #116]	; (800513c <HAL_TIM_PWM_Start_IT+0x1e8>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_TIM_PWM_Start_IT+0x1a8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d2:	d013      	beq.n	80050fc <HAL_TIM_PWM_Start_IT+0x1a8>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a19      	ldr	r2, [pc, #100]	; (8005140 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_TIM_PWM_Start_IT+0x1a8>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a18      	ldr	r2, [pc, #96]	; (8005144 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_TIM_PWM_Start_IT+0x1a8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a16      	ldr	r2, [pc, #88]	; (8005148 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_TIM_PWM_Start_IT+0x1a8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a15      	ldr	r2, [pc, #84]	; (800514c <HAL_TIM_PWM_Start_IT+0x1f8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d111      	bne.n	8005120 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b06      	cmp	r3, #6
 800510c:	d010      	beq.n	8005130 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f042 0201 	orr.w	r2, r2, #1
 800511c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511e:	e007      	b.n	8005130 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005130:	7bfb      	ldrb	r3, [r7, #15]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	40010000 	.word	0x40010000
 8005140:	40000400 	.word	0x40000400
 8005144:	40000800 	.word	0x40000800
 8005148:	40000c00 	.word	0x40000c00
 800514c:	40014000 	.word	0x40014000

08005150 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e041      	b.n	80051e6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f839 	bl	80051ee <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	3304      	adds	r3, #4
 800518c:	4619      	mov	r1, r3
 800518e:	4610      	mov	r0, r2
 8005190:	f000 fce2 	bl	8005b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
	...

08005204 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800520e:	2300      	movs	r3, #0
 8005210:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_TIM_IC_Start_IT+0x1e>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800521e:	b2db      	uxtb	r3, r3
 8005220:	e013      	b.n	800524a <HAL_TIM_IC_Start_IT+0x46>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b04      	cmp	r3, #4
 8005226:	d104      	bne.n	8005232 <HAL_TIM_IC_Start_IT+0x2e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e00b      	b.n	800524a <HAL_TIM_IC_Start_IT+0x46>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d104      	bne.n	8005242 <HAL_TIM_IC_Start_IT+0x3e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e003      	b.n	800524a <HAL_TIM_IC_Start_IT+0x46>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005248:	b2db      	uxtb	r3, r3
 800524a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d104      	bne.n	800525c <HAL_TIM_IC_Start_IT+0x58>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e013      	b.n	8005284 <HAL_TIM_IC_Start_IT+0x80>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d104      	bne.n	800526c <HAL_TIM_IC_Start_IT+0x68>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005268:	b2db      	uxtb	r3, r3
 800526a:	e00b      	b.n	8005284 <HAL_TIM_IC_Start_IT+0x80>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b08      	cmp	r3, #8
 8005270:	d104      	bne.n	800527c <HAL_TIM_IC_Start_IT+0x78>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005278:	b2db      	uxtb	r3, r3
 800527a:	e003      	b.n	8005284 <HAL_TIM_IC_Start_IT+0x80>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005282:	b2db      	uxtb	r3, r3
 8005284:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005286:	7bbb      	ldrb	r3, [r7, #14]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d102      	bne.n	8005292 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800528c:	7b7b      	ldrb	r3, [r7, #13]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d001      	beq.n	8005296 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0c2      	b.n	800541c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_IC_Start_IT+0xa2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052a4:	e013      	b.n	80052ce <HAL_TIM_IC_Start_IT+0xca>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Start_IT+0xb2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052b4:	e00b      	b.n	80052ce <HAL_TIM_IC_Start_IT+0xca>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_IC_Start_IT+0xc2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052c4:	e003      	b.n	80052ce <HAL_TIM_IC_Start_IT+0xca>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Start_IT+0xda>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052dc:	e013      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x102>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start_IT+0xea>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ec:	e00b      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x102>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d104      	bne.n	80052fe <HAL_TIM_IC_Start_IT+0xfa>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2202      	movs	r2, #2
 80052f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fc:	e003      	b.n	8005306 <HAL_TIM_IC_Start_IT+0x102>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2202      	movs	r2, #2
 8005302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	2b0c      	cmp	r3, #12
 800530a:	d841      	bhi.n	8005390 <HAL_TIM_IC_Start_IT+0x18c>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <HAL_TIM_IC_Start_IT+0x110>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005349 	.word	0x08005349
 8005318:	08005391 	.word	0x08005391
 800531c:	08005391 	.word	0x08005391
 8005320:	08005391 	.word	0x08005391
 8005324:	0800535b 	.word	0x0800535b
 8005328:	08005391 	.word	0x08005391
 800532c:	08005391 	.word	0x08005391
 8005330:	08005391 	.word	0x08005391
 8005334:	0800536d 	.word	0x0800536d
 8005338:	08005391 	.word	0x08005391
 800533c:	08005391 	.word	0x08005391
 8005340:	08005391 	.word	0x08005391
 8005344:	0800537f 	.word	0x0800537f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0202 	orr.w	r2, r2, #2
 8005356:	60da      	str	r2, [r3, #12]
      break;
 8005358:	e01d      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68da      	ldr	r2, [r3, #12]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f042 0204 	orr.w	r2, r2, #4
 8005368:	60da      	str	r2, [r3, #12]
      break;
 800536a:	e014      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f042 0208 	orr.w	r2, r2, #8
 800537a:	60da      	str	r2, [r3, #12]
      break;
 800537c:	e00b      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0210 	orr.w	r2, r2, #16
 800538c:	60da      	str	r2, [r3, #12]
      break;
 800538e:	e002      	b.n	8005396 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	bf00      	nop
  }

  if (status == HAL_OK)
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d13e      	bne.n	800541a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	6839      	ldr	r1, [r7, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 ff9b 	bl	80062e0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a1d      	ldr	r2, [pc, #116]	; (8005424 <HAL_TIM_IC_Start_IT+0x220>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d018      	beq.n	80053e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d013      	beq.n	80053e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a19      	ldr	r2, [pc, #100]	; (8005428 <HAL_TIM_IC_Start_IT+0x224>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00e      	beq.n	80053e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_TIM_IC_Start_IT+0x228>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a16      	ldr	r2, [pc, #88]	; (8005430 <HAL_TIM_IC_Start_IT+0x22c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d004      	beq.n	80053e6 <HAL_TIM_IC_Start_IT+0x1e2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <HAL_TIM_IC_Start_IT+0x230>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d111      	bne.n	800540a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f003 0307 	and.w	r3, r3, #7
 80053f0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b06      	cmp	r3, #6
 80053f6:	d010      	beq.n	800541a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f042 0201 	orr.w	r2, r2, #1
 8005406:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005408:	e007      	b.n	800541a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40010000 	.word	0x40010000
 8005428:	40000400 	.word	0x40000400
 800542c:	40000800 	.word	0x40000800
 8005430:	40000c00 	.word	0x40000c00
 8005434:	40014000 	.word	0x40014000

08005438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b02      	cmp	r3, #2
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b02      	cmp	r3, #2
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0202 	mvn.w	r2, #2
 8005464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f7fd fac0 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fb4a 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 fb51 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d122      	bne.n	80054e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0304 	and.w	r3, r3, #4
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d11b      	bne.n	80054e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0204 	mvn.w	r2, #4
 80054b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2202      	movs	r2, #2
 80054be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fd fa96 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fb20 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb27 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b08      	cmp	r3, #8
 80054f4:	d122      	bne.n	800553c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d11b      	bne.n	800553c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0208 	mvn.w	r2, #8
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2204      	movs	r2, #4
 8005512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	69db      	ldr	r3, [r3, #28]
 800551a:	f003 0303 	and.w	r3, r3, #3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f7fd fa6c 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 8005528:	e005      	b.n	8005536 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 faf6 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 fafd 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0310 	and.w	r3, r3, #16
 8005546:	2b10      	cmp	r3, #16
 8005548:	d122      	bne.n	8005590 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b10      	cmp	r3, #16
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0210 	mvn.w	r2, #16
 8005560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2208      	movs	r2, #8
 8005566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fd fa42 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 facc 	bl	8005b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fad3 	bl	8005b30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b01      	cmp	r3, #1
 800559c:	d10e      	bne.n	80055bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d107      	bne.n	80055bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0201 	mvn.w	r2, #1
 80055b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fc f8f6 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c6:	2b80      	cmp	r3, #128	; 0x80
 80055c8:	d10e      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d4:	2b80      	cmp	r3, #128	; 0x80
 80055d6:	d107      	bne.n	80055e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 ff1a 	bl	800641c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d10e      	bne.n	8005614 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b40      	cmp	r3, #64	; 0x40
 8005602:	d107      	bne.n	8005614 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800560c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 fa98 	bl	8005b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	f003 0320 	and.w	r3, r3, #32
 800561e:	2b20      	cmp	r3, #32
 8005620:	d10e      	bne.n	8005640 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b20      	cmp	r3, #32
 800562e:	d107      	bne.n	8005640 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f06f 0220 	mvn.w	r2, #32
 8005638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fee4 	bl	8006408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005654:	2300      	movs	r3, #0
 8005656:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005662:	2302      	movs	r3, #2
 8005664:	e088      	b.n	8005778 <HAL_TIM_IC_ConfigChannel+0x130>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2201      	movs	r2, #1
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d11b      	bne.n	80056ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6819      	ldr	r1, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f000 fc74 	bl	8005f70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 020c 	bic.w	r2, r2, #12
 8005696:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	619a      	str	r2, [r3, #24]
 80056aa:	e060      	b.n	800576e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d11c      	bne.n	80056ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	6819      	ldr	r1, [r3, #0]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f000 fcec 	bl	800609e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699a      	ldr	r2, [r3, #24]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6999      	ldr	r1, [r3, #24]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	021a      	lsls	r2, r3, #8
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	619a      	str	r2, [r3, #24]
 80056ea:	e040      	b.n	800576e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b08      	cmp	r3, #8
 80056f0:	d11b      	bne.n	800572a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f000 fd39 	bl	8006178 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 020c 	bic.w	r2, r2, #12
 8005714:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
 8005728:	e021      	b.n	800576e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b0c      	cmp	r3, #12
 800572e:	d11c      	bne.n	800576a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6818      	ldr	r0, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f000 fd56 	bl	80061f0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69da      	ldr	r2, [r3, #28]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005752:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69d9      	ldr	r1, [r3, #28]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	61da      	str	r2, [r3, #28]
 8005768:	e001      	b.n	800576e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800578c:	2300      	movs	r3, #0
 800578e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005796:	2b01      	cmp	r3, #1
 8005798:	d101      	bne.n	800579e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800579a:	2302      	movs	r3, #2
 800579c:	e0ae      	b.n	80058fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2b0c      	cmp	r3, #12
 80057aa:	f200 809f 	bhi.w	80058ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057ae:	a201      	add	r2, pc, #4	; (adr r2, 80057b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080058ed 	.word	0x080058ed
 80057bc:	080058ed 	.word	0x080058ed
 80057c0:	080058ed 	.word	0x080058ed
 80057c4:	08005829 	.word	0x08005829
 80057c8:	080058ed 	.word	0x080058ed
 80057cc:	080058ed 	.word	0x080058ed
 80057d0:	080058ed 	.word	0x080058ed
 80057d4:	0800586b 	.word	0x0800586b
 80057d8:	080058ed 	.word	0x080058ed
 80057dc:	080058ed 	.word	0x080058ed
 80057e0:	080058ed 	.word	0x080058ed
 80057e4:	080058ab 	.word	0x080058ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68b9      	ldr	r1, [r7, #8]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f000 fa32 	bl	8005c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	699a      	ldr	r2, [r3, #24]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0208 	orr.w	r2, r2, #8
 8005802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0204 	bic.w	r2, r2, #4
 8005812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6999      	ldr	r1, [r3, #24]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	691a      	ldr	r2, [r3, #16]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	619a      	str	r2, [r3, #24]
      break;
 8005826:	e064      	b.n	80058f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68b9      	ldr	r1, [r7, #8]
 800582e:	4618      	mov	r0, r3
 8005830:	f000 fa78 	bl	8005d24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6999      	ldr	r1, [r3, #24]
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	619a      	str	r2, [r3, #24]
      break;
 8005868:	e043      	b.n	80058f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fac3 	bl	8005dfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69da      	ldr	r2, [r3, #28]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0208 	orr.w	r2, r2, #8
 8005884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0204 	bic.w	r2, r2, #4
 8005894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69d9      	ldr	r1, [r3, #28]
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	61da      	str	r2, [r3, #28]
      break;
 80058a8:	e023      	b.n	80058f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fb0d 	bl	8005ed0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69da      	ldr	r2, [r3, #28]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	69d9      	ldr	r1, [r3, #28]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	61da      	str	r2, [r3, #28]
      break;
 80058ea:	e002      	b.n	80058f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
      break;
 80058f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIM_ConfigClockSource+0x1c>
 800591c:	2302      	movs	r3, #2
 800591e:	e0b4      	b.n	8005a8a <HAL_TIM_ConfigClockSource+0x186>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800593e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005958:	d03e      	beq.n	80059d8 <HAL_TIM_ConfigClockSource+0xd4>
 800595a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595e:	f200 8087 	bhi.w	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005966:	f000 8086 	beq.w	8005a76 <HAL_TIM_ConfigClockSource+0x172>
 800596a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596e:	d87f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005970:	2b70      	cmp	r3, #112	; 0x70
 8005972:	d01a      	beq.n	80059aa <HAL_TIM_ConfigClockSource+0xa6>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d87b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005978:	2b60      	cmp	r3, #96	; 0x60
 800597a:	d050      	beq.n	8005a1e <HAL_TIM_ConfigClockSource+0x11a>
 800597c:	2b60      	cmp	r3, #96	; 0x60
 800597e:	d877      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005980:	2b50      	cmp	r3, #80	; 0x50
 8005982:	d03c      	beq.n	80059fe <HAL_TIM_ConfigClockSource+0xfa>
 8005984:	2b50      	cmp	r3, #80	; 0x50
 8005986:	d873      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005988:	2b40      	cmp	r3, #64	; 0x40
 800598a:	d058      	beq.n	8005a3e <HAL_TIM_ConfigClockSource+0x13a>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d86f      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005990:	2b30      	cmp	r3, #48	; 0x30
 8005992:	d064      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15a>
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d86b      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 8005998:	2b20      	cmp	r3, #32
 800599a:	d060      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15a>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d867      	bhi.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05c      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15a>
 80059a4:	2b10      	cmp	r3, #16
 80059a6:	d05a      	beq.n	8005a5e <HAL_TIM_ConfigClockSource+0x15a>
 80059a8:	e062      	b.n	8005a70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	6899      	ldr	r1, [r3, #8]
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	f000 fc71 	bl	80062a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]
      break;
 80059d6:	e04f      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6818      	ldr	r0, [r3, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	6899      	ldr	r1, [r3, #8]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f000 fc5a 	bl	80062a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689a      	ldr	r2, [r3, #8]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fa:	609a      	str	r2, [r3, #8]
      break;
 80059fc:	e03c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6818      	ldr	r0, [r3, #0]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6859      	ldr	r1, [r3, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	f000 fb18 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2150      	movs	r1, #80	; 0x50
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fc27 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005a1c:	e02c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f000 fb74 	bl	8006118 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2160      	movs	r1, #96	; 0x60
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fc17 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005a3c:	e01c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	6859      	ldr	r1, [r3, #4]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f000 faf8 	bl	8006040 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2140      	movs	r1, #64	; 0x40
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fc07 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005a5c:	e00c      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	4610      	mov	r0, r2
 8005a6a:	f000 fbfe 	bl	800626a <TIM_ITRx_SetConfig>
      break;
 8005a6e:	e003      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	73fb      	strb	r3, [r7, #15]
      break;
 8005a74:	e000      	b.n	8005a78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3710      	adds	r7, #16
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	bd80      	pop	{r7, pc}
	...

08005a94 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	d831      	bhi.n	8005b0c <HAL_TIM_ReadCapturedValue+0x78>
 8005aa8:	a201      	add	r2, pc, #4	; (adr r2, 8005ab0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aae:	bf00      	nop
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005b0d 	.word	0x08005b0d
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005b0d 	.word	0x08005b0d
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005b0d 	.word	0x08005b0d
 8005ac8:	08005b0d 	.word	0x08005b0d
 8005acc:	08005b0d 	.word	0x08005b0d
 8005ad0:	08005af9 	.word	0x08005af9
 8005ad4:	08005b0d 	.word	0x08005b0d
 8005ad8:	08005b0d 	.word	0x08005b0d
 8005adc:	08005b0d 	.word	0x08005b0d
 8005ae0:	08005b03 	.word	0x08005b03
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aea:	60fb      	str	r3, [r7, #12]

      break;
 8005aec:	e00f      	b.n	8005b0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	60fb      	str	r3, [r7, #12]

      break;
 8005af6:	e00a      	b.n	8005b0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	60fb      	str	r3, [r7, #12]

      break;
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	60fb      	str	r3, [r7, #12]

      break;
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b0c:	bf00      	nop
  }

  return tmpreg;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a34      	ldr	r2, [pc, #208]	; (8005c3c <TIM_Base_SetConfig+0xe4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00f      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b76:	d00b      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a31      	ldr	r2, [pc, #196]	; (8005c40 <TIM_Base_SetConfig+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <TIM_Base_SetConfig+0xec>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_Base_SetConfig+0x38>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a2f      	ldr	r2, [pc, #188]	; (8005c48 <TIM_Base_SetConfig+0xf0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d108      	bne.n	8005ba2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a25      	ldr	r2, [pc, #148]	; (8005c3c <TIM_Base_SetConfig+0xe4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d01b      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb0:	d017      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <TIM_Base_SetConfig+0xe8>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	4a21      	ldr	r2, [pc, #132]	; (8005c44 <TIM_Base_SetConfig+0xec>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <TIM_Base_SetConfig+0xf0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <TIM_Base_SetConfig+0xf4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a1e      	ldr	r2, [pc, #120]	; (8005c50 <TIM_Base_SetConfig+0xf8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_Base_SetConfig+0x8a>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <TIM_Base_SetConfig+0xfc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d108      	bne.n	8005bf4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005be8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a08      	ldr	r2, [pc, #32]	; (8005c3c <TIM_Base_SetConfig+0xe4>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d103      	bne.n	8005c28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	615a      	str	r2, [r3, #20]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40000c00 	.word	0x40000c00
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f023 0201 	bic.w	r2, r3, #1
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0303 	bic.w	r3, r3, #3
 8005c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 0302 	bic.w	r3, r3, #2
 8005ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <TIM_OC1_SetConfig+0xc8>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d10c      	bne.n	8005cce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f023 0308 	bic.w	r3, r3, #8
 8005cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	697a      	ldr	r2, [r7, #20]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f023 0304 	bic.w	r3, r3, #4
 8005ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a13      	ldr	r2, [pc, #76]	; (8005d20 <TIM_OC1_SetConfig+0xc8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d111      	bne.n	8005cfa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	693a      	ldr	r2, [r7, #16]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	693a      	ldr	r2, [r7, #16]
 8005cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685a      	ldr	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	621a      	str	r2, [r3, #32]
}
 8005d14:	bf00      	nop
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40010000 	.word	0x40010000

08005d24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	f023 0210 	bic.w	r2, r3, #16
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	021b      	lsls	r3, r3, #8
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f023 0320 	bic.w	r3, r3, #32
 8005d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	011b      	lsls	r3, r3, #4
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <TIM_OC2_SetConfig+0xd4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d10d      	bne.n	8005da0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <TIM_OC2_SetConfig+0xd4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d113      	bne.n	8005dd0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	40010000 	.word	0x40010000

08005dfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f023 0303 	bic.w	r3, r3, #3
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	021b      	lsls	r3, r3, #8
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1d      	ldr	r2, [pc, #116]	; (8005ecc <TIM_OC3_SetConfig+0xd0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10d      	bne.n	8005e76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	021b      	lsls	r3, r3, #8
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a14      	ldr	r2, [pc, #80]	; (8005ecc <TIM_OC3_SetConfig+0xd0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d113      	bne.n	8005ea6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	621a      	str	r2, [r3, #32]
}
 8005ec0:	bf00      	nop
 8005ec2:	371c      	adds	r7, #28
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	40010000 	.word	0x40010000

08005ed0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b087      	sub	sp, #28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	021b      	lsls	r3, r3, #8
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	031b      	lsls	r3, r3, #12
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a10      	ldr	r2, [pc, #64]	; (8005f6c <TIM_OC4_SetConfig+0x9c>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d109      	bne.n	8005f44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	019b      	lsls	r3, r3, #6
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	621a      	str	r2, [r3, #32]
}
 8005f5e:	bf00      	nop
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000

08005f70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
 8005f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a24      	ldr	r2, [pc, #144]	; (800602c <TIM_TI1_SetConfig+0xbc>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x56>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa4:	d00f      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x56>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	4a21      	ldr	r2, [pc, #132]	; (8006030 <TIM_TI1_SetConfig+0xc0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d00b      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x56>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4a20      	ldr	r2, [pc, #128]	; (8006034 <TIM_TI1_SetConfig+0xc4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x56>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4a1f      	ldr	r2, [pc, #124]	; (8006038 <TIM_TI1_SetConfig+0xc8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_TI1_SetConfig+0x56>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4a1e      	ldr	r2, [pc, #120]	; (800603c <TIM_TI1_SetConfig+0xcc>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d101      	bne.n	8005fca <TIM_TI1_SetConfig+0x5a>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <TIM_TI1_SetConfig+0x5c>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d008      	beq.n	8005fe2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	e003      	b.n	8005fea <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f043 0301 	orr.w	r3, r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f023 030a 	bic.w	r3, r3, #10
 8006004:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f003 030a 	and.w	r3, r3, #10
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	621a      	str	r2, [r3, #32]
}
 800601e:	bf00      	nop
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40014000 	.word	0x40014000

08006040 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0201 	bic.w	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 030a 	bic.w	r3, r3, #10
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	4313      	orrs	r3, r2
 8006084:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800609e:	b480      	push	{r7}
 80060a0:	b087      	sub	sp, #28
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	60f8      	str	r0, [r7, #12]
 80060a6:	60b9      	str	r1, [r7, #8]
 80060a8:	607a      	str	r2, [r7, #4]
 80060aa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6a1b      	ldr	r3, [r3, #32]
 80060b0:	f023 0210 	bic.w	r2, r3, #16
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	031b      	lsls	r3, r3, #12
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	f023 0210 	bic.w	r2, r3, #16
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006142:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	031b      	lsls	r3, r3, #12
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006154:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	011b      	lsls	r3, r3, #4
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	621a      	str	r2, [r3, #32]
}
 800616c:	bf00      	nop
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b087      	sub	sp, #28
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0303 	bic.w	r3, r3, #3
 80061a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	011b      	lsls	r3, r3, #4
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80061c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	621a      	str	r2, [r3, #32]
}
 80061e4:	bf00      	nop
 80061e6:	371c      	adds	r7, #28
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800622e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	031b      	lsls	r3, r3, #12
 8006234:	b29b      	uxth	r3, r3
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006242:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	031b      	lsls	r3, r3, #12
 8006248:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4313      	orrs	r3, r2
 8006250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	621a      	str	r2, [r3, #32]
}
 800625e:	bf00      	nop
 8006260:	371c      	adds	r7, #28
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006282:	683a      	ldr	r2, [r7, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4313      	orrs	r3, r2
 8006288:	f043 0307 	orr.w	r3, r3, #7
 800628c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	609a      	str	r2, [r3, #8]
}
 8006294:	bf00      	nop
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	021a      	lsls	r2, r3, #8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	431a      	orrs	r2, r3
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	609a      	str	r2, [r3, #8]
}
 80062d4:	bf00      	nop
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 031f 	and.w	r3, r3, #31
 80062f2:	2201      	movs	r2, #1
 80062f4:	fa02 f303 	lsl.w	r3, r2, r3
 80062f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1a      	ldr	r2, [r3, #32]
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	43db      	mvns	r3, r3
 8006302:	401a      	ands	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1a      	ldr	r2, [r3, #32]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	6879      	ldr	r1, [r7, #4]
 8006314:	fa01 f303 	lsl.w	r3, r1, r3
 8006318:	431a      	orrs	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
	...

0800632c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006340:	2302      	movs	r3, #2
 8006342:	e050      	b.n	80063e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a1c      	ldr	r2, [pc, #112]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d018      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006390:	d013      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00e      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a16      	ldr	r2, [pc, #88]	; (80063fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d009      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a15      	ldr	r2, [pc, #84]	; (8006400 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d004      	beq.n	80063ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a13      	ldr	r2, [pc, #76]	; (8006404 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d10c      	bne.n	80063d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40000400 	.word	0x40000400
 80063fc:	40000800 	.word	0x40000800
 8006400:	40000c00 	.word	0x40000c00
 8006404:	40014000 	.word	0x40014000

08006408 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b082      	sub	sp, #8
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e03f      	b.n	80064c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d106      	bne.n	800645c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f7fc f952 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2224      	movs	r2, #36	; 0x24
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fddf 	bl	8007038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	691a      	ldr	r2, [r3, #16]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	695a      	ldr	r2, [r3, #20]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2220      	movs	r2, #32
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b08a      	sub	sp, #40	; 0x28
 80064ce:	af02      	add	r7, sp, #8
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	603b      	str	r3, [r7, #0]
 80064d6:	4613      	mov	r3, r2
 80064d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d17c      	bne.n	80065e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <HAL_UART_Transmit+0x2c>
 80064f0:	88fb      	ldrh	r3, [r7, #6]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e075      	b.n	80065e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_UART_Transmit+0x3e>
 8006504:	2302      	movs	r3, #2
 8006506:	e06e      	b.n	80065e6 <HAL_UART_Transmit+0x11c>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2221      	movs	r2, #33	; 0x21
 800651a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800651e:	f7fc fb99 	bl	8002c54 <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006538:	d108      	bne.n	800654c <HAL_UART_Transmit+0x82>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d104      	bne.n	800654c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006542:	2300      	movs	r3, #0
 8006544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	e003      	b.n	8006554 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006550:	2300      	movs	r3, #0
 8006552:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800655c:	e02a      	b.n	80065b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2200      	movs	r2, #0
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fb1f 	bl	8006bac <UART_WaitOnFlagUntilTimeout>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e036      	b.n	80065e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	461a      	mov	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800658c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	3302      	adds	r3, #2
 8006592:	61bb      	str	r3, [r7, #24]
 8006594:	e007      	b.n	80065a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	3301      	adds	r3, #1
 80065a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1cf      	bne.n	800655e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	9300      	str	r3, [sp, #0]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2200      	movs	r2, #0
 80065c6:	2140      	movs	r1, #64	; 0x40
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 faef 	bl	8006bac <UART_WaitOnFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e006      	b.n	80065e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	e000      	b.n	80065e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80065e4:	2302      	movs	r3, #2
  }
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3720      	adds	r7, #32
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b084      	sub	sp, #16
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	60f8      	str	r0, [r7, #12]
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	4613      	mov	r3, r2
 80065fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b20      	cmp	r3, #32
 8006606:	d11d      	bne.n	8006644 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d002      	beq.n	8006614 <HAL_UART_Receive_IT+0x26>
 800660e:	88fb      	ldrh	r3, [r7, #6]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e016      	b.n	8006646 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_UART_Receive_IT+0x38>
 8006622:	2302      	movs	r3, #2
 8006624:	e00f      	b.n	8006646 <HAL_UART_Receive_IT+0x58>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	461a      	mov	r2, r3
 8006638:	68b9      	ldr	r1, [r7, #8]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 fb24 	bl	8006c88 <UART_Start_Receive_IT>
 8006640:	4603      	mov	r3, r0
 8006642:	e000      	b.n	8006646 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006644:	2302      	movs	r3, #2
  }
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
	...

08006650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b0ba      	sub	sp, #232	; 0xe8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800667c:	2300      	movs	r3, #0
 800667e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800668e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006692:	2b00      	cmp	r3, #0
 8006694:	d10f      	bne.n	80066b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669a:	f003 0320 	and.w	r3, r3, #32
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <HAL_UART_IRQHandler+0x66>
 80066a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fc07 	bl	8006ec2 <UART_Receive_IT>
      return;
 80066b4:	e256      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80de 	beq.w	800687c <HAL_UART_IRQHandler+0x22c>
 80066c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	f000 80d1 	beq.w	800687c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066de:	f003 0301 	and.w	r3, r3, #1
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <HAL_UART_IRQHandler+0xae>
 80066e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d005      	beq.n	80066fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f043 0201 	orr.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <HAL_UART_IRQHandler+0xd2>
 800670a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d005      	beq.n	8006722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	f043 0202 	orr.w	r2, r3, #2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_UART_IRQHandler+0xf6>
 800672e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673e:	f043 0204 	orr.w	r2, r3, #4
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674a:	f003 0308 	and.w	r3, r3, #8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d011      	beq.n	8006776 <HAL_UART_IRQHandler+0x126>
 8006752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d105      	bne.n	800676a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676e:	f043 0208 	orr.w	r2, r3, #8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 81ed 	beq.w	8006b5a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d008      	beq.n	800679e <HAL_UART_IRQHandler+0x14e>
 800678c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fb92 	bl	8006ec2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	bf0c      	ite	eq
 80067ac:	2301      	moveq	r3, #1
 80067ae:	2300      	movne	r3, #0
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d103      	bne.n	80067ca <HAL_UART_IRQHandler+0x17a>
 80067c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d04f      	beq.n	800686a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fa9a 	bl	8006d04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b40      	cmp	r3, #64	; 0x40
 80067dc:	d141      	bne.n	8006862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3314      	adds	r3, #20
 80067e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80067f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800680a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800680e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1d9      	bne.n	80067de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800682e:	2b00      	cmp	r3, #0
 8006830:	d013      	beq.n	800685a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006836:	4a7d      	ldr	r2, [pc, #500]	; (8006a2c <HAL_UART_IRQHandler+0x3dc>)
 8006838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800683e:	4618      	mov	r0, r3
 8006840:	f7fc fbb9 	bl	8002fb6 <HAL_DMA_Abort_IT>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006854:	4610      	mov	r0, r2
 8006856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006858:	e00e      	b.n	8006878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f990 	bl	8006b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	e00a      	b.n	8006878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f98c 	bl	8006b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006868:	e006      	b.n	8006878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f988 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006876:	e170      	b.n	8006b5a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006878:	bf00      	nop
    return;
 800687a:	e16e      	b.n	8006b5a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	2b01      	cmp	r3, #1
 8006882:	f040 814a 	bne.w	8006b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0310 	and.w	r3, r3, #16
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8143 	beq.w	8006b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 813c 	beq.w	8006b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068a2:	2300      	movs	r3, #0
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	60bb      	str	r3, [r7, #8]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	60bb      	str	r3, [r7, #8]
 80068b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	f040 80b4 	bne.w	8006a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f000 8140 	beq.w	8006b5e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068e6:	429a      	cmp	r2, r3
 80068e8:	f080 8139 	bcs.w	8006b5e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068fe:	f000 8088 	beq.w	8006a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800691c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	330c      	adds	r3, #12
 800692a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800692e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800693a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800693e:	e841 2300 	strex	r3, r2, [r1]
 8006942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1d9      	bne.n	8006902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3314      	adds	r3, #20
 8006954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800695e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006960:	f023 0301 	bic.w	r3, r3, #1
 8006964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	3314      	adds	r3, #20
 800696e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800697a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e1      	bne.n	800694e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006994:	e853 3f00 	ldrex	r3, [r3]
 8006998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800699a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800699c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3314      	adds	r3, #20
 80069aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069b6:	e841 2300 	strex	r3, r2, [r1]
 80069ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1e3      	bne.n	800698a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	330c      	adds	r3, #12
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e2:	f023 0310 	bic.w	r3, r3, #16
 80069e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80069f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80069f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069fc:	e841 2300 	strex	r3, r2, [r1]
 8006a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d1e3      	bne.n	80069d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fc fa62 	bl	8002ed6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 f8b6 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a28:	e099      	b.n	8006b5e <HAL_UART_IRQHandler+0x50e>
 8006a2a:	bf00      	nop
 8006a2c:	08006dcb 	.word	0x08006dcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 808b 	beq.w	8006b62 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	f000 8086 	beq.w	8006b62 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	330c      	adds	r3, #12
 8006a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	e853 3f00 	ldrex	r3, [r3]
 8006a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	330c      	adds	r3, #12
 8006a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8006a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e3      	bne.n	8006a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	3314      	adds	r3, #20
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	f023 0301 	bic.w	r3, r3, #1
 8006aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3314      	adds	r3, #20
 8006aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e3      	bne.n	8006a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0310 	bic.w	r3, r3, #16
 8006aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	330c      	adds	r3, #12
 8006af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	69b9      	ldr	r1, [r7, #24]
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	617b      	str	r3, [r7, #20]
   return(result);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e3      	bne.n	8006ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f83e 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b18:	e023      	b.n	8006b62 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <HAL_UART_IRQHandler+0x4ea>
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f95d 	bl	8006df2 <UART_Transmit_IT>
    return;
 8006b38:	e014      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00e      	beq.n	8006b64 <HAL_UART_IRQHandler+0x514>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d008      	beq.n	8006b64 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f99d 	bl	8006e92 <UART_EndTransmit_IT>
    return;
 8006b58:	e004      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
    return;
 8006b5a:	bf00      	nop
 8006b5c:	e002      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
      return;
 8006b5e:	bf00      	nop
 8006b60:	e000      	b.n	8006b64 <HAL_UART_IRQHandler+0x514>
      return;
 8006b62:	bf00      	nop
  }
}
 8006b64:	37e8      	adds	r7, #232	; 0xe8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop

08006b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b090      	sub	sp, #64	; 0x40
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bbc:	e050      	b.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d04c      	beq.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bcc:	f7fc f842 	bl	8002c54 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d241      	bcs.n	8006c60 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	330c      	adds	r3, #12
 8006be2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	330c      	adds	r3, #12
 8006bfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bfc:	637a      	str	r2, [r7, #52]	; 0x34
 8006bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f023 0301 	bic.w	r3, r3, #1
 8006c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	3314      	adds	r3, #20
 8006c2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c30:	623a      	str	r2, [r7, #32]
 8006c32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e5      	bne.n	8006c10 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e00f      	b.n	8006c80 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	bf0c      	ite	eq
 8006c70:	2301      	moveq	r3, #1
 8006c72:	2300      	movne	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	79fb      	ldrb	r3, [r7, #7]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d09f      	beq.n	8006bbe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3740      	adds	r7, #64	; 0x40
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	4613      	mov	r3, r2
 8006c94:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	88fa      	ldrh	r2, [r7, #6]
 8006ca0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	88fa      	ldrh	r2, [r7, #6]
 8006ca6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2222      	movs	r2, #34	; 0x22
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68da      	ldr	r2, [r3, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cd4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	695a      	ldr	r2, [r3, #20]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0201 	orr.w	r2, r2, #1
 8006ce4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f042 0220 	orr.w	r2, r2, #32
 8006cf4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b095      	sub	sp, #84	; 0x54
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d16:	e853 3f00 	ldrex	r3, [r3]
 8006d1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d2c:	643a      	str	r2, [r7, #64]	; 0x40
 8006d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d34:	e841 2300 	strex	r3, r2, [r1]
 8006d38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d1e5      	bne.n	8006d0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3314      	adds	r3, #20
 8006d5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e5      	bne.n	8006d40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d119      	bne.n	8006db0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	e853 3f00 	ldrex	r3, [r3]
 8006d8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f023 0310 	bic.w	r3, r3, #16
 8006d92:	647b      	str	r3, [r7, #68]	; 0x44
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	330c      	adds	r3, #12
 8006d9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d9c:	61ba      	str	r2, [r7, #24]
 8006d9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da0:	6979      	ldr	r1, [r7, #20]
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	e841 2300 	strex	r3, r2, [r1]
 8006da8:	613b      	str	r3, [r7, #16]
   return(result);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d1e5      	bne.n	8006d7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2220      	movs	r2, #32
 8006db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006dbe:	bf00      	nop
 8006dc0:	3754      	adds	r7, #84	; 0x54
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b084      	sub	sp, #16
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f7ff fecb 	bl	8006b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b085      	sub	sp, #20
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b21      	cmp	r3, #33	; 0x21
 8006e04:	d13e      	bne.n	8006e84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e0e:	d114      	bne.n	8006e3a <UART_Transmit_IT+0x48>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d110      	bne.n	8006e3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	881b      	ldrh	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	1c9a      	adds	r2, r3, #2
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	621a      	str	r2, [r3, #32]
 8006e38:	e008      	b.n	8006e4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	1c59      	adds	r1, r3, #1
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	6211      	str	r1, [r2, #32]
 8006e44:	781a      	ldrb	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4619      	mov	r1, r3
 8006e5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10f      	bne.n	8006e80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68da      	ldr	r2, [r3, #12]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b082      	sub	sp, #8
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68da      	ldr	r2, [r3, #12]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2220      	movs	r2, #32
 8006eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7ff fe5a 	bl	8006b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3708      	adds	r7, #8
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b08c      	sub	sp, #48	; 0x30
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	2b22      	cmp	r3, #34	; 0x22
 8006ed4:	f040 80ab 	bne.w	800702e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee0:	d117      	bne.n	8006f12 <UART_Receive_IT+0x50>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d113      	bne.n	8006f12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f00:	b29a      	uxth	r2, r3
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f0a:	1c9a      	adds	r2, r3, #2
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f10:	e026      	b.n	8006f60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f24:	d007      	beq.n	8006f36 <UART_Receive_IT+0x74>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <UART_Receive_IT+0x82>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	e008      	b.n	8006f56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5a:	1c5a      	adds	r2, r3, #1
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	3b01      	subs	r3, #1
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d15a      	bne.n	800702a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0220 	bic.w	r2, r2, #32
 8006f82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695a      	ldr	r2, [r3, #20]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 0201 	bic.w	r2, r2, #1
 8006fa2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d135      	bne.n	8007020 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f023 0310 	bic.w	r3, r3, #16
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	330c      	adds	r3, #12
 8006fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fda:	623a      	str	r2, [r7, #32]
 8006fdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	69f9      	ldr	r1, [r7, #28]
 8006fe0:	6a3a      	ldr	r2, [r7, #32]
 8006fe2:	e841 2300 	strex	r3, r2, [r1]
 8006fe6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1e5      	bne.n	8006fba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b10      	cmp	r3, #16
 8006ffa:	d10a      	bne.n	8007012 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60fb      	str	r3, [r7, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007016:	4619      	mov	r1, r3
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f7ff fdbb 	bl	8006b94 <HAL_UARTEx_RxEventCallback>
 800701e:	e002      	b.n	8007026 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7f9 fea5 	bl	8000d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007026:	2300      	movs	r3, #0
 8007028:	e002      	b.n	8007030 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	e000      	b.n	8007030 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800702e:	2302      	movs	r3, #2
  }
}
 8007030:	4618      	mov	r0, r3
 8007032:	3730      	adds	r7, #48	; 0x30
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800703c:	b0c0      	sub	sp, #256	; 0x100
 800703e:	af00      	add	r7, sp, #0
 8007040:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007054:	68d9      	ldr	r1, [r3, #12]
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	ea40 0301 	orr.w	r3, r0, r1
 8007060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	431a      	orrs	r2, r3
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	431a      	orrs	r2, r3
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007090:	f021 010c 	bic.w	r1, r1, #12
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800709e:	430b      	orrs	r3, r1
 80070a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b2:	6999      	ldr	r1, [r3, #24]
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	ea40 0301 	orr.w	r3, r0, r1
 80070be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b8f      	ldr	r3, [pc, #572]	; (8007304 <UART_SetConfig+0x2cc>)
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d005      	beq.n	80070d8 <UART_SetConfig+0xa0>
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b8d      	ldr	r3, [pc, #564]	; (8007308 <UART_SetConfig+0x2d0>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d104      	bne.n	80070e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070d8:	f7fd fa2e 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 80070dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070e0:	e003      	b.n	80070ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070e2:	f7fd fa15 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 80070e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f4:	f040 810c 	bne.w	8007310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007102:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800710a:	4622      	mov	r2, r4
 800710c:	462b      	mov	r3, r5
 800710e:	1891      	adds	r1, r2, r2
 8007110:	65b9      	str	r1, [r7, #88]	; 0x58
 8007112:	415b      	adcs	r3, r3
 8007114:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800711a:	4621      	mov	r1, r4
 800711c:	eb12 0801 	adds.w	r8, r2, r1
 8007120:	4629      	mov	r1, r5
 8007122:	eb43 0901 	adc.w	r9, r3, r1
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800713a:	4690      	mov	r8, r2
 800713c:	4699      	mov	r9, r3
 800713e:	4623      	mov	r3, r4
 8007140:	eb18 0303 	adds.w	r3, r8, r3
 8007144:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007148:	462b      	mov	r3, r5
 800714a:	eb49 0303 	adc.w	r3, r9, r3
 800714e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800715e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007166:	460b      	mov	r3, r1
 8007168:	18db      	adds	r3, r3, r3
 800716a:	653b      	str	r3, [r7, #80]	; 0x50
 800716c:	4613      	mov	r3, r2
 800716e:	eb42 0303 	adc.w	r3, r2, r3
 8007172:	657b      	str	r3, [r7, #84]	; 0x54
 8007174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800717c:	f7f9 fc76 	bl	8000a6c <__aeabi_uldivmod>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4b61      	ldr	r3, [pc, #388]	; (800730c <UART_SetConfig+0x2d4>)
 8007186:	fba3 2302 	umull	r2, r3, r3, r2
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	011c      	lsls	r4, r3, #4
 800718e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007192:	2200      	movs	r2, #0
 8007194:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007198:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800719c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	1891      	adds	r1, r2, r2
 80071a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80071a8:	415b      	adcs	r3, r3
 80071aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80071b0:	4641      	mov	r1, r8
 80071b2:	eb12 0a01 	adds.w	sl, r2, r1
 80071b6:	4649      	mov	r1, r9
 80071b8:	eb43 0b01 	adc.w	fp, r3, r1
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071d0:	4692      	mov	sl, r2
 80071d2:	469b      	mov	fp, r3
 80071d4:	4643      	mov	r3, r8
 80071d6:	eb1a 0303 	adds.w	r3, sl, r3
 80071da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071de:	464b      	mov	r3, r9
 80071e0:	eb4b 0303 	adc.w	r3, fp, r3
 80071e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071fc:	460b      	mov	r3, r1
 80071fe:	18db      	adds	r3, r3, r3
 8007200:	643b      	str	r3, [r7, #64]	; 0x40
 8007202:	4613      	mov	r3, r2
 8007204:	eb42 0303 	adc.w	r3, r2, r3
 8007208:	647b      	str	r3, [r7, #68]	; 0x44
 800720a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800720e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007212:	f7f9 fc2b 	bl	8000a6c <__aeabi_uldivmod>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4611      	mov	r1, r2
 800721c:	4b3b      	ldr	r3, [pc, #236]	; (800730c <UART_SetConfig+0x2d4>)
 800721e:	fba3 2301 	umull	r2, r3, r3, r1
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	2264      	movs	r2, #100	; 0x64
 8007226:	fb02 f303 	mul.w	r3, r2, r3
 800722a:	1acb      	subs	r3, r1, r3
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007232:	4b36      	ldr	r3, [pc, #216]	; (800730c <UART_SetConfig+0x2d4>)
 8007234:	fba3 2302 	umull	r2, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007240:	441c      	add	r4, r3
 8007242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007246:	2200      	movs	r2, #0
 8007248:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800724c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007254:	4642      	mov	r2, r8
 8007256:	464b      	mov	r3, r9
 8007258:	1891      	adds	r1, r2, r2
 800725a:	63b9      	str	r1, [r7, #56]	; 0x38
 800725c:	415b      	adcs	r3, r3
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007264:	4641      	mov	r1, r8
 8007266:	1851      	adds	r1, r2, r1
 8007268:	6339      	str	r1, [r7, #48]	; 0x30
 800726a:	4649      	mov	r1, r9
 800726c:	414b      	adcs	r3, r1
 800726e:	637b      	str	r3, [r7, #52]	; 0x34
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800727c:	4659      	mov	r1, fp
 800727e:	00cb      	lsls	r3, r1, #3
 8007280:	4651      	mov	r1, sl
 8007282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007286:	4651      	mov	r1, sl
 8007288:	00ca      	lsls	r2, r1, #3
 800728a:	4610      	mov	r0, r2
 800728c:	4619      	mov	r1, r3
 800728e:	4603      	mov	r3, r0
 8007290:	4642      	mov	r2, r8
 8007292:	189b      	adds	r3, r3, r2
 8007294:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007298:	464b      	mov	r3, r9
 800729a:	460a      	mov	r2, r1
 800729c:	eb42 0303 	adc.w	r3, r2, r3
 80072a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80072b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80072b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072b8:	460b      	mov	r3, r1
 80072ba:	18db      	adds	r3, r3, r3
 80072bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80072be:	4613      	mov	r3, r2
 80072c0:	eb42 0303 	adc.w	r3, r2, r3
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072ce:	f7f9 fbcd 	bl	8000a6c <__aeabi_uldivmod>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4b0d      	ldr	r3, [pc, #52]	; (800730c <UART_SetConfig+0x2d4>)
 80072d8:	fba3 1302 	umull	r1, r3, r3, r2
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	2164      	movs	r1, #100	; 0x64
 80072e0:	fb01 f303 	mul.w	r3, r1, r3
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	3332      	adds	r3, #50	; 0x32
 80072ea:	4a08      	ldr	r2, [pc, #32]	; (800730c <UART_SetConfig+0x2d4>)
 80072ec:	fba2 2303 	umull	r2, r3, r2, r3
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	f003 0207 	and.w	r2, r3, #7
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4422      	add	r2, r4
 80072fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007300:	e105      	b.n	800750e <UART_SetConfig+0x4d6>
 8007302:	bf00      	nop
 8007304:	40011000 	.word	0x40011000
 8007308:	40011400 	.word	0x40011400
 800730c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007314:	2200      	movs	r2, #0
 8007316:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800731a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800731e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007322:	4642      	mov	r2, r8
 8007324:	464b      	mov	r3, r9
 8007326:	1891      	adds	r1, r2, r2
 8007328:	6239      	str	r1, [r7, #32]
 800732a:	415b      	adcs	r3, r3
 800732c:	627b      	str	r3, [r7, #36]	; 0x24
 800732e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007332:	4641      	mov	r1, r8
 8007334:	1854      	adds	r4, r2, r1
 8007336:	4649      	mov	r1, r9
 8007338:	eb43 0501 	adc.w	r5, r3, r1
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	00eb      	lsls	r3, r5, #3
 8007346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800734a:	00e2      	lsls	r2, r4, #3
 800734c:	4614      	mov	r4, r2
 800734e:	461d      	mov	r5, r3
 8007350:	4643      	mov	r3, r8
 8007352:	18e3      	adds	r3, r4, r3
 8007354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007358:	464b      	mov	r3, r9
 800735a:	eb45 0303 	adc.w	r3, r5, r3
 800735e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800736e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800737e:	4629      	mov	r1, r5
 8007380:	008b      	lsls	r3, r1, #2
 8007382:	4621      	mov	r1, r4
 8007384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007388:	4621      	mov	r1, r4
 800738a:	008a      	lsls	r2, r1, #2
 800738c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007390:	f7f9 fb6c 	bl	8000a6c <__aeabi_uldivmod>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4b60      	ldr	r3, [pc, #384]	; (800751c <UART_SetConfig+0x4e4>)
 800739a:	fba3 2302 	umull	r2, r3, r3, r2
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	011c      	lsls	r4, r3, #4
 80073a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80073ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80073b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80073b4:	4642      	mov	r2, r8
 80073b6:	464b      	mov	r3, r9
 80073b8:	1891      	adds	r1, r2, r2
 80073ba:	61b9      	str	r1, [r7, #24]
 80073bc:	415b      	adcs	r3, r3
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073c4:	4641      	mov	r1, r8
 80073c6:	1851      	adds	r1, r2, r1
 80073c8:	6139      	str	r1, [r7, #16]
 80073ca:	4649      	mov	r1, r9
 80073cc:	414b      	adcs	r3, r1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073dc:	4659      	mov	r1, fp
 80073de:	00cb      	lsls	r3, r1, #3
 80073e0:	4651      	mov	r1, sl
 80073e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073e6:	4651      	mov	r1, sl
 80073e8:	00ca      	lsls	r2, r1, #3
 80073ea:	4610      	mov	r0, r2
 80073ec:	4619      	mov	r1, r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	4642      	mov	r2, r8
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073f8:	464b      	mov	r3, r9
 80073fa:	460a      	mov	r2, r1
 80073fc:	eb42 0303 	adc.w	r3, r2, r3
 8007400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	67bb      	str	r3, [r7, #120]	; 0x78
 800740e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800741c:	4649      	mov	r1, r9
 800741e:	008b      	lsls	r3, r1, #2
 8007420:	4641      	mov	r1, r8
 8007422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007426:	4641      	mov	r1, r8
 8007428:	008a      	lsls	r2, r1, #2
 800742a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800742e:	f7f9 fb1d 	bl	8000a6c <__aeabi_uldivmod>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	4b39      	ldr	r3, [pc, #228]	; (800751c <UART_SetConfig+0x4e4>)
 8007438:	fba3 1302 	umull	r1, r3, r3, r2
 800743c:	095b      	lsrs	r3, r3, #5
 800743e:	2164      	movs	r1, #100	; 0x64
 8007440:	fb01 f303 	mul.w	r3, r1, r3
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	3332      	adds	r3, #50	; 0x32
 800744a:	4a34      	ldr	r2, [pc, #208]	; (800751c <UART_SetConfig+0x4e4>)
 800744c:	fba2 2303 	umull	r2, r3, r2, r3
 8007450:	095b      	lsrs	r3, r3, #5
 8007452:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007456:	441c      	add	r4, r3
 8007458:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800745c:	2200      	movs	r2, #0
 800745e:	673b      	str	r3, [r7, #112]	; 0x70
 8007460:	677a      	str	r2, [r7, #116]	; 0x74
 8007462:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007466:	4642      	mov	r2, r8
 8007468:	464b      	mov	r3, r9
 800746a:	1891      	adds	r1, r2, r2
 800746c:	60b9      	str	r1, [r7, #8]
 800746e:	415b      	adcs	r3, r3
 8007470:	60fb      	str	r3, [r7, #12]
 8007472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007476:	4641      	mov	r1, r8
 8007478:	1851      	adds	r1, r2, r1
 800747a:	6039      	str	r1, [r7, #0]
 800747c:	4649      	mov	r1, r9
 800747e:	414b      	adcs	r3, r1
 8007480:	607b      	str	r3, [r7, #4]
 8007482:	f04f 0200 	mov.w	r2, #0
 8007486:	f04f 0300 	mov.w	r3, #0
 800748a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800748e:	4659      	mov	r1, fp
 8007490:	00cb      	lsls	r3, r1, #3
 8007492:	4651      	mov	r1, sl
 8007494:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007498:	4651      	mov	r1, sl
 800749a:	00ca      	lsls	r2, r1, #3
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	4603      	mov	r3, r0
 80074a2:	4642      	mov	r2, r8
 80074a4:	189b      	adds	r3, r3, r2
 80074a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074a8:	464b      	mov	r3, r9
 80074aa:	460a      	mov	r2, r1
 80074ac:	eb42 0303 	adc.w	r3, r2, r3
 80074b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	663b      	str	r3, [r7, #96]	; 0x60
 80074bc:	667a      	str	r2, [r7, #100]	; 0x64
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074ca:	4649      	mov	r1, r9
 80074cc:	008b      	lsls	r3, r1, #2
 80074ce:	4641      	mov	r1, r8
 80074d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d4:	4641      	mov	r1, r8
 80074d6:	008a      	lsls	r2, r1, #2
 80074d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074dc:	f7f9 fac6 	bl	8000a6c <__aeabi_uldivmod>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4b0d      	ldr	r3, [pc, #52]	; (800751c <UART_SetConfig+0x4e4>)
 80074e6:	fba3 1302 	umull	r1, r3, r3, r2
 80074ea:	095b      	lsrs	r3, r3, #5
 80074ec:	2164      	movs	r1, #100	; 0x64
 80074ee:	fb01 f303 	mul.w	r3, r1, r3
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	011b      	lsls	r3, r3, #4
 80074f6:	3332      	adds	r3, #50	; 0x32
 80074f8:	4a08      	ldr	r2, [pc, #32]	; (800751c <UART_SetConfig+0x4e4>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	095b      	lsrs	r3, r3, #5
 8007500:	f003 020f 	and.w	r2, r3, #15
 8007504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4422      	add	r2, r4
 800750c:	609a      	str	r2, [r3, #8]
}
 800750e:	bf00      	nop
 8007510:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007514:	46bd      	mov	sp, r7
 8007516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800751a:	bf00      	nop
 800751c:	51eb851f 	.word	0x51eb851f

08007520 <atoi>:
 8007520:	220a      	movs	r2, #10
 8007522:	2100      	movs	r1, #0
 8007524:	f000 b98a 	b.w	800783c <strtol>

08007528 <__errno>:
 8007528:	4b01      	ldr	r3, [pc, #4]	; (8007530 <__errno+0x8>)
 800752a:	6818      	ldr	r0, [r3, #0]
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	2000001c 	.word	0x2000001c

08007534 <__libc_init_array>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	4d0d      	ldr	r5, [pc, #52]	; (800756c <__libc_init_array+0x38>)
 8007538:	4c0d      	ldr	r4, [pc, #52]	; (8007570 <__libc_init_array+0x3c>)
 800753a:	1b64      	subs	r4, r4, r5
 800753c:	10a4      	asrs	r4, r4, #2
 800753e:	2600      	movs	r6, #0
 8007540:	42a6      	cmp	r6, r4
 8007542:	d109      	bne.n	8007558 <__libc_init_array+0x24>
 8007544:	4d0b      	ldr	r5, [pc, #44]	; (8007574 <__libc_init_array+0x40>)
 8007546:	4c0c      	ldr	r4, [pc, #48]	; (8007578 <__libc_init_array+0x44>)
 8007548:	f001 fab4 	bl	8008ab4 <_init>
 800754c:	1b64      	subs	r4, r4, r5
 800754e:	10a4      	asrs	r4, r4, #2
 8007550:	2600      	movs	r6, #0
 8007552:	42a6      	cmp	r6, r4
 8007554:	d105      	bne.n	8007562 <__libc_init_array+0x2e>
 8007556:	bd70      	pop	{r4, r5, r6, pc}
 8007558:	f855 3b04 	ldr.w	r3, [r5], #4
 800755c:	4798      	blx	r3
 800755e:	3601      	adds	r6, #1
 8007560:	e7ee      	b.n	8007540 <__libc_init_array+0xc>
 8007562:	f855 3b04 	ldr.w	r3, [r5], #4
 8007566:	4798      	blx	r3
 8007568:	3601      	adds	r6, #1
 800756a:	e7f2      	b.n	8007552 <__libc_init_array+0x1e>
 800756c:	08008de4 	.word	0x08008de4
 8007570:	08008de4 	.word	0x08008de4
 8007574:	08008de4 	.word	0x08008de4
 8007578:	08008de8 	.word	0x08008de8

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <iprintf>:
 800758c:	b40f      	push	{r0, r1, r2, r3}
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <iprintf+0x2c>)
 8007590:	b513      	push	{r0, r1, r4, lr}
 8007592:	681c      	ldr	r4, [r3, #0]
 8007594:	b124      	cbz	r4, 80075a0 <iprintf+0x14>
 8007596:	69a3      	ldr	r3, [r4, #24]
 8007598:	b913      	cbnz	r3, 80075a0 <iprintf+0x14>
 800759a:	4620      	mov	r0, r4
 800759c:	f000 fb32 	bl	8007c04 <__sinit>
 80075a0:	ab05      	add	r3, sp, #20
 80075a2:	9a04      	ldr	r2, [sp, #16]
 80075a4:	68a1      	ldr	r1, [r4, #8]
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	4620      	mov	r0, r4
 80075aa:	f000 fe97 	bl	80082dc <_vfiprintf_r>
 80075ae:	b002      	add	sp, #8
 80075b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b4:	b004      	add	sp, #16
 80075b6:	4770      	bx	lr
 80075b8:	2000001c 	.word	0x2000001c

080075bc <_puts_r>:
 80075bc:	b570      	push	{r4, r5, r6, lr}
 80075be:	460e      	mov	r6, r1
 80075c0:	4605      	mov	r5, r0
 80075c2:	b118      	cbz	r0, 80075cc <_puts_r+0x10>
 80075c4:	6983      	ldr	r3, [r0, #24]
 80075c6:	b90b      	cbnz	r3, 80075cc <_puts_r+0x10>
 80075c8:	f000 fb1c 	bl	8007c04 <__sinit>
 80075cc:	69ab      	ldr	r3, [r5, #24]
 80075ce:	68ac      	ldr	r4, [r5, #8]
 80075d0:	b913      	cbnz	r3, 80075d8 <_puts_r+0x1c>
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 fb16 	bl	8007c04 <__sinit>
 80075d8:	4b2c      	ldr	r3, [pc, #176]	; (800768c <_puts_r+0xd0>)
 80075da:	429c      	cmp	r4, r3
 80075dc:	d120      	bne.n	8007620 <_puts_r+0x64>
 80075de:	686c      	ldr	r4, [r5, #4]
 80075e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075e2:	07db      	lsls	r3, r3, #31
 80075e4:	d405      	bmi.n	80075f2 <_puts_r+0x36>
 80075e6:	89a3      	ldrh	r3, [r4, #12]
 80075e8:	0598      	lsls	r0, r3, #22
 80075ea:	d402      	bmi.n	80075f2 <_puts_r+0x36>
 80075ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075ee:	f000 fba7 	bl	8007d40 <__retarget_lock_acquire_recursive>
 80075f2:	89a3      	ldrh	r3, [r4, #12]
 80075f4:	0719      	lsls	r1, r3, #28
 80075f6:	d51d      	bpl.n	8007634 <_puts_r+0x78>
 80075f8:	6923      	ldr	r3, [r4, #16]
 80075fa:	b1db      	cbz	r3, 8007634 <_puts_r+0x78>
 80075fc:	3e01      	subs	r6, #1
 80075fe:	68a3      	ldr	r3, [r4, #8]
 8007600:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007604:	3b01      	subs	r3, #1
 8007606:	60a3      	str	r3, [r4, #8]
 8007608:	bb39      	cbnz	r1, 800765a <_puts_r+0x9e>
 800760a:	2b00      	cmp	r3, #0
 800760c:	da38      	bge.n	8007680 <_puts_r+0xc4>
 800760e:	4622      	mov	r2, r4
 8007610:	210a      	movs	r1, #10
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f91c 	bl	8007850 <__swbuf_r>
 8007618:	3001      	adds	r0, #1
 800761a:	d011      	beq.n	8007640 <_puts_r+0x84>
 800761c:	250a      	movs	r5, #10
 800761e:	e011      	b.n	8007644 <_puts_r+0x88>
 8007620:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <_puts_r+0xd4>)
 8007622:	429c      	cmp	r4, r3
 8007624:	d101      	bne.n	800762a <_puts_r+0x6e>
 8007626:	68ac      	ldr	r4, [r5, #8]
 8007628:	e7da      	b.n	80075e0 <_puts_r+0x24>
 800762a:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <_puts_r+0xd8>)
 800762c:	429c      	cmp	r4, r3
 800762e:	bf08      	it	eq
 8007630:	68ec      	ldreq	r4, [r5, #12]
 8007632:	e7d5      	b.n	80075e0 <_puts_r+0x24>
 8007634:	4621      	mov	r1, r4
 8007636:	4628      	mov	r0, r5
 8007638:	f000 f95c 	bl	80078f4 <__swsetup_r>
 800763c:	2800      	cmp	r0, #0
 800763e:	d0dd      	beq.n	80075fc <_puts_r+0x40>
 8007640:	f04f 35ff 	mov.w	r5, #4294967295
 8007644:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007646:	07da      	lsls	r2, r3, #31
 8007648:	d405      	bmi.n	8007656 <_puts_r+0x9a>
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	059b      	lsls	r3, r3, #22
 800764e:	d402      	bmi.n	8007656 <_puts_r+0x9a>
 8007650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007652:	f000 fb76 	bl	8007d42 <__retarget_lock_release_recursive>
 8007656:	4628      	mov	r0, r5
 8007658:	bd70      	pop	{r4, r5, r6, pc}
 800765a:	2b00      	cmp	r3, #0
 800765c:	da04      	bge.n	8007668 <_puts_r+0xac>
 800765e:	69a2      	ldr	r2, [r4, #24]
 8007660:	429a      	cmp	r2, r3
 8007662:	dc06      	bgt.n	8007672 <_puts_r+0xb6>
 8007664:	290a      	cmp	r1, #10
 8007666:	d004      	beq.n	8007672 <_puts_r+0xb6>
 8007668:	6823      	ldr	r3, [r4, #0]
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	6022      	str	r2, [r4, #0]
 800766e:	7019      	strb	r1, [r3, #0]
 8007670:	e7c5      	b.n	80075fe <_puts_r+0x42>
 8007672:	4622      	mov	r2, r4
 8007674:	4628      	mov	r0, r5
 8007676:	f000 f8eb 	bl	8007850 <__swbuf_r>
 800767a:	3001      	adds	r0, #1
 800767c:	d1bf      	bne.n	80075fe <_puts_r+0x42>
 800767e:	e7df      	b.n	8007640 <_puts_r+0x84>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	250a      	movs	r5, #10
 8007684:	1c5a      	adds	r2, r3, #1
 8007686:	6022      	str	r2, [r4, #0]
 8007688:	701d      	strb	r5, [r3, #0]
 800768a:	e7db      	b.n	8007644 <_puts_r+0x88>
 800768c:	08008d68 	.word	0x08008d68
 8007690:	08008d88 	.word	0x08008d88
 8007694:	08008d48 	.word	0x08008d48

08007698 <puts>:
 8007698:	4b02      	ldr	r3, [pc, #8]	; (80076a4 <puts+0xc>)
 800769a:	4601      	mov	r1, r0
 800769c:	6818      	ldr	r0, [r3, #0]
 800769e:	f7ff bf8d 	b.w	80075bc <_puts_r>
 80076a2:	bf00      	nop
 80076a4:	2000001c 	.word	0x2000001c

080076a8 <siprintf>:
 80076a8:	b40e      	push	{r1, r2, r3}
 80076aa:	b500      	push	{lr}
 80076ac:	b09c      	sub	sp, #112	; 0x70
 80076ae:	ab1d      	add	r3, sp, #116	; 0x74
 80076b0:	9002      	str	r0, [sp, #8]
 80076b2:	9006      	str	r0, [sp, #24]
 80076b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076b8:	4809      	ldr	r0, [pc, #36]	; (80076e0 <siprintf+0x38>)
 80076ba:	9107      	str	r1, [sp, #28]
 80076bc:	9104      	str	r1, [sp, #16]
 80076be:	4909      	ldr	r1, [pc, #36]	; (80076e4 <siprintf+0x3c>)
 80076c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80076c4:	9105      	str	r1, [sp, #20]
 80076c6:	6800      	ldr	r0, [r0, #0]
 80076c8:	9301      	str	r3, [sp, #4]
 80076ca:	a902      	add	r1, sp, #8
 80076cc:	f000 fcdc 	bl	8008088 <_svfiprintf_r>
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
 80076d6:	b01c      	add	sp, #112	; 0x70
 80076d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80076dc:	b003      	add	sp, #12
 80076de:	4770      	bx	lr
 80076e0:	2000001c 	.word	0x2000001c
 80076e4:	ffff0208 	.word	0xffff0208

080076e8 <strncmp>:
 80076e8:	b510      	push	{r4, lr}
 80076ea:	b17a      	cbz	r2, 800770c <strncmp+0x24>
 80076ec:	4603      	mov	r3, r0
 80076ee:	3901      	subs	r1, #1
 80076f0:	1884      	adds	r4, r0, r2
 80076f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80076f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80076fa:	4290      	cmp	r0, r2
 80076fc:	d101      	bne.n	8007702 <strncmp+0x1a>
 80076fe:	42a3      	cmp	r3, r4
 8007700:	d101      	bne.n	8007706 <strncmp+0x1e>
 8007702:	1a80      	subs	r0, r0, r2
 8007704:	bd10      	pop	{r4, pc}
 8007706:	2800      	cmp	r0, #0
 8007708:	d1f3      	bne.n	80076f2 <strncmp+0xa>
 800770a:	e7fa      	b.n	8007702 <strncmp+0x1a>
 800770c:	4610      	mov	r0, r2
 800770e:	e7f9      	b.n	8007704 <strncmp+0x1c>

08007710 <strncpy>:
 8007710:	b510      	push	{r4, lr}
 8007712:	3901      	subs	r1, #1
 8007714:	4603      	mov	r3, r0
 8007716:	b132      	cbz	r2, 8007726 <strncpy+0x16>
 8007718:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800771c:	f803 4b01 	strb.w	r4, [r3], #1
 8007720:	3a01      	subs	r2, #1
 8007722:	2c00      	cmp	r4, #0
 8007724:	d1f7      	bne.n	8007716 <strncpy+0x6>
 8007726:	441a      	add	r2, r3
 8007728:	2100      	movs	r1, #0
 800772a:	4293      	cmp	r3, r2
 800772c:	d100      	bne.n	8007730 <strncpy+0x20>
 800772e:	bd10      	pop	{r4, pc}
 8007730:	f803 1b01 	strb.w	r1, [r3], #1
 8007734:	e7f9      	b.n	800772a <strncpy+0x1a>
	...

08007738 <_strtol_l.constprop.0>:
 8007738:	2b01      	cmp	r3, #1
 800773a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800773e:	d001      	beq.n	8007744 <_strtol_l.constprop.0+0xc>
 8007740:	2b24      	cmp	r3, #36	; 0x24
 8007742:	d906      	bls.n	8007752 <_strtol_l.constprop.0+0x1a>
 8007744:	f7ff fef0 	bl	8007528 <__errno>
 8007748:	2316      	movs	r3, #22
 800774a:	6003      	str	r3, [r0, #0]
 800774c:	2000      	movs	r0, #0
 800774e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007752:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007838 <_strtol_l.constprop.0+0x100>
 8007756:	460d      	mov	r5, r1
 8007758:	462e      	mov	r6, r5
 800775a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800775e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007762:	f017 0708 	ands.w	r7, r7, #8
 8007766:	d1f7      	bne.n	8007758 <_strtol_l.constprop.0+0x20>
 8007768:	2c2d      	cmp	r4, #45	; 0x2d
 800776a:	d132      	bne.n	80077d2 <_strtol_l.constprop.0+0x9a>
 800776c:	782c      	ldrb	r4, [r5, #0]
 800776e:	2701      	movs	r7, #1
 8007770:	1cb5      	adds	r5, r6, #2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d05b      	beq.n	800782e <_strtol_l.constprop.0+0xf6>
 8007776:	2b10      	cmp	r3, #16
 8007778:	d109      	bne.n	800778e <_strtol_l.constprop.0+0x56>
 800777a:	2c30      	cmp	r4, #48	; 0x30
 800777c:	d107      	bne.n	800778e <_strtol_l.constprop.0+0x56>
 800777e:	782c      	ldrb	r4, [r5, #0]
 8007780:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007784:	2c58      	cmp	r4, #88	; 0x58
 8007786:	d14d      	bne.n	8007824 <_strtol_l.constprop.0+0xec>
 8007788:	786c      	ldrb	r4, [r5, #1]
 800778a:	2310      	movs	r3, #16
 800778c:	3502      	adds	r5, #2
 800778e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007792:	f108 38ff 	add.w	r8, r8, #4294967295
 8007796:	f04f 0c00 	mov.w	ip, #0
 800779a:	fbb8 f9f3 	udiv	r9, r8, r3
 800779e:	4666      	mov	r6, ip
 80077a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80077a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80077a8:	f1be 0f09 	cmp.w	lr, #9
 80077ac:	d816      	bhi.n	80077dc <_strtol_l.constprop.0+0xa4>
 80077ae:	4674      	mov	r4, lr
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	dd24      	ble.n	80077fe <_strtol_l.constprop.0+0xc6>
 80077b4:	f1bc 0f00 	cmp.w	ip, #0
 80077b8:	db1e      	blt.n	80077f8 <_strtol_l.constprop.0+0xc0>
 80077ba:	45b1      	cmp	r9, r6
 80077bc:	d31c      	bcc.n	80077f8 <_strtol_l.constprop.0+0xc0>
 80077be:	d101      	bne.n	80077c4 <_strtol_l.constprop.0+0x8c>
 80077c0:	45a2      	cmp	sl, r4
 80077c2:	db19      	blt.n	80077f8 <_strtol_l.constprop.0+0xc0>
 80077c4:	fb06 4603 	mla	r6, r6, r3, r4
 80077c8:	f04f 0c01 	mov.w	ip, #1
 80077cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077d0:	e7e8      	b.n	80077a4 <_strtol_l.constprop.0+0x6c>
 80077d2:	2c2b      	cmp	r4, #43	; 0x2b
 80077d4:	bf04      	itt	eq
 80077d6:	782c      	ldrbeq	r4, [r5, #0]
 80077d8:	1cb5      	addeq	r5, r6, #2
 80077da:	e7ca      	b.n	8007772 <_strtol_l.constprop.0+0x3a>
 80077dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80077e0:	f1be 0f19 	cmp.w	lr, #25
 80077e4:	d801      	bhi.n	80077ea <_strtol_l.constprop.0+0xb2>
 80077e6:	3c37      	subs	r4, #55	; 0x37
 80077e8:	e7e2      	b.n	80077b0 <_strtol_l.constprop.0+0x78>
 80077ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80077ee:	f1be 0f19 	cmp.w	lr, #25
 80077f2:	d804      	bhi.n	80077fe <_strtol_l.constprop.0+0xc6>
 80077f4:	3c57      	subs	r4, #87	; 0x57
 80077f6:	e7db      	b.n	80077b0 <_strtol_l.constprop.0+0x78>
 80077f8:	f04f 3cff 	mov.w	ip, #4294967295
 80077fc:	e7e6      	b.n	80077cc <_strtol_l.constprop.0+0x94>
 80077fe:	f1bc 0f00 	cmp.w	ip, #0
 8007802:	da05      	bge.n	8007810 <_strtol_l.constprop.0+0xd8>
 8007804:	2322      	movs	r3, #34	; 0x22
 8007806:	6003      	str	r3, [r0, #0]
 8007808:	4646      	mov	r6, r8
 800780a:	b942      	cbnz	r2, 800781e <_strtol_l.constprop.0+0xe6>
 800780c:	4630      	mov	r0, r6
 800780e:	e79e      	b.n	800774e <_strtol_l.constprop.0+0x16>
 8007810:	b107      	cbz	r7, 8007814 <_strtol_l.constprop.0+0xdc>
 8007812:	4276      	negs	r6, r6
 8007814:	2a00      	cmp	r2, #0
 8007816:	d0f9      	beq.n	800780c <_strtol_l.constprop.0+0xd4>
 8007818:	f1bc 0f00 	cmp.w	ip, #0
 800781c:	d000      	beq.n	8007820 <_strtol_l.constprop.0+0xe8>
 800781e:	1e69      	subs	r1, r5, #1
 8007820:	6011      	str	r1, [r2, #0]
 8007822:	e7f3      	b.n	800780c <_strtol_l.constprop.0+0xd4>
 8007824:	2430      	movs	r4, #48	; 0x30
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1b1      	bne.n	800778e <_strtol_l.constprop.0+0x56>
 800782a:	2308      	movs	r3, #8
 800782c:	e7af      	b.n	800778e <_strtol_l.constprop.0+0x56>
 800782e:	2c30      	cmp	r4, #48	; 0x30
 8007830:	d0a5      	beq.n	800777e <_strtol_l.constprop.0+0x46>
 8007832:	230a      	movs	r3, #10
 8007834:	e7ab      	b.n	800778e <_strtol_l.constprop.0+0x56>
 8007836:	bf00      	nop
 8007838:	08008c45 	.word	0x08008c45

0800783c <strtol>:
 800783c:	4613      	mov	r3, r2
 800783e:	460a      	mov	r2, r1
 8007840:	4601      	mov	r1, r0
 8007842:	4802      	ldr	r0, [pc, #8]	; (800784c <strtol+0x10>)
 8007844:	6800      	ldr	r0, [r0, #0]
 8007846:	f7ff bf77 	b.w	8007738 <_strtol_l.constprop.0>
 800784a:	bf00      	nop
 800784c:	2000001c 	.word	0x2000001c

08007850 <__swbuf_r>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	460e      	mov	r6, r1
 8007854:	4614      	mov	r4, r2
 8007856:	4605      	mov	r5, r0
 8007858:	b118      	cbz	r0, 8007862 <__swbuf_r+0x12>
 800785a:	6983      	ldr	r3, [r0, #24]
 800785c:	b90b      	cbnz	r3, 8007862 <__swbuf_r+0x12>
 800785e:	f000 f9d1 	bl	8007c04 <__sinit>
 8007862:	4b21      	ldr	r3, [pc, #132]	; (80078e8 <__swbuf_r+0x98>)
 8007864:	429c      	cmp	r4, r3
 8007866:	d12b      	bne.n	80078c0 <__swbuf_r+0x70>
 8007868:	686c      	ldr	r4, [r5, #4]
 800786a:	69a3      	ldr	r3, [r4, #24]
 800786c:	60a3      	str	r3, [r4, #8]
 800786e:	89a3      	ldrh	r3, [r4, #12]
 8007870:	071a      	lsls	r2, r3, #28
 8007872:	d52f      	bpl.n	80078d4 <__swbuf_r+0x84>
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	b36b      	cbz	r3, 80078d4 <__swbuf_r+0x84>
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	6820      	ldr	r0, [r4, #0]
 800787c:	1ac0      	subs	r0, r0, r3
 800787e:	6963      	ldr	r3, [r4, #20]
 8007880:	b2f6      	uxtb	r6, r6
 8007882:	4283      	cmp	r3, r0
 8007884:	4637      	mov	r7, r6
 8007886:	dc04      	bgt.n	8007892 <__swbuf_r+0x42>
 8007888:	4621      	mov	r1, r4
 800788a:	4628      	mov	r0, r5
 800788c:	f000 f926 	bl	8007adc <_fflush_r>
 8007890:	bb30      	cbnz	r0, 80078e0 <__swbuf_r+0x90>
 8007892:	68a3      	ldr	r3, [r4, #8]
 8007894:	3b01      	subs	r3, #1
 8007896:	60a3      	str	r3, [r4, #8]
 8007898:	6823      	ldr	r3, [r4, #0]
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	6022      	str	r2, [r4, #0]
 800789e:	701e      	strb	r6, [r3, #0]
 80078a0:	6963      	ldr	r3, [r4, #20]
 80078a2:	3001      	adds	r0, #1
 80078a4:	4283      	cmp	r3, r0
 80078a6:	d004      	beq.n	80078b2 <__swbuf_r+0x62>
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	07db      	lsls	r3, r3, #31
 80078ac:	d506      	bpl.n	80078bc <__swbuf_r+0x6c>
 80078ae:	2e0a      	cmp	r6, #10
 80078b0:	d104      	bne.n	80078bc <__swbuf_r+0x6c>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	f000 f911 	bl	8007adc <_fflush_r>
 80078ba:	b988      	cbnz	r0, 80078e0 <__swbuf_r+0x90>
 80078bc:	4638      	mov	r0, r7
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <__swbuf_r+0x9c>)
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d101      	bne.n	80078ca <__swbuf_r+0x7a>
 80078c6:	68ac      	ldr	r4, [r5, #8]
 80078c8:	e7cf      	b.n	800786a <__swbuf_r+0x1a>
 80078ca:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <__swbuf_r+0xa0>)
 80078cc:	429c      	cmp	r4, r3
 80078ce:	bf08      	it	eq
 80078d0:	68ec      	ldreq	r4, [r5, #12]
 80078d2:	e7ca      	b.n	800786a <__swbuf_r+0x1a>
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f80c 	bl	80078f4 <__swsetup_r>
 80078dc:	2800      	cmp	r0, #0
 80078de:	d0cb      	beq.n	8007878 <__swbuf_r+0x28>
 80078e0:	f04f 37ff 	mov.w	r7, #4294967295
 80078e4:	e7ea      	b.n	80078bc <__swbuf_r+0x6c>
 80078e6:	bf00      	nop
 80078e8:	08008d68 	.word	0x08008d68
 80078ec:	08008d88 	.word	0x08008d88
 80078f0:	08008d48 	.word	0x08008d48

080078f4 <__swsetup_r>:
 80078f4:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <__swsetup_r+0xcc>)
 80078f6:	b570      	push	{r4, r5, r6, lr}
 80078f8:	681d      	ldr	r5, [r3, #0]
 80078fa:	4606      	mov	r6, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	b125      	cbz	r5, 800790a <__swsetup_r+0x16>
 8007900:	69ab      	ldr	r3, [r5, #24]
 8007902:	b913      	cbnz	r3, 800790a <__swsetup_r+0x16>
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f97d 	bl	8007c04 <__sinit>
 800790a:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <__swsetup_r+0xd0>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d10f      	bne.n	8007930 <__swsetup_r+0x3c>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007918:	0719      	lsls	r1, r3, #28
 800791a:	d42c      	bmi.n	8007976 <__swsetup_r+0x82>
 800791c:	06dd      	lsls	r5, r3, #27
 800791e:	d411      	bmi.n	8007944 <__swsetup_r+0x50>
 8007920:	2309      	movs	r3, #9
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	e03e      	b.n	80079ae <__swsetup_r+0xba>
 8007930:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <__swsetup_r+0xd4>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <__swsetup_r+0x46>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7eb      	b.n	8007912 <__swsetup_r+0x1e>
 800793a:	4b24      	ldr	r3, [pc, #144]	; (80079cc <__swsetup_r+0xd8>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7e6      	b.n	8007912 <__swsetup_r+0x1e>
 8007944:	0758      	lsls	r0, r3, #29
 8007946:	d512      	bpl.n	800796e <__swsetup_r+0x7a>
 8007948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794a:	b141      	cbz	r1, 800795e <__swsetup_r+0x6a>
 800794c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <__swsetup_r+0x66>
 8007954:	4630      	mov	r0, r6
 8007956:	f000 fa5b 	bl	8007e10 <_free_r>
 800795a:	2300      	movs	r3, #0
 800795c:	6363      	str	r3, [r4, #52]	; 0x34
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	2300      	movs	r3, #0
 8007968:	6063      	str	r3, [r4, #4]
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	f043 0308 	orr.w	r3, r3, #8
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	b94b      	cbnz	r3, 800798e <__swsetup_r+0x9a>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007984:	d003      	beq.n	800798e <__swsetup_r+0x9a>
 8007986:	4621      	mov	r1, r4
 8007988:	4630      	mov	r0, r6
 800798a:	f000 fa01 	bl	8007d90 <__smakebuf_r>
 800798e:	89a0      	ldrh	r0, [r4, #12]
 8007990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007994:	f010 0301 	ands.w	r3, r0, #1
 8007998:	d00a      	beq.n	80079b0 <__swsetup_r+0xbc>
 800799a:	2300      	movs	r3, #0
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	425b      	negs	r3, r3
 80079a2:	61a3      	str	r3, [r4, #24]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	b943      	cbnz	r3, 80079ba <__swsetup_r+0xc6>
 80079a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ac:	d1ba      	bne.n	8007924 <__swsetup_r+0x30>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	0781      	lsls	r1, r0, #30
 80079b2:	bf58      	it	pl
 80079b4:	6963      	ldrpl	r3, [r4, #20]
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	e7f4      	b.n	80079a4 <__swsetup_r+0xb0>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e7f7      	b.n	80079ae <__swsetup_r+0xba>
 80079be:	bf00      	nop
 80079c0:	2000001c 	.word	0x2000001c
 80079c4:	08008d68 	.word	0x08008d68
 80079c8:	08008d88 	.word	0x08008d88
 80079cc:	08008d48 	.word	0x08008d48

080079d0 <__sflush_r>:
 80079d0:	898a      	ldrh	r2, [r1, #12]
 80079d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d6:	4605      	mov	r5, r0
 80079d8:	0710      	lsls	r0, r2, #28
 80079da:	460c      	mov	r4, r1
 80079dc:	d458      	bmi.n	8007a90 <__sflush_r+0xc0>
 80079de:	684b      	ldr	r3, [r1, #4]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	dc05      	bgt.n	80079f0 <__sflush_r+0x20>
 80079e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	dc02      	bgt.n	80079f0 <__sflush_r+0x20>
 80079ea:	2000      	movs	r0, #0
 80079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	d0f9      	beq.n	80079ea <__sflush_r+0x1a>
 80079f6:	2300      	movs	r3, #0
 80079f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079fc:	682f      	ldr	r7, [r5, #0]
 80079fe:	602b      	str	r3, [r5, #0]
 8007a00:	d032      	beq.n	8007a68 <__sflush_r+0x98>
 8007a02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	075a      	lsls	r2, r3, #29
 8007a08:	d505      	bpl.n	8007a16 <__sflush_r+0x46>
 8007a0a:	6863      	ldr	r3, [r4, #4]
 8007a0c:	1ac0      	subs	r0, r0, r3
 8007a0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a10:	b10b      	cbz	r3, 8007a16 <__sflush_r+0x46>
 8007a12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a14:	1ac0      	subs	r0, r0, r3
 8007a16:	2300      	movs	r3, #0
 8007a18:	4602      	mov	r2, r0
 8007a1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a1c:	6a21      	ldr	r1, [r4, #32]
 8007a1e:	4628      	mov	r0, r5
 8007a20:	47b0      	blx	r6
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	d106      	bne.n	8007a36 <__sflush_r+0x66>
 8007a28:	6829      	ldr	r1, [r5, #0]
 8007a2a:	291d      	cmp	r1, #29
 8007a2c:	d82c      	bhi.n	8007a88 <__sflush_r+0xb8>
 8007a2e:	4a2a      	ldr	r2, [pc, #168]	; (8007ad8 <__sflush_r+0x108>)
 8007a30:	40ca      	lsrs	r2, r1
 8007a32:	07d6      	lsls	r6, r2, #31
 8007a34:	d528      	bpl.n	8007a88 <__sflush_r+0xb8>
 8007a36:	2200      	movs	r2, #0
 8007a38:	6062      	str	r2, [r4, #4]
 8007a3a:	04d9      	lsls	r1, r3, #19
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	6022      	str	r2, [r4, #0]
 8007a40:	d504      	bpl.n	8007a4c <__sflush_r+0x7c>
 8007a42:	1c42      	adds	r2, r0, #1
 8007a44:	d101      	bne.n	8007a4a <__sflush_r+0x7a>
 8007a46:	682b      	ldr	r3, [r5, #0]
 8007a48:	b903      	cbnz	r3, 8007a4c <__sflush_r+0x7c>
 8007a4a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4e:	602f      	str	r7, [r5, #0]
 8007a50:	2900      	cmp	r1, #0
 8007a52:	d0ca      	beq.n	80079ea <__sflush_r+0x1a>
 8007a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a58:	4299      	cmp	r1, r3
 8007a5a:	d002      	beq.n	8007a62 <__sflush_r+0x92>
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	f000 f9d7 	bl	8007e10 <_free_r>
 8007a62:	2000      	movs	r0, #0
 8007a64:	6360      	str	r0, [r4, #52]	; 0x34
 8007a66:	e7c1      	b.n	80079ec <__sflush_r+0x1c>
 8007a68:	6a21      	ldr	r1, [r4, #32]
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b0      	blx	r6
 8007a70:	1c41      	adds	r1, r0, #1
 8007a72:	d1c7      	bne.n	8007a04 <__sflush_r+0x34>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0c4      	beq.n	8007a04 <__sflush_r+0x34>
 8007a7a:	2b1d      	cmp	r3, #29
 8007a7c:	d001      	beq.n	8007a82 <__sflush_r+0xb2>
 8007a7e:	2b16      	cmp	r3, #22
 8007a80:	d101      	bne.n	8007a86 <__sflush_r+0xb6>
 8007a82:	602f      	str	r7, [r5, #0]
 8007a84:	e7b1      	b.n	80079ea <__sflush_r+0x1a>
 8007a86:	89a3      	ldrh	r3, [r4, #12]
 8007a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	e7ad      	b.n	80079ec <__sflush_r+0x1c>
 8007a90:	690f      	ldr	r7, [r1, #16]
 8007a92:	2f00      	cmp	r7, #0
 8007a94:	d0a9      	beq.n	80079ea <__sflush_r+0x1a>
 8007a96:	0793      	lsls	r3, r2, #30
 8007a98:	680e      	ldr	r6, [r1, #0]
 8007a9a:	bf08      	it	eq
 8007a9c:	694b      	ldreq	r3, [r1, #20]
 8007a9e:	600f      	str	r7, [r1, #0]
 8007aa0:	bf18      	it	ne
 8007aa2:	2300      	movne	r3, #0
 8007aa4:	eba6 0807 	sub.w	r8, r6, r7
 8007aa8:	608b      	str	r3, [r1, #8]
 8007aaa:	f1b8 0f00 	cmp.w	r8, #0
 8007aae:	dd9c      	ble.n	80079ea <__sflush_r+0x1a>
 8007ab0:	6a21      	ldr	r1, [r4, #32]
 8007ab2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ab4:	4643      	mov	r3, r8
 8007ab6:	463a      	mov	r2, r7
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b0      	blx	r6
 8007abc:	2800      	cmp	r0, #0
 8007abe:	dc06      	bgt.n	8007ace <__sflush_r+0xfe>
 8007ac0:	89a3      	ldrh	r3, [r4, #12]
 8007ac2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac6:	81a3      	strh	r3, [r4, #12]
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e78e      	b.n	80079ec <__sflush_r+0x1c>
 8007ace:	4407      	add	r7, r0
 8007ad0:	eba8 0800 	sub.w	r8, r8, r0
 8007ad4:	e7e9      	b.n	8007aaa <__sflush_r+0xda>
 8007ad6:	bf00      	nop
 8007ad8:	20400001 	.word	0x20400001

08007adc <_fflush_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	690b      	ldr	r3, [r1, #16]
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b913      	cbnz	r3, 8007aec <_fflush_r+0x10>
 8007ae6:	2500      	movs	r5, #0
 8007ae8:	4628      	mov	r0, r5
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	b118      	cbz	r0, 8007af6 <_fflush_r+0x1a>
 8007aee:	6983      	ldr	r3, [r0, #24]
 8007af0:	b90b      	cbnz	r3, 8007af6 <_fflush_r+0x1a>
 8007af2:	f000 f887 	bl	8007c04 <__sinit>
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <_fflush_r+0x6c>)
 8007af8:	429c      	cmp	r4, r3
 8007afa:	d11b      	bne.n	8007b34 <_fflush_r+0x58>
 8007afc:	686c      	ldr	r4, [r5, #4]
 8007afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0ef      	beq.n	8007ae6 <_fflush_r+0xa>
 8007b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b08:	07d0      	lsls	r0, r2, #31
 8007b0a:	d404      	bmi.n	8007b16 <_fflush_r+0x3a>
 8007b0c:	0599      	lsls	r1, r3, #22
 8007b0e:	d402      	bmi.n	8007b16 <_fflush_r+0x3a>
 8007b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b12:	f000 f915 	bl	8007d40 <__retarget_lock_acquire_recursive>
 8007b16:	4628      	mov	r0, r5
 8007b18:	4621      	mov	r1, r4
 8007b1a:	f7ff ff59 	bl	80079d0 <__sflush_r>
 8007b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b20:	07da      	lsls	r2, r3, #31
 8007b22:	4605      	mov	r5, r0
 8007b24:	d4e0      	bmi.n	8007ae8 <_fflush_r+0xc>
 8007b26:	89a3      	ldrh	r3, [r4, #12]
 8007b28:	059b      	lsls	r3, r3, #22
 8007b2a:	d4dd      	bmi.n	8007ae8 <_fflush_r+0xc>
 8007b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b2e:	f000 f908 	bl	8007d42 <__retarget_lock_release_recursive>
 8007b32:	e7d9      	b.n	8007ae8 <_fflush_r+0xc>
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <_fflush_r+0x70>)
 8007b36:	429c      	cmp	r4, r3
 8007b38:	d101      	bne.n	8007b3e <_fflush_r+0x62>
 8007b3a:	68ac      	ldr	r4, [r5, #8]
 8007b3c:	e7df      	b.n	8007afe <_fflush_r+0x22>
 8007b3e:	4b04      	ldr	r3, [pc, #16]	; (8007b50 <_fflush_r+0x74>)
 8007b40:	429c      	cmp	r4, r3
 8007b42:	bf08      	it	eq
 8007b44:	68ec      	ldreq	r4, [r5, #12]
 8007b46:	e7da      	b.n	8007afe <_fflush_r+0x22>
 8007b48:	08008d68 	.word	0x08008d68
 8007b4c:	08008d88 	.word	0x08008d88
 8007b50:	08008d48 	.word	0x08008d48

08007b54 <std>:
 8007b54:	2300      	movs	r3, #0
 8007b56:	b510      	push	{r4, lr}
 8007b58:	4604      	mov	r4, r0
 8007b5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b62:	6083      	str	r3, [r0, #8]
 8007b64:	8181      	strh	r1, [r0, #12]
 8007b66:	6643      	str	r3, [r0, #100]	; 0x64
 8007b68:	81c2      	strh	r2, [r0, #14]
 8007b6a:	6183      	str	r3, [r0, #24]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	2208      	movs	r2, #8
 8007b70:	305c      	adds	r0, #92	; 0x5c
 8007b72:	f7ff fd03 	bl	800757c <memset>
 8007b76:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <std+0x38>)
 8007b78:	6263      	str	r3, [r4, #36]	; 0x24
 8007b7a:	4b05      	ldr	r3, [pc, #20]	; (8007b90 <std+0x3c>)
 8007b7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <std+0x40>)
 8007b80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b82:	4b05      	ldr	r3, [pc, #20]	; (8007b98 <std+0x44>)
 8007b84:	6224      	str	r4, [r4, #32]
 8007b86:	6323      	str	r3, [r4, #48]	; 0x30
 8007b88:	bd10      	pop	{r4, pc}
 8007b8a:	bf00      	nop
 8007b8c:	08008885 	.word	0x08008885
 8007b90:	080088a7 	.word	0x080088a7
 8007b94:	080088df 	.word	0x080088df
 8007b98:	08008903 	.word	0x08008903

08007b9c <_cleanup_r>:
 8007b9c:	4901      	ldr	r1, [pc, #4]	; (8007ba4 <_cleanup_r+0x8>)
 8007b9e:	f000 b8af 	b.w	8007d00 <_fwalk_reent>
 8007ba2:	bf00      	nop
 8007ba4:	08007add 	.word	0x08007add

08007ba8 <__sfmoreglue>:
 8007ba8:	b570      	push	{r4, r5, r6, lr}
 8007baa:	2268      	movs	r2, #104	; 0x68
 8007bac:	1e4d      	subs	r5, r1, #1
 8007bae:	4355      	muls	r5, r2
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bb6:	f000 f997 	bl	8007ee8 <_malloc_r>
 8007bba:	4604      	mov	r4, r0
 8007bbc:	b140      	cbz	r0, 8007bd0 <__sfmoreglue+0x28>
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007bc4:	300c      	adds	r0, #12
 8007bc6:	60a0      	str	r0, [r4, #8]
 8007bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bcc:	f7ff fcd6 	bl	800757c <memset>
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}

08007bd4 <__sfp_lock_acquire>:
 8007bd4:	4801      	ldr	r0, [pc, #4]	; (8007bdc <__sfp_lock_acquire+0x8>)
 8007bd6:	f000 b8b3 	b.w	8007d40 <__retarget_lock_acquire_recursive>
 8007bda:	bf00      	nop
 8007bdc:	20000899 	.word	0x20000899

08007be0 <__sfp_lock_release>:
 8007be0:	4801      	ldr	r0, [pc, #4]	; (8007be8 <__sfp_lock_release+0x8>)
 8007be2:	f000 b8ae 	b.w	8007d42 <__retarget_lock_release_recursive>
 8007be6:	bf00      	nop
 8007be8:	20000899 	.word	0x20000899

08007bec <__sinit_lock_acquire>:
 8007bec:	4801      	ldr	r0, [pc, #4]	; (8007bf4 <__sinit_lock_acquire+0x8>)
 8007bee:	f000 b8a7 	b.w	8007d40 <__retarget_lock_acquire_recursive>
 8007bf2:	bf00      	nop
 8007bf4:	2000089a 	.word	0x2000089a

08007bf8 <__sinit_lock_release>:
 8007bf8:	4801      	ldr	r0, [pc, #4]	; (8007c00 <__sinit_lock_release+0x8>)
 8007bfa:	f000 b8a2 	b.w	8007d42 <__retarget_lock_release_recursive>
 8007bfe:	bf00      	nop
 8007c00:	2000089a 	.word	0x2000089a

08007c04 <__sinit>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	4604      	mov	r4, r0
 8007c08:	f7ff fff0 	bl	8007bec <__sinit_lock_acquire>
 8007c0c:	69a3      	ldr	r3, [r4, #24]
 8007c0e:	b11b      	cbz	r3, 8007c18 <__sinit+0x14>
 8007c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c14:	f7ff bff0 	b.w	8007bf8 <__sinit_lock_release>
 8007c18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c1e:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <__sinit+0x68>)
 8007c20:	4a13      	ldr	r2, [pc, #76]	; (8007c70 <__sinit+0x6c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	bf04      	itt	eq
 8007c2a:	2301      	moveq	r3, #1
 8007c2c:	61a3      	streq	r3, [r4, #24]
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f000 f820 	bl	8007c74 <__sfp>
 8007c34:	6060      	str	r0, [r4, #4]
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 f81c 	bl	8007c74 <__sfp>
 8007c3c:	60a0      	str	r0, [r4, #8]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f818 	bl	8007c74 <__sfp>
 8007c44:	2200      	movs	r2, #0
 8007c46:	60e0      	str	r0, [r4, #12]
 8007c48:	2104      	movs	r1, #4
 8007c4a:	6860      	ldr	r0, [r4, #4]
 8007c4c:	f7ff ff82 	bl	8007b54 <std>
 8007c50:	68a0      	ldr	r0, [r4, #8]
 8007c52:	2201      	movs	r2, #1
 8007c54:	2109      	movs	r1, #9
 8007c56:	f7ff ff7d 	bl	8007b54 <std>
 8007c5a:	68e0      	ldr	r0, [r4, #12]
 8007c5c:	2202      	movs	r2, #2
 8007c5e:	2112      	movs	r1, #18
 8007c60:	f7ff ff78 	bl	8007b54 <std>
 8007c64:	2301      	movs	r3, #1
 8007c66:	61a3      	str	r3, [r4, #24]
 8007c68:	e7d2      	b.n	8007c10 <__sinit+0xc>
 8007c6a:	bf00      	nop
 8007c6c:	08008c40 	.word	0x08008c40
 8007c70:	08007b9d 	.word	0x08007b9d

08007c74 <__sfp>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	4607      	mov	r7, r0
 8007c78:	f7ff ffac 	bl	8007bd4 <__sfp_lock_acquire>
 8007c7c:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <__sfp+0x84>)
 8007c7e:	681e      	ldr	r6, [r3, #0]
 8007c80:	69b3      	ldr	r3, [r6, #24]
 8007c82:	b913      	cbnz	r3, 8007c8a <__sfp+0x16>
 8007c84:	4630      	mov	r0, r6
 8007c86:	f7ff ffbd 	bl	8007c04 <__sinit>
 8007c8a:	3648      	adds	r6, #72	; 0x48
 8007c8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	d503      	bpl.n	8007c9c <__sfp+0x28>
 8007c94:	6833      	ldr	r3, [r6, #0]
 8007c96:	b30b      	cbz	r3, 8007cdc <__sfp+0x68>
 8007c98:	6836      	ldr	r6, [r6, #0]
 8007c9a:	e7f7      	b.n	8007c8c <__sfp+0x18>
 8007c9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ca0:	b9d5      	cbnz	r5, 8007cd8 <__sfp+0x64>
 8007ca2:	4b16      	ldr	r3, [pc, #88]	; (8007cfc <__sfp+0x88>)
 8007ca4:	60e3      	str	r3, [r4, #12]
 8007ca6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007caa:	6665      	str	r5, [r4, #100]	; 0x64
 8007cac:	f000 f847 	bl	8007d3e <__retarget_lock_init_recursive>
 8007cb0:	f7ff ff96 	bl	8007be0 <__sfp_lock_release>
 8007cb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cbc:	6025      	str	r5, [r4, #0]
 8007cbe:	61a5      	str	r5, [r4, #24]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cc8:	f7ff fc58 	bl	800757c <memset>
 8007ccc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007cd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cd8:	3468      	adds	r4, #104	; 0x68
 8007cda:	e7d9      	b.n	8007c90 <__sfp+0x1c>
 8007cdc:	2104      	movs	r1, #4
 8007cde:	4638      	mov	r0, r7
 8007ce0:	f7ff ff62 	bl	8007ba8 <__sfmoreglue>
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	6030      	str	r0, [r6, #0]
 8007ce8:	2800      	cmp	r0, #0
 8007cea:	d1d5      	bne.n	8007c98 <__sfp+0x24>
 8007cec:	f7ff ff78 	bl	8007be0 <__sfp_lock_release>
 8007cf0:	230c      	movs	r3, #12
 8007cf2:	603b      	str	r3, [r7, #0]
 8007cf4:	e7ee      	b.n	8007cd4 <__sfp+0x60>
 8007cf6:	bf00      	nop
 8007cf8:	08008c40 	.word	0x08008c40
 8007cfc:	ffff0001 	.word	0xffff0001

08007d00 <_fwalk_reent>:
 8007d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d04:	4606      	mov	r6, r0
 8007d06:	4688      	mov	r8, r1
 8007d08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d0c:	2700      	movs	r7, #0
 8007d0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d12:	f1b9 0901 	subs.w	r9, r9, #1
 8007d16:	d505      	bpl.n	8007d24 <_fwalk_reent+0x24>
 8007d18:	6824      	ldr	r4, [r4, #0]
 8007d1a:	2c00      	cmp	r4, #0
 8007d1c:	d1f7      	bne.n	8007d0e <_fwalk_reent+0xe>
 8007d1e:	4638      	mov	r0, r7
 8007d20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d24:	89ab      	ldrh	r3, [r5, #12]
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d907      	bls.n	8007d3a <_fwalk_reent+0x3a>
 8007d2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	d003      	beq.n	8007d3a <_fwalk_reent+0x3a>
 8007d32:	4629      	mov	r1, r5
 8007d34:	4630      	mov	r0, r6
 8007d36:	47c0      	blx	r8
 8007d38:	4307      	orrs	r7, r0
 8007d3a:	3568      	adds	r5, #104	; 0x68
 8007d3c:	e7e9      	b.n	8007d12 <_fwalk_reent+0x12>

08007d3e <__retarget_lock_init_recursive>:
 8007d3e:	4770      	bx	lr

08007d40 <__retarget_lock_acquire_recursive>:
 8007d40:	4770      	bx	lr

08007d42 <__retarget_lock_release_recursive>:
 8007d42:	4770      	bx	lr

08007d44 <__swhatbuf_r>:
 8007d44:	b570      	push	{r4, r5, r6, lr}
 8007d46:	460e      	mov	r6, r1
 8007d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	b096      	sub	sp, #88	; 0x58
 8007d50:	4614      	mov	r4, r2
 8007d52:	461d      	mov	r5, r3
 8007d54:	da08      	bge.n	8007d68 <__swhatbuf_r+0x24>
 8007d56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	061a      	lsls	r2, r3, #24
 8007d60:	d410      	bmi.n	8007d84 <__swhatbuf_r+0x40>
 8007d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d66:	e00e      	b.n	8007d86 <__swhatbuf_r+0x42>
 8007d68:	466a      	mov	r2, sp
 8007d6a:	f000 fdf1 	bl	8008950 <_fstat_r>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	dbf1      	blt.n	8007d56 <__swhatbuf_r+0x12>
 8007d72:	9a01      	ldr	r2, [sp, #4]
 8007d74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d7c:	425a      	negs	r2, r3
 8007d7e:	415a      	adcs	r2, r3
 8007d80:	602a      	str	r2, [r5, #0]
 8007d82:	e7ee      	b.n	8007d62 <__swhatbuf_r+0x1e>
 8007d84:	2340      	movs	r3, #64	; 0x40
 8007d86:	2000      	movs	r0, #0
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	b016      	add	sp, #88	; 0x58
 8007d8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d90 <__smakebuf_r>:
 8007d90:	898b      	ldrh	r3, [r1, #12]
 8007d92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d94:	079d      	lsls	r5, r3, #30
 8007d96:	4606      	mov	r6, r0
 8007d98:	460c      	mov	r4, r1
 8007d9a:	d507      	bpl.n	8007dac <__smakebuf_r+0x1c>
 8007d9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	6123      	str	r3, [r4, #16]
 8007da4:	2301      	movs	r3, #1
 8007da6:	6163      	str	r3, [r4, #20]
 8007da8:	b002      	add	sp, #8
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	ab01      	add	r3, sp, #4
 8007dae:	466a      	mov	r2, sp
 8007db0:	f7ff ffc8 	bl	8007d44 <__swhatbuf_r>
 8007db4:	9900      	ldr	r1, [sp, #0]
 8007db6:	4605      	mov	r5, r0
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 f895 	bl	8007ee8 <_malloc_r>
 8007dbe:	b948      	cbnz	r0, 8007dd4 <__smakebuf_r+0x44>
 8007dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dc4:	059a      	lsls	r2, r3, #22
 8007dc6:	d4ef      	bmi.n	8007da8 <__smakebuf_r+0x18>
 8007dc8:	f023 0303 	bic.w	r3, r3, #3
 8007dcc:	f043 0302 	orr.w	r3, r3, #2
 8007dd0:	81a3      	strh	r3, [r4, #12]
 8007dd2:	e7e3      	b.n	8007d9c <__smakebuf_r+0xc>
 8007dd4:	4b0d      	ldr	r3, [pc, #52]	; (8007e0c <__smakebuf_r+0x7c>)
 8007dd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	6020      	str	r0, [r4, #0]
 8007ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	9b00      	ldr	r3, [sp, #0]
 8007de4:	6163      	str	r3, [r4, #20]
 8007de6:	9b01      	ldr	r3, [sp, #4]
 8007de8:	6120      	str	r0, [r4, #16]
 8007dea:	b15b      	cbz	r3, 8007e04 <__smakebuf_r+0x74>
 8007dec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 fdbf 	bl	8008974 <_isatty_r>
 8007df6:	b128      	cbz	r0, 8007e04 <__smakebuf_r+0x74>
 8007df8:	89a3      	ldrh	r3, [r4, #12]
 8007dfa:	f023 0303 	bic.w	r3, r3, #3
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	81a3      	strh	r3, [r4, #12]
 8007e04:	89a0      	ldrh	r0, [r4, #12]
 8007e06:	4305      	orrs	r5, r0
 8007e08:	81a5      	strh	r5, [r4, #12]
 8007e0a:	e7cd      	b.n	8007da8 <__smakebuf_r+0x18>
 8007e0c:	08007b9d 	.word	0x08007b9d

08007e10 <_free_r>:
 8007e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e12:	2900      	cmp	r1, #0
 8007e14:	d044      	beq.n	8007ea0 <_free_r+0x90>
 8007e16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e1a:	9001      	str	r0, [sp, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007e22:	bfb8      	it	lt
 8007e24:	18e4      	addlt	r4, r4, r3
 8007e26:	f000 fdef 	bl	8008a08 <__malloc_lock>
 8007e2a:	4a1e      	ldr	r2, [pc, #120]	; (8007ea4 <_free_r+0x94>)
 8007e2c:	9801      	ldr	r0, [sp, #4]
 8007e2e:	6813      	ldr	r3, [r2, #0]
 8007e30:	b933      	cbnz	r3, 8007e40 <_free_r+0x30>
 8007e32:	6063      	str	r3, [r4, #4]
 8007e34:	6014      	str	r4, [r2, #0]
 8007e36:	b003      	add	sp, #12
 8007e38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e3c:	f000 bdea 	b.w	8008a14 <__malloc_unlock>
 8007e40:	42a3      	cmp	r3, r4
 8007e42:	d908      	bls.n	8007e56 <_free_r+0x46>
 8007e44:	6825      	ldr	r5, [r4, #0]
 8007e46:	1961      	adds	r1, r4, r5
 8007e48:	428b      	cmp	r3, r1
 8007e4a:	bf01      	itttt	eq
 8007e4c:	6819      	ldreq	r1, [r3, #0]
 8007e4e:	685b      	ldreq	r3, [r3, #4]
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	e7ed      	b.n	8007e32 <_free_r+0x22>
 8007e56:	461a      	mov	r2, r3
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	b10b      	cbz	r3, 8007e60 <_free_r+0x50>
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d9fa      	bls.n	8007e56 <_free_r+0x46>
 8007e60:	6811      	ldr	r1, [r2, #0]
 8007e62:	1855      	adds	r5, r2, r1
 8007e64:	42a5      	cmp	r5, r4
 8007e66:	d10b      	bne.n	8007e80 <_free_r+0x70>
 8007e68:	6824      	ldr	r4, [r4, #0]
 8007e6a:	4421      	add	r1, r4
 8007e6c:	1854      	adds	r4, r2, r1
 8007e6e:	42a3      	cmp	r3, r4
 8007e70:	6011      	str	r1, [r2, #0]
 8007e72:	d1e0      	bne.n	8007e36 <_free_r+0x26>
 8007e74:	681c      	ldr	r4, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	6053      	str	r3, [r2, #4]
 8007e7a:	4421      	add	r1, r4
 8007e7c:	6011      	str	r1, [r2, #0]
 8007e7e:	e7da      	b.n	8007e36 <_free_r+0x26>
 8007e80:	d902      	bls.n	8007e88 <_free_r+0x78>
 8007e82:	230c      	movs	r3, #12
 8007e84:	6003      	str	r3, [r0, #0]
 8007e86:	e7d6      	b.n	8007e36 <_free_r+0x26>
 8007e88:	6825      	ldr	r5, [r4, #0]
 8007e8a:	1961      	adds	r1, r4, r5
 8007e8c:	428b      	cmp	r3, r1
 8007e8e:	bf04      	itt	eq
 8007e90:	6819      	ldreq	r1, [r3, #0]
 8007e92:	685b      	ldreq	r3, [r3, #4]
 8007e94:	6063      	str	r3, [r4, #4]
 8007e96:	bf04      	itt	eq
 8007e98:	1949      	addeq	r1, r1, r5
 8007e9a:	6021      	streq	r1, [r4, #0]
 8007e9c:	6054      	str	r4, [r2, #4]
 8007e9e:	e7ca      	b.n	8007e36 <_free_r+0x26>
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bd30      	pop	{r4, r5, pc}
 8007ea4:	2000089c 	.word	0x2000089c

08007ea8 <sbrk_aligned>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4e0e      	ldr	r6, [pc, #56]	; (8007ee4 <sbrk_aligned+0x3c>)
 8007eac:	460c      	mov	r4, r1
 8007eae:	6831      	ldr	r1, [r6, #0]
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	b911      	cbnz	r1, 8007eba <sbrk_aligned+0x12>
 8007eb4:	f000 fcd6 	bl	8008864 <_sbrk_r>
 8007eb8:	6030      	str	r0, [r6, #0]
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	f000 fcd1 	bl	8008864 <_sbrk_r>
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	d00a      	beq.n	8007edc <sbrk_aligned+0x34>
 8007ec6:	1cc4      	adds	r4, r0, #3
 8007ec8:	f024 0403 	bic.w	r4, r4, #3
 8007ecc:	42a0      	cmp	r0, r4
 8007ece:	d007      	beq.n	8007ee0 <sbrk_aligned+0x38>
 8007ed0:	1a21      	subs	r1, r4, r0
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f000 fcc6 	bl	8008864 <_sbrk_r>
 8007ed8:	3001      	adds	r0, #1
 8007eda:	d101      	bne.n	8007ee0 <sbrk_aligned+0x38>
 8007edc:	f04f 34ff 	mov.w	r4, #4294967295
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	bd70      	pop	{r4, r5, r6, pc}
 8007ee4:	200008a0 	.word	0x200008a0

08007ee8 <_malloc_r>:
 8007ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eec:	1ccd      	adds	r5, r1, #3
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	2d00      	cmp	r5, #0
 8007efc:	4607      	mov	r7, r0
 8007efe:	db01      	blt.n	8007f04 <_malloc_r+0x1c>
 8007f00:	42a9      	cmp	r1, r5
 8007f02:	d905      	bls.n	8007f10 <_malloc_r+0x28>
 8007f04:	230c      	movs	r3, #12
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	2600      	movs	r6, #0
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f10:	4e2e      	ldr	r6, [pc, #184]	; (8007fcc <_malloc_r+0xe4>)
 8007f12:	f000 fd79 	bl	8008a08 <__malloc_lock>
 8007f16:	6833      	ldr	r3, [r6, #0]
 8007f18:	461c      	mov	r4, r3
 8007f1a:	bb34      	cbnz	r4, 8007f6a <_malloc_r+0x82>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f7ff ffc2 	bl	8007ea8 <sbrk_aligned>
 8007f24:	1c43      	adds	r3, r0, #1
 8007f26:	4604      	mov	r4, r0
 8007f28:	d14d      	bne.n	8007fc6 <_malloc_r+0xde>
 8007f2a:	6834      	ldr	r4, [r6, #0]
 8007f2c:	4626      	mov	r6, r4
 8007f2e:	2e00      	cmp	r6, #0
 8007f30:	d140      	bne.n	8007fb4 <_malloc_r+0xcc>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	4631      	mov	r1, r6
 8007f36:	4638      	mov	r0, r7
 8007f38:	eb04 0803 	add.w	r8, r4, r3
 8007f3c:	f000 fc92 	bl	8008864 <_sbrk_r>
 8007f40:	4580      	cmp	r8, r0
 8007f42:	d13a      	bne.n	8007fba <_malloc_r+0xd2>
 8007f44:	6821      	ldr	r1, [r4, #0]
 8007f46:	3503      	adds	r5, #3
 8007f48:	1a6d      	subs	r5, r5, r1
 8007f4a:	f025 0503 	bic.w	r5, r5, #3
 8007f4e:	3508      	adds	r5, #8
 8007f50:	2d0c      	cmp	r5, #12
 8007f52:	bf38      	it	cc
 8007f54:	250c      	movcc	r5, #12
 8007f56:	4629      	mov	r1, r5
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f7ff ffa5 	bl	8007ea8 <sbrk_aligned>
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d02b      	beq.n	8007fba <_malloc_r+0xd2>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	442b      	add	r3, r5
 8007f66:	6023      	str	r3, [r4, #0]
 8007f68:	e00e      	b.n	8007f88 <_malloc_r+0xa0>
 8007f6a:	6822      	ldr	r2, [r4, #0]
 8007f6c:	1b52      	subs	r2, r2, r5
 8007f6e:	d41e      	bmi.n	8007fae <_malloc_r+0xc6>
 8007f70:	2a0b      	cmp	r2, #11
 8007f72:	d916      	bls.n	8007fa2 <_malloc_r+0xba>
 8007f74:	1961      	adds	r1, r4, r5
 8007f76:	42a3      	cmp	r3, r4
 8007f78:	6025      	str	r5, [r4, #0]
 8007f7a:	bf18      	it	ne
 8007f7c:	6059      	strne	r1, [r3, #4]
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	bf08      	it	eq
 8007f82:	6031      	streq	r1, [r6, #0]
 8007f84:	5162      	str	r2, [r4, r5]
 8007f86:	604b      	str	r3, [r1, #4]
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f104 060b 	add.w	r6, r4, #11
 8007f8e:	f000 fd41 	bl	8008a14 <__malloc_unlock>
 8007f92:	f026 0607 	bic.w	r6, r6, #7
 8007f96:	1d23      	adds	r3, r4, #4
 8007f98:	1af2      	subs	r2, r6, r3
 8007f9a:	d0b6      	beq.n	8007f0a <_malloc_r+0x22>
 8007f9c:	1b9b      	subs	r3, r3, r6
 8007f9e:	50a3      	str	r3, [r4, r2]
 8007fa0:	e7b3      	b.n	8007f0a <_malloc_r+0x22>
 8007fa2:	6862      	ldr	r2, [r4, #4]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	bf0c      	ite	eq
 8007fa8:	6032      	streq	r2, [r6, #0]
 8007faa:	605a      	strne	r2, [r3, #4]
 8007fac:	e7ec      	b.n	8007f88 <_malloc_r+0xa0>
 8007fae:	4623      	mov	r3, r4
 8007fb0:	6864      	ldr	r4, [r4, #4]
 8007fb2:	e7b2      	b.n	8007f1a <_malloc_r+0x32>
 8007fb4:	4634      	mov	r4, r6
 8007fb6:	6876      	ldr	r6, [r6, #4]
 8007fb8:	e7b9      	b.n	8007f2e <_malloc_r+0x46>
 8007fba:	230c      	movs	r3, #12
 8007fbc:	603b      	str	r3, [r7, #0]
 8007fbe:	4638      	mov	r0, r7
 8007fc0:	f000 fd28 	bl	8008a14 <__malloc_unlock>
 8007fc4:	e7a1      	b.n	8007f0a <_malloc_r+0x22>
 8007fc6:	6025      	str	r5, [r4, #0]
 8007fc8:	e7de      	b.n	8007f88 <_malloc_r+0xa0>
 8007fca:	bf00      	nop
 8007fcc:	2000089c 	.word	0x2000089c

08007fd0 <__ssputs_r>:
 8007fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd4:	688e      	ldr	r6, [r1, #8]
 8007fd6:	429e      	cmp	r6, r3
 8007fd8:	4682      	mov	sl, r0
 8007fda:	460c      	mov	r4, r1
 8007fdc:	4690      	mov	r8, r2
 8007fde:	461f      	mov	r7, r3
 8007fe0:	d838      	bhi.n	8008054 <__ssputs_r+0x84>
 8007fe2:	898a      	ldrh	r2, [r1, #12]
 8007fe4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fe8:	d032      	beq.n	8008050 <__ssputs_r+0x80>
 8007fea:	6825      	ldr	r5, [r4, #0]
 8007fec:	6909      	ldr	r1, [r1, #16]
 8007fee:	eba5 0901 	sub.w	r9, r5, r1
 8007ff2:	6965      	ldr	r5, [r4, #20]
 8007ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	444b      	add	r3, r9
 8008000:	106d      	asrs	r5, r5, #1
 8008002:	429d      	cmp	r5, r3
 8008004:	bf38      	it	cc
 8008006:	461d      	movcc	r5, r3
 8008008:	0553      	lsls	r3, r2, #21
 800800a:	d531      	bpl.n	8008070 <__ssputs_r+0xa0>
 800800c:	4629      	mov	r1, r5
 800800e:	f7ff ff6b 	bl	8007ee8 <_malloc_r>
 8008012:	4606      	mov	r6, r0
 8008014:	b950      	cbnz	r0, 800802c <__ssputs_r+0x5c>
 8008016:	230c      	movs	r3, #12
 8008018:	f8ca 3000 	str.w	r3, [sl]
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800802c:	6921      	ldr	r1, [r4, #16]
 800802e:	464a      	mov	r2, r9
 8008030:	f000 fcc2 	bl	80089b8 <memcpy>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800803a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800803e:	81a3      	strh	r3, [r4, #12]
 8008040:	6126      	str	r6, [r4, #16]
 8008042:	6165      	str	r5, [r4, #20]
 8008044:	444e      	add	r6, r9
 8008046:	eba5 0509 	sub.w	r5, r5, r9
 800804a:	6026      	str	r6, [r4, #0]
 800804c:	60a5      	str	r5, [r4, #8]
 800804e:	463e      	mov	r6, r7
 8008050:	42be      	cmp	r6, r7
 8008052:	d900      	bls.n	8008056 <__ssputs_r+0x86>
 8008054:	463e      	mov	r6, r7
 8008056:	6820      	ldr	r0, [r4, #0]
 8008058:	4632      	mov	r2, r6
 800805a:	4641      	mov	r1, r8
 800805c:	f000 fcba 	bl	80089d4 <memmove>
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	1b9b      	subs	r3, r3, r6
 8008064:	60a3      	str	r3, [r4, #8]
 8008066:	6823      	ldr	r3, [r4, #0]
 8008068:	4433      	add	r3, r6
 800806a:	6023      	str	r3, [r4, #0]
 800806c:	2000      	movs	r0, #0
 800806e:	e7db      	b.n	8008028 <__ssputs_r+0x58>
 8008070:	462a      	mov	r2, r5
 8008072:	f000 fcd5 	bl	8008a20 <_realloc_r>
 8008076:	4606      	mov	r6, r0
 8008078:	2800      	cmp	r0, #0
 800807a:	d1e1      	bne.n	8008040 <__ssputs_r+0x70>
 800807c:	6921      	ldr	r1, [r4, #16]
 800807e:	4650      	mov	r0, sl
 8008080:	f7ff fec6 	bl	8007e10 <_free_r>
 8008084:	e7c7      	b.n	8008016 <__ssputs_r+0x46>
	...

08008088 <_svfiprintf_r>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	4698      	mov	r8, r3
 800808e:	898b      	ldrh	r3, [r1, #12]
 8008090:	061b      	lsls	r3, r3, #24
 8008092:	b09d      	sub	sp, #116	; 0x74
 8008094:	4607      	mov	r7, r0
 8008096:	460d      	mov	r5, r1
 8008098:	4614      	mov	r4, r2
 800809a:	d50e      	bpl.n	80080ba <_svfiprintf_r+0x32>
 800809c:	690b      	ldr	r3, [r1, #16]
 800809e:	b963      	cbnz	r3, 80080ba <_svfiprintf_r+0x32>
 80080a0:	2140      	movs	r1, #64	; 0x40
 80080a2:	f7ff ff21 	bl	8007ee8 <_malloc_r>
 80080a6:	6028      	str	r0, [r5, #0]
 80080a8:	6128      	str	r0, [r5, #16]
 80080aa:	b920      	cbnz	r0, 80080b6 <_svfiprintf_r+0x2e>
 80080ac:	230c      	movs	r3, #12
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e0d1      	b.n	800825a <_svfiprintf_r+0x1d2>
 80080b6:	2340      	movs	r3, #64	; 0x40
 80080b8:	616b      	str	r3, [r5, #20]
 80080ba:	2300      	movs	r3, #0
 80080bc:	9309      	str	r3, [sp, #36]	; 0x24
 80080be:	2320      	movs	r3, #32
 80080c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80080c8:	2330      	movs	r3, #48	; 0x30
 80080ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008274 <_svfiprintf_r+0x1ec>
 80080ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080d2:	f04f 0901 	mov.w	r9, #1
 80080d6:	4623      	mov	r3, r4
 80080d8:	469a      	mov	sl, r3
 80080da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080de:	b10a      	cbz	r2, 80080e4 <_svfiprintf_r+0x5c>
 80080e0:	2a25      	cmp	r2, #37	; 0x25
 80080e2:	d1f9      	bne.n	80080d8 <_svfiprintf_r+0x50>
 80080e4:	ebba 0b04 	subs.w	fp, sl, r4
 80080e8:	d00b      	beq.n	8008102 <_svfiprintf_r+0x7a>
 80080ea:	465b      	mov	r3, fp
 80080ec:	4622      	mov	r2, r4
 80080ee:	4629      	mov	r1, r5
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7ff ff6d 	bl	8007fd0 <__ssputs_r>
 80080f6:	3001      	adds	r0, #1
 80080f8:	f000 80aa 	beq.w	8008250 <_svfiprintf_r+0x1c8>
 80080fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080fe:	445a      	add	r2, fp
 8008100:	9209      	str	r2, [sp, #36]	; 0x24
 8008102:	f89a 3000 	ldrb.w	r3, [sl]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 80a2 	beq.w	8008250 <_svfiprintf_r+0x1c8>
 800810c:	2300      	movs	r3, #0
 800810e:	f04f 32ff 	mov.w	r2, #4294967295
 8008112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008116:	f10a 0a01 	add.w	sl, sl, #1
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	9307      	str	r3, [sp, #28]
 800811e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008122:	931a      	str	r3, [sp, #104]	; 0x68
 8008124:	4654      	mov	r4, sl
 8008126:	2205      	movs	r2, #5
 8008128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800812c:	4851      	ldr	r0, [pc, #324]	; (8008274 <_svfiprintf_r+0x1ec>)
 800812e:	f7f8 f857 	bl	80001e0 <memchr>
 8008132:	9a04      	ldr	r2, [sp, #16]
 8008134:	b9d8      	cbnz	r0, 800816e <_svfiprintf_r+0xe6>
 8008136:	06d0      	lsls	r0, r2, #27
 8008138:	bf44      	itt	mi
 800813a:	2320      	movmi	r3, #32
 800813c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008140:	0711      	lsls	r1, r2, #28
 8008142:	bf44      	itt	mi
 8008144:	232b      	movmi	r3, #43	; 0x2b
 8008146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800814a:	f89a 3000 	ldrb.w	r3, [sl]
 800814e:	2b2a      	cmp	r3, #42	; 0x2a
 8008150:	d015      	beq.n	800817e <_svfiprintf_r+0xf6>
 8008152:	9a07      	ldr	r2, [sp, #28]
 8008154:	4654      	mov	r4, sl
 8008156:	2000      	movs	r0, #0
 8008158:	f04f 0c0a 	mov.w	ip, #10
 800815c:	4621      	mov	r1, r4
 800815e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008162:	3b30      	subs	r3, #48	; 0x30
 8008164:	2b09      	cmp	r3, #9
 8008166:	d94e      	bls.n	8008206 <_svfiprintf_r+0x17e>
 8008168:	b1b0      	cbz	r0, 8008198 <_svfiprintf_r+0x110>
 800816a:	9207      	str	r2, [sp, #28]
 800816c:	e014      	b.n	8008198 <_svfiprintf_r+0x110>
 800816e:	eba0 0308 	sub.w	r3, r0, r8
 8008172:	fa09 f303 	lsl.w	r3, r9, r3
 8008176:	4313      	orrs	r3, r2
 8008178:	9304      	str	r3, [sp, #16]
 800817a:	46a2      	mov	sl, r4
 800817c:	e7d2      	b.n	8008124 <_svfiprintf_r+0x9c>
 800817e:	9b03      	ldr	r3, [sp, #12]
 8008180:	1d19      	adds	r1, r3, #4
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	9103      	str	r1, [sp, #12]
 8008186:	2b00      	cmp	r3, #0
 8008188:	bfbb      	ittet	lt
 800818a:	425b      	neglt	r3, r3
 800818c:	f042 0202 	orrlt.w	r2, r2, #2
 8008190:	9307      	strge	r3, [sp, #28]
 8008192:	9307      	strlt	r3, [sp, #28]
 8008194:	bfb8      	it	lt
 8008196:	9204      	strlt	r2, [sp, #16]
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	2b2e      	cmp	r3, #46	; 0x2e
 800819c:	d10c      	bne.n	80081b8 <_svfiprintf_r+0x130>
 800819e:	7863      	ldrb	r3, [r4, #1]
 80081a0:	2b2a      	cmp	r3, #42	; 0x2a
 80081a2:	d135      	bne.n	8008210 <_svfiprintf_r+0x188>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	1d1a      	adds	r2, r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	9203      	str	r2, [sp, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bfb8      	it	lt
 80081b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80081b4:	3402      	adds	r4, #2
 80081b6:	9305      	str	r3, [sp, #20]
 80081b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008284 <_svfiprintf_r+0x1fc>
 80081bc:	7821      	ldrb	r1, [r4, #0]
 80081be:	2203      	movs	r2, #3
 80081c0:	4650      	mov	r0, sl
 80081c2:	f7f8 f80d 	bl	80001e0 <memchr>
 80081c6:	b140      	cbz	r0, 80081da <_svfiprintf_r+0x152>
 80081c8:	2340      	movs	r3, #64	; 0x40
 80081ca:	eba0 000a 	sub.w	r0, r0, sl
 80081ce:	fa03 f000 	lsl.w	r0, r3, r0
 80081d2:	9b04      	ldr	r3, [sp, #16]
 80081d4:	4303      	orrs	r3, r0
 80081d6:	3401      	adds	r4, #1
 80081d8:	9304      	str	r3, [sp, #16]
 80081da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081de:	4826      	ldr	r0, [pc, #152]	; (8008278 <_svfiprintf_r+0x1f0>)
 80081e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081e4:	2206      	movs	r2, #6
 80081e6:	f7f7 fffb 	bl	80001e0 <memchr>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d038      	beq.n	8008260 <_svfiprintf_r+0x1d8>
 80081ee:	4b23      	ldr	r3, [pc, #140]	; (800827c <_svfiprintf_r+0x1f4>)
 80081f0:	bb1b      	cbnz	r3, 800823a <_svfiprintf_r+0x1b2>
 80081f2:	9b03      	ldr	r3, [sp, #12]
 80081f4:	3307      	adds	r3, #7
 80081f6:	f023 0307 	bic.w	r3, r3, #7
 80081fa:	3308      	adds	r3, #8
 80081fc:	9303      	str	r3, [sp, #12]
 80081fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008200:	4433      	add	r3, r6
 8008202:	9309      	str	r3, [sp, #36]	; 0x24
 8008204:	e767      	b.n	80080d6 <_svfiprintf_r+0x4e>
 8008206:	fb0c 3202 	mla	r2, ip, r2, r3
 800820a:	460c      	mov	r4, r1
 800820c:	2001      	movs	r0, #1
 800820e:	e7a5      	b.n	800815c <_svfiprintf_r+0xd4>
 8008210:	2300      	movs	r3, #0
 8008212:	3401      	adds	r4, #1
 8008214:	9305      	str	r3, [sp, #20]
 8008216:	4619      	mov	r1, r3
 8008218:	f04f 0c0a 	mov.w	ip, #10
 800821c:	4620      	mov	r0, r4
 800821e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008222:	3a30      	subs	r2, #48	; 0x30
 8008224:	2a09      	cmp	r2, #9
 8008226:	d903      	bls.n	8008230 <_svfiprintf_r+0x1a8>
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0c5      	beq.n	80081b8 <_svfiprintf_r+0x130>
 800822c:	9105      	str	r1, [sp, #20]
 800822e:	e7c3      	b.n	80081b8 <_svfiprintf_r+0x130>
 8008230:	fb0c 2101 	mla	r1, ip, r1, r2
 8008234:	4604      	mov	r4, r0
 8008236:	2301      	movs	r3, #1
 8008238:	e7f0      	b.n	800821c <_svfiprintf_r+0x194>
 800823a:	ab03      	add	r3, sp, #12
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	462a      	mov	r2, r5
 8008240:	4b0f      	ldr	r3, [pc, #60]	; (8008280 <_svfiprintf_r+0x1f8>)
 8008242:	a904      	add	r1, sp, #16
 8008244:	4638      	mov	r0, r7
 8008246:	f3af 8000 	nop.w
 800824a:	1c42      	adds	r2, r0, #1
 800824c:	4606      	mov	r6, r0
 800824e:	d1d6      	bne.n	80081fe <_svfiprintf_r+0x176>
 8008250:	89ab      	ldrh	r3, [r5, #12]
 8008252:	065b      	lsls	r3, r3, #25
 8008254:	f53f af2c 	bmi.w	80080b0 <_svfiprintf_r+0x28>
 8008258:	9809      	ldr	r0, [sp, #36]	; 0x24
 800825a:	b01d      	add	sp, #116	; 0x74
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	ab03      	add	r3, sp, #12
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	462a      	mov	r2, r5
 8008266:	4b06      	ldr	r3, [pc, #24]	; (8008280 <_svfiprintf_r+0x1f8>)
 8008268:	a904      	add	r1, sp, #16
 800826a:	4638      	mov	r0, r7
 800826c:	f000 f9d4 	bl	8008618 <_printf_i>
 8008270:	e7eb      	b.n	800824a <_svfiprintf_r+0x1c2>
 8008272:	bf00      	nop
 8008274:	08008da8 	.word	0x08008da8
 8008278:	08008db2 	.word	0x08008db2
 800827c:	00000000 	.word	0x00000000
 8008280:	08007fd1 	.word	0x08007fd1
 8008284:	08008dae 	.word	0x08008dae

08008288 <__sfputc_r>:
 8008288:	6893      	ldr	r3, [r2, #8]
 800828a:	3b01      	subs	r3, #1
 800828c:	2b00      	cmp	r3, #0
 800828e:	b410      	push	{r4}
 8008290:	6093      	str	r3, [r2, #8]
 8008292:	da08      	bge.n	80082a6 <__sfputc_r+0x1e>
 8008294:	6994      	ldr	r4, [r2, #24]
 8008296:	42a3      	cmp	r3, r4
 8008298:	db01      	blt.n	800829e <__sfputc_r+0x16>
 800829a:	290a      	cmp	r1, #10
 800829c:	d103      	bne.n	80082a6 <__sfputc_r+0x1e>
 800829e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082a2:	f7ff bad5 	b.w	8007850 <__swbuf_r>
 80082a6:	6813      	ldr	r3, [r2, #0]
 80082a8:	1c58      	adds	r0, r3, #1
 80082aa:	6010      	str	r0, [r2, #0]
 80082ac:	7019      	strb	r1, [r3, #0]
 80082ae:	4608      	mov	r0, r1
 80082b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <__sfputs_r>:
 80082b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082b8:	4606      	mov	r6, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	4614      	mov	r4, r2
 80082be:	18d5      	adds	r5, r2, r3
 80082c0:	42ac      	cmp	r4, r5
 80082c2:	d101      	bne.n	80082c8 <__sfputs_r+0x12>
 80082c4:	2000      	movs	r0, #0
 80082c6:	e007      	b.n	80082d8 <__sfputs_r+0x22>
 80082c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082cc:	463a      	mov	r2, r7
 80082ce:	4630      	mov	r0, r6
 80082d0:	f7ff ffda 	bl	8008288 <__sfputc_r>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	d1f3      	bne.n	80082c0 <__sfputs_r+0xa>
 80082d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082dc <_vfiprintf_r>:
 80082dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e0:	460d      	mov	r5, r1
 80082e2:	b09d      	sub	sp, #116	; 0x74
 80082e4:	4614      	mov	r4, r2
 80082e6:	4698      	mov	r8, r3
 80082e8:	4606      	mov	r6, r0
 80082ea:	b118      	cbz	r0, 80082f4 <_vfiprintf_r+0x18>
 80082ec:	6983      	ldr	r3, [r0, #24]
 80082ee:	b90b      	cbnz	r3, 80082f4 <_vfiprintf_r+0x18>
 80082f0:	f7ff fc88 	bl	8007c04 <__sinit>
 80082f4:	4b89      	ldr	r3, [pc, #548]	; (800851c <_vfiprintf_r+0x240>)
 80082f6:	429d      	cmp	r5, r3
 80082f8:	d11b      	bne.n	8008332 <_vfiprintf_r+0x56>
 80082fa:	6875      	ldr	r5, [r6, #4]
 80082fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x32>
 8008308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800830a:	f7ff fd19 	bl	8007d40 <__retarget_lock_acquire_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	071b      	lsls	r3, r3, #28
 8008312:	d501      	bpl.n	8008318 <_vfiprintf_r+0x3c>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	b9eb      	cbnz	r3, 8008354 <_vfiprintf_r+0x78>
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f7ff faea 	bl	80078f4 <__swsetup_r>
 8008320:	b1c0      	cbz	r0, 8008354 <_vfiprintf_r+0x78>
 8008322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008324:	07dc      	lsls	r4, r3, #31
 8008326:	d50e      	bpl.n	8008346 <_vfiprintf_r+0x6a>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b01d      	add	sp, #116	; 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	4b7b      	ldr	r3, [pc, #492]	; (8008520 <_vfiprintf_r+0x244>)
 8008334:	429d      	cmp	r5, r3
 8008336:	d101      	bne.n	800833c <_vfiprintf_r+0x60>
 8008338:	68b5      	ldr	r5, [r6, #8]
 800833a:	e7df      	b.n	80082fc <_vfiprintf_r+0x20>
 800833c:	4b79      	ldr	r3, [pc, #484]	; (8008524 <_vfiprintf_r+0x248>)
 800833e:	429d      	cmp	r5, r3
 8008340:	bf08      	it	eq
 8008342:	68f5      	ldreq	r5, [r6, #12]
 8008344:	e7da      	b.n	80082fc <_vfiprintf_r+0x20>
 8008346:	89ab      	ldrh	r3, [r5, #12]
 8008348:	0598      	lsls	r0, r3, #22
 800834a:	d4ed      	bmi.n	8008328 <_vfiprintf_r+0x4c>
 800834c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800834e:	f7ff fcf8 	bl	8007d42 <__retarget_lock_release_recursive>
 8008352:	e7e9      	b.n	8008328 <_vfiprintf_r+0x4c>
 8008354:	2300      	movs	r3, #0
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	2320      	movs	r3, #32
 800835a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800835e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008362:	2330      	movs	r3, #48	; 0x30
 8008364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008528 <_vfiprintf_r+0x24c>
 8008368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800836c:	f04f 0901 	mov.w	r9, #1
 8008370:	4623      	mov	r3, r4
 8008372:	469a      	mov	sl, r3
 8008374:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008378:	b10a      	cbz	r2, 800837e <_vfiprintf_r+0xa2>
 800837a:	2a25      	cmp	r2, #37	; 0x25
 800837c:	d1f9      	bne.n	8008372 <_vfiprintf_r+0x96>
 800837e:	ebba 0b04 	subs.w	fp, sl, r4
 8008382:	d00b      	beq.n	800839c <_vfiprintf_r+0xc0>
 8008384:	465b      	mov	r3, fp
 8008386:	4622      	mov	r2, r4
 8008388:	4629      	mov	r1, r5
 800838a:	4630      	mov	r0, r6
 800838c:	f7ff ff93 	bl	80082b6 <__sfputs_r>
 8008390:	3001      	adds	r0, #1
 8008392:	f000 80aa 	beq.w	80084ea <_vfiprintf_r+0x20e>
 8008396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008398:	445a      	add	r2, fp
 800839a:	9209      	str	r2, [sp, #36]	; 0x24
 800839c:	f89a 3000 	ldrb.w	r3, [sl]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a2 	beq.w	80084ea <_vfiprintf_r+0x20e>
 80083a6:	2300      	movs	r3, #0
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083b0:	f10a 0a01 	add.w	sl, sl, #1
 80083b4:	9304      	str	r3, [sp, #16]
 80083b6:	9307      	str	r3, [sp, #28]
 80083b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083bc:	931a      	str	r3, [sp, #104]	; 0x68
 80083be:	4654      	mov	r4, sl
 80083c0:	2205      	movs	r2, #5
 80083c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c6:	4858      	ldr	r0, [pc, #352]	; (8008528 <_vfiprintf_r+0x24c>)
 80083c8:	f7f7 ff0a 	bl	80001e0 <memchr>
 80083cc:	9a04      	ldr	r2, [sp, #16]
 80083ce:	b9d8      	cbnz	r0, 8008408 <_vfiprintf_r+0x12c>
 80083d0:	06d1      	lsls	r1, r2, #27
 80083d2:	bf44      	itt	mi
 80083d4:	2320      	movmi	r3, #32
 80083d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083da:	0713      	lsls	r3, r2, #28
 80083dc:	bf44      	itt	mi
 80083de:	232b      	movmi	r3, #43	; 0x2b
 80083e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80083e4:	f89a 3000 	ldrb.w	r3, [sl]
 80083e8:	2b2a      	cmp	r3, #42	; 0x2a
 80083ea:	d015      	beq.n	8008418 <_vfiprintf_r+0x13c>
 80083ec:	9a07      	ldr	r2, [sp, #28]
 80083ee:	4654      	mov	r4, sl
 80083f0:	2000      	movs	r0, #0
 80083f2:	f04f 0c0a 	mov.w	ip, #10
 80083f6:	4621      	mov	r1, r4
 80083f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fc:	3b30      	subs	r3, #48	; 0x30
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d94e      	bls.n	80084a0 <_vfiprintf_r+0x1c4>
 8008402:	b1b0      	cbz	r0, 8008432 <_vfiprintf_r+0x156>
 8008404:	9207      	str	r2, [sp, #28]
 8008406:	e014      	b.n	8008432 <_vfiprintf_r+0x156>
 8008408:	eba0 0308 	sub.w	r3, r0, r8
 800840c:	fa09 f303 	lsl.w	r3, r9, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	9304      	str	r3, [sp, #16]
 8008414:	46a2      	mov	sl, r4
 8008416:	e7d2      	b.n	80083be <_vfiprintf_r+0xe2>
 8008418:	9b03      	ldr	r3, [sp, #12]
 800841a:	1d19      	adds	r1, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	9103      	str	r1, [sp, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	bfbb      	ittet	lt
 8008424:	425b      	neglt	r3, r3
 8008426:	f042 0202 	orrlt.w	r2, r2, #2
 800842a:	9307      	strge	r3, [sp, #28]
 800842c:	9307      	strlt	r3, [sp, #28]
 800842e:	bfb8      	it	lt
 8008430:	9204      	strlt	r2, [sp, #16]
 8008432:	7823      	ldrb	r3, [r4, #0]
 8008434:	2b2e      	cmp	r3, #46	; 0x2e
 8008436:	d10c      	bne.n	8008452 <_vfiprintf_r+0x176>
 8008438:	7863      	ldrb	r3, [r4, #1]
 800843a:	2b2a      	cmp	r3, #42	; 0x2a
 800843c:	d135      	bne.n	80084aa <_vfiprintf_r+0x1ce>
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	9203      	str	r2, [sp, #12]
 8008446:	2b00      	cmp	r3, #0
 8008448:	bfb8      	it	lt
 800844a:	f04f 33ff 	movlt.w	r3, #4294967295
 800844e:	3402      	adds	r4, #2
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008538 <_vfiprintf_r+0x25c>
 8008456:	7821      	ldrb	r1, [r4, #0]
 8008458:	2203      	movs	r2, #3
 800845a:	4650      	mov	r0, sl
 800845c:	f7f7 fec0 	bl	80001e0 <memchr>
 8008460:	b140      	cbz	r0, 8008474 <_vfiprintf_r+0x198>
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	eba0 000a 	sub.w	r0, r0, sl
 8008468:	fa03 f000 	lsl.w	r0, r3, r0
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	4303      	orrs	r3, r0
 8008470:	3401      	adds	r4, #1
 8008472:	9304      	str	r3, [sp, #16]
 8008474:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008478:	482c      	ldr	r0, [pc, #176]	; (800852c <_vfiprintf_r+0x250>)
 800847a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800847e:	2206      	movs	r2, #6
 8008480:	f7f7 feae 	bl	80001e0 <memchr>
 8008484:	2800      	cmp	r0, #0
 8008486:	d03f      	beq.n	8008508 <_vfiprintf_r+0x22c>
 8008488:	4b29      	ldr	r3, [pc, #164]	; (8008530 <_vfiprintf_r+0x254>)
 800848a:	bb1b      	cbnz	r3, 80084d4 <_vfiprintf_r+0x1f8>
 800848c:	9b03      	ldr	r3, [sp, #12]
 800848e:	3307      	adds	r3, #7
 8008490:	f023 0307 	bic.w	r3, r3, #7
 8008494:	3308      	adds	r3, #8
 8008496:	9303      	str	r3, [sp, #12]
 8008498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800849a:	443b      	add	r3, r7
 800849c:	9309      	str	r3, [sp, #36]	; 0x24
 800849e:	e767      	b.n	8008370 <_vfiprintf_r+0x94>
 80084a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80084a4:	460c      	mov	r4, r1
 80084a6:	2001      	movs	r0, #1
 80084a8:	e7a5      	b.n	80083f6 <_vfiprintf_r+0x11a>
 80084aa:	2300      	movs	r3, #0
 80084ac:	3401      	adds	r4, #1
 80084ae:	9305      	str	r3, [sp, #20]
 80084b0:	4619      	mov	r1, r3
 80084b2:	f04f 0c0a 	mov.w	ip, #10
 80084b6:	4620      	mov	r0, r4
 80084b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084bc:	3a30      	subs	r2, #48	; 0x30
 80084be:	2a09      	cmp	r2, #9
 80084c0:	d903      	bls.n	80084ca <_vfiprintf_r+0x1ee>
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0c5      	beq.n	8008452 <_vfiprintf_r+0x176>
 80084c6:	9105      	str	r1, [sp, #20]
 80084c8:	e7c3      	b.n	8008452 <_vfiprintf_r+0x176>
 80084ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80084ce:	4604      	mov	r4, r0
 80084d0:	2301      	movs	r3, #1
 80084d2:	e7f0      	b.n	80084b6 <_vfiprintf_r+0x1da>
 80084d4:	ab03      	add	r3, sp, #12
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	462a      	mov	r2, r5
 80084da:	4b16      	ldr	r3, [pc, #88]	; (8008534 <_vfiprintf_r+0x258>)
 80084dc:	a904      	add	r1, sp, #16
 80084de:	4630      	mov	r0, r6
 80084e0:	f3af 8000 	nop.w
 80084e4:	4607      	mov	r7, r0
 80084e6:	1c78      	adds	r0, r7, #1
 80084e8:	d1d6      	bne.n	8008498 <_vfiprintf_r+0x1bc>
 80084ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084ec:	07d9      	lsls	r1, r3, #31
 80084ee:	d405      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f0:	89ab      	ldrh	r3, [r5, #12]
 80084f2:	059a      	lsls	r2, r3, #22
 80084f4:	d402      	bmi.n	80084fc <_vfiprintf_r+0x220>
 80084f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084f8:	f7ff fc23 	bl	8007d42 <__retarget_lock_release_recursive>
 80084fc:	89ab      	ldrh	r3, [r5, #12]
 80084fe:	065b      	lsls	r3, r3, #25
 8008500:	f53f af12 	bmi.w	8008328 <_vfiprintf_r+0x4c>
 8008504:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008506:	e711      	b.n	800832c <_vfiprintf_r+0x50>
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	462a      	mov	r2, r5
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <_vfiprintf_r+0x258>)
 8008510:	a904      	add	r1, sp, #16
 8008512:	4630      	mov	r0, r6
 8008514:	f000 f880 	bl	8008618 <_printf_i>
 8008518:	e7e4      	b.n	80084e4 <_vfiprintf_r+0x208>
 800851a:	bf00      	nop
 800851c:	08008d68 	.word	0x08008d68
 8008520:	08008d88 	.word	0x08008d88
 8008524:	08008d48 	.word	0x08008d48
 8008528:	08008da8 	.word	0x08008da8
 800852c:	08008db2 	.word	0x08008db2
 8008530:	00000000 	.word	0x00000000
 8008534:	080082b7 	.word	0x080082b7
 8008538:	08008dae 	.word	0x08008dae

0800853c <_printf_common>:
 800853c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	4616      	mov	r6, r2
 8008542:	4699      	mov	r9, r3
 8008544:	688a      	ldr	r2, [r1, #8]
 8008546:	690b      	ldr	r3, [r1, #16]
 8008548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800854c:	4293      	cmp	r3, r2
 800854e:	bfb8      	it	lt
 8008550:	4613      	movlt	r3, r2
 8008552:	6033      	str	r3, [r6, #0]
 8008554:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008558:	4607      	mov	r7, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b10a      	cbz	r2, 8008562 <_printf_common+0x26>
 800855e:	3301      	adds	r3, #1
 8008560:	6033      	str	r3, [r6, #0]
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	0699      	lsls	r1, r3, #26
 8008566:	bf42      	ittt	mi
 8008568:	6833      	ldrmi	r3, [r6, #0]
 800856a:	3302      	addmi	r3, #2
 800856c:	6033      	strmi	r3, [r6, #0]
 800856e:	6825      	ldr	r5, [r4, #0]
 8008570:	f015 0506 	ands.w	r5, r5, #6
 8008574:	d106      	bne.n	8008584 <_printf_common+0x48>
 8008576:	f104 0a19 	add.w	sl, r4, #25
 800857a:	68e3      	ldr	r3, [r4, #12]
 800857c:	6832      	ldr	r2, [r6, #0]
 800857e:	1a9b      	subs	r3, r3, r2
 8008580:	42ab      	cmp	r3, r5
 8008582:	dc26      	bgt.n	80085d2 <_printf_common+0x96>
 8008584:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008588:	1e13      	subs	r3, r2, #0
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	bf18      	it	ne
 800858e:	2301      	movne	r3, #1
 8008590:	0692      	lsls	r2, r2, #26
 8008592:	d42b      	bmi.n	80085ec <_printf_common+0xb0>
 8008594:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008598:	4649      	mov	r1, r9
 800859a:	4638      	mov	r0, r7
 800859c:	47c0      	blx	r8
 800859e:	3001      	adds	r0, #1
 80085a0:	d01e      	beq.n	80085e0 <_printf_common+0xa4>
 80085a2:	6823      	ldr	r3, [r4, #0]
 80085a4:	68e5      	ldr	r5, [r4, #12]
 80085a6:	6832      	ldr	r2, [r6, #0]
 80085a8:	f003 0306 	and.w	r3, r3, #6
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	bf08      	it	eq
 80085b0:	1aad      	subeq	r5, r5, r2
 80085b2:	68a3      	ldr	r3, [r4, #8]
 80085b4:	6922      	ldr	r2, [r4, #16]
 80085b6:	bf0c      	ite	eq
 80085b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085bc:	2500      	movne	r5, #0
 80085be:	4293      	cmp	r3, r2
 80085c0:	bfc4      	itt	gt
 80085c2:	1a9b      	subgt	r3, r3, r2
 80085c4:	18ed      	addgt	r5, r5, r3
 80085c6:	2600      	movs	r6, #0
 80085c8:	341a      	adds	r4, #26
 80085ca:	42b5      	cmp	r5, r6
 80085cc:	d11a      	bne.n	8008604 <_printf_common+0xc8>
 80085ce:	2000      	movs	r0, #0
 80085d0:	e008      	b.n	80085e4 <_printf_common+0xa8>
 80085d2:	2301      	movs	r3, #1
 80085d4:	4652      	mov	r2, sl
 80085d6:	4649      	mov	r1, r9
 80085d8:	4638      	mov	r0, r7
 80085da:	47c0      	blx	r8
 80085dc:	3001      	adds	r0, #1
 80085de:	d103      	bne.n	80085e8 <_printf_common+0xac>
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e8:	3501      	adds	r5, #1
 80085ea:	e7c6      	b.n	800857a <_printf_common+0x3e>
 80085ec:	18e1      	adds	r1, r4, r3
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	2030      	movs	r0, #48	; 0x30
 80085f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f6:	4422      	add	r2, r4
 80085f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008600:	3302      	adds	r3, #2
 8008602:	e7c7      	b.n	8008594 <_printf_common+0x58>
 8008604:	2301      	movs	r3, #1
 8008606:	4622      	mov	r2, r4
 8008608:	4649      	mov	r1, r9
 800860a:	4638      	mov	r0, r7
 800860c:	47c0      	blx	r8
 800860e:	3001      	adds	r0, #1
 8008610:	d0e6      	beq.n	80085e0 <_printf_common+0xa4>
 8008612:	3601      	adds	r6, #1
 8008614:	e7d9      	b.n	80085ca <_printf_common+0x8e>
	...

08008618 <_printf_i>:
 8008618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800861c:	7e0f      	ldrb	r7, [r1, #24]
 800861e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008620:	2f78      	cmp	r7, #120	; 0x78
 8008622:	4691      	mov	r9, r2
 8008624:	4680      	mov	r8, r0
 8008626:	460c      	mov	r4, r1
 8008628:	469a      	mov	sl, r3
 800862a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800862e:	d807      	bhi.n	8008640 <_printf_i+0x28>
 8008630:	2f62      	cmp	r7, #98	; 0x62
 8008632:	d80a      	bhi.n	800864a <_printf_i+0x32>
 8008634:	2f00      	cmp	r7, #0
 8008636:	f000 80d8 	beq.w	80087ea <_printf_i+0x1d2>
 800863a:	2f58      	cmp	r7, #88	; 0x58
 800863c:	f000 80a3 	beq.w	8008786 <_printf_i+0x16e>
 8008640:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008644:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008648:	e03a      	b.n	80086c0 <_printf_i+0xa8>
 800864a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800864e:	2b15      	cmp	r3, #21
 8008650:	d8f6      	bhi.n	8008640 <_printf_i+0x28>
 8008652:	a101      	add	r1, pc, #4	; (adr r1, 8008658 <_printf_i+0x40>)
 8008654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008658:	080086b1 	.word	0x080086b1
 800865c:	080086c5 	.word	0x080086c5
 8008660:	08008641 	.word	0x08008641
 8008664:	08008641 	.word	0x08008641
 8008668:	08008641 	.word	0x08008641
 800866c:	08008641 	.word	0x08008641
 8008670:	080086c5 	.word	0x080086c5
 8008674:	08008641 	.word	0x08008641
 8008678:	08008641 	.word	0x08008641
 800867c:	08008641 	.word	0x08008641
 8008680:	08008641 	.word	0x08008641
 8008684:	080087d1 	.word	0x080087d1
 8008688:	080086f5 	.word	0x080086f5
 800868c:	080087b3 	.word	0x080087b3
 8008690:	08008641 	.word	0x08008641
 8008694:	08008641 	.word	0x08008641
 8008698:	080087f3 	.word	0x080087f3
 800869c:	08008641 	.word	0x08008641
 80086a0:	080086f5 	.word	0x080086f5
 80086a4:	08008641 	.word	0x08008641
 80086a8:	08008641 	.word	0x08008641
 80086ac:	080087bb 	.word	0x080087bb
 80086b0:	682b      	ldr	r3, [r5, #0]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	602a      	str	r2, [r5, #0]
 80086b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c0:	2301      	movs	r3, #1
 80086c2:	e0a3      	b.n	800880c <_printf_i+0x1f4>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	6829      	ldr	r1, [r5, #0]
 80086c8:	0606      	lsls	r6, r0, #24
 80086ca:	f101 0304 	add.w	r3, r1, #4
 80086ce:	d50a      	bpl.n	80086e6 <_printf_i+0xce>
 80086d0:	680e      	ldr	r6, [r1, #0]
 80086d2:	602b      	str	r3, [r5, #0]
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	da03      	bge.n	80086e0 <_printf_i+0xc8>
 80086d8:	232d      	movs	r3, #45	; 0x2d
 80086da:	4276      	negs	r6, r6
 80086dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e0:	485e      	ldr	r0, [pc, #376]	; (800885c <_printf_i+0x244>)
 80086e2:	230a      	movs	r3, #10
 80086e4:	e019      	b.n	800871a <_printf_i+0x102>
 80086e6:	680e      	ldr	r6, [r1, #0]
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ee:	bf18      	it	ne
 80086f0:	b236      	sxthne	r6, r6
 80086f2:	e7ef      	b.n	80086d4 <_printf_i+0xbc>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	6029      	str	r1, [r5, #0]
 80086fc:	0601      	lsls	r1, r0, #24
 80086fe:	d501      	bpl.n	8008704 <_printf_i+0xec>
 8008700:	681e      	ldr	r6, [r3, #0]
 8008702:	e002      	b.n	800870a <_printf_i+0xf2>
 8008704:	0646      	lsls	r6, r0, #25
 8008706:	d5fb      	bpl.n	8008700 <_printf_i+0xe8>
 8008708:	881e      	ldrh	r6, [r3, #0]
 800870a:	4854      	ldr	r0, [pc, #336]	; (800885c <_printf_i+0x244>)
 800870c:	2f6f      	cmp	r7, #111	; 0x6f
 800870e:	bf0c      	ite	eq
 8008710:	2308      	moveq	r3, #8
 8008712:	230a      	movne	r3, #10
 8008714:	2100      	movs	r1, #0
 8008716:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800871a:	6865      	ldr	r5, [r4, #4]
 800871c:	60a5      	str	r5, [r4, #8]
 800871e:	2d00      	cmp	r5, #0
 8008720:	bfa2      	ittt	ge
 8008722:	6821      	ldrge	r1, [r4, #0]
 8008724:	f021 0104 	bicge.w	r1, r1, #4
 8008728:	6021      	strge	r1, [r4, #0]
 800872a:	b90e      	cbnz	r6, 8008730 <_printf_i+0x118>
 800872c:	2d00      	cmp	r5, #0
 800872e:	d04d      	beq.n	80087cc <_printf_i+0x1b4>
 8008730:	4615      	mov	r5, r2
 8008732:	fbb6 f1f3 	udiv	r1, r6, r3
 8008736:	fb03 6711 	mls	r7, r3, r1, r6
 800873a:	5dc7      	ldrb	r7, [r0, r7]
 800873c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008740:	4637      	mov	r7, r6
 8008742:	42bb      	cmp	r3, r7
 8008744:	460e      	mov	r6, r1
 8008746:	d9f4      	bls.n	8008732 <_printf_i+0x11a>
 8008748:	2b08      	cmp	r3, #8
 800874a:	d10b      	bne.n	8008764 <_printf_i+0x14c>
 800874c:	6823      	ldr	r3, [r4, #0]
 800874e:	07de      	lsls	r6, r3, #31
 8008750:	d508      	bpl.n	8008764 <_printf_i+0x14c>
 8008752:	6923      	ldr	r3, [r4, #16]
 8008754:	6861      	ldr	r1, [r4, #4]
 8008756:	4299      	cmp	r1, r3
 8008758:	bfde      	ittt	le
 800875a:	2330      	movle	r3, #48	; 0x30
 800875c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008760:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008764:	1b52      	subs	r2, r2, r5
 8008766:	6122      	str	r2, [r4, #16]
 8008768:	f8cd a000 	str.w	sl, [sp]
 800876c:	464b      	mov	r3, r9
 800876e:	aa03      	add	r2, sp, #12
 8008770:	4621      	mov	r1, r4
 8008772:	4640      	mov	r0, r8
 8008774:	f7ff fee2 	bl	800853c <_printf_common>
 8008778:	3001      	adds	r0, #1
 800877a:	d14c      	bne.n	8008816 <_printf_i+0x1fe>
 800877c:	f04f 30ff 	mov.w	r0, #4294967295
 8008780:	b004      	add	sp, #16
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	4835      	ldr	r0, [pc, #212]	; (800885c <_printf_i+0x244>)
 8008788:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800878c:	6829      	ldr	r1, [r5, #0]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	f851 6b04 	ldr.w	r6, [r1], #4
 8008794:	6029      	str	r1, [r5, #0]
 8008796:	061d      	lsls	r5, r3, #24
 8008798:	d514      	bpl.n	80087c4 <_printf_i+0x1ac>
 800879a:	07df      	lsls	r7, r3, #31
 800879c:	bf44      	itt	mi
 800879e:	f043 0320 	orrmi.w	r3, r3, #32
 80087a2:	6023      	strmi	r3, [r4, #0]
 80087a4:	b91e      	cbnz	r6, 80087ae <_printf_i+0x196>
 80087a6:	6823      	ldr	r3, [r4, #0]
 80087a8:	f023 0320 	bic.w	r3, r3, #32
 80087ac:	6023      	str	r3, [r4, #0]
 80087ae:	2310      	movs	r3, #16
 80087b0:	e7b0      	b.n	8008714 <_printf_i+0xfc>
 80087b2:	6823      	ldr	r3, [r4, #0]
 80087b4:	f043 0320 	orr.w	r3, r3, #32
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	2378      	movs	r3, #120	; 0x78
 80087bc:	4828      	ldr	r0, [pc, #160]	; (8008860 <_printf_i+0x248>)
 80087be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087c2:	e7e3      	b.n	800878c <_printf_i+0x174>
 80087c4:	0659      	lsls	r1, r3, #25
 80087c6:	bf48      	it	mi
 80087c8:	b2b6      	uxthmi	r6, r6
 80087ca:	e7e6      	b.n	800879a <_printf_i+0x182>
 80087cc:	4615      	mov	r5, r2
 80087ce:	e7bb      	b.n	8008748 <_printf_i+0x130>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	6826      	ldr	r6, [r4, #0]
 80087d4:	6961      	ldr	r1, [r4, #20]
 80087d6:	1d18      	adds	r0, r3, #4
 80087d8:	6028      	str	r0, [r5, #0]
 80087da:	0635      	lsls	r5, r6, #24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0x1cc>
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0x1d2>
 80087e4:	0670      	lsls	r0, r6, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0x1c8>
 80087e8:	8019      	strh	r1, [r3, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	4615      	mov	r5, r2
 80087f0:	e7ba      	b.n	8008768 <_printf_i+0x150>
 80087f2:	682b      	ldr	r3, [r5, #0]
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4628      	mov	r0, r5
 8008800:	f7f7 fcee 	bl	80001e0 <memchr>
 8008804:	b108      	cbz	r0, 800880a <_printf_i+0x1f2>
 8008806:	1b40      	subs	r0, r0, r5
 8008808:	6060      	str	r0, [r4, #4]
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	2300      	movs	r3, #0
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	e7a8      	b.n	8008768 <_printf_i+0x150>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	462a      	mov	r2, r5
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d0ab      	beq.n	800877c <_printf_i+0x164>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	079b      	lsls	r3, r3, #30
 8008828:	d413      	bmi.n	8008852 <_printf_i+0x23a>
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	4298      	cmp	r0, r3
 8008830:	bfb8      	it	lt
 8008832:	4618      	movlt	r0, r3
 8008834:	e7a4      	b.n	8008780 <_printf_i+0x168>
 8008836:	2301      	movs	r3, #1
 8008838:	4632      	mov	r2, r6
 800883a:	4649      	mov	r1, r9
 800883c:	4640      	mov	r0, r8
 800883e:	47d0      	blx	sl
 8008840:	3001      	adds	r0, #1
 8008842:	d09b      	beq.n	800877c <_printf_i+0x164>
 8008844:	3501      	adds	r5, #1
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	9903      	ldr	r1, [sp, #12]
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	42ab      	cmp	r3, r5
 800884e:	dcf2      	bgt.n	8008836 <_printf_i+0x21e>
 8008850:	e7eb      	b.n	800882a <_printf_i+0x212>
 8008852:	2500      	movs	r5, #0
 8008854:	f104 0619 	add.w	r6, r4, #25
 8008858:	e7f5      	b.n	8008846 <_printf_i+0x22e>
 800885a:	bf00      	nop
 800885c:	08008db9 	.word	0x08008db9
 8008860:	08008dca 	.word	0x08008dca

08008864 <_sbrk_r>:
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4d06      	ldr	r5, [pc, #24]	; (8008880 <_sbrk_r+0x1c>)
 8008868:	2300      	movs	r3, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	602b      	str	r3, [r5, #0]
 8008870:	f7fa f87e 	bl	8002970 <_sbrk>
 8008874:	1c43      	adds	r3, r0, #1
 8008876:	d102      	bne.n	800887e <_sbrk_r+0x1a>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	b103      	cbz	r3, 800887e <_sbrk_r+0x1a>
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	bd38      	pop	{r3, r4, r5, pc}
 8008880:	200008a4 	.word	0x200008a4

08008884 <__sread>:
 8008884:	b510      	push	{r4, lr}
 8008886:	460c      	mov	r4, r1
 8008888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800888c:	f000 f8f8 	bl	8008a80 <_read_r>
 8008890:	2800      	cmp	r0, #0
 8008892:	bfab      	itete	ge
 8008894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008896:	89a3      	ldrhlt	r3, [r4, #12]
 8008898:	181b      	addge	r3, r3, r0
 800889a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800889e:	bfac      	ite	ge
 80088a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80088a2:	81a3      	strhlt	r3, [r4, #12]
 80088a4:	bd10      	pop	{r4, pc}

080088a6 <__swrite>:
 80088a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088aa:	461f      	mov	r7, r3
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	05db      	lsls	r3, r3, #23
 80088b0:	4605      	mov	r5, r0
 80088b2:	460c      	mov	r4, r1
 80088b4:	4616      	mov	r6, r2
 80088b6:	d505      	bpl.n	80088c4 <__swrite+0x1e>
 80088b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088bc:	2302      	movs	r3, #2
 80088be:	2200      	movs	r2, #0
 80088c0:	f000 f868 	bl	8008994 <_lseek_r>
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ce:	81a3      	strh	r3, [r4, #12]
 80088d0:	4632      	mov	r2, r6
 80088d2:	463b      	mov	r3, r7
 80088d4:	4628      	mov	r0, r5
 80088d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	f000 b817 	b.w	800890c <_write_r>

080088de <__sseek>:
 80088de:	b510      	push	{r4, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e6:	f000 f855 	bl	8008994 <_lseek_r>
 80088ea:	1c43      	adds	r3, r0, #1
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	bf15      	itete	ne
 80088f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80088f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strheq	r3, [r4, #12]
 80088fc:	bf18      	it	ne
 80088fe:	81a3      	strhne	r3, [r4, #12]
 8008900:	bd10      	pop	{r4, pc}

08008902 <__sclose>:
 8008902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008906:	f000 b813 	b.w	8008930 <_close_r>
	...

0800890c <_write_r>:
 800890c:	b538      	push	{r3, r4, r5, lr}
 800890e:	4d07      	ldr	r5, [pc, #28]	; (800892c <_write_r+0x20>)
 8008910:	4604      	mov	r4, r0
 8008912:	4608      	mov	r0, r1
 8008914:	4611      	mov	r1, r2
 8008916:	2200      	movs	r2, #0
 8008918:	602a      	str	r2, [r5, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	f7f9 ffd7 	bl	80028ce <_write>
 8008920:	1c43      	adds	r3, r0, #1
 8008922:	d102      	bne.n	800892a <_write_r+0x1e>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	b103      	cbz	r3, 800892a <_write_r+0x1e>
 8008928:	6023      	str	r3, [r4, #0]
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	200008a4 	.word	0x200008a4

08008930 <_close_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	4d06      	ldr	r5, [pc, #24]	; (800894c <_close_r+0x1c>)
 8008934:	2300      	movs	r3, #0
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	f7f9 ffe3 	bl	8002906 <_close>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_close_r+0x1a>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_close_r+0x1a>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	200008a4 	.word	0x200008a4

08008950 <_fstat_r>:
 8008950:	b538      	push	{r3, r4, r5, lr}
 8008952:	4d07      	ldr	r5, [pc, #28]	; (8008970 <_fstat_r+0x20>)
 8008954:	2300      	movs	r3, #0
 8008956:	4604      	mov	r4, r0
 8008958:	4608      	mov	r0, r1
 800895a:	4611      	mov	r1, r2
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	f7f9 ffde 	bl	800291e <_fstat>
 8008962:	1c43      	adds	r3, r0, #1
 8008964:	d102      	bne.n	800896c <_fstat_r+0x1c>
 8008966:	682b      	ldr	r3, [r5, #0]
 8008968:	b103      	cbz	r3, 800896c <_fstat_r+0x1c>
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	bd38      	pop	{r3, r4, r5, pc}
 800896e:	bf00      	nop
 8008970:	200008a4 	.word	0x200008a4

08008974 <_isatty_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4d06      	ldr	r5, [pc, #24]	; (8008990 <_isatty_r+0x1c>)
 8008978:	2300      	movs	r3, #0
 800897a:	4604      	mov	r4, r0
 800897c:	4608      	mov	r0, r1
 800897e:	602b      	str	r3, [r5, #0]
 8008980:	f7f9 ffdd 	bl	800293e <_isatty>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_isatty_r+0x1a>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	b103      	cbz	r3, 800898e <_isatty_r+0x1a>
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	200008a4 	.word	0x200008a4

08008994 <_lseek_r>:
 8008994:	b538      	push	{r3, r4, r5, lr}
 8008996:	4d07      	ldr	r5, [pc, #28]	; (80089b4 <_lseek_r+0x20>)
 8008998:	4604      	mov	r4, r0
 800899a:	4608      	mov	r0, r1
 800899c:	4611      	mov	r1, r2
 800899e:	2200      	movs	r2, #0
 80089a0:	602a      	str	r2, [r5, #0]
 80089a2:	461a      	mov	r2, r3
 80089a4:	f7f9 ffd6 	bl	8002954 <_lseek>
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	d102      	bne.n	80089b2 <_lseek_r+0x1e>
 80089ac:	682b      	ldr	r3, [r5, #0]
 80089ae:	b103      	cbz	r3, 80089b2 <_lseek_r+0x1e>
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	200008a4 	.word	0x200008a4

080089b8 <memcpy>:
 80089b8:	440a      	add	r2, r1
 80089ba:	4291      	cmp	r1, r2
 80089bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c0:	d100      	bne.n	80089c4 <memcpy+0xc>
 80089c2:	4770      	bx	lr
 80089c4:	b510      	push	{r4, lr}
 80089c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089ce:	4291      	cmp	r1, r2
 80089d0:	d1f9      	bne.n	80089c6 <memcpy+0xe>
 80089d2:	bd10      	pop	{r4, pc}

080089d4 <memmove>:
 80089d4:	4288      	cmp	r0, r1
 80089d6:	b510      	push	{r4, lr}
 80089d8:	eb01 0402 	add.w	r4, r1, r2
 80089dc:	d902      	bls.n	80089e4 <memmove+0x10>
 80089de:	4284      	cmp	r4, r0
 80089e0:	4623      	mov	r3, r4
 80089e2:	d807      	bhi.n	80089f4 <memmove+0x20>
 80089e4:	1e43      	subs	r3, r0, #1
 80089e6:	42a1      	cmp	r1, r4
 80089e8:	d008      	beq.n	80089fc <memmove+0x28>
 80089ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089f2:	e7f8      	b.n	80089e6 <memmove+0x12>
 80089f4:	4402      	add	r2, r0
 80089f6:	4601      	mov	r1, r0
 80089f8:	428a      	cmp	r2, r1
 80089fa:	d100      	bne.n	80089fe <memmove+0x2a>
 80089fc:	bd10      	pop	{r4, pc}
 80089fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a06:	e7f7      	b.n	80089f8 <memmove+0x24>

08008a08 <__malloc_lock>:
 8008a08:	4801      	ldr	r0, [pc, #4]	; (8008a10 <__malloc_lock+0x8>)
 8008a0a:	f7ff b999 	b.w	8007d40 <__retarget_lock_acquire_recursive>
 8008a0e:	bf00      	nop
 8008a10:	20000898 	.word	0x20000898

08008a14 <__malloc_unlock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	; (8008a1c <__malloc_unlock+0x8>)
 8008a16:	f7ff b994 	b.w	8007d42 <__retarget_lock_release_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000898 	.word	0x20000898

08008a20 <_realloc_r>:
 8008a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a24:	4680      	mov	r8, r0
 8008a26:	4614      	mov	r4, r2
 8008a28:	460e      	mov	r6, r1
 8008a2a:	b921      	cbnz	r1, 8008a36 <_realloc_r+0x16>
 8008a2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a30:	4611      	mov	r1, r2
 8008a32:	f7ff ba59 	b.w	8007ee8 <_malloc_r>
 8008a36:	b92a      	cbnz	r2, 8008a44 <_realloc_r+0x24>
 8008a38:	f7ff f9ea 	bl	8007e10 <_free_r>
 8008a3c:	4625      	mov	r5, r4
 8008a3e:	4628      	mov	r0, r5
 8008a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a44:	f000 f82e 	bl	8008aa4 <_malloc_usable_size_r>
 8008a48:	4284      	cmp	r4, r0
 8008a4a:	4607      	mov	r7, r0
 8008a4c:	d802      	bhi.n	8008a54 <_realloc_r+0x34>
 8008a4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a52:	d812      	bhi.n	8008a7a <_realloc_r+0x5a>
 8008a54:	4621      	mov	r1, r4
 8008a56:	4640      	mov	r0, r8
 8008a58:	f7ff fa46 	bl	8007ee8 <_malloc_r>
 8008a5c:	4605      	mov	r5, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d0ed      	beq.n	8008a3e <_realloc_r+0x1e>
 8008a62:	42bc      	cmp	r4, r7
 8008a64:	4622      	mov	r2, r4
 8008a66:	4631      	mov	r1, r6
 8008a68:	bf28      	it	cs
 8008a6a:	463a      	movcs	r2, r7
 8008a6c:	f7ff ffa4 	bl	80089b8 <memcpy>
 8008a70:	4631      	mov	r1, r6
 8008a72:	4640      	mov	r0, r8
 8008a74:	f7ff f9cc 	bl	8007e10 <_free_r>
 8008a78:	e7e1      	b.n	8008a3e <_realloc_r+0x1e>
 8008a7a:	4635      	mov	r5, r6
 8008a7c:	e7df      	b.n	8008a3e <_realloc_r+0x1e>
	...

08008a80 <_read_r>:
 8008a80:	b538      	push	{r3, r4, r5, lr}
 8008a82:	4d07      	ldr	r5, [pc, #28]	; (8008aa0 <_read_r+0x20>)
 8008a84:	4604      	mov	r4, r0
 8008a86:	4608      	mov	r0, r1
 8008a88:	4611      	mov	r1, r2
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	602a      	str	r2, [r5, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f7f9 ff00 	bl	8002894 <_read>
 8008a94:	1c43      	adds	r3, r0, #1
 8008a96:	d102      	bne.n	8008a9e <_read_r+0x1e>
 8008a98:	682b      	ldr	r3, [r5, #0]
 8008a9a:	b103      	cbz	r3, 8008a9e <_read_r+0x1e>
 8008a9c:	6023      	str	r3, [r4, #0]
 8008a9e:	bd38      	pop	{r3, r4, r5, pc}
 8008aa0:	200008a4 	.word	0x200008a4

08008aa4 <_malloc_usable_size_r>:
 8008aa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa8:	1f18      	subs	r0, r3, #4
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	bfbc      	itt	lt
 8008aae:	580b      	ldrlt	r3, [r1, r0]
 8008ab0:	18c0      	addlt	r0, r0, r3
 8008ab2:	4770      	bx	lr

08008ab4 <_init>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr

08008ac0 <_fini>:
 8008ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac2:	bf00      	nop
 8008ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ac6:	bc08      	pop	{r3}
 8008ac8:	469e      	mov	lr, r3
 8008aca:	4770      	bx	lr
